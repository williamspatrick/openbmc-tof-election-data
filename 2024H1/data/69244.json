{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "Ic74bbeedfb5b43fbdc5108300528acaa7f9e3b4f",
    "number": 69244,
    "subject": "adcsensor: Add optional battery status interface",
    "owner": {
        "name": "Jeff Lin",
        "email": "JeffLin2@quantatw.com",
        "username": "JinFuLin"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/69244",
    "hashtags": [],
    "createdOn": 1707287667,
    "lastUpdated": 1709538707,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1707287667,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1707287697,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707287697,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1707287715,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78903/ : FAILURE"
        },
        {
            "timestamp": 1707288302,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1707288450,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Uploaded patch set 2: Commit message was updated.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1707288491,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707288491,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1707288508,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78908/ : FAILURE"
        },
        {
            "timestamp": 1707288615,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Uploaded patch set 3: Commit message was updated.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1707288631,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707288631,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1707288648,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78909/ : FAILURE"
        },
        {
            "timestamp": 1707288792,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1707288826,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707288826,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1707289051,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78910/ : FAILURE"
        },
        {
            "timestamp": 1707289422,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1707289452,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707289452,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1707289718,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/78912/ : SUCCESS"
        },
        {
            "timestamp": 1707290077,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Patch Set 5:\n\nThis change is ready for review."
        },
        {
            "timestamp": 1707351057,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(12 comments)"
        },
        {
            "timestamp": 1708307763,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Patch Set 5:\n\n(5 comments)"
        },
        {
            "timestamp": 1709234502,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1709538707,
            "reviewer": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "fea6771ddfb996dda0fd8e3ea4e801717863e494",
            "parents": [
                "16d6f17bec38b6c095dfb6bed224f17d941fb9b3"
            ],
            "ref": "refs/changes/44/69244/1",
            "uploader": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "createdOn": 1707287667,
            "author": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 41,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 90,
            "sizeDeletions": 9
        },
        {
            "number": 2,
            "revision": "ecbb08eebde7448c854c541570d88868e2bf470f",
            "parents": [
                "16d6f17bec38b6c095dfb6bed224f17d941fb9b3"
            ],
            "ref": "refs/changes/44/69244/2",
            "uploader": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "createdOn": 1707288450,
            "author": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 41,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 90,
            "sizeDeletions": 9
        },
        {
            "number": 3,
            "revision": "ba3a97e1e05cc86a5472d34c9c32d5423e0f490c",
            "parents": [
                "16d6f17bec38b6c095dfb6bed224f17d941fb9b3"
            ],
            "ref": "refs/changes/44/69244/3",
            "uploader": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "createdOn": 1707288615,
            "author": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 41,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 90,
            "sizeDeletions": 9
        },
        {
            "number": 4,
            "revision": "792f9e0a765ddb6f17b7e92d11a18a6d5e519ba3",
            "parents": [
                "16d6f17bec38b6c095dfb6bed224f17d941fb9b3"
            ],
            "ref": "refs/changes/44/69244/4",
            "uploader": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "createdOn": 1707288792,
            "author": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 41,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -2
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 91,
            "sizeDeletions": 9
        },
        {
            "number": 5,
            "revision": "2711a88e800cd74b59202a0cdf1d47984ba6dfd5",
            "parents": [
                "16d6f17bec38b6c095dfb6bed224f17d941fb9b3"
            ],
            "ref": "refs/changes/44/69244/5",
            "uploader": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "createdOn": 1707289422,
            "author": {
                "name": "Jeff Lin",
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally openbmc communicates configurations via dbus.  Previous versions of entity-manager/reactors relied on filesystems, and proved to cause significant issues in atomic updates, or single property updates.  Any reason we're going back to them here?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "I check the EM's master and it seems it is still using config file for sensors and peoples are continually update the config file."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> need to be generated only when battery is good\n\nThere is nothing that generates a file when the battery is good, and not when the battery is not.  Those files are static at build time."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "The ```generated``` here means generate the D-bus base on config file( Coin_battery.json), not generate the config file.\nWill correct the sentence."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems like a confusion in terms.  A SENSOR is never a battery.  A battery might be monitored by a sensor, and have an inventory item behind it, but the sensor itself is an ADC."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "Got it, I will not try to add battery sensor type.\nI would like to add this interface when sensor have setting \"BridgeGPIO\" to record the status of this battery."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't reinvent thresholds.  There are already threshold event interfaces published to dbus.  At most we would add another severity to the interface rather than create a whole new one."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nothing in this patchset explains WHY you're doing this.  Creating a dbus interface clearly isn't the goal, what is?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "Collect the sensor's current information(like avaliable, functional, threshold assert) and update in a interface in ADC sensor is my goal."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You can already do that without writing any new code.  make a new EM config file for your battery."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Before you start making fixes, lets get a discussion about what you're trying to accomplish.  Your commit message mentions writing files, and exposing something that's a \"Battery\", but makes no mention as to WHY.  I suspect there's a far simpler solution.\n\nNote, there are LOTS of examples of batteries in openbmc ADC entries already, most of which can be found by searching for the BridgeGPIO stanza in the EM configs.  I'm not against having a unique \"battery\" entry for EM that's unique from ADC, because it's more descriptive, but the rest of the changes making heavy changes to the base class need to go in the subclass, and we need to document what we're actually trying to accomplish.\n\nTo reiterate what I said earlier, there is no such thing as a \"Battery\" sensor type.  There is a sensor that produces a voltage.  If it's monitoring a battery, it needs to be attached to a Battery entry which can be added using a new EM file with Probe = Found(\"My baseboard\")."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "Sorry for the late."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "> Before you start making fixes, lets get a discussion about what you're trying to accomplish.  Your commit message mentions writing files, and exposing something that's a \"Battery\", but makes no mention as to WHY.  I suspect there's a far simpler solution.\n\nWe have a coin battery on motherboard and we want to display the coin battery in redfish depend on the validity of coin battery sensor.\n\nThat is, we only want to make /redfish/v1/Chassis/coin_batter can display the information in redfish when battery sensor have normal reading. And make this url in redfish return not found when battery sensor trigger the threshold or the sensor reading is not available.\n\nThus, I modify the basic sensor class to record the current available, functional and threshold event is trigger or not and update to the property \"Status\" in interface \"xyz.openbmc_project.BatteryStatus\".\n\nThe config of battery sensor 'mobo_battery_p3v' is added in motherboard's config.\nAnd add a new coin battery's config with \"Probe\": ```\"xyz.openbmc_project.BatteryStatus({'Name': 'mobo_battery_p3v', 'Status': true})\"``` to meet the requirement.\n\n> Note, there are LOTS of examples of batteries in openbmc ADC entries already, most of which can be found by searching for the BridgeGPIO stanza in the EM configs.  I'm not against having a unique \"battery\" entry for EM that's unique from ADC, because it's more descriptive, but the rest of the changes making heavy changes to the base class need to go in the subclass, and we need to document what we're actually trying to accomplish.\n\nGot it, I'm not sure if BridgeGPIO is only for battery before.\nI think the new sensor type BATTERY is not need anymore.\n\n> To reiterate what I said earlier, there is no such thing as a \"Battery\" sensor type.  There is a sensor that produces a voltage.  If it's monitoring a battery, it needs to be attached to a Battery entry which can be added using a new EM file with Probe = Found(\"My baseboard\").\n\nI will remove the Battery sensor type and use BridgeGPIO to know whether this sensor is for battery."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Before you start making fixes, lets get a discussion about what you're trying to accomplish.  Your commit message mentions writing files, and exposing something that's a \"Battery\", but makes no mention as to WHY.  I suspect there's a far simpler solution.\n> \n> We have a coin battery on motherboard and we want to display the coin battery in redfish depend on the validity of coin battery sensor.\n> \n> That is, we only want to make /redfish/v1/Chassis/coin_batter can display the information in redfish when battery sensor have normal reading. And make this url in redfish return not found when battery sensor trigger the threshold or the sensor reading is not available.\n\nWith respect, that's against Redfish best practices for how trees should be structured and how the API should work.  If the battery is unavailable, it needs to be returning a value of null, not returning \"not found\".  That behavior is already available in the existing code.\n\nYou're free to do whatever you like in your code tree, but I'm personally not going to support features that go against best practices.\n\n> \n> Thus, I modify the basic sensor class to record the current available, functional and threshold event is trigger or not and update to the property \"Status\" in interface \"xyz.openbmc_project.BatteryStatus\".\n> \n> The config of battery sensor 'mobo_battery_p3v' is added in motherboard's config.\n> And add a new coin battery's config with \"Probe\": ```\"xyz.openbmc_project.BatteryStatus({'Name': 'mobo_battery_p3v', 'Status': true})\"``` to meet the requirement.\n> \n> > Note, there are LOTS of examples of batteries in openbmc ADC entries already, most of which can be found by searching for the BridgeGPIO stanza in the EM configs.  I'm not against having a unique \"battery\" entry for EM that's unique from ADC, because it's more descriptive, but the rest of the changes making heavy changes to the base class need to go in the subclass, and we need to document what we're actually trying to accomplish.\n> \n> Got it, I'm not sure if BridgeGPIO is only for battery before.\n> I think the new sensor type BATTERY is not need anymore.\n> \n> > To reiterate what I said earlier, there is no such thing as a \"Battery\" sensor type.  There is a sensor that produces a voltage.  If it's monitoring a battery, it needs to be attached to a Battery entry which can be added using a new EM file with Probe = Found(\"My baseboard\").\n> \n> I will remove the Battery sensor type and use BridgeGPIO to know whether this sensor is for battery.\n\nYou've missed the point a little.  To be clear, most batteries have ADC sensors that use BridgeGPIO.  BridgeGPIO does not itself indicate that it's a battery.  indicating that a device is a battery would be done by declaring a new EM file for the battery itself, and setting up a sensor within it."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jeff Lin",
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "> > > Before you start making fixes, lets get a discussion about what you're trying to accomplish.  Your commit message mentions writing files, and exposing something that's a \"Battery\", but makes no mention as to WHY.  I suspect there's a far simpler solution.\n> > \n> > We have a coin battery on motherboard and we want to display the coin battery in redfish depend on the validity of coin battery sensor.\n> > \n> > That is, we only want to make /redfish/v1/Chassis/coin_batter can display the information in redfish when battery sensor have normal reading. And make this url in redfish return not found when battery sensor trigger the threshold or the sensor reading is not available.\n> \n> With respect, that's against Redfish best practices for how trees should be structured and how the API should work.  If the battery is unavailable, it needs to be returning a value of null, not returning \"not found\".  That behavior is already available in the existing code.\n> \nSorry, it seems I have not clearly explained our feature in previous comment.\nLet me provide more detail in our feature.\nWith a general ADCSensor config write in baseboard config(mobo.json), we can make url ```/redfish/v1/Chassis/mobo/Sensors/voltage_mobo_battery_p3v``` workable in redfish and return reading is null when sensor is unavailalbe.\n\nAnd then we add a new config Coin_battery.json for another url ```/redfish/v1/Chassis/coin_battery``` in redfish:\n```\n{\n    \"Exposes\": [\n        ...\n    ],\n    \"Name\": \"coin_battery\",\n    \"Probe\": \"FOUND('mobo')\",\n    \"Type\": \"Board\",\n    ...\n}\n```\n\nOur feature is to make url ```/redfish/v1/Chassis/coin_battery``` return not found when url ```/redfish/v1/Chassis/mobo/Sensors/voltage_mobo_battery_p3v``` return Reading is null or Status.Health is not OK.\nHowever every sensor's D-bus have the same interface name and property name, so I add a new interface to make the Probe in Coin_battery.json can be change to ```\"xyz.openbmc_project.BatteryStatus({'Name': 'mobo_battery_p3v', 'Status': true})\"``` so as to dynamically display information in Coin_battery.json base on adcsensor mobo_battery_p3v sensor's status.\n> You're free to do whatever you like in your code tree, but I'm personally not going to support features that go against best practices.\n> \n> > \n> > Thus, I modify the basic sensor class to record the current available, functional and threshold event is trigger or not and update to the property \"Status\" in interface \"xyz.openbmc_project.BatteryStatus\".\n> > \n> > The config of battery sensor 'mobo_battery_p3v' is added in motherboard's config.\n> > And add a new coin battery's config with \"Probe\": ```\"xyz.openbmc_project.BatteryStatus({'Name': 'mobo_battery_p3v', 'Status': true})\"``` to meet the requirement.\n> > \n> > > Note, there are LOTS of examples of batteries in openbmc ADC entries already, most of which can be found by searching for the BridgeGPIO stanza in the EM configs.  I'm not against having a unique \"battery\" entry for EM that's unique from ADC, because it's more descriptive, but the rest of the changes making heavy changes to the base class need to go in the subclass, and we need to document what we're actually trying to accomplish.\n> > \n> > Got it, I'm not sure if BridgeGPIO is only for battery before.\n> > I think the new sensor type BATTERY is not need anymore.\n> > \n> > > To reiterate what I said earlier, there is no such thing as a \"Battery\" sensor type.  There is a sensor that produces a voltage.  If it's monitoring a battery, it needs to be attached to a Battery entry which can be added using a new EM file with Probe = Found(\"My baseboard\").\n> > \n> > I will remove the Battery sensor type and use BridgeGPIO to know whether this sensor is for battery.\n> \n> You've missed the point a little.  To be clear, most batteries have ADC sensors that use BridgeGPIO.  BridgeGPIO does not itself indicate that it's a battery.  indicating that a device is a battery would be done by declaring a new EM file for the battery itself, and setting up a sensor within it.\n\nGot it, we only have a battery sensor require BridgeGPIO, so I'm not sure if there exist some adc sensor require BridgeGPIO but they are not for battery."
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This would normally be checking batteryStatusInterface for validity, not another property."
                },
                {
                    "file": "src/ADCSensor.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "like we do for other sensors that have multiple types, lets just store the type (ideally as an enum, but other sensors use a string)."
                },
                {
                    "file": "src/ADCSensorMain.cpp",
                    "line": 117,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Remove, not need to construct an empty string.  That is the default."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 111,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You should not be overriding the sensor base class with whether or not it's a battery.  At most that should go into AdcSensor."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 374,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?"
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 397,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This change wasn't documented in your commit message, and we really shouldn't be allowing a SET of the Functional interface from outside of the sensor itself.  That inverts control compared to the existing PowerState parameter handling."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 481,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "More things that shouldn't go in the general sensor class."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 41,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                },
                {
                    "file": "src/ADCSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -2
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 91,
            "sizeDeletions": 9
        }
    ]
}