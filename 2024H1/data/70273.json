{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "design",
    "id": "Ie488b5ebe1bf89a495a4b13a8f592e746df6e433",
    "number": 70273,
    "subject": "Add docs/designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
    "owner": {
        "name": "Marco Kawajiri",
        "email": "kawajirimarco@googlemail.com",
        "username": "kawmarco"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/70273",
    "hashtags": [],
    "createdOn": 1711568671,
    "lastUpdated": 1723855828,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1711568671,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1711568738,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1711568738,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1711568770,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/81362/ : FAILURE"
        },
        {
            "timestamp": 1711568885,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1711568943,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1711568953,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1711568953,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1711568979,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1711568985,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/81363/ : SUCCESS"
        },
        {
            "timestamp": 1711570026,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1711570047,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1711570048,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1711570071,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/81365/ : SUCCESS"
        },
        {
            "timestamp": 1711570168,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711570199,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Topic set to design"
        },
        {
            "timestamp": 1712937611,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1712937717,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1712958231,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1712958522,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1713195294,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 3:\n\n(5 comments)"
        },
        {
            "timestamp": 1713196763,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(6 comments)"
        },
        {
            "timestamp": 1713197891,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1713283696,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1713285755,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1713290248,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1713291654,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1718044553,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1722815381,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "mdmii@outlook.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1722990671,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1723855828,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "mdmii@outlook.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "625f6a2f4c8b53e09fc350074ed108668aca9b53",
            "parents": [
                "0907a49e821b3ca047621bd0aa9843076b31ad75"
            ],
            "ref": "refs/changes/73/70273/1",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "createdOn": 1711568671,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Pushing this change soon, will update doc when up"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "type": "ADDED",
                    "insertions": 90,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 103,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "152672633a0a7e6351ad5468d5f7c0474b9adf56",
            "parents": [
                "0907a49e821b3ca047621bd0aa9843076b31ad75"
            ],
            "ref": "refs/changes/73/70273/2",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "createdOn": 1711568885,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "CI failure is due to formatting.  You'll want to run 'prettier' on this file."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "type": "ADDED",
                    "insertions": 131,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 144,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
            "parents": [
                "0907a49e821b3ca047621bd0aa9843076b31ad75"
            ],
            "ref": "refs/changes/73/70273/3",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "createdOn": 1711570026,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajirimarco@googlemail.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Based on the fact that this design exists, I'm assuming that the Meta certificate authority doesn't support using User Principal Name in the extended field?  That seems like the other \"right\" way to do this."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Will escalate this internally to our certs team, I'm assuming not from what I see in `openssl x509 -in $client_cert -text`'s output"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "User Principal name looks like it's in one of the formats\n\nusername, domain/username, or username@domain.\n\nWhich is awkwardly close to what you guys have.  All good if it can't work, but it's so close it's at least worth asking."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "At a design-level, I'd like us to explore options that don't involve bmcweb doing any kind of special logic.  Bmcweb ideally should be a DBus to Redfish translator, and ideally shouldn't be decoding any special string patterns on its own, but should be relying on other things on DBus that can do the job.  When CommonName matching was a single \"read the username string string and compare to a dbus path\", that's easy and not business logic.  When we're parsing complex semantics from it and doing transforms, that's business logic that should be done in a daemon somewhere."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Missing all background on the fact that Redfish has a full stack of in-specification solutions for this stuff.  CommonName matching, UPN, etc."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Fair, will add \ud83d\udc4d"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 63,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Given that Redfish has a standard for CertificateMappingAttribute that, how do you see us handling that parameter when we're in \"meta mode\"?\n\nToday, we the code essentially would just put CommonName, because that's what it does.  If we're not mapping to a common name, I'm not sure what we should expose in Redfish to denote that this system supports Metas certificate encoding scheme."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 63,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71910\n\nThis is now coming up and is going to cause some blocking compatibility issues.  Would appreciate input there."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Presumably there's requirements around mapping a user to a Redfish role?  Otherwise what's the point in identifying the user as more than just \"meta-user\""
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Yes, e.g. services that only need to query sensor endpoints have users with the `ReadOnly` role."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How will these users get created?  Redfish?"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 82,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Yes, through `POST /redfish/v1/AccountService/Accounts`"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sorry, missed this response, my key is around what the structure will look like.  ManagerAccount has a CertificateCollection, but this doesn't talk to that, or how that per-user certificate collection would be managed (is that a phosphor certificate manager thing, phosphor-user-manager thing?  both?)\n\nWe should document at least a start of an intent there."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why abbreviate?  service_zeus seems like it makes more sense in terms of an actual user?\n\nThis question kinda pokes a little at this is just trying to enforce Metas existing certificate naming semantics on /etc/password.\n\nCould we do something more generic like, \"We replace colons in the CommonName field with underscores and try to match the user\"\n\nThe change functionally in that approach would be a minimal difference, but doesn't require documenting or supporting metas internal cert structure in code.  In the odd case that meta decided to add \"external user\", \"Domain\", or any other new prefixes, OpenBMC doesn't have to care, that's your companies business, we just try to match common name.  In terms of result, the only thing that I think changes would be that host:/hostname would change to two underscores host__hostname, which in code we could either make the change (which would look a little weird in pam), or we could make the rule collapse multiple sequential escaped tokens into one, so the result is identical.\n\nThis also avoids questions like \"How are domain names escaped\", \"Do we enforce the 255 character domain name limit for service names?\" and all manner of other questions that I would rather NOT ask, just to keep this simple."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "> Could we do something more generic like, \"We replace colons in the CommonName field with underscores and try to match the user\"\n\nUnfortunately it's common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n\nAlso trying to keep the code explicit and avoid character replacements as much as possible given it's security-sensitive code (e.g. escaping/collapsing characters can give margin to identity collisions)\n\n> In the odd case that meta decided to add \"external user\", \"Domain\", or any other new prefixes, OpenBMC doesn't have to care, that's your companies business, we just try to match common name\n\nI can make the code generic to any `<type>` field, but not sure if it's much of a code complexity win (e.g. we'd still need to handle the `type=\"host\"` special case).\n\nIf it's any help on avoiding taking too much community attention on this, Meta is very conservative on any changes on its client certificates (the subject name field has been using this scheme since I started five years ago), I doubt you'll see many change requests to the meta subject CN parsing code in the long term, if at all."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Could we do something more generic like, \"We replace colons in the CommonName field with underscores and try to match the user\"\n> \n> Unfortunately it's common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n\nWhy is this a problem?\n\n> \n> Also trying to keep the code explicit and avoid character replacements as much as possible given it's security-sensitive code (e.g. escaping/collapsing characters can give margin to identity collisions)\n\nThis is fair.  The other thing I realized is that linux usernames actually have very few limits on what characters are allowed, so I'm more confused what we're trying to accomplish here.  Based on my reading (which could be wrong), you could just create a username of\n\nuser:kawmarco/dev123.facebook.com\n\nAnd require no changes to anything, including bmcweb, considering that unix allows colons, forward slashes and periods in their names.\n\nWas this considered?\n\n> \n> > In the odd case that meta decided to add \"external user\", \"Domain\", or any other new prefixes, OpenBMC doesn't have to care, that's your companies business, we just try to match common name\n> \n> I can make the code generic to any `<type>` field, but not sure if it's much of a code complexity win (e.g. we'd still need to handle the `type=\"host\"` special case).\n> \n> If it's any help on avoiding taking too much community attention on this, Meta is very conservative on any changes on its client certificates (the subject name field has been using this scheme since I started five years ago), I doubt you'll see many change requests to the meta subject CN parsing code in the long term, if at all.\n\nThat's not what I'm asking for, I'm asking for us to consider implementations that don't require special handling of CommonName that might be different, because we have to maintain an option, a separate set of tests, and it makes that path incompatible with other paths.  It implies that every company is putting in their own \"flavor\" of certificates in at compile time, which given there are standards for this kind of thing, and this is Redfish, there's 3 CommonName modes already supported by Redfish as a standard, it isn't great to be adding a company specific OEM path that isn't documented.  If we can avoid it, we should.  If we can't avoid it, so be it, but I'd like to at least discuss options that don't involve needing bmcweb to maintain special knowledge of how meta certificates are structured."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "> > Unfortunately it's common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n>\n> Why is this a problem?\n\nFor example, an user identity can be in a number of hosts (I tend to have 2 to 3 development servers running, so three distinct hostnames), which means we'd have several system users for the same logical identity and have to install users for each user+host combination (so the total number of users would multiply accordingly)\n\n\n> And require no changes to anything, including bmcweb, considering that unix allows colons, forward slashes and periods in their names.\n\nThe slash and colon characters are the troublesome ones, e.g. from a test bletchley unit:\n```\n# useradd 'user:with/special.characters'\nuseradd: invalid user name 'user:with/special.characters': use --badname to ignore\n# useradd 'user_with/special.characters'\nuseradd: invalid user name 'user_with/special.characters': use --badname to ignore\n# useradd 'user_with_special.characters' # succeeds\n```\n\n\n> I'm asking for us to consider implementations that don't require special handling of CommonName that might be different\n\nThat's a fair point, our \"the identity we care about is a substring of the Subject CN according to this set of rules\" use case doesn't fit existing  `CertificateMappingAttribute` matching modes.\n\nI don't have context on proposing redfish standard changes, but I suppose we can try proposing a redfish standard change so `CertificateMappingAttribute` has a regex pattern matching mode or a configurable `sed`-like preprocessing step as a long-term effort."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > > Unfortunately it's common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n> >\n> > Why is this a problem?\n> \n> For example, an user identity can be in a number of hosts (I tend to have 2 to 3 development servers running, so three distinct hostnames), which means we'd have several system users for the same logical identity and have to install users for each user+host combination (so the total number of users would multiply accordingly)\n\n\"the hostname part is irrelevant\" worries me a little from a security perspective;  In that case, shouldn't we be matching that \"hostname.facebook.com\" matches THIS bmcs hostname?  Otherwise a certificate issued against any BMC could be used to log into any machine that has your user on it, not just the one the CA intended?\n\n> \n> \n> > And require no changes to anything, including bmcweb, considering that unix allows colons, forward slashes and periods in their names.\n> \n> The slash and colon characters are the troublesome ones, e.g. from a test bletchley unit:\n> ```\n> # useradd 'user:with/special.characters'\n> useradd: invalid user name 'user:with/special.characters': use --badname to ignore\n> # useradd 'user_with/special.characters'\n> useradd: invalid user name 'user_with/special.characters': use --badname to ignore\n> # useradd 'user_with_special.characters' # succeeds\n> ```\n\nWhat happens when you use --badname?  I was looking at the unix documentation, not the docs for useradd.\n\n> \n> \n> > I'm asking for us to consider implementations that don't require special handling of CommonName that might be different\n> \n> That's a fair point, our \"the identity we care about is a substring of the Subject CN according to this set of rules\" use case doesn't fit existing  `CertificateMappingAttribute` matching modes.\n> \n> I don't have context on proposing redfish standard changes, but I suppose we can try proposing a redfish standard change so `CertificateMappingAttribute` has a regex pattern matching mode or a configurable `sed`-like preprocessing step as a long-term effort.\n\nThat seems like overkill, especially when UPN already exists.  I doubt anyone but facebook is going to use this unique scheme."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "> What happens when you use --badname? I was looking at the unix documentation, not the docs for useradd.\n\nStill fails for the same cases, but with a different error message:\n```\n# useradd 'user:with_special.characters' --badname\nuseradd: failure while writing changes to /etc/passwd\n```"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "> \"the hostname part is irrelevant\" worries me a little from a security perspective; In that case, shouldn't we be matching that \"hostname.facebook.com\" matches THIS bmcs hostname?\n\nNot sure I understood the question, the `hostname.facebook.com` bit is in the client certificate (e.g. the one from my development server). \n\nUsing the `user_kawmarco` as a user with Administrator role as an example, the BMC should only grant access to a privileged endpoint/action if:\n\n1. The provided client certificate is valid and trusted (using the Meta CAs installed in the BMC)\n2. The user (`user_kawajiri`) parsed from the Subject CN in the client certificate (`user:kawajiri/hostname.facebook.com`, `hostname.facebook.com` is the client hostname) is an Administrator user in the BMC\n\n> Otherwise a certificate issued against any BMC could be used to log into any machine that has your user on it, not just the one the CA intended?\n\nWe only deploy host client certificates to BMCs, so they would only be able to identify as a BMC host (e.g. `Subject CN=host:/a_bmc.facebook.com`) to other systems.\n\nRegular `user:` client certificates in servers have `400` permissions attached to them (so an attacker would have to escalate privileges to be able to use e.g. my user certificate to impersonate me)."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > \"the hostname part is irrelevant\" worries me a little from a security perspective; In that case, shouldn't we be matching that \"hostname.facebook.com\" matches THIS bmcs hostname?\n> \n> Not sure I understood the question, the `hostname.facebook.com` bit is in the client certificate (e.g. the one from my development server). \n> \n> Using the `user_kawmarco` as a user with Administrator role as an example, the BMC should only grant access to a privileged endpoint/action if:\n> \n> 1. The provided client certificate is valid and trusted (using the Meta CAs installed in the BMC)\n> 2. The user (`user_kawajiri`) parsed from the Subject CN in the client certificate (`user:kawajiri/hostname.facebook.com`, `hostname.facebook.com` is the client hostname) is an Administrator user in the BMC\n> \n\nRight, so what if the certificate says \"user:kawajiri/hostname.mydomainname.com\"?\n\nThis is some of the awkward part about this stuff that I'd really like to get to the bottom of, I don't particularly want to own code that's doing security checks that doesn't have intent documented, or have assigned reviewers for when the code needs to change.  I get what you're trying to accomplish is to just connect existing security certs that follow their own format, but I'm struggling a little bit with the responsibility breakdown here, as I don't see anyone from meta set up as a bmcweb reviewer;  I'm happy to own the simple \"parse a string and pull out a user that's then posted to pam\", because that's simple enough and I understand it.\nI'm worried about owning something more complex where we're doing actual manipulation of the string between the common name and pam in bmcweb.\n\nAny thoughts on how we should approach maintainership of that?\n\n> > Otherwise a certificate issued against any BMC could be used to log into any machine that has your user on it, not just the one the CA intended?\n> \n> We only deploy host client certificates to BMCs, so they would only be able to identify as a BMC host (e.g. `Subject CN=host:/a_bmc.facebook.com`) to other systems.\n\nRight, but as written, any bmc cert can now talk to any other bmc, because we're effectively ignoring the hostname.  That's not a common security model, but if we get that part explicitly written into the design that we don't care about hostname, and that any issued certificate can log into any system, then I'm fine with it, I just want to make sure that intent is written down.\n\n> \n> Regular `user:` client certificates in servers have `400` permissions attached to them (so an attacker would have to escalate privileges to be able to use e.g. my user certificate to impersonate me).\n\nIn the implementation you're proposing they don't have 400 set.  bmcweb runs as root, and I don't think there's anything like what you describe in this doc."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "@Ed I don't know what unix documentation you were looking at, but  `:` is the primary separaor of the passwd family of files and three is no provision to escape it.  It's implicitly documented in `passwd(5)` `shadow(5)` and family in the Linux man pages.   Beyond this, it's recommended to not contain capital letters likely because of historical login logic to set TTY mode for case translation for uppercase only terminals. (and yes I have used one of these 6 bit terminals).\n\nLooking at the PAM man pages, I found the `PAM_RHOST` field, and this seems ideal to represent this part of the identity.\n\nlooking further, I realized that any PAM module is allowed to change the PAM context including the `PAM_USER` and applications are explicitly required to query each time they are called.   this means that the decision to strip this host from the user can tin a the PAM stack instead of bmcweb and allows the stack to determine if or when to strip such data.  This could also be extended to substitute the forbidden `:` character.\n\n(I actually was looking if pam_unix allowed an alternative passwd file but this is not the case :( )"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> @Ed I don't know what unix documentation you were looking at, but  `:` is the primary separaor of the passwd family of files and three is no provision to escape it.  It's implicitly documented in `passwd(5)` `shadow(5)` and family in the Linux man pages.\n\nyep, you're right, the : would need some level of escaping, but the thought is that's something we could document more generally, which shifts the responsibility of creating correct users onto an individual system, rather than having to explicitly parse a custom cert.\n\n\n> Beyond this, it's recommended to not contain capital letters likely because of historical login logic to set TTY mode for case translation for uppercase only terminals. (and yes I have used one of these 6 bit terminals).\n\nbmc doesn't have \"historical logic logic\", so I think we're safe there.\n\n\n> \n> Looking at the PAM man pages, I found the `PAM_RHOST` field, and this seems ideal to represent this part of the identity.\n> \n> looking further, I realized that any PAM module is allowed to change the PAM context including the `PAM_USER` and applications are explicitly required to query each time they are called.   this means that the decision to strip this host from the user can tin a the PAM stack instead of bmcweb and allows the stack to determine if or when to strip such data.  This could also be extended to substitute the forbidden `:` character.\n> \n> (I actually was looking if pam_unix allowed an alternative passwd file but this is not the case :( )\n\nI suspect the part you're missing in the above is that there's no connection between MTLS auth and pam.  MTLS authenticates using root certs.  PAM authenticates via a username/password.  In theory we could treat the common name as a \"password\", but that seems complex and error prone."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "Agree that historical restrictions on case are not relevant just giving background for justification of the man page note.\n\nI have not studied how we obtain the account information from the \nfiles PAM supports but ignore the password.   I would have thought a sufficient rule before checking the password would have worked but if mTLS is already going directly to dbua then this makes less sense.\n\nIf we continue to parse the CN into type, user, and hostname it seems like validation or ignoring if any should be outside the core parsing (without studying the implications.\n\nRegarding how domain is escaped, DNS has a well established mapping from alpha num underscore to utf, so it's just separators.  I have no idea if their DNS would include such names, and if not expect the escaped vs human name in the CN (or scan a scam for limit until support is added)."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "the standard redfish administrator role can modify these, right?   do you plan to only give administrator to these service users and restrict the role with an alternative recommended administrator?"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What you're asking for is essentially a modifyable and flexible privilege registry, which we don't have today, and I don't believe this design is planning on changing.  Today we grab the DMTF one out of maintainers just not having the bandwidth to audit the various privilege types, and the lack of use in practice.\n\nI would expect this design to use the DMTF privilege registry."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  Usernames are passed to pam as is.  There's no need to translate at all."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "I don't have much context on PAM, but what I meant here was doing the username translation (e.g. `user:kawmarco/dev123.facebook.com` -> `user_kawmarco`) fully in PAM instead of maintaining logic in `bmcweb`"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, gotcha."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 109,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "why not?   it's a generic C string, and the memory is statically shared,(do not free do not overwrite notes on all API)"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we add:\n\nEscaping common name using a fixed set of rules (what we talked about and discounted above).\n\nMatching common name based on exact username matches (including special characters passed to DBus).\n\nAdding a \"CertificateName\" or \"CommonName\" parameter to user creation in phosphor-user-manager that bmcweb can use to match a certificate to a user.  In theory this means that folks can just encode \"this is what my CA calls this user\" and we don't have to worry about any implementation specific details.\n\nEnforcing Redfish as a standard, and just not allowing code upstream that implements non-standard conforming Redfish implementations.  (At a design level, this is something we should at least discuss, why this is different than the other OEM redfish stuff we normally would say \"Talk to DMTF first\").  I do think this is different, but we should at least write it down."
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Fair, will add \ud83d\udc4d"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "another option is to generate an oauth token pinned to the mtls certificate but this would require client changes in addition to additional infrastructure, but each renewal could verify the permissions in the DB.  it would not require the account service in the machine instead roles or permissions are communicated in the token.  I also haven't explored the redfish forum updates and guidance since the add of oauth and sessions are not available imo.\n\nI don't know if this meets your local validation rules the machine could rekey its trust with the ca.\n\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/58313"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> another option is to generate an oauth token pinned to the mtls certificate but this would require client changes in addition to additional infrastructure, but each renewal could verify the permissions in the DB.  \n\nHaving a centralized global DB would someone defeat the purpose of MTLS, which is generally implemented as distributed.\n\n> it would not require the account service in the machine instead roles or permissions are communicated in the token.  I also haven't explored the redfish forum updates and guidance since the add of oauth and sessions are not available imo.\n> \n> I don't know if this meets your local validation rules the machine could rekey its trust with the ca.\n> \n> \n> https://gerrit.openbmc.org/c/openbmc/docs/+/58313"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "the text said their source of truth was a DB (see line 90-91 of PS 3)"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 119,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: spelling? organizational\n\n(Unless this is a British English spelling I'm not familiar with ;) )"
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "line": 119,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajirimarco@googlemail.com",
                        "username": "kawmarco"
                    },
                    "message": "Undecided Gdocs-Markdown-Export spelling, will fix :-P"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
                    "type": "ADDED",
                    "insertions": 131,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 144,
            "sizeDeletions": 0
        }
    ]
}