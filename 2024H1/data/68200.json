{
    "project": "openbmc/libbej",
    "branch": "main",
    "id": "I61b7c17690eb7e7fefd1973a22d4316c6214267e",
    "number": 68200,
    "subject": "Add libbej encoder wrapper for C++",
    "owner": {
        "name": "Nikhil Namjoshi",
        "email": "nikhilnamjoshi@google.com",
        "username": "namjoshiniks"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libbej/+/68200",
    "hashtags": [],
    "createdOn": 1702052691,
    "lastUpdated": 1704482131,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1702052691,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1702052700,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702052700,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1702052715,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/76980/ : FAILURE"
        },
        {
            "timestamp": 1702053443,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702053470,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702053470,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1702053543,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76982/ : SUCCESS"
        },
        {
            "timestamp": 1702053768,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Uploaded patch set 3: Commit message was updated.\n\nCopied Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702053805,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702053805,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1702053914,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76983/ : SUCCESS"
        },
        {
            "timestamp": 1702425867,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1702491807,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 3:\n\n(6 comments)"
        },
        {
            "timestamp": 1702684448,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702684468,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 3:\n\n(6 comments)"
        },
        {
            "timestamp": 1702684495,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702684495,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1702684704,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/77149/ : SUCCESS"
        },
        {
            "timestamp": 1703099638,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1704326722,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 4:\n\n(5 comments)"
        },
        {
            "timestamp": 1704352389,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1704388332,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1704389104,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1704389680,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1704477723,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1704477742,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 5:\n\n(4 comments)"
        },
        {
            "timestamp": 1704477751,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1704477751,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1704477883,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/77643/ : SUCCESS"
        },
        {
            "timestamp": 1704480917,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 5: Code-Review+2"
        },
        {
            "timestamp": 1704480943,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1704482105,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1704482131,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "8e77615c249fb08952dce857119da625829dd9d0",
            "parents": [
                "6eb945fa699e0d1fc91886c952cb564147f28d82"
            ],
            "ref": "refs/changes/00/68200/1",
            "uploader": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "createdOn": 1702052691,
            "author": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "test/encoded/chassis_enc.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "test/dictionaries/chassis_dict.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "include/libbej/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "test/json/chassis.json",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "test/include/bej_common_test.hpp",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "type": "ADDED",
                    "insertions": 467,
                    "deletions": 0
                },
                {
                    "file": "test/bej_decoder_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -100
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 795,
            "sizeDeletions": 101
        },
        {
            "number": 2,
            "revision": "dad561357398ef5e0cb36af1e8e1db32da18d4ba",
            "parents": [
                "6eb945fa699e0d1fc91886c952cb564147f28d82"
            ],
            "ref": "refs/changes/00/68200/2",
            "uploader": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "createdOn": 1702053443,
            "author": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "test/encoded/chassis_enc.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "test/dictionaries/chassis_dict.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "include/libbej/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "test/json/chassis.json",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "test/include/bej_common_test.hpp",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "type": "ADDED",
                    "insertions": 467,
                    "deletions": 0
                },
                {
                    "file": "test/bej_decoder_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -99
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 794,
            "sizeDeletions": 100
        },
        {
            "number": 3,
            "revision": "cdc843f0eb95944ea4c0be94ed80677aa1835239",
            "parents": [
                "6eb945fa699e0d1fc91886c952cb564147f28d82"
            ],
            "ref": "refs/changes/00/68200/3",
            "uploader": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "createdOn": 1702053768,
            "author": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "apologies, haven't been able to take a look at this review - I'll try to get to it by tomorrow (unless others are able to review earlier)"
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "line": 7,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "not used here."
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "line": 7,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "nit: can just combine?"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "lowerCanmalCase"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "std::span instead?"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "No because we want to transfer the encoded vector ownership to the Caller API (to avoid the vector copy)"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Closing the comment. Feel free to open it, if there are more concerns."
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "wouldn't this cause some issue when we need to access `encodedPayload` again?"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "I did leave a comment in the Class declaration of this API, that the vector ownership will be transferred to the requester API\n\nhttps://gerrit.openbmc.org/c/openbmc/libbej/+/68200/3/include/libbej/bej_encoder_json.hpp\n\n\nThe reason to do std:move \n1) Is to avoid copying of the encoded binary vector as it could be huge. \n2) I think in a given caller context there would only be one encoder class object will do `encoder.encode()` and `encoder.getOutput()` only once. In that context, it is unlikely that it would be used more than once.\n\n\n\nBut I guess, it is better to reinitialize encodedPayload object again, for the next set of encoding.\n\nDone"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "`nullptr`"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/encoded/chassis_enc.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "test/dictionaries/chassis_dict.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "include/libbej/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "test/json/chassis.json",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "test/include/bej_common_test.hpp",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "type": "ADDED",
                    "insertions": 467,
                    "deletions": 0
                },
                {
                    "file": "test/bej_decoder_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -99
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 796,
            "sizeDeletions": 100
        },
        {
            "number": 4,
            "revision": "4428fd9a4775d5f42965ac1d0f6c0db51d15e238",
            "parents": [
                "6eb945fa699e0d1fc91886c952cb564147f28d82"
            ],
            "ref": "refs/changes/00/68200/4",
            "uploader": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "createdOn": 1702684448,
            "author": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 65,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "emplace_back"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 65,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Could we have used std::stack? https://cplusplus.com/reference/stack/stack/\n\nThis would avoid us having to duplicate this in the test file (or define this in header file or perhaps in header file, do passthrough call to std::stack? if we are doing this for C compatibility)"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "`std::stack` uses `std::deque` for the implementation by default.\n\nWe can try\n```\nauto stack = reinterpret_cast<std::stack<void*,std::vector<void*>>*>(dataPtr);\nstack->emplace(property);\n```\n\nand for pop\n```\nauto stack = reinterpret_cast<std::stack<void*,std::vector<void*>>*>(dataPtr);\nif (stack->empty())\n{\n  return nullptr;\n}\nvoid* value = stack->top();\nstack->pop();\nreturn value;\n```\n\nhowever, it seems like there are no significant benefits to use std::stack (maybe that's why I don't see it used too oftent)."
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I guess what I mean is, are we having to define our own \"stack\" via vector, I guess because we have to give a callback we can refer to from our C program? If that's the case, then I guess yeah, there's not much to be gained"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "We are just using C library and not passing this back to a C program from my understanding.\n\nstd::stack would still work fine. The C library does not limit us from passing function pointer to use C++ only things."
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Right, and yeah since we are constraint on what we're returning / having to use the member variable stack, we do need this wrapper anyhow - so we're making our own stack with vector. Ok this makes sense."
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "minor nit: Should we use lower camelCase - dataSize"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Should this be in an anonymous namespace / made static?\n\nEdit: Hmm. I guess if it's used by C, if we can still make it static"
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Actually, we should expose this in header along with other stack APIs, so test or other files that want to use encoder wrapper can leverage the APIs"
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Hmmm this is duplicate so it'd be good to avoid it if possible (since our implementation - although stack* APIs probably won't change) and what we're testing is different"
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Good catch... I missed removing these. The test shall now use the same APIs that encoder wrapper uses"
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "line": 483,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Nice"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/encoded/chassis_enc.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "test/dictionaries/chassis_dict.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "include/libbej/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "test/json/chassis.json",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "test/include/bej_common_test.hpp",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "type": "ADDED",
                    "insertions": 119,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "type": "ADDED",
                    "insertions": 485,
                    "deletions": 0
                },
                {
                    "file": "test/bej_decoder_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -99
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 816,
            "sizeDeletions": 100
        },
        {
            "number": 5,
            "revision": "da6e55739306fb4361cbbda8c7e4400cad3037d1",
            "parents": [
                "6eb945fa699e0d1fc91886c952cb564147f28d82"
            ],
            "ref": "refs/changes/00/68200/5",
            "uploader": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "createdOn": 1704477723,
            "author": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Hmm - btw it does seem like it conflicts with Kasun's implementaiotn: https://gerrit.openbmc.org/c/openbmc/libbej/+/66142"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Yeah, because I made some of the test code common into bej_common_test.cpp. But I think it should be easy to resolve"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/encoded/chassis_enc.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "test/dictionaries/chassis_dict.bin",
                    "type": "ADDED",
                    "insertions": 0,
                    "deletions": 0
                },
                {
                    "file": "include/libbej/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "test/json/chassis.json",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "test/include/bej_common_test.hpp",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "src/bej_encoder_json.cpp",
                    "type": "ADDED",
                    "insertions": 80,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "test/bej_encoder_test.cpp",
                    "type": "ADDED",
                    "insertions": 442,
                    "deletions": 0
                },
                {
                    "file": "test/bej_decoder_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -99
                },
                {
                    "file": "include/libbej/bej_encoder_json.hpp",
                    "type": "ADDED",
                    "insertions": 92,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 783,
            "sizeDeletions": 100
        }
    ]
}