{
    "project": "openbmc/libpldm",
    "branch": "main",
    "id": "I08bb8771c6b5e25521d6c801f5b619ac0f25f994",
    "number": 72057,
    "subject": "pdr: Check if RSI of a FRU record matches given RSI",
    "owner": {
        "name": "Varsha Kaverappa",
        "email": "vkaverap@in.ibm.com",
        "username": "vkaverap"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libpldm/+/72057",
    "hashtags": [],
    "createdOn": 1718451119,
    "lastUpdated": 1719401765,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1718451119,
            "reviewer": {
                "name": "Varsha Kaverappa",
                "email": "vkaverap@in.ibm.com",
                "username": "vkaverap"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1718451136,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1718451137,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1718451396,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/86120/ : SUCCESS"
        },
        {
            "timestamp": 1718584277,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(10 comments)"
        },
        {
            "timestamp": 1719383851,
            "reviewer": {
                "name": "Varsha Kaverappa",
                "email": "vkaverap@in.ibm.com",
                "username": "vkaverap"
            },
            "message": "Patch Set 1:\n\n(10 comments)"
        },
        {
            "timestamp": 1719388542,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1719401765,
            "reviewer": {
                "name": "Varsha Kaverappa",
                "email": "vkaverap@in.ibm.com",
                "username": "vkaverap"
            },
            "message": "Abandoned\n\nThe change here is combined with another commit"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "3c632b7e675e596d11ee46bd971810f092573218",
            "parents": [
                "0ee03b5b9d7eed54e602363c31148b9f9622b20c"
            ],
            "ref": "refs/changes/57/72057/1",
            "uploader": {
                "name": "Varsha Kaverappa",
                "email": "vkaverap@in.ibm.com",
                "username": "vkaverap"
            },
            "createdOn": 1718451119,
            "author": {
                "name": "Varsha Kaverappa",
                "email": "vkaverap@in.ibm.com",
                "username": "vkaverap"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Hi Varsha,\n\nIf we're adding to the public API of the library I very much prefer we add an entry to the changelog as well. Working through the checklist at https://github.com/openbmc/libpldm/blob/main/docs/checklists/changes.md should help ensure that everything necessary is covered off.\n\nI've commented on some further concerns inline."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "@arj I would like to abandon this change and combine the changes in this commit with https://gerrit.openbmc.org/c/openbmc/libpldm/+/72058 and make some of the APIs as static. New APIs also included after considering your review comments in both commits. All the review comments given here are addressed and pushed into https://gerrit.openbmc.org/c/openbmc/libpldm/+/72058"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Sure, please do as you see fit, however https://gerrit.openbmc.org/c/openbmc/libpldm/+/72058 hasn't been updated since June 17th?"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 275,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I don't think this is an in-parameter? It should be `out`-only. However, see below."
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 275,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "this is taken care in other APIs"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 277,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "We can take advantage of the non-negative number space to provide the result without resorting to an out-pointer:\n\n```\n@return 1 if the provided FRU record matches the provided record set identifier, 0 if it does not, otherwise -EINVAL if the arguments are invalid.\n```\n\nThis way the function prototype becomes:\n\n```\nint pldm_pdr_record_check_fru_rsi_match(const pldm_pdr_record *record, uint16_t rsi);\n```\n\nWhile typing that out I had a thought. How do you feel about changing the name?\n\n```\nint pldm_pdr_record_matches_fru_rsi(const pldm_pdr_record *record, uint16_t rsi);\n```"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 277,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "added the explanation in the static function and changed name of function"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 278,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why would we be allocating a record handle?"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 278,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "What memory allocation do you plan on doing for a search?"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 278,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "removed this"
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "line": 278,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "removed this"
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 278,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "If we're taking `match` as a pointer argument we must check that also."
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 278,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "match is made an output parameter"
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 290,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I can't accept this sorry. There should be no buffer bounds arithmetic going on in the arguments to `pldm_msgbuf_init_*()`. The purpose of the `msgbuf` APIs is to ensure buffer bounds are respected, and doing this arithmetic defeats that purpose.\n\nThe arguments to `pldm_msgbuf_init_*()` must always refer to the base buffer pointer, and the buffer's own size, to the exclusion of all else. This is how we ensure accesses stay inside the buffer bounds.\n\nAt the very least this needs to be something like:\n\n```\nrc = pldm_msgbuf_init_errno(dst,\n    sizeof(struct pldm_pdr_hdr) + sizeof(uint16_t),\n    record->data,\n    record->size);\n```"
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 290,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "used span required"
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 294,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I think part of the problem you were solving above with the pointer arithmetic is the need to extract a data member at a specific location without extracting all the preceding members. We could use `pldm_msgbuf_span_required()` to ignore that chunk, or we could add e.g. a `pldm_msgbuf_load_from(buf, offset, dst)` API (and supporting infrastructure) to do this for us.\n\nThe `pldm_msgbuf_span_required()` \"hack\" is the easiest way to make forward progress so I'll suggest going that route for now. I'll need to consider the trade-offs of the `pldm_msgbuf_load_from()` idea over using packed structs internally."
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 294,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 305,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This is a bit verbose. If we have the `match` parameter, this could instead be:\n\n```\n*match = record_fru_rsi == rsi;\n```\n\nBut accounting for the suggestion to drop the `match` parameter and return the result instead, it becomes:\n\n```\nreturn record_fru_rsi == rsi;\n```"
                },
                {
                    "file": "src/dsp/pdr.c",
                    "line": 305,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "is part is removed"
                },
                {
                    "file": "tests/dsp/pdr.cpp",
                    "line": 712,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "What about testing non-match conditions?"
                },
                {
                    "file": "tests/dsp/pdr.cpp",
                    "line": 712,
                    "reviewer": {
                        "name": "Varsha Kaverappa",
                        "email": "vkaverap@in.ibm.com",
                        "username": "vkaverap"
                    },
                    "message": "this API is changed to a static API so removed the unit test"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "tests/dsp/pdr.cpp",
                    "type": "MODIFIED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "src/dsp/pdr.c",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/pdr.h",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 95,
            "sizeDeletions": 0
        }
    ]
}