{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ib229112374eb5a65e0a8ac97669c09c498ac26c7",
    "number": 70008,
    "subject": "Fix handling of lanesInUse default value",
    "owner": {
        "name": "Myung Bae",
        "email": "myungbae@us.ibm.com",
        "username": "baemyung"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/70008",
    "hashtags": [],
    "createdOn": 1710284284,
    "lastUpdated": 1718072863,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1710284284,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1710284358,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710284358,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1710285082,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80641/ : SUCCESS"
        },
        {
            "timestamp": 1710285525,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1710286332,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710286390,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710318174,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710388113,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710429557,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1710430570,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710432760,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1710435541,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710436434,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710436529,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710437331,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710438022,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710439702,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710440720,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710446443,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1710446871,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710959357,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1711035508,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1711035605,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1711036554,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1711564522,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1711564839,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1717796552,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased.\n\nCopied Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR **changekind:TRIVIAL_REBASE** OR is:MIN\")\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717796582,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717796582,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1717796586,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1717796586,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1717797337,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1717797399,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1717797740,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/85674/ : SUCCESS"
        },
        {
            "timestamp": 1717802382,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1717803075,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1718024817,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1718027295,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1718030530,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1718030538,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: -Code-Review"
        },
        {
            "timestamp": 1718030578,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1718037701,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1718040620,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1718040716,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1718045171,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1718054986,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1718055010,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1718055010,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1718055071,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1718056199,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/85820/ : SUCCESS"
        },
        {
            "timestamp": 1718072832,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Code-Review+2"
        },
        {
            "timestamp": 1718072863,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "411e86cc76298313db83e605833a29f1751a4534",
            "parents": [
                "6f4bd2904fd231c90ee86040f067018088097715"
            ],
            "ref": "refs/changes/08/70008/1",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1710284284,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Missing testing."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "I'm waiting for the backend change to test, and I'll update the commit message after that."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you mark this WIP until then?  If you have specific questions, feel free to ask, but if something has never been tested, it's definitely not ready to check in, and should be marked as such."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "Marked as WIP while waiting for backend change."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do you have patches out to peci-pcie to replicate this behavior as well?  If so, can you link them here?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "We don't use peci-pcie"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "..... and?  Is that supposed to imply that Myung doesn't need to fix peci-pcie?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "We don't use peci-pcie.  (I also do not know how to deal with it as of now).\n\nIt turns out that it is testable using the existing upstream p10bmc obmc-phosphor-image build on QEMU.\n\nIt will show the default lanesInUse value (i.e. maxint) like\n\n```\n$ curl -k -X GET https://${bmc}/redfish/v1/Systems/system/PCIeDevices/pcie_card11\n{\n  \"@odata.id\": \"/redfish/v1/Systems/system/PCIeDevices/pcie_card11\",\n  \"@odata.type\": \"#PCIeDevice.v1_9_0.PCIeDevice\",\n  \"Id\": \"pcie_card11\",\n....\n  \"PCIeInterface\": {\n    \"LanesInUse\": 4294967295\n  },\n...\n}%\n```\n\nThis will cause Redfish Service Validator failure\n```\n1 err.Edm.Int64 errors in /redfish/v1/Systems/system/PCIeDevices/pcie_card11\n1 failProp errors in /redfish/v1/Systems/system/PCIeDevices/pcie_card11\n1 fails errors in /redfish/v1/Systems/system/PCIeDevices/pcie_card11\n\nERROR - LanesInUse: Value out of assigned max range, 4294967295 > 32\n```\n\nWith this fix, it is successful.\n\n\n----\nSo, I don't think the other backend change is required to get this commit to merge.\nCan we accept this?\n\n---\n\nBTW, we're currently working on downstream PLDM to modify LanesInUse.\n(However, this does not alter this bmcweb change)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm having a tough time understanding the above.  Have we inspected peci-pcie (or talked to the maintainers) to verify this change doesn't break it for the unavailable case?  Previously in code it was using *lanesInUse == 0 to denote unavailable, and this change is proposing we change the definition.  We can't just break working code without discussion.\n\nHave we linked the backend change in the commit message that updates this behavior?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "Previously, PDI's default value (upstream) is 0 to denote as unavailable.\nHowever, it was failing to represent the case of \"available and its value of 0\". (how can show the value of 0 as available?)\n\nThat forces the downstream to modify PDI so that its default as \"-1\" (as int64_t), checking whether it is \"-1\", and and we've used it.\n\nNow, PDI has corrected so that its default value (i.e. unavailable) as \"maxint\" (with \"size_t\"). So, code would need to adapt it -- i.e. make it NULL when its dbus value is \"maxint\".\n\nOtherwise, the current code would show a big value (\"maxint\") as valid/available rather than \"unavailable\".  \n\nThis commit is to follow the current PDI correctly."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I asked two questions, you've answered neither of them.\n\nPDI changed, which I understand.  Please answer my questions which were unrelated to PDI."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "Let me recall your questions. \n\nAm I getting these questions correctly?\nIf not, please help me to get your questions again.\n\n1)\n>Have we inspected peci-pcie (or talked to the maintainers) to verify this change doesn't break it for the unavailable case? Previously in code it was using *lanesInUse == 0 to denote unavailable,\n\nI don't know about peci-pcie.  I'll try to find the owner of peci-pcie and add them as the reviewers.\n\nHowever, the change of this commit is to fix bmcweb code which does not handle correctly to what PDI provides (i.e. default value - i.e. that represents \"unavailable\").  \n\nIt was 0 before and thus bmcweb code filtered out in case \"*lanesInUse == 0\".  Now, it is changed to \"maxint\" and thus bmcweb has to change to \"*lanesInUse == maxint\".  \n\nOtherwise, all of the bmcweb exploiters will fail in case the backend uses PDI defaults.\n\nIf peci-pcie may produce \"*lanesInuse = 0\" to represent \"unavailable\" (although I don't see any references of lanesInUse peci-pcie),  PDI, peci-pcie, or any backends (who generate it) have to change.\nI don't think it is necessarily bmcweb job to examine all of the backends, as long as bmcweb follows what PDI says for this regard.\n\n\n2) \n>Have we linked the backend change in the commit message that updates this behavior?\n\nThe example output that I show is from the current openbmc / p10bmc backend which already produces the default value of lanesInUse (due to PDI) in case it is unavailable.\n\n```\nhttps://github.com/openbmc/openbmc\n\n. setup p10bmc\n```"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I don't think it is necessarily bmcweb job to examine all of the backends, as long as bmcweb follows what PDI says for this regard.\n\nIt is bmcwebs job to not break working code.  When adding new interfaces, we can generally do that by inspection;  When changing the definition of something that was previously tested and worked, we need at least some indication that we're not going to break things.\n\n\nThank you for including Jason, I suspect this can merge now."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is there a related backend change for this?  I'm having a tough time understanding what case we're handling here, and looking at code would probably help me if you could give me a pointer."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This patch is neither tested, nor does it have changes to the existing backends (peci-pcie is the only one I know of) to match this new interface, so this patchset is stalled anyway until those things happen."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "I'm dealing with the IBM downstream pldm - https://github.com/ibm-openbmc/pldm/blob/ca00ba4e2847c7f52f22f9da22d5be7e986bcaeb/oem/ibm/libpldmresponder/file_io_type_pcie.cpp#L381"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Looks like it hasn't been updated to support your change yet?  I don't see explicit handling of maxint."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Isn't this incorrect?  Shouldn't we be setting it to null, per Redfish?"
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "The default means, unknown in this case? Not unsupported? If not unsupported, leave off. If unknown, then null. \n\nFrom https://gerrit.openbmc.org/c/openbmc/bmcweb/+/69864\n\n9.6.1 Properties Overview Page 88 in\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.19.0.pdf\n\n\"If an implementation supports a property, it shall always provide a value for that property. If a value is unknown at the time of the operation due to an internal error, or inaccessibility of the data, the value of null is an acceptable value if supported by the schema definition.\""
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What we need defined in phosphor-dbus-interfaces (if we're not going to just do it in code) is a definition for:\n\n1. When the value can't be gotten because of an error.\n2. When a value can't be gotten because it's not supported on this system.\n3. When a value can't be gotten because it's unavailable (power is off).\n\nLooking at the PDI patchset, it's not clear to me that those 3 cases are covered.\n\nWhat I would expect is that we'd have a new optional interface for pcie lanes in use.\n\n1. Can't be gotten because of an error?  Dbus error\n2. Can't be gotten because it's not supported on this system?  Don't expose the DBUS interface\n3. Value can't be gotten because it's unavailable, return MAXINT.\n\n\nThen Redfish would respond with\n\n1. Return a 500 internal error to the user\n2. Omitting the property\n3. Returning the value as null.\n\n\n\nThis commit looks like it does only part of the fix."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> What I would expect is that we'd have a new optional interface for pcie lanes in use.\n\nIf we go this direction, almost every property is going to end up in its own \"optional\" interface.  Someone is going to make an argument that everything the BMC does has some condition where we can't figure it out.  I'm not on board with that.\n\n> This commit looks like it does only part of the fix.\n\nIsn't it better though?  My understanding was that the recent change was due to the fact that they wanted to be able to represent 0 lanes in use.  That appears to be what is available now with this change.\n\nThis change is really not doing anything with respect to \"errors\" and the existing code didn't do anything with respect to them either.  All this change is doing is aligning the bmcweb with the phosphor-dbus-interfaces w.r.t. the \"default\" value (which is what implementations get if they don't explicitly set the property at a dbus level)."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > What I would expect is that we'd have a new optional interface for pcie lanes in use.\n> \n> If we go this direction, almost every property is going to end up in its own \"optional\" interface.  Someone is going to make an argument that everything the BMC does has some condition where we can't figure it out.  I'm not on board with that.\n\nIn what I'm proposing, \"We can't figure this out\" translates to MAXINT.  \"We can't provide this information on this system\" would be the optional interface.  In general I don't really see what you say being the case.  Property support tends to be batched together, and even if we end up with an interface per property because we have that wide variety of system support, is that really a problem?\n\nIn this case, the port capabilities likely come from smbios tables, whereas the lanes in use come from directly polling the serdes.  For even that reason I think it still makes sense to separate them, so that multiple services can each host their part of the interface.\n\npeci-pcie sidestepped this by pulling the PCIe information directly from the serdes, but I'd be surprised if that worked on all systems.\n\n\nWith that said, is there something you're suggesting to handle 1, 2, and 3 above?  I'm open to other options, but what I suggested is how most of the other interfaces work.\n\n> \n> > This commit looks like it does only part of the fix.\n> \n> Isn't it better though?  My understanding was that the recent change was due to the fact that they wanted to be able to represent 0 lanes in use.  That appears to be what is available now with this change.\n\n\nRight, but now they've also represented an error as omitting the property.  Redfish requires that we handle those 3 distinct cases differently, and as it stands now, there's no way to know the difference between 1, 2, and 3 above.\n\n> \n> This change is really not doing anything with respect to \"errors\" and the existing code didn't do anything with respect to them either.  All this change is doing is aligning the bmcweb with the phosphor-dbus-interfaces w.r.t. the \"default\" value (which is what implementations get if they don't explicitly set the property at a dbus level).\n\nFrom the PDI definition: \"known due to some unknown reason, like hardware failure or link down.\"\n\nFailure is literally in the description of the property now.  If that gets removed, and we handle the case where it's 0 as an error (because now exposing something that handles 0 lanes is an error) that would be an improvement."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Property support tends to be batched together, and even if we end up with an interface per property because we have that wide variety of system support, is that really a problem?\n\nYes.  There are already too many permutations of what is acceptable in the Inventory namespace.  Breaking out everything into separate interface because one system can or can't get that particular piece of data is where we'll end up.  There's always going to be this \"one weird system\".\n\n> With that said, is there something you're suggesting to handle 1, 2, and 3 above? I'm open to other options, but what I suggested is how most of the other interfaces work.\n\nI'm not interested in differentiating them.  This is so low value in my mind and on the use-side of a client that I don't really care to invest more time myself in it. You really need to be able to differentiate at a Redfish Client level that the PCIe Lanes In Use somehow had an internal error in the BMC (that wasn't already reported through the event log)?  If someone else finds it valuable enough and wants to propose an implementation, I'll review it, but \"split out this particular property into a separate interface\" probably isn't going to cut it because it is just setting it up for everything else."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Property support tends to be batched together, and even if we end up with an interface per property because we have that wide variety of system support, is that really a problem?\n> \n> Yes.  There are already too many permutations of what is acceptable in the Inventory namespace.  Breaking out everything into separate interface because one system can or can't get that particular piece of data is where we'll end up.  There's always going to be this \"one weird system\".\n> \n> > With that said, is there something you're suggesting to handle 1, 2, and 3 above? I'm open to other options, but what I suggested is how most of the other interfaces work.\n> \n> I'm not interested in differentiating them.\n\nCool.  Clearly Myung is, or this patch wouldn't need to exist?  Redfish differentiates them, so I'm stuck where I can either:\n1. Accept code that's functionally incorrect to the standard, and doesn't implement Redfish properly.\n2. Make an interface proposal myself.\n3. Deny this patch until someone else proposes a different PDI change.\n\n>  This is so low value in my mind and on the use-side of a client that I don't really care to invest more time myself in it.\n\nFWIW, there are absolutely implementations that care about this distinction.  It's used for debugging if a link didn't come up, or if a link downtrained to a lower speed/width.  That's why this interface was implemented in the first place.\n\n> You really need to be able to differentiate at a Redfish Client level that the PCIe Lanes In Use somehow had an internal error in the BMC (that wasn't already reported through the event log)?\n\nThe distinction between \"lane not in use\" and \"not supported on this platform\" is arguably more important than \"Had an internal error\".  I just bring it up for completeness.\n\n>  If someone else finds it valuable enough and wants to propose an implementation, I'll review it, but \"split out this particular property into a separate interface\" probably isn't going to cut it because it is just setting it up for everything else.\n\n\nwhat does \"setting it up for everything else\" mean here?  As in, today we propose breaking out this one property, tomorrow we ask to separate every property on dbus?  I really don't think that is going to happen.  Systems that don't have a direct serdes connection to check the link status are common."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Cool. Clearly Myung is, or this patch wouldn't need to exist? Redfish differentiates them, so I'm stuck where I can either:\n\nNo... the change is to make it so that 0 is valid data.\n\n> It's used for debugging if a link didn't come up, or if a link downtrained to a lower speed/width. That's why this interface was implemented in the first place.\n\nAll of these cases are 0.\n\n> The distinction between \"lane not in use\" and \"not supported on this platform\" is arguably more important than \"Had an internal error\". I just bring it up for completeness.\n\nAren't these implemented as 0 and maxint represent respectively with the current interface definition?\n\n> As in, today we propose breaking out this one property, tomorrow we ask to separate every property on dbus? I really don't think that is going to happen.\n\nNearly every property in the Inventory namespace you could make an argument \"my EEPROM doesn't contain this data\"."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Cool. Clearly Myung is, or this patch wouldn't need to exist? Redfish differentiates them, so I'm stuck where I can either:\n> \n> No... the change is to make it so that 0 is valid data.\n> \n> > It's used for debugging if a link didn't come up, or if a link downtrained to a lower speed/width. That's why this interface was implemented in the first place.\n> \n> All of these cases are 0.\n\n\nfrom what got checked in\n```\n\"Deafult value of\n maxint is to accommodate the situation where the value of this\n property is not known due to some unknown reason, like hardware\n failure or link down.\"\n```\n          \nAccording to that, the value for link down is MAXINT, not zero.  Am I misreading that?  That's basically the crux of the comment I made on the PDI review.  I suspect if \"link down == 0 lanes\" gets put in, and the backends get updated (and this commit gets changed to actually handle zero as a redfish status of disabled), then I think we're good.\n\nIt's imperfect because we still miss out on \"This isn't supported on this platform\" but I'm happy to kick that can down the road forever, at least for what's there we can build a correct Redfish API.\n\n> \n> > The distinction between \"lane not in use\" and \"not supported on this platform\" is arguably more important than \"Had an internal error\". I just bring it up for completeness.\n> \n> Aren't these implemented as 0 and maxint represent respectively with the current interface definition?\n\nNot so far as I'm reading in the description.  I see no mention of 0 being a special case anywhere.\n\n> \n> > As in, today we propose breaking out this one property, tomorrow we ask to separate every property on dbus? I really don't think that is going to happen.\n> \n> Nearly every property in the Inventory namespace you could make an argument \"my EEPROM doesn't contain this data\".\n\nsure, and in those cases, we omit the data from the Redfish schema, so the user-facing result looks right (sometimes by breaking the documentation in PDI by abusing empty string).\n\nIf we're going with 0 == lane not used, maxint == data unavailable, lets get PDI updated, and that should be an improvement to this without having to open the every interface is optional conversation."
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> According to that, the value for link down is MAXINT, not zero. Am I misreading that? That's basically the crux of the comment I made on the PDI review.\n\nGot it.  Let's go ahead and adjust the wording there.\n\nLink down should be \"0 lanes in use\".\n\nI guess I was just so excited that someone finally took care of that commit after 2 years that I didn't read too deeply on all the words.\n\n> sure, and in those cases, we omit the data from the Redfish schema, so the user-facing result looks right (sometimes by breaking the documentation in PDI by abusing empty string).\n\nYou have the same problem though.  Is \"\" at a dbus property level due to:\n- The eeprom field is empty.\n- The eeprom field is missing.\n- The eeprom field has a bad CRC.\n\n> If we're going with 0 == lane not used, maxint == data unavailable, lets get PDI updated, and that should be an improvement to this without having to open the every interface is optional conversation.\n\n:thumbsup:"
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "No problem, I get it.  Myung, does the above conversation make sense to you, and can you put up a new patchset to that effect in PDI?"
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "I submitted a PDI description update  - https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/70056"
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "line": 485,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 20,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "19614de068a73bae7c04d210187a0131c92dc83c",
            "parents": [
                "2ecde74fa187366dc4ed628e61a88015cdbeb769"
            ],
            "ref": "refs/changes/08/70008/2",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1717796552,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "= null would be what redfish recommends for supported but unavailable parameters."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Still an open that needs to be resolved.  I suspect this can be fixed then this can merge."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "I am good with null.\n\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.20.0.html\n\"9.5 Common data types\n...\nnull value, which the service uses when it is unable to determine the property's value due to an error or other temporary condition\"\n\nIf a service doesn't support this, they also get null, but we have that problem elsewhere. Don't support the manufacturer on the CPU, it is an empty string.\n\nThis was discussed on https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/53650/7/yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml \n\nWe almost need these split into more optional interfaces.. but I feel this commit isn't the place"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We almost need these split into more optional interfaces.\n\nPatrick seems against that for PDI based interfaces, but I haven't really seen a generic way to differentiate \"not currently available\" from \"not supported\" in PDI.\n\nEM just omits properties if they're not supported, which arguably breaks the idea of a hardened DBus interface, but in the way bmcweb reads dbus, does seem to solve the problem."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is a long way of saying \"Yes, I agree, this commit isn't the place\".\n\nLets get an implementation that posts a Null to the property like we do elsewhere, and we can look at things holistically later."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "+1"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "I made it to show null if it is unavailable like\n```\n  \"PCIeInterface\": {\n    \"LanesInUse\": null\n  },\n```"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "Jason,\nCould you review this change?\nThe default value of `lanesInUse` is changed from 0 to maxint (in PDI), and thus this commit is also trying to handle it."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "`peci-pcie` doesn't currently change the value of `LanesInUse`, so it must populate with the PDI default value.  This looks okay to me."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 20,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "8c1d0549d2dc8623d33a2b2c8c472b2c65a9bd2e",
            "parents": [
                "b7f3a82babf87c7279ebc4cb728497ade1b1d00a"
            ],
            "ref": "refs/changes/08/70008/3",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1718054986,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 30,
            "sizeDeletions": 4
        }
    ]
}