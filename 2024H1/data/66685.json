{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Iaad2b1f0e982b480e9fab24005ce8b7c258882c3",
    "number": 66685,
    "subject": "Bypass authentication for requests sent internally",
    "owner": {
        "name": "Arun Thomas Baby",
        "email": "arunthomasb@ami.com",
        "username": "arunthomasbaby"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/66685",
    "hashtags": [],
    "createdOn": 1695283581,
    "lastUpdated": 1709632698,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1695283581,
            "reviewer": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1695283677,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1695283873,
            "reviewer": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "message": "Patch Set 2: Commit message was updated."
        },
        {
            "timestamp": 1695283930,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1695294597,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "mdmii@outlook.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1695309594,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1695310858,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1695310938,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1695391168,
            "reviewer": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "message": "Patch Set 3: Commit message was updated."
        },
        {
            "timestamp": 1695391226,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695391226,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1695391285,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/74421/ : FAILURE"
        },
        {
            "timestamp": 1695395194,
            "reviewer": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1695668761,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1695668861,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1696020096,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1696020132,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1708947434,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1709233541,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1709632698,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Abandoned\n\nThis bug was fixed here: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/69702"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "dc04d0ad6cf05c409665ab63b77bd3f3366acb83",
            "parents": [
                "e1bf8bb6a843a2a53d74d74f410b5fe053c2d222"
            ],
            "ref": "refs/changes/85/66685/1",
            "uploader": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "createdOn": 1695283581,
            "author": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/app.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 25,
            "sizeDeletions": 6
        },
        {
            "number": 2,
            "revision": "b22792972ffbc991d98fc214c56f36572a3ceccd",
            "parents": [
                "e1bf8bb6a843a2a53d74d74f410b5fe053c2d222"
            ],
            "ref": "refs/changes/85/66685/2",
            "uploader": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "createdOn": 1695283873,
            "author": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "Please follow https://cbea.ms/git-commit/ for commit msgs"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "Still not done. From https://cbea.ms/git-commit/\n    Separate subject from body with a blank line\n    Limit the subject line to 50 characters\n    Capitalize the subject line\n    Do not end the subject line with a period\n    Use the imperative mood in the subject line\n    Wrap the body at 72 characters\n    Use the body to explain what and why vs. how"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "you are missing the important question.\n\nwhy\n\n\nI wouldn't have known if I hadn't arrived from the bug report\n\n\nand I'm concerned that this is broken for configureSelf permission response where we filter the output to own resources vs full response admin role permissions.\n\nI'm not sure this is correct for contexts where we filter the response based on configure self care full permission"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "+1. Why do we need this commit in bmcweb?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  If there's anywhere a user has POST permission but not GET permission, that seems like we've incorrectly written our privileges and should be fixed at the source.\n\nHaving a way to completely bypass the auth checks has a potential to cause more CVEs, so we need the reasons it exists documented clearly.\n\nAlso keep in mind, if the user truly doesn't have read permission on the resource, ETag is not using a cryptographically safe hash, so it's possible for an unauthenticated user to reverse it without a lot of effort."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "the footer can not contain empty lines \n\nResolves: openbmc/bmcweb#262\n\nyou should have a paragraph about what you are trying to avoid."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not following how this is avoiding a crash.  Which line was causing a seg fault?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Arun Thomas Baby",
                        "email": "arunthomasb@ami.com",
                        "username": "arunthomasbaby"
                    },
                    "message": "What I observed is, when If-Match header with the value of etag is supplied as request header for a Patch request, its creating a new req for the same URI with GET method to calculate the current etag for the resource.  .When the new req is created internally for GET method , req.session of the Patch request is assigned to the new request and calls app.handle(). Since the req.session is not nil for the new request, validatePrivilege() in router.hpp which will authenticate the incoming request and assign user privilege will cause the bmcweb to crash in the function populateUserInfo(). \n\nFor the new request internally framed for calculating the etag, is it necessary to have authentication again? Since the incoming Patch request is already authenticated, privilges are checked and same req.session is assigned to new req, its an extra overhead to authenticate it again with the same credentials? An user which has the privilege to Patch a resource should have the privilege to Get it since only then the user can verify whether the Patch values are updated correctly. Also since the intension of this Get request is to compute etag from the hash of the response, if there is any lack of privilege this results' in an invalid etag and Patch request ends up as precondition failed which is not intended.\nSo I thought to bypass authentication for the new request and when current req is restarted after etag comparison .\n\nI have raised an issue for this https://github.com/openbmc/bmcweb/issues/262 ."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> What I observed is, when If-Match header with the value of etag is supplied as request header for a Patch request, its creating a new req for the same URI with GET method to calculate the current etag for the resource.  .When the new req is created internally for GET method , req.session of the Patch request is assigned to the new request and calls app.handle(). Since the req.session is not nil for the new request, validatePrivilege() in router.hpp which will authenticate the incoming request and assign user privilege will cause the bmcweb to crash in the function populateUserInfo(). \n\nOn which line?  Looking at populateUserInfo() I see the appropriate nullptr checks that would prevent a crash like this.\n\n> \n> For the new request internally framed for calculating the etag, is it necessary to have authentication again?\n\nAuthentication, no.  The user is already authenticated.  Authorization, yes, we need to make sure that the user can access the GET for the resource they're POSTing to.\n\n> Since the incoming Patch request is already authenticated, privilges are checked and same req.session is assigned to new req, its an extra overhead to authenticate it again with the same credentials? An user which has the privilege to Patch a resource should have the privilege to Get it since only then the user can verify whether the Patch values are updated correctly.\n\n\"should\" doesn't mean \"does\". Unless we have a check to ensure that every user that has GET on a resource also has POST (which, I'm not sure they do in the case of SessionService) we will still need to duplicate the check, otherwise it's a potential CVE.\n\n> Also since the intension of this Get request is to compute etag from the hash of the response, if there is any lack of privilege this results' in an invalid etag and Patch request ends up as precondition failed which is not intended.\n\nThis is intended.  If you don't have access to GET a resource, you shouldn't be allowed to IF-MATCH on the resource, given that the IF-MATCH header would've come from a GET request.\n\n> So I thought to bypass authentication for the new request and when current req is restarted after etag comparison .\n> \n> I have raised an issue for this https://github.com/openbmc/bmcweb/issues/262 ."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "Can you add a \n\"resolves https://github.com/openbmc/bmcweb/issues/262\"\nor \n\"fixes https://github.com/openbmc/bmcweb/issues/262\""
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "need to document the motivation even if the concern is not an issue."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "http/app.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 20,
            "sizeDeletions": 6
        },
        {
            "number": 3,
            "revision": "3286a68db411224ee759fffc6ef5232b2d027dd9",
            "parents": [
                "e1bf8bb6a843a2a53d74d74f410b5fe053c2d222"
            ],
            "ref": "refs/changes/85/66685/3",
            "uploader": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "createdOn": 1695391168,
            "author": {
                "name": "Arun Thomas Baby",
                "email": "arunthomasb@ami.com",
                "username": "arunthomasbaby"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is the part I don't understand.  https://github.com/openbmc/bmcweb/blob/f42e859032d9a28752108b327f02340be4de8de2/include/dbus_privileges.hpp#L43C22-L43C22\n\nShows a nullptr check before accessing members, which should make this not possible in the way you described.  Is something else interacting with this?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This bug was fixed here: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/69702"
                },
                {
                    "file": "http/app.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "Your CI job is gone but I'm pretty sure you need to run clang-format"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 615,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "clang-format"
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "line": 107,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "Bypassing auth seems bypassed in handleIfMatch() -- even also if the client reconnects but sending the previous 'etag` value ??\n\nShould every a new request (including PATCH) even if it has a valid etag should still be validated again?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "http/app.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 22,
            "sizeDeletions": 6
        }
    ]
}