{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ie8263bd76177722acb09c6202d79d6dfa5663590",
    "number": 70090,
    "subject": "WIP: Make PCIe Adapters Unique Path",
    "owner": {
        "name": "Myung Bae",
        "email": "myungbae@us.ibm.com",
        "username": "baemyung"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/70090",
    "hashtags": [],
    "createdOn": 1710776435,
    "lastUpdated": 1712015437,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1710776435,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1710776501,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710776501,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1710776573,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/80795/ : FAILURE"
        },
        {
            "timestamp": 1710781323,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1710782607,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710784306,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710793733,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1710793816,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710793816,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1710793883,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/80809/ : FAILURE"
        },
        {
            "timestamp": 1710865499,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1710865609,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710865609,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1710865678,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/80879/ : FAILURE"
        },
        {
            "timestamp": 1710866856,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Uploaded patch set 4: Commit message was updated.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1710866922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710866922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1710868015,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80884/ : SUCCESS"
        },
        {
            "timestamp": 1710931803,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1710944612,
            "reviewer": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "message": "Patch Set 5: Commit message was updated.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1710944722,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710944723,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1710945519,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80956/ : SUCCESS"
        },
        {
            "timestamp": 1710949419,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1711437184,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1711694809,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1712015437,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
            "parents": [
                "c3805d43db7b5f4e11af39582a48aa8255383716"
            ],
            "ref": "refs/changes/90/70090/1",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1710776435,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "There's only one host here, why are unique paths important?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Myung Bae",
                        "email": "myungbae@us.ibm.com",
                        "username": "baemyung"
                    },
                    "message": "I'll rephrase the commit msg.  \nMultiple attached modules may have the devices like with the similar patterns -\n\nFor example :\n- chassis1/io_module1/adapter1\n- chassis2/io_module1/adapter1\n\nIn that case, redfish output via bmcweb will show them as same."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I'll rephrase the commit msg.  \n> Multiple attached modules may have the devices like with the similar patterns -\n> \n> For example :\n> - chassis1/io_module1/adapter1\n> - chassis2/io_module1/adapter1\n\nYou're not making edits to ChassisCollection, where your statement would make more sense, you're making change to ComputerSystemCollection, which there is only currently one.\n\nIf you're planning on taking over the multi-host work, that's a MUCH larger conversation that needs to happen outside this patch.\n\n> \n> In that case, redfish output via bmcweb will show them as same.\n\nPlease come up with an example that actually applies to this patch.  I get the feeling like you're moving toward an overall direction that you haven't really made clear."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be.  bmcweb should not be making that decision."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be. \n\n@ed - I'm a bit puzzled by your mention of \"complex systems\" here, as I perceive this as more of a general issue concerning how we populate redfish resources, particularly those not directly associated with the chassis, even in relatively straightforward systems.\n\nFor instance, let's consider two distinct dbus objects:\n\n- slot1[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n- slot2[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n\nEven though these objects are located within the same chassis, they aren't recognized as unique redfish resources according to the current logic of bmcweb. This is because bmcweb only takes into account the leaf node in the path (adapter1) when populating the redfish resource.\n\n> bmcweb should not be making that decision.\n\nbmcweb serves as the bridge translating the dbus data to redfish right ? In the scenario described, both dbus objects appear distinct and unique, given their differing parents and separate observation by the mapper as two distinct entities. However, bmcweb appears to treat them as identical, generating a single redfish resource due to its consideration solely of the leaf node in the path. Might it be beneficial for bmcweb to employ more comprehensive logic in discerning the uniqueness of dbus objects? I find myself questioning the appropriateness of bmcweb imposing this requirement on other applications. If indeed this is a requisite being enforced on applications, would it not be prudent for it to be formally documented?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'd like to note that this patchset was provided with 4 sentences of description, no links to the mailing list or discord discussions.  Manojs comment above is significantly more content about WHY we want to do this than exists than was pushed in the patchset.\n\n> > This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be. \n> \n> @ed - I'm a bit puzzled by your mention of \"complex systems\" here, as I perceive this as more of a general issue concerning how we populate redfish resources, particularly those not directly associated with the chassis, even in relatively straightforward systems.\n\nThis patchset still appears to have nothing to do with chassis.  I'm not sure why people keep mentioning it.  Can someone please explain?\n\n> \n> For instance, let's consider two distinct dbus objects:\n> \n> - slot1[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n> - slot2[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n> \n> Even though these objects are located within the same chassis, they aren't recognized as unique redfish resources according to the current logic of bmcweb. \n> This is because bmcweb only takes into account the leaf node in the path (adapter1) when populating the redfish resource.\n> \n> > bmcweb should not be making that decision.\n\nbmcweb shouldn't be making which decision, to use the leaf node?  With respect, that was a decision made long ago, in the early days of bmcweb using dbus, and is kind of a core decision that isn't something we can lightly just change without significant breakage.  Basically every URL is built that way (take note of all the collection helper functions that do the exact same thing).  Sure, that's a discussion we can reopen if you like, but that needs to be a holistic approach to the dbus_path -> url conversions, not a single patch claiming to fix a \"bug\" in one endpoint (for which I don't really see the bug).  The whole point of using the leaf is that the services themselves are in control of what URL the user sees, not bmcweb.  If they choose to put forward two copies of adapter1, knowing that it's a url conflict to do so, that's their business.  On the correlary, if they know there's only one host, they're free to pick simpler names.\n\nIt would be trivial to get the same result you're looking for by just renaming the leaf node of the adapter of the node in question to something like /xyz/openbmc_project/inventory/system/pcieslot0_pcie_card0, with no bmcweb changes.  Why was that not considered?\n\nMy main concern with patchsets like this is for simple systems, how would they get the simple behavior?  And how would we retain the old URLs in that case?  I don't see any of that handled in code, and to a user\n\n\"/redfish/v1/Systems/system/PCIeDevices/chassis_pcieslot1_pcie_card1\"\n\nis a significantly more complex of a url when compared to.\n\n\"/redfish/v1/Systems/system/PCIeDevices/adapter1\"\n\n(those are the examples taken from the commit message).\n\n> \n> bmcweb serves as the bridge translating the dbus data to redfish right ? In the scenario described, both dbus objects appear distinct and unique,\n\nLets be clear here, one of the requirements that bmcweb put on DBus is to provide unique leaf nodes for resources turned into Redfish entries.  This is the same thing for every part of Redfish.  If you did this same thing for sensors (putting a thermal and power sensor with the same name), you'd hit the same \"bug\".  Please note that IPMI does the same thing, and would hit the same \"bug\".\n\n> given their differing parents and separate observation by the mapper as two distinct entities. However, bmcweb appears to treat them as identical, generating a single redfish resource due to its consideration solely of the leaf node in the path. Might it be beneficial for bmcweb to employ more comprehensive logic in discerning the uniqueness of dbus objects?\n\nI don't know, but if we're asking this as a question, we shouldn't be pushing this as a patchset, certainly not a patchset to a single entry, without some attempt to identify the places we do this.\n\n> I find myself questioning the appropriateness of bmcweb imposing this requirement on other applications.\n\nI'm not sure what \"appropriateness\" means, but this is certainly a discussion we can have.  \"Appropriateness\" is determined by those that review and maintain code, and I don't find it appropriate to completely break a fundamental part of how we handle Redfish without at least a discussion of what we're trying to solve, and how we're going to solve it.\n\n> If indeed this is a requisite being enforced on applications, would it not be prudent for it to be formally documented?\n\nFeel free to formally document it;  Documentation has not been something that most people have put a lot of effort into, considering it's trivial to read the code to see how DBus paths are turned into URLs.\n\n\n\nFWIW, this was also voted on by the TOF in https://github.com/openbmc/technical-oversight-forum/issues/18, that we would use associations for denoting connections between objects, not path hierarchy.  This patch seems to ignore that decision, and uses path hierarchy anyway."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> I'd like to note that this patchset was provided with 4 sentences of description, no links to the mailing list or discord discussions.  Manojs comment above is significantly more content about WHY we want to do this than exists than was pushed in the patchset.\n> \n> > > This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be. \n> > \n> > @ed - I'm a bit puzzled by your mention of \"complex systems\" here, as I perceive this as more of a general issue concerning how we populate redfish resources, particularly those not directly associated with the chassis, even in relatively straightforward systems.\n> \n> This patchset still appears to have nothing to do with chassis.  I'm not sure why people keep mentioning it.  Can someone please explain?\n\nI felt author of this patch-set was explaining a scenario where there are two dbus objects with same leaf node but under two different chassis, and I continued upon that assuming that , it is what made you feel this use-case as \"complex systems\". But yeah even i feel that its not really relevant to this discussion. \n\n> \n> > \n> > For instance, let's consider two distinct dbus objects:\n> > \n> > - slot1[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n> > - slot2[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n> > \n> > Even though these objects are located within the same chassis, they aren't recognized as unique redfish resources according to the current logic of bmcweb. \n> > This is because bmcweb only takes into account the leaf node in the path (adapter1) when populating the redfish resource.\n> > \n> > > bmcweb should not be making that decision.\n> \n> bmcweb shouldn't be making which decision, to use the leaf node?  With respect, that was a decision made long ago, in the early days of bmcweb using dbus, and is kind of a core decision that isn't something we can lightly just change without significant breakage.  Basically every URL is built that way (take note of all the collection helper functions that do the exact same thing).  Sure, that's a discussion we can reopen if you like, but that needs to be a holistic approach to the dbus_path -> url conversions, not a single patch claiming to fix a \"bug\" in one endpoint (for which I don't really see the bug).  The whole point of using the leaf is that the services themselves are in control of what URL the user sees, not bmcweb.  If they choose to put forward two copies of adapter1, knowing that it's a url conflict to do so, that's their business.  On the correlary, if they know there's only one host, they're free to pick simpler names.\n> \n\nThanks for the explanation, I was not aware about this being the design point on which bmcweb was built.\n\n> It would be trivial to get the same result you're looking for by just renaming the leaf node of the adapter of the node in question to something like /xyz/openbmc_project/inventory/system/pcieslot0_pcie_card0, with no bmcweb changes.  Why was that not considered?\n> \n\nWe are open to considering it. PLDM, which offers enhanced specifications compared to IPMI, enables entities to be represented in terms of platform descriptor records. Within PLDM, there exists a specific type of record called the Entity Association PDR, which illustrates parent-child relationships across entities. Unaware of this aspect initially, we attempted to model it using path hierarchy while also establishing associations as required. We will review our PLDM designs to find a way to transform these entity association PDRs into flat objects with associations rather than constructing path hierarchies.\n\n> My main concern with patchsets like this is for simple systems, how would they get the simple behavior?  And how would we retain the old URLs in that case?  I don't see any of that handled in code, and to a user\n> \n> \"/redfish/v1/Systems/system/PCIeDevices/chassis_pcieslot1_pcie_card1\"\n> \n> is a significantly more complex of a url when compared to.\n> \n> \"/redfish/v1/Systems/system/PCIeDevices/adapter1\"\n> \n> (those are the examples taken from the commit message).\n> \n> > \n> > bmcweb serves as the bridge translating the dbus data to redfish right ? In the scenario described, both dbus objects appear distinct and unique,\n> \n> Lets be clear here, one of the requirements that bmcweb put on DBus is to provide unique leaf nodes for resources turned into Redfish entries.  This is the same thing for every part of Redfish.  If you did this same thing for sensors (putting a thermal and power sensor with the same name), you'd hit the same \"bug\".  Please note that IPMI does the same thing, and would hit the same \"bug\".\n> \n> > given their differing parents and separate observation by the mapper as two distinct entities. However, bmcweb appears to treat them as identical, generating a single redfish resource due to its consideration solely of the leaf node in the path. Might it be beneficial for bmcweb to employ more comprehensive logic in discerning the uniqueness of dbus objects?\n> \n> I don't know, but if we're asking this as a question, we shouldn't be pushing this as a patchset, certainly not a patchset to a single entry, without some attempt to identify the places we do this.\n> \nI agree , this would be much bigger discussion.\n\n> > I find myself questioning the appropriateness of bmcweb imposing this requirement on other applications.\n> \n> I'm not sure what \"appropriateness\" means, but this is certainly a discussion we can have.  \"Appropriateness\" is determined by those that review and maintain code, and I don't find it appropriate to completely break a fundamental part of how we handle Redfish without at least a discussion of what we're trying to solve, and how we're going to solve it.\n> \n> > If indeed this is a requisite being enforced on applications, would it not be prudent for it to be formally documented?\n> \n> Feel free to formally document it;  Documentation has not been something that most people have put a lot of effort into, considering it's trivial to read the code to see how DBus paths are turned into URLs.\n> \n\nCertainly, I'm currently developing a patch to formally document this. I strongly believe that design constraints affecting external applications, such as this one, shouldn't be merely buried within the codebase. Since this constraint isn't specific to BMCWeb but rather applies system-wide to all applications, I intend to include this documentation in the openbmc/docs. Could you suggest the optimal location for it?\n\n> \n> \n> FWIW, this was also voted on by the TOF in https://github.com/openbmc/technical-oversight-forum/issues/18, that we would use associations for denoting connections between objects, not path hierarchy.  This patch seems to ignore that decision, and uses path hierarchy anyway.\n\nYes, I do remember this TOF issue. But I feel some how this was not well documented since its a byproduct of that discussion."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> \n> Yes, I do remember this TOF issue. But I feel some how this was not well documented since its a byproduct of that discussion.\n\nThe TOF issue was documented, there are designs in the docs folder that are merged;  What more documentation were you looking for?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> > \n> > Yes, I do remember this TOF issue. But I feel some how this was not well documented since its a byproduct of that discussion.\n> \n> The TOF issue was documented, there are designs in the docs folder that are merged;  What more documentation were you looking for?\n\nI did look at the physical-topology document stated in the TOF issue, but I could not find it. I am specifically looking for something that states along the lines of  \"any dbus application hosting inventory should have unique leaf nodes in their dbus path - without that, the inventory would not be published in redfish since bmcweb was designed to only identify resources purely based on leaf nodes\", could you point me to any existing document that states this requirement ?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 51,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/include/utils/pcie_util.hpp",
                    "type": "MODIFIED",
                    "insertions": 85,
                    "deletions": -10
                }
            ],
            "sizeInsertions": 137,
            "sizeDeletions": 13
        },
        {
            "number": 2,
            "revision": "bb7472e0d0cadf6731e079d0fb8fd9257593b473",
            "parents": [
                "c3805d43db7b5f4e11af39582a48aa8255383716"
            ],
            "ref": "refs/changes/90/70090/2",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1710793733,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/include/utils/pcie_util.hpp",
                    "type": "MODIFIED",
                    "insertions": 83,
                    "deletions": -10
                }
            ],
            "sizeInsertions": 140,
            "sizeDeletions": 13
        },
        {
            "number": 3,
            "revision": "6a16d3a9e653f66c2fb0c7159689c1778ea1c0c5",
            "parents": [
                "b2896149c39967dd9d1ee79357bdc53537cfabd7"
            ],
            "ref": "refs/changes/90/70090/3",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1710865499,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/include/utils/pcie_util.hpp",
                    "type": "MODIFIED",
                    "insertions": 83,
                    "deletions": -10
                }
            ],
            "sizeInsertions": 139,
            "sizeDeletions": 13
        },
        {
            "number": 4,
            "revision": "f53ca0f0ef9d89cdc2402caec47e0adc3102b14c",
            "parents": [
                "b2896149c39967dd9d1ee79357bdc53537cfabd7"
            ],
            "ref": "refs/changes/90/70090/4",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1710866856,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/include/utils/pcie_util.hpp",
                    "type": "MODIFIED",
                    "insertions": 83,
                    "deletions": -10
                }
            ],
            "sizeInsertions": 138,
            "sizeDeletions": 13
        },
        {
            "number": 5,
            "revision": "3be24ea1d7a37a3acdf22c7b8f5c8aebbd7cf473",
            "parents": [
                "b2896149c39967dd9d1ee79357bdc53537cfabd7"
            ],
            "ref": "refs/changes/90/70090/5",
            "uploader": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "createdOn": 1710944612,
            "author": {
                "name": "Myung Bae",
                "email": "myungbae@us.ibm.com",
                "username": "baemyung"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/pcie.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/include/utils/pcie_util.hpp",
                    "type": "MODIFIED",
                    "insertions": 83,
                    "deletions": -10
                }
            ],
            "sizeInsertions": 138,
            "sizeDeletions": 13
        }
    ]
}