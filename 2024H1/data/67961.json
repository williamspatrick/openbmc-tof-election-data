{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I3d725b9d77bea22e2e8860e01ee0dfc971789008",
    "number": 67961,
    "subject": "http_client:  fix for broken connection",
    "owner": {
        "name": "Abhilash Raju",
        "email": "abhilash.kollam@gmail.com",
        "username": "abhilashraju"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/67961",
    "hashtags": [],
    "createdOn": 1701340272,
    "lastUpdated": 1704779463,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1701340272,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1701340335,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701340335,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1701341926,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76673/ : SUCCESS"
        },
        {
            "timestamp": 1701368277,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(5 comments)"
        },
        {
            "timestamp": 1701368687,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1701368762,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1701422396,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1701455475,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1701500978,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1701648136,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1701690330,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701690416,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701690416,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1701691533,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76771/ : SUCCESS"
        },
        {
            "timestamp": 1701692344,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1701715186,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1701796165,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1701798629,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1701842156,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1701842703,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1701842996,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1701969593,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1701970316,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1702271895,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1702276331,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1702521772,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1702527507,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1702577052,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1702578596,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1702613454,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1702671435,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1702875835,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1702928913,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1702929528,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702929548,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1702930240,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1702930251,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Commit message was updated.\n\nCopied Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR **changekind:NO_CODE_CHANGE** OR changekind:TRIVIAL_REBASE OR is:MIN\")\n"
        },
        {
            "timestamp": 1702930329,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702930329,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1702930478,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/77210/ : FAILURE"
        },
        {
            "timestamp": 1702932650,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702940695,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1702941034,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(9 comments)"
        },
        {
            "timestamp": 1702941577,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1702942212,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1702967103,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1703011969,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1703012105,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1703089836,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Ok-To-Test+1"
        },
        {
            "timestamp": 1703090477,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/77253/ : SUCCESS"
        },
        {
            "timestamp": 1704259729,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 6:\n\n(7 comments)"
        },
        {
            "timestamp": 1704305465,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1704305521,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1704344642,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1704402177,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1704431942,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1704474330,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1704698551,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1704727412,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1704728536,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1704743604,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1704745774,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1704745836,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1704757284,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1704779463,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Change has been successfully rebased and submitted as f3cb5df94799e94df37f9e2e6c2fcc473e0cae4a"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "911708464aa6734ab1395caf530a021c29729912",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/61/67961/1",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1701340272,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "typo.  Space."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This looks like it's still WIP.  It comments out TLS support entirely, which I don't see mention of in the commit message?  If this is WIP, please mark it as such."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I was looking into issues like this a while back.  I don't remember where I left them, but you might take a look at the two patches at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56711"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 158,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is already available through the socket.  Do we need to store it?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 158,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 161,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This as lifetime problems now that you've declared conn after sslConn (which is a reference here).  I'm not following why this was changed.  Can you elaborate?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 161,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "It is an Optional stream. We are supposed to emplace a new SSL stream once the TCP object is available. Earlier code tried to reuse both TCP object and SSL stream, which is invalid once the connection is broken. We are supposed to recreate atleast the SSL stream. This patch set recreates both TCP object and SSL stream. That is why the TCP object is a unique_ptr now. So as per the current code the declaration order is correct."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 161,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> It is an Optional stream. We are supposed to emplace a new SSL stream once the TCP object is available.\n\nright, but you've now delcared the TCP socket after the sslConn, which means that on destruction, sslConn will hold a reference to a destroyed object, because conn will be destroyed first.  We've hit this problem many times before.  I realize it's non-obvious."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 161,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I had to change the order to call the makeConnection from the constructor initializer list.  Moved the code to the constructor body now.Hope this is correct now"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 161,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not following why this has an impact.  If the server broke the connection, won't the response code on line 383 fail?\n\nI wonder if on line 381 we need to be checking parser.is_done().  That way if we get a truly truncated response (rather than just the server closing the connection uncleanly, which some servers do)\n\nwe can still hit the error path.\n\nhttps://www.boost.org/doc/libs/1_82_0/libs/beast/doc/html/beast/ref/boost__beast__http__parser/is_done.html\n\nSeem reasonable?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "No. The response code is usually set by the application. But the connection is broken due to TCP keep_alive timeout. \nThis is happening at TCP layer and is done by any intermediate proxies. \nThe server will not set any HTTP response code in this case. It is kind of an abrupt connection termination. \nSince http_client is not waiting by reading the socket, it is not aware of the connection termination. \nThe http_client get to know about the connection failure when it tries to send next event. \nWhich can happen very long time after the connection termination. So the way to know about the broken coonection  is from error code.\nSslstream truncation is the error we usually get in this case."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Right, the response code is set by the application, but if a lower layer fails, the response code won't get transfered, right?\n\n> Since http_client is not waiting by reading the socket.\n\nAh, so maybe that's the issue.  I wonder if we set up a wait type of wait_error, if this would fix the issue?\n\nhttps://live.boost.org/doc/libs/1_83_0/doc/html/boost_asio/reference/basic_stream_socket/async_wait.html\n\nOr should we rearrange the code so that we're always reading, and if we read bytes when we don't expect them, we should just abort?\n\nI do still think we should check that the parser finished in this code, but maybe that doesn't matter."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Yes, we can use async wait. But it makes code a bit complicated I guess. The eventing semantics do not expect to wait for anything from the server before sending an event. \nIn my opinion, we can handle the error reactively as we do now. It is just that we are reusing the SSL stream improperly and escaping some error conditions. Fixing those will give completeness to the current solution I guess."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Yes, we can use async wait. But it makes code a bit complicated I guess.\n\nSure, but it makes it correct I think?  I'd rather have complicated correct code than simple incorrect code.  Ideally it's simple correct code, but given that we need to monitor the connection at all times, I don't know if we can avoid the complexity here.\n\n> The eventing semantics do not expect to wait for anything from the server before sending an event. \n\nI have no idea what this means.  Can you rephrase?\n\n> In my opinion, we can handle the error reactively as we do now. It is just that we are reusing the SSL stream improperly and escaping some error conditions. Fixing those will give completeness to the current solution I guess.\n\nThe problem I see is that opens us up to possible DOS problems if we maintain connection objects that are \"open\" but at the same time not open."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I have no idea what this means. Can you rephrase?\n\nIn the case of event publishing, the client will send data and then wait for the response. After the response has arrived client need not wait for anything from the server. \nThe steps will repeat when the next event is ready to be sent.\n\n Sure, but it makes it correct I think?\n\nThe server socket will wait for the next data arrival. So it gets notified about the abrupt connection termination. The server socket can do the clean-up actions and close the socket. Is there any DOS threat here?\n\nThe client also gets to know about the closed connection when it tries to send a new event. But we were ignoring the stream truncation error before. Don't know why.\nIn the current code, once the client detects error it will restart the connection. That is only one line change. \nOther parts of the code are still needed irrespective of how we detect the connection termination."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I have no idea what this means. Can you rephrase?\n> \n> In the case of event publishing, the client will send data and then wait for the response. After the response has arrived client need not wait for anything from the server. \n> The steps will repeat when the next event is ready to be sent.\n> \n>  Sure, but it makes it correct I think?\n> \n> The server socket will wait for the next data arrival. So it gets notified about the abrupt connection termination. The server socket can do the clean-up actions and close the socket. Is there any DOS threat here?\n> \n> The client also gets to know about the closed connection when it tries to send a new event. But we were ignoring the stream truncation error before. Don't know why.\n> In the current code, once the client detects error it will restart the connection. That is only one line change. \n> Other parts of the code are still needed irrespective of how we detect the connection termination."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "To be clear about what needs to happen here:\n\n1. the stream_truncated check needs to be put back.  There are webservers that do not close the TLS connection cleanly, hence why it's not directly treated as an error.\n\n2. Add a check for parser->is_done() on line 381.  This will be able to determine if a connection dropped before we received a response."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "If the server is closed the connection(whether it is clean or unclean), why are we not retrying? An intentional disconnect happens through an unsubscribe call, right? In all other cases, we should retry according to the retry policy. Am I reading the requirement correctly here?\n\nWhy don't we add the is_done check after 363?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> If the server is closed the connection(whether it is clean or unclean), why are we not retrying?\n\nBecause a number of webservers do not close the connection uncleanly.  Also, if the server closes the connection cleanly, that is allowed.\n\n> An intentional disconnect happens through an unsubscribe call, right?\n\nWhat \"unsubscribe\" call are you referring to?  The Redfish one?  No, I don't believe there's any connection between an EventDestination being deleted and the connections being dropped.\n\n> In all other cases, we should retry according to the retry policy. Am I reading the requirement correctly here?\n> \n> Why don't we add the is_done check after 363?\n\nSure, I suspect adding it on line 363 (before checking for connection errors) would have the same result, I was just thinking that the logging included on connection errors would be good to retain."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 366,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You've completely disabled SSL?  This looks like it's still WIP?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "my mistake. Copy-paste error from downstream.  Ssl is still used, but the context may not have all details. That is why the error is not shown up in my test"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "All good.  Let me know when you've fixed your patchset."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -35
                }
            ],
            "sizeInsertions": 92,
            "sizeDeletions": 35
        },
        {
            "number": 2,
            "revision": "9df160ca1f3f168e5edc19ff9398fa75045ea18f",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/61/67961/2",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1701690330,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Before I review this further, please review my attempted fixes, which rely on async_wait, and introducing the idea of a channel between the client and its connections."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I have gone through the https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56711.\nIt is an old commit and a WIP. The main difference is the usage of channels to enable async reading of event requests and monitoring connection termination in idle time. However, the change set does not address the SSL stream reuse issue. Which is one of the reasons for reconnecting did not work well."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I have gone through the https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56711.\n> It is an old commit and a WIP. The main difference is the usage of channels to enable async reading of event requests and monitoring connection termination in idle time. However, the change set does not address the SSL stream reuse issue. \n\nHow so?  Connections are now tied to the ConnectionInfo object, and not recreated.\n\n> Which is one of the reasons for reconnecting did not work well."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Yes, the connection is tied to connection info which is the problem. The SSL stream is created in the constructor of connection info. Which will never be called again once the connection is broken. It simply tries to reattempt from the resolve state. But the SSL stream is still old truncated stream only."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Sunitha Harish",
                        "email": "sunithaharish04@gmail.com",
                        "username": "sunharis"
                    },
                    "message": "Code looks good to me - needs rework on the outstanding comments. This solves the broken connection problem when there are network glitch on the listener & bmc. This commit re-established the connection and the next events are flowing fine."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This commit re-established the connection and the next events are flowing fine.\n\nDid you test this?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Sunitha Harish",
                        "email": "sunithaharish04@gmail.com",
                        "username": "sunharis"
                    },
                    "message": "Yes Ed. Tested good."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How did you test?  Is it something we can get into automated testing, or at least have something that others can test?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "This is manual functional testing. To test, we need a server that subscribes to the redfish event. The server should have keep_alive enabled. Then you should let the serve to have keep_alive time out happen. It usually takes 3 hr. \nYou can also try some testing by killing the server process abruptly."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sorry, I wasn't clear, I was asking how Sunitha tested this change."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I've made the changes I asked for.  Please take a look and see if they work for you."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "changes look fine to me. I agree, I could have tried the move assignment of the TCP socket before going for unique_ptr. \nTested the parser status error path. That seems to be working fine for initial testing. Did not try the long waiting keep_alive test. It should work I guess."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I was commenting on her behalf."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Cool.  Looking forward to hearing what she has to say."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I hope you are clear about the problem. Since we are creating a new stream stream the issue is solved."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Sunitha Harish",
                        "email": "sunithaharish04@gmail.com",
                        "username": "sunharis"
                    },
                    "message": "I tested it with the Redfish event listener (server) and the BMC (client) sitting across the labs, and kept the connection idle for more than 2.5 hours (to cross the default keep alive timeout & associated probes). \nWithout this change, the next event from the BMC was not read at the server - I saw the server socket was gone away and all retries to send the event from the BMC times out.\nWith this change, the server was able to get the events successfully. New sockets were seen to confirm the channel between the client and server was setup a fresh."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Thanks Sunitha."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sounds like this is resolved.  If it isn't, feel free to reopen."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why does this need to be a unique ptr?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "can we reuse the same socket object for establishing a new connection? Even if it works is it the right thing to do? I did not see any boost documentation recommending such a reuse."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> can we reuse the same socket object for establishing a new connection?\n\nGenerally I would recommend completely destroying the ConnectionInfo object at a higher level and constructing a new one.\n\n> Even if it works is it the right thing to do? I did not see any boost documentation recommending such a reuse.\n\nWe really shouldn't be reusing any of these structures, including the resolver."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "This required a complete rewriting of http_client. To recreate connection info we should let the connection pool know about the terminated connections. Don't know if we can keep the wait-and-retry logic anymore, as there is no point in starting from the resolve state. \nThe current change set is aimed at fixing the issue with a smaller number of modifications."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Considering the changes required, what is your take on this patch set?\nShould we write a brand new http_client addressing all issues? \nAlso, there is the requirement to store all events that are successfully sent for later retrieval. This will help in analyzing field issues. What is your take on this feature?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This required a complete rewriting of http_client. \n\nI suspect it's not a complete rewrite, just some minor changes to how connections are constructed and selected.\n\n> To recreate connection info we should let the connection pool know about the terminated connections.\n\nRight, which seems doable.  We can just register the weak_ptr, and if they get destroyed, the connections are gone.\n\n> as there is no point in starting from the resolve state.\n\nyes, there is.  Fault tolerant and load balanced systems will need to be re-resolved if there is a failure.\n\n\n> Also, there is the requirement to store all events that are successfully sent for later retrieval. \n\nWhy?  I've never heard this requirement.  Lets take that up in its own design document, outside of trying to fix this bug."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If you want this to be able to be destroyed and recreated, you want std::optional, not std::unique_ptr."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Why? I've never heard of this requirement. Lets take that up in its own design document, outside of trying to fix this bug.\n\nThis is one requirement that popped up during some recent field issues. We did not have enough data to troubleshoot the issue. Having history of past successfully sent event would be of much help here. I was just giving a heads up for it.Just wanted to know if it is ok to implement such a feature in http_client"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "But optional is never intended for lifetime management right? Here we need to recreate the connection by destroying the old one. Whereas optional is designed for the detection of the presence or absence of data."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Sunitha Harish",
                        "email": "sunithaharish04@gmail.com",
                        "username": "sunharis"
                    },
                    "message": "Yes.\nLogging the events sent from BMC would be a good debug data, to investigate issues when they are lost in the network (or a listener issue). We will know what is the last event sent to which destination, its data & timestamps etc."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> But optional is never intended for lifetime management right?\n\nThat's not quite right.  std::optional just puts the object within the lifetime of the parent, rather than creating a malloced thing.  Given we never need to transfer ownership of the struct, optional is the right thing here.\n\n> Here we need to recreate the connection by destroying the old one. Whereas optional is designed for the detection of the presence or absence of data.\n\nfunctionally a unique_ptr can also have an absence of data.  unique_ptr can be nullptr."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This patchset is not the place to discuss new unrelated features."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Sunitha Harish",
                        "email": "sunithaharish04@gmail.com",
                        "username": "sunharis"
                    },
                    "message": "Sure"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Are you saying that use Optional, create a stack object, and move it to the member optional variable? Don't know how it benefits, but I can try."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "std::optional was not required in the end."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I suspect this doesn't need to return the socket itself, it can just set it directly, right?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Since unique_ptr is a move-only type it does not make much difference for performance. It is just that I tend to write no side effect functions which is more readable to me. I am ok to change as you suggest. I agree that I am making a side effect here by storing the SSL stream object which is against my taste."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I've resolved this.  Please take a look."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Initially, I was a bit skeptical about the move assignment. Since it worked in the test I agree to not use unique_ptr."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 625,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You've passed sslCtx by rvalue reference, but then you simply dereference it, instead of doing any sort of move.  Please pick one or the other and be consistent (either use move semantics or copy semantics)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 625,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "SSL context is move only type I guess. So it must be using move implicitly. Anyway, I will call std::move explicitly."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 625,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 634,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "please don't use auto in this way.  It's non obvious what the type is."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 634,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "+1"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 634,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 641,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we deduplicate this with line 637?  Just declare sslContext on line 631, and there's no need to change this."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 641,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "+1"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 641,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "we should not create a connection object if SSL context creation fails."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 641,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Refactored the code. So no need for this line now"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It would've helped a lot if this refactoring (breaking out the constructor logic into its own method) was done in its own commit.  As-is, it's difficult to see what logic changes there were.  Not sure it's worth doing now, but oh well."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I would like to refactor the entire http_client code. Ideally, we should take out the SSL context creation call itself from the constructor and take it as a constructing argument instead. We need not mix context creation failure with the wait-retry path."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We need not mix context creation failure with the wait-retry path.\n\nI'm not sure what this means, but probably better to look at code for what you mean."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "you can refer [here](https://github.com/abhilashraju/reactor/blob/main/tests/http_subscriber_test/http_subscriber_test.cpp) for my view on the subscriber API \n\nSSL context has nothing to do with connection establishment. It is better to take it out from the http_client code. \nI believe we can rector the http_client code. I have already done an implementation. \nSee [http_client](https://github.com/abhilashraju/reactor/blob/main/include/http/http_client.hpp)\n[http_clientpool](https://github.com/abhilashraju/reactor/blob/main/include/http/http_client_pool.hpp) and [http_subscriber](https://github.com/abhilashraju/reactor/blob/main/include/http/http_subscriber.hpp) for datails."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> you can refer [here](https://github.com/abhilashraju/reactor/blob/main/tests/http_subscriber_test/http_subscriber_test.cpp) for my view on the subscriber API \n> \n> SSL context has nothing to do with connection establishment. It is better to take it out from the http_client code. \n\nI don't understand the statement above.  SSL context definitely is part of connection establishment.  The flow goes roughly\n\nresolve -> tcp connect -> SSL negotiate -> Start connection loop.\n\n> I believe we can rector the http_client code. I have already done an implementation. \n> See [http_client](https://github.com/abhilashraju/reactor/blob/main/include/http/http_client.hpp)\n\nIf it's something you want to push forward, please push it into a gerrit review as a WIP\n\n\n> [http_clientpool](https://github.com/abhilashraju/reactor/blob/main/include/http/http_client_pool.hpp) and [http_subscriber](https://github.com/abhilashraju/reactor/blob/main/include/http/http_subscriber.hpp) for datails."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I don't understand the statement above. SSL context definitely is part of connection establishment. The flow goes roughly\n\nI mean context creation. in this \"seqence resolve -> tcp connect -> SSL negotiate -> Start connection loop\" there is no context creation. \nSo http_client can accept context created from out side as constructor argument. \nWe need not worry about the context creation failure from with in the http_client code."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I don't understand the statement above. SSL context definitely is part of connection establishment. The flow goes roughly\n> \n> I mean context creation. in this \"seqence resolve -> tcp connect -> SSL negotiate -> Start connection loop\" there is no context creation. \n> So http_client can accept context created from out side as constructor argument. \n\nI don't think we can make it a constructor argument, because we need a new context every time a new connection restarts, right?\n\n\n> We need not worry about the context creation failure from with in the http_client code.\n\nIf we changed the model so that connection objects can't be reused, then yes, I think your model would work."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 653,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Yes, I agree with the current implementation. My suggestion was for the future refactoring."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 67,
                    "deletions": -33
                }
            ],
            "sizeInsertions": 107,
            "sizeDeletions": 33
        },
        {
            "number": 3,
            "revision": "e4c99aa20caa1ac7eec51173d73b8a52496da1f6",
            "parents": [
                "75e8e218cbf9539144ee8f6aea01e158d0a9e190"
            ],
            "ref": "refs/changes/61/67961/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1702929528,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 77,
            "sizeDeletions": 11
        },
        {
            "number": 4,
            "revision": "40fc84ea45123253ce07ea31e0714e6501c0681e",
            "parents": [
                "75e8e218cbf9539144ee8f6aea01e158d0a9e190"
            ],
            "ref": "refs/changes/61/67961/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1702930251,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 77,
            "sizeDeletions": 11
        },
        {
            "number": 5,
            "revision": "a672598277823fbfc729c460a681ae2e6821c7e1",
            "parents": [
                "75e8e218cbf9539144ee8f6aea01e158d0a9e190"
            ],
            "ref": "refs/changes/61/67961/5",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1702932650,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 78,
            "sizeDeletions": 11
        },
        {
            "number": 6,
            "revision": "b714df99e4713498a48c13931ad89f04c4730e41",
            "parents": [
                "75e8e218cbf9539144ee8f6aea01e158d0a9e190"
            ],
            "ref": "refs/changes/61/67961/6",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1702940695,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "Can we test this latest patchset? \n@Abhilash can you help?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets make sure everyone is ok with the changes I've made before we spend a lot of time testing.  it's possible a trivialized a problem, but I think the patchset is right."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Since the move assignment worked in the testing, I am okay with the unique_ptr removal."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I am still not convinced about the stream_truncated case. Is there any possibility for both stream_truncated error and parser->is_done() to be true? If not the simplest fix would be changing line 365 by removing the \"ec != stream_tucated check\"."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Is there any possibility for both stream_truncated error and parser->is_done() to be true\n\nYes.  There are a number of webservers that do not close the TLS stream properly.  That's why this check was in there in the first place.  If you backtrack in the git blame logs, there might be more information in the commit that added it."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "That is my point. This happens only if one side closes the connection. Aren't we supposed to restart the connection in this case? If not what do we do with the pending redfish events for the server?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "we do restart the connection though?\n\n>             state = ConnState::recvFailed;\n            waitAndRetry();\n\n\nThe current pending event from the server is done, right?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "The Current pending event may or may not reach the server. As long as there is no positive ack we should keep trying right? Moreover, there may be other events pending in the queue that require to be sent. So we should keep retrying anyway. To me, a stream truncation error should be considered a broken connection scenario and the retry should happen according to the retry policy.  \nIn the current implementation, if both parser->is_done() and stream truncation error are true, there is the possibility of not sending all pending events including(possibly) the current event."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The Current pending event may or may not reach the server.\n\nIf the parser is done, that means that the server sent a response, which means that the server for SURE received the request, and just chose to drop the connection rather than cleanly closing ssl.\n\n> As long as there is no positive ack we should keep trying right?\n\nGetting a positive return code from the server is a positive ACK.\n\n> Moreover, there may be other events pending in the queue that require to be sent. So we should keep retrying anyway. To me, a stream truncation error should be considered a broken connection scenario and the retry should happen according to the retry policy.  \n\n\nKeep in mind, at one point in time we did not special case stream_truncated, and it caused issues for folks, so unless we have something backing up that what they found is no longer an issue, I'd prefer we keep it.\n\nFWIW, at one point bmcweb itself didn't cleanly close ssl connections (and still doesn't in some cases).\n\n> In the current implementation, if both parser->is_done() and stream truncation error are true, there is the possibility of not sending all pending events including(possibly) the current event.\n\nI'm not following.  if is_done() is set, it means the server got the request, parsed it, did the action, and sent back a 2XX reply.  That certainly means that the server processed the event if it was able to formulate a reply."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "understood. It was my mistake to assume that the pending request queue was held by the connection info class. It was part of the connection pool. So connection pool will take care of sending all requests in the queue eventually."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "don't know why waitAndRetry for ssl context creation failure. Will it succeed next time?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Given that connections can't be destroyed, we don't really have a way to mark a connection as in an error state and reset.\n\nwe would need something like this to have connections \"fail\" and destroy themselves automatically.\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/56711"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 78,
            "sizeDeletions": 11
        },
        {
            "number": 7,
            "revision": "f3cb5df94799e94df37f9e2e6c2fcc473e0cae4a",
            "parents": [
                "a88942019fdd3d8fc366999f7c178f3e1c18b2fe"
            ],
            "ref": "refs/changes/61/67961/7",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1704779463,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 78,
            "sizeDeletions": 11
        }
    ]
}