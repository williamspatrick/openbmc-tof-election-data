{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "I028d7ada80c1ba05ec6f9d12f8f6506202c926f6",
    "number": 71489,
    "subject": "design: error and event logging",
    "owner": {
        "name": "Patrick Williams",
        "email": "patrick@stwcx.xyz",
        "username": "williamspatrick"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/71489",
    "hashtags": [],
    "createdOn": 1715916565,
    "lastUpdated": 1722467008,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1715916565,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1715916590,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1715916590,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1715916611,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/84513/ : SUCCESS"
        },
        {
            "timestamp": 1715916745,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1715919927,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(4 comments)"
        },
        {
            "timestamp": 1715936926,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1715952278,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1715952312,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1715952328,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1715952328,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1715952349,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/84548/ : SUCCESS"
        },
        {
            "timestamp": 1715952761,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1715968105,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2:\n\n(9 comments)"
        },
        {
            "timestamp": 1716165627,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1716187598,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1716207775,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1716208236,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1716215214,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1716215406,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1716215453,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1716215499,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1716215499,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1716215520,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/84648/ : SUCCESS"
        },
        {
            "timestamp": 1716216118,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(9 comments)"
        },
        {
            "timestamp": 1716240683,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(5 comments)"
        },
        {
            "timestamp": 1716299462,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1716314557,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1716324467,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(29 comments)"
        },
        {
            "timestamp": 1716333226,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1716440081,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1716446093,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1716933961,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1716985141,
            "reviewer": {
                "name": "Ramesh Iyyar",
                "email": "rameshi1@in.ibm.com",
                "username": "RameshIyyar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717091919,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(34 comments)"
        },
        {
            "timestamp": 1717091944,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717091979,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717091979,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1717091990,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1717092001,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/85119/ : SUCCESS"
        },
        {
            "timestamp": 1717093978,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717093981,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1717094014,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717094014,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1717094037,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/85120/ : FAILURE"
        },
        {
            "timestamp": 1717094168,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1717094631,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717094674,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717094674,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1717094696,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/85121/ : SUCCESS"
        },
        {
            "timestamp": 1717157946,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717157984,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717157984,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1717158007,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/85179/ : SUCCESS"
        },
        {
            "timestamp": 1719836757,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 8.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1719836779,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1719836779,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1719836800,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/87091/ : SUCCESS"
        },
        {
            "timestamp": 1719836820,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1719837021,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1719837117,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1719837157,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1719868901,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1719898565,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 8:\n\n(5 comments)"
        },
        {
            "timestamp": 1719951760,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1719951764,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 9.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1719951789,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1719951789,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1719951955,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/87203/ : SUCCESS"
        },
        {
            "timestamp": 1719968108,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 9: Code-Review+1"
        },
        {
            "timestamp": 1722461838,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 9: Code-Review+2"
        },
        {
            "timestamp": 1722461844,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 10: Patch Set 9 was rebased\n\nCopied Votes:\n* Code-Review+1, Code-Review+2 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR **changekind:TRIVIAL_REBASE** OR is:MIN\")\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1722461869,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1722461870,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1722461892,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/88977/ : SUCCESS"
        },
        {
            "timestamp": 1722467008,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged\n\n9 is the latest approved patch-set.\nNo files were changed between the latest approved patch-set and the submitted one.\n"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "b73969450cc2c29884cb9aee95b704beebea99d2",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/1",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1715916565,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Rendered markdown: https://github.com/openbmc/docs/blob/b73969450cc2c29884cb9aee95b704beebea99d2/designs/event-logging.md"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Alrighty, that's some thorough analysis (I wish more proposals were like this). I have a request for a clarification at one point.\n\nAn idle thought that doesn't need a large amount of effort put into it (yet) - it looks like we're requiring exceptions? Is there a path available for software that may not? Or are we claiming that exceptions are fundamental here and that all OpenBMC software should enable them?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Let me figure out how to work that into the doc. Exceptions are not required but are typical. You could directly construct the exception types (without throwing them) and call the phosphor-logging API.\n\nThe current sdbusplus server/client bindings do assume use of exceptions though."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "PS2: https://github.com/openbmc/docs/blob/1a924e05135b4e20bc2780c663c7fca72f51355c/designs/event-logging.md"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 269,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "You say we're going to expand `Foo.errors.yaml` ..."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 269,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Will reword. The second one is more correct."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 269,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 274,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "... And then say that `Foo.errors.yaml` will be deprecated. I think you mean something more subtle, but can you try to clean up the description to be less confusing on first pass?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 274,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 517,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "How do you feel about instead describing this in json-schema? I feel my brain would appreciate that rather than nested bullet lists. Maybe I feel it's more of a formalisation than a bulleted list? Anyway, I may be alone on that one (it's not a blocking request)."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 517,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Will look into that."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 517,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Will tackle this in PS3 or later.  Still looking into it.  Wanted to get a revision to address your other concerns ASAP."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 517,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 517,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 868,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 878,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "1a924e05135b4e20bc2780c663c7fca72f51355c",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/2",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1715952278,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Very nice! Overall, it looks good to me and adds some great improvements.\n\nA couple concerns are about the performance of the logs being on D-Bus vs. in the filesystem:\n\nFirst is the start-up performance.  Do we have data on how long it takes to reload 10,000 D-Bus logs?  And could this slow down boot time overall?\n\nSecond is Redfish performance.  Do we know how long it takes for bmcweb to read 10,000 logs from D-Bus when the URL is accessed?  If it's a long time, this may need to be mitigated with something like displaying the first page of logs while loading the remaining logs in the background.\n\nIf there is a performance impact, do we need to consider an alternative to D-Bus for storing event logs?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> First is the start-up performance. Do we have data on how long it takes to reload 10,000 D-Bus logs? And could this slow down boot time overall?\n\nI previously did experiments with increasing the logging daemon to hold 30k events and there was nothing noticeable, except that creating that many events took a _long_ time to write to the NOR flash.  I did not explicitly measure start-up though.\n\nI didn't think it was appropriate for this document, but I have some ideas of alternative ways to store the data in phosphor-logging if that becomes the performance bottleneck.  One idea is to use an sqlite database for holding the events.\n\nThe \"can scale to 10k logs\" is, at this point, an per-integrator option and not a requirement but Meta plans to use something large.\n\n> Second is Redfish performance. Do we know how long it takes for bmcweb to read 10,000 logs from D-Bus when the URL is accessed? If it's a long time, this may need to be mitigated with something like displaying the first page of logs while loading the remaining logs in the background.\n\nI think we have partially the same problem with the rsyslog one (from a purely Redfish perspective), except that we're going directly to a file for it?  If you're asking about the Redfish to phosphor-logging aspects, yes, this DBus activity could be a constraint.  We could add an interface to the `Logging.Manager` DBus interface to \"get all the logs as a file descriptor\", which should mitigate this.  As far as pagination, I'm not positive if this is something Redfish would support anyhow; this sounds like something that the webui might want but not inherent to Redfish.\n\n> If there is a performance impact, do we need to consider an alternative to D-Bus for storing event logs?\n\nI don't foresee a need to stop phosphor-logging from creating DBus objects for these, but there very well could be a need to improve the transfer between bmcweb and phosphor-logging.  Addressed above."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "> I previously did experiments with increasing the logging daemon to hold 30k events and there was nothing noticeable, except that creating that many events took a long time to write to the NOR flash. I did not explicitly measure start-up though.\n\nI see.  My worry is that it would take a comparatively long time to read the data and re-generate all the D-Bus entries on start-up vs. rsyslog that has almost no start-up cost.\n\nIt may just be us, but we're starting to run into issues where D-Bus gets saturated and causes other issues.  So, I'm just thinking through if there may be an alternative to D-Bus as the shared log storage that could solve this.  For example, if we can provide a well-defined filesystem storage format, could consumers like bmcweb directly read from there, and `commit`ed logs would not need to be added to D-Bus?\n\n> As far as pagination, I'm not positive if this is something Redfish would support anyhow; this sounds like something that the webui might want but not inherent to Redfish.\n\nIt doesn't do any pre-loading in the background, but the Redfish log supports pagination and shows only the first 1000 logs by default to provide a quicker response to the user request when there are a lot of logs."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "We allow up to 3K of our logs (the max size 16KB PELs) on our systems and have definitely seen startup timing issues with loading all of these and getting them on d-bus. The original rsyslog design was done the way it was because of these d-bus bottlenecks. I'm not sure what's really been done with this proposed design to address that issue? Is there something more efficient done here? It seems without using the journal we may even be increasing our d-bus traffic?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Is there something more efficient done here? It seems without using the journal we may even be increasing our d-bus traffic?\n\nIf you already have 3K of logs, I don't think this should have any (or it will be net positive) impact.  There is no change to the amount of dbus content and only minor change to the data flowing over it.  (Most of your PELs are already going by a direct path to phosphor-logging)\n\nI've adjusted the document to have a mitigation for people already using rsyslog mechanism.  Optimizing phosphor-logging daemon is certainly on the list of stuff to experiment with, but in my opinion, slightly tangential (since the design now allows the status quo for both existing implementation approaches)."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you please add links to the existing Redfish message registry, and current rules surrounding modifications to the registry:\n\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/include/registries/openbmc_message_registry.readmefirst.md\n\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/include/registries/openbmc.json\n\n\nIn addition, the existing rules on https://github.com/openbmc/bmcweb/blob/master/OEM_SCHEMAS.md#oem-compatibility-and-authority\n\nProbably need to be linked somewhere, because they call out some of the concerns here."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I added the 'readmefirst' link into the Versioning Policy section as that is where it seemed to fit the narrative best.  The existing registry was already linked to.  If you have suggestions on how to better add it to the narrative I can, but it didn't really seem entirely appropriate here.\n\nWhat are the thoughts on the OEM_SCHEMAS work?  I'm having trouble connecting the dots from this section to that document."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  IPMI SEL is by definition not human readable, maybe make it more clear that the OpenBMC SEL is the one that's human readable?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 31,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Adjusted the wording."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 36,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In both these cases you're quoting the output of ipmi tools which are doing the stringification in the tools themselves, not the actual SEL implementation in the bmc.  In terms of the IPMI implementation, the user facing API for these two systems threshold event are identical, and can use whatever string the user chooses.  Note the oracle example is using ipmitool, and would produce the same log event on openbmc.\n\nI understand what you're getting at, but if we need an example at all, lets come up with an actual example that causes compatibility problems in software interfaces."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 36,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can you give me a more concrete example?  All of the events produced by \"facebook openbmc\" are raw strings and not from ipmitool, but I was trying to avoid pointing to that.\n\n> Note the oracle example is using ipmitool, and would produce the same log event on openbmc.\n\nI don't believe this is true about OpenBMC, is it?  Do we really reverse the phosphor-logging event type back into an IPMI standard event that matches what Oracle is doing?  I thought we do a stringification."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "typo: `is a versioned`"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I am not sure if it is an option, Have you considered using [otel logs](https://opentelemetry.io/docs/concepts/signals/logs/ )? This will give better tooling support for analysis and debug tracing."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't know how to connect your question and this section.  I spent about 5 minutes going through the link(s) you provided and eventually got to this:  https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md#example-log-records\n\nThere isn't currently any plan to use OpenTelemetry inside all the BMC applications.  Should this be added to the Alternatives?  I can't really tell what the overlap is between OTEL, this proposal and the existing lg2/systemd-journald support.  Can you give more information on your thoughts here.\n\nThis section here is about current state of the art in Redfish.  Exposing internal error and event reporting through Redfish is the top priority as that is what is being used for general system management.  Is OTEL using another protocol or is there an OTEL-to-Redfish mapping somewhere?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I guess one of the problem this document trying to address is the possibility of better tooling for log and trace analysis. I pointed at the open telemetry because it  has standard format for logs and already some tools are available to help with analysis of it. But it does not work with redfish message registry format. Otel is not used for error reporting( as a response to redfish request). It is used for log, metric and trace collection using open standard for better observability and debugging."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> There isn't currently any plan to use OpenTelemetry inside all the BMC applications.\n\nOtel was discussed a while ago on discord, and currently has POCs for HTTP request logging.  OTEL has recently added text-logging support, so in terms of not having to invent our own logging protocol, and being compatible with standards, it's certainly something we should discuss. With that said, I'm not sure a simple \"just use OTEL\" design alone solves the problems that Redfish message registry solves.\n\n[1] https://github.com/edtanous/bmcweb/tree/otel"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Okay, I have already proposed a [patch](https://lists.openembedded.org/g/openembedded-devel/search?p=recentpostdate/sticky,,opentelemetry,20,2,0,106148537) to open embedded to include opentelemetry recipe.\nMay be this is not the right place to discuss about it. Will do it in discord instead"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 88,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See comment below, I suspect this line can be removed."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 174,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you reword to enumerate what \"complete\" is here.  In terms of user facing behavior, one implements the complete subset of\nPerformance for many entries\nEventing\nCompliant redfish LogCollection support\nMessage registries\n\n\nThe dbus-logging has gaps in eventing and message registry production.\n\nIf we're talking about \"doesn't provide a dbus interface\" we should call that out specifically for each one, but I'm not aware of any user-facing feature that the rsyslog implementation doesn't implement that phosphor-logging does.  I'm sure something exists, but it would be good to have that written down."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 174,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The REDFISH_MESSAGE_ID, I was considering \"incomplete\" because various maintainers have refused to accept code conforming to that design.  It also doesn't work for systems which have enabled the phosphor-logging approach, which is at least all of the IBM systems.\n\nI updated it to say this:\n```\n- There are two different implementations of error logging, neither of which are\n  both complete and fully accepted by maintainers, and do not cover tracing\n  events.\n```"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 178,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we define this?  The only thing \"Redfish aware\" is the fact that these have to map to a Message registry;  As a trivial example, we could take the existing solution and change REDFISH_MESSAGE_ID -> OPENBMC_MESSAGE_ID in the journal logs, and then we'd be done with a lot less effort and thrash, right?\n\nI think defining this line better will help call out the above as not a viable solution."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 178,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I've added this sentence (since I also had similar in the phosphor-logging):\n\n> The approach also does not provide comple-time assurance of appropriate metadata\n  collection, which can lead to producing code being out-of-date with the\n  message registry definitions.\n\nWhat you've proposed might be an alternative (using an OPENBMC_MESSAGE_ID instead of REDFISH_MESSAGE_ID), but this is under the \"Status Quo\" section.  As currently defined, the current approach is Redfish centric (and is even in a document titled \"redfish-logging-in-bmcweb\").  I don't think there is anything incorrect about what I wrote even if we have disagreement on the importance of the issues, right?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 186,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "typo: `do not currently`?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 186,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 187,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems out of scope, or I'm not following why this matters?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 187,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Let me expand the words.  This is part of the \"incomplete approach\" because metadata can be lost today as an error flows from one daemon to another."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 194,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't see anything in the design below that solves this directly.  Presumably the testing requirements for new patches already solves this, but were just enforced inconsistently?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 194,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "https://xkcd.com/927/ ?\n\nI'm not sure what to say here.  Much of the code uses one approach; some of the code uses a different approach.  Those two different approaches are what leads to the different reporting.  Having the same approach, backed by YAML definitions just like our dbus interfaces, should solve this?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 209,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Add: Error version sets must support functional semantic versioning, in that messages are not removed or modified for a given user-facing API."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 209,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Just so I'm aware what do you mean by \"modified\"?  Messages can have new arguments, can't they?\n\nI added: \n\n> - For Redfish, the transformation must comply with the Redfish standard\n> requirements, such as conforming to semantic versioning expectations."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 213,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Logging system must be capable of producing user-facing, DMTF correct, and OCP-compatible messages, such as the platform registry published by DMTF:\nhttps://redfish.dmtf.org/registries/Platform.1.0.1.json"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 213,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think this is a requirement on bmcweb and not the \"logging system\"? \ud83d\ude04\n\nI'll add something.\n\n>     - For Redfish, the transformation should allow mapping internally defined\n>      events to pre-existing Redfish Message Registries for broader\n>      compatibility."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 244,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Add \"existing user facing interfaces should be able to be maintained\"."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 244,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't know what this means.  Can you expand?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 355,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "typo: `will be recorded`"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 355,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 386,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "I like the shorter name.  Also, what does `commit` mean?  Is there a more descriptive name that could be used if we move it to `lg2`?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 386,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The choice of `commit` was already in phosphor-logging and probably comes from IBM internal terminology.  It means \"take this in-memory error object and add it to the permanent record\".  I'm not sure if you have ideas on a better verb."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 386,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Now that I know what it means, `commit` is okay for me. `store` or `persist` are some ideas, but if everyone is already familiar with `commit`, it's probably not worth changing.\n\nSorry, I'm not familiar with the API.  Is it two steps? Log first then commit?  If so, could we make it one step and do something like change `commit` to a flag to determine if it should go to the permanent record?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 386,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You create an object in internal memory and potentially pass it along.  At some point you decide to \"commit\" that event to the record (if you haven't handled it).\n\nI'm going to leave this for now.  Interested in other feedback on the naming."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 397,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets remove the bmcweb should take a hard dependency on phosphor-dbus-interfaces discussion to another place (like the patchset that adds this support).  I think having it here distracts from the overall goal.  If we're adding PDI to bmcweb, someone needs to think about it holistically, not just for one feature."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 397,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why is this such an issue?  I don't know what \"think about it holistically\" means.  What is the stumbling block today?\n\nYou've previously said that \"just the strings\" wasn't a strong enough reason.  There are already client-bindings that have stronger compile-time guarantees than what you get with the boost stuff, which could be leveraged, but obviously need some experimentation.\n\nI can be explicit that this is hidden behind an option?  But, it seems like a good thing to be able to consume the project-wide event registry as part of your typical development flow to me.  What does \"enough features\" to justify this look like?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 409,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Mentioned elsewhere, but I'll put it here as well, To do this without dropping existing phosphor-logging features, PDI needs a consistent mapping for.  MessageId, Severity, Message, and Resolution.  Today the severity and Resolution strings in the phosphor-logging implementation are not tied to a message id or message string, so it would be good if somewhere (it would be fine if it were in code) we enumerated what the solution to that was planned to be."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 409,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "These are covered under the \"YAML format\" section.  Would you prefer it also written somewhere else?  Please let me know the preferred area."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 411,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What is a LoggingEvent?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 411,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done.\n\nToo much Logging (phosphor-logging) vs Log (Redfish) and this one slipped in."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 419,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Else, the log is omitted?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 419,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Added:\n\n> Otherwise, the `Logging.Entry::Message` will be used\n> directly with no further transformation (as is done today)."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 428,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "While I think this is a hard problem (although worth tackling) I'm not really sure what this has to do with the existing EventLog design?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 428,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Because many of the existing and future Redfish events need some way to identify a failing entity?  How do we do this otherwise?\n\nI really don't think identifying parts is something to just omit from the design, considering \"CALLOUT_*\" metadata records are already something baked into the phosphor-logging design and are certainly necessary for servicing a machine."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 429,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets change to \"will omit the message from the log collection\".  Client implementations shouldn't be aware that the backend is DBus when they're looking at Redfish, and directly posting a dbus object path to the client facing API defeats that purpose."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 429,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Today these are arbitrary strings.  An object_path is either equivalent or better.\n\nThere are so many ways that the values of the identifier strings in a Redfish Message can change through a BMC update, that I do not consider them an \"API\".\n\nEmitting _something_ at least tells you in test phases that you're missing the translation.  Emitting _nothing_ means that you think your machine is perfectly fine when it isn't.  This is not an acceptable approach to me."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 557,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If we're generating this code, why generate a template?  Could we instead just generate the args constructor, then you'll get compile failures if an arg is missing in a non-template message, and the code is much easier to read.\n\nUpdateProgress(std::string_view TARGET, int64_t ERRNO, sdbusplus::message::object_path CALLOUT_HARDWARE);\n\nHaving multiple levels of generated code seems like an issue."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 557,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What happens if you have two strings?  How do you know the right one got put in the right positon?\n\n```\nUpdateFailure(\"TARGET\", \"BMC Flash A\", \"ERRNO\", rc, \"CALLOUT_HARDWARE\", bmc_object_path);\nvs\nUpdateFailure(\"BMC Flash A\", rc, bmc_object_path);\n```\n\nI agree the second one is \"easier to read\", simply because there is less to it, but I don't think it is \"easier to review\" for correctness.  I then have to, as a maintainer, go back and read both the definition and expected order to know if the right thing was done.\n\nI'm pretty sure I can get the template-generated static_asserts to be pretty clear as to what went wrong."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 561,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering that all the asio reactor daemons can't throw (because they're being executed from the executor, and don't have a stack to throw through), some alternative will need to exist to this, right?  Or are we planning on moving dbus-sensors and bmcweb over to coroutines before this design gets implemented?  Can we get the intent documented?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 561,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'll add a non-throw example.  I thought I wrote that as a requirement elsewhere, but I'll be clearer."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 573,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ".... please add\n\n\"And require a deprecation strategy that Redfish does not recommend\""
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 573,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't know what this means.  Code could always just stop creating the event (or using a different event name for the same concept).  Isn't it better to be clear that the event is deprecated?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 647,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "typo: `for a developer to`"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 647,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "looks like this is key value pairs. But that is not evident in the argument passing. Is it too verbose to do as below?\n```\n UpdateFailure(m_p(\"TARGET\", \"BMC Flash A\"),m_p(\"ERRNO\", rc), m_p(\"CALLOUT_HARDWARE\", bmc_object_path));\n```\nYou can see the implementation [here](https://godbolt.org/z/rGfMrneW3)"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The old interface did the pairing like this and it was pretty verbose.  The lg2 interface allows 2 or 3 elements (depending on if you're using flags or not) without the wrapper, so this follows the same conventions.\n\nAbove that, once you construct a sub-object (such as a std::pair you described) you can no longer do constexpr analysis of the parameters.  This precludes doing compile time assurance that all the tuples have been provided."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Yeah I agree the verbose part of it. But not sure about the compile time check you are talking about . This code  https://godbolt.org/z/xcsedqTn9 proves to be doing compile time evaluation and static assert on allowed parameter type and total number of parameters needed. This works as long the the arguments are known at compile time. But fails otherwise. Does the method 3 do type check for runtime values for you?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "actually it works with runtime values too https://godbolt.org/z/Ea7nMeT8G"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Your code examples work with types but not values.  You can also do static compile-time checking of c-string/string_view values, as long as they are constexpr, but the moment you pass them to the constructor of pair they lose the constexpr-ness such that you can't work on them anymore.\n\nThis, conceptually, is also how std::format ensures that your format strings are valid at compile-time."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Actually it works for values too. Can't we do whatever compile time check we needed before wrapping it in to pair? As I did in the example above?\nSince we are talking about the API, can we do something like below\n```\nUpdateFailure(1_target << \"BMC Flash A\", 2_errno << rc, 3_call_hard << bmc_object_path);\n```\nNot sure if it is getting complicated. My intention was to be explicit about grouping related params.  Simplest would be \n```\nUpdateFailure({\"TARGET\", \"BMC Flash A\"}, {\"ERRNO\", rc},{\"CALLOUT_HARD\",bmc_object_path});\n```"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 695,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "typo: `syntax has similar`"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 695,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 736,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should be removed, because it's unimportant to the point, while this might be true from reading the code, functionally the version hasn't been required to be correct in code for a very long time, and today arguably serves as a \"this is the version this message was added in\" hint to the reader, rather than an actual version that gets published.  The user-facing API will always publish the event under the latest registry version, so this only appears to be a problem in when reading code, and is arguably just a clean up exercise that hasn't happened yet, because it doesn't really matter.\n\nThis is non-obvious, and not a great C API to readers of the code, but as far as users are concerned, it works."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 736,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not convinced \"it works\" all the time.\n\nWhat happens when a message argument is added?  You are emitting an event with \"0.1.0\" but only exposing in the registry the \"0.4.0\" definition with the new argument."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 740,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you enumerate this better or just remove this sentence?  The standard registries have evolved over time, so comparing a message registry written in 2018 to DMTF registries written in 2024 isn't a fair comparison, and implies that we should just always use a DMTF registry, without implementing anything OpenBMC unique.  If that's the intent, great, but clearly that's not the point of this doc, so calling out this comparison, unless you can show that these messages had an equivalent messages in 2018, is playing monday morning quarterback and a distraction from the overall design.  Obviously for new code we would use the DMTF registries, but old code that existed before those registries should continue to work, and IMO, we should have a path for logging things that maybe aren't consistently used enough for a standard.\n\nHow we want to handle that epoch events of \"DMTF now supports a message that we previously had OEM support for\" is something we can certainly discuss a better opinion on, but I think it would be different from what this doc is trying to accomplish."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 745,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "typo: `replace it with the`"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 745,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 745,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can this come with a guarantee that all client code has been changed to support the new interfaces?  This is a user facing API surface that I don't think we can just change unless we have agreement from the known clients that use it, and even just enumerating all the software that use this interface is difficult, much less getting a breaking change into all of them released.\n\nI really don't think we can break compatibility here."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 748,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I feel like this is missing a sentence on what happens after that.  After that we just break all the implementations that currently work?  I'm not really following why this would be necessary if the new method handles all the same features as the old, wouldn't we just transition the implementation to the new call sites, and verify that we can faithfully implement the new interface?\n\nIs this just out of lack of wanting to put in that effort and testing?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 796,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "I assume these will need to be moved to an Intel downstream vendor addition to the registry?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 796,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "At this point, I don't think they need to be moved, as the existing rsyslog mechanization will still work, right?\n\nI don't expect that we will remove the existing OpenBMC Redfish registry, at least not for a while.  My understanding from Ed is that these are \"locked in\" for external backwards compatibility.\n\nThe best bet though, in order to both maintain the backwards compatibility and to update to the new error interfaces, is to have these applications define error events in `com.intel` in phosphor-dbus-interfaces with the `redfish-mapping` directive pointing to these \"old\" ones."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 796,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 844,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should be estimated before we approve this design."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 844,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "To be clear, I think that increasing the logs to 10k+ is not something that we'll do across the board and immediately.  Systems that currently have it at 300 will see no effect.  I wrote below, and will elaborate in the document, that I think we can come up with a plan to leave the rsyslog aspects in place for systems that aren't ready to make that move (until we work through the performance implications).  The \"raise the limit to 10k\" is going to be something that we'll work through over time and if we decide that \"phosphor-logging storing everything in dbus and backed by JSON files in flash\" is a poor implementation, we can adjust to that also."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 849,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Missing impacts to user-facing Redfish APIs and features.  Please enumerate them."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 849,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Which \"impacts to user-facing Redfish APIs and features\" do you mean?  The previous line covers the enhancements to functionality, but I'm not positive which you are referring to otherwise."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 862,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As an alternative design, what if we just renamed everything called REDFISH_MESSAGE_ID to OPENBMC_MESSAGE_ID, and had phosphor-logging post OPENBMCPDI_MESSAGE_ID in the logs it generates?  Both of those changes seem pretty doable in short order, and gets us to at least have a common place where we're logging close enough to the same data structure that we can start to decompose this problem into pieces and combine things downstream.\n\nAs this design is written, I'm worried about the number of patchsets the above is going to take to accomplish, and the amount of working code (both openbmc and client implementations) that this is proposing we just mothball with no alternative interface.\n\nIf we did the above, bmcweb can pretty trivially support all 3 variations of REDFISH_MESSAGE_ID, OPENBMC_MESSAGE_ID, and OPENBMCPDI_MESSAGE_ID (once we get a PDI registry set up and working) for a time by just checking for the IDs, we keep eventing supported, and we keep the existing message registry supported.  This also gives us a pretty simple path to supporting multiple log entry types, by just supporting something like DMTF_PLATFORM_MESSAGE_ID.\n\nThere's obviously implementation issues with what exists, but it gives us a starting point to poke at pieces one at a time instead of needing some  epoch event for both client facing APIs and internal logging APIs, which I don't see how I can be in support of."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 862,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I really don't want new REDFISH_MESSAGE_ID or \"OPENBMC_MESSAGE_ID\" hand-coded events written.  But, I think this does possibly give us a way around the performance concerns.\n\nI'm going to add a sub-section to have meson option / PACKAGECONFIG to have the `lg2::commit` bypass phosphor-logging and instead add the information to the journal, along the same lines as the REDFISH_MESSAGE_ID.  This allows us to:\n\n- Keep the status quo on the bmcweb/rsyslog stuff for systems that want to go that route.\n- Keep the event limits low for systems that already have that working.\n- Separately experiment with increasing the limits and understanding / improving the performance implications of that."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 874,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 884,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/3",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1716215453,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "I like the overall proposal. A more defined error structure and tying that into bmcweb/redfish will be very nice."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Overall, I'm in full support of getting one implementation that meets all requirements.  With that as the goal, I think this design misses some key requirements that need added.\n\n1. Logging should be performant.  Jason enumerated some basic starting points for performance characteristics and number of logs that at the time the logging systems deviated couldn't be met by phosphor-logging on an ast2500.  We should probably enumerate those same targets as part of the testing here.  I know Patrick has said he has data that shows that those performance problems no longer occur, and I haven't done my own analysis in a long time.  I suspect this can be as easy as loading 10000 unique log entries and measure the redfish LogEntryCollection response time, as well as the IPMI SEL write time when writing those entries, and the measuring the mapper memory usage, introspect response time for phosphor-logging, as well as startup time.\n\nGiven that we already have both implementations in bmcweb and ipmid, this should be an easy question to answer, and if we need performance improvements, I'd really like to see them made ahead of trying to do this combinatorial effort, so we don't have regressions.\n\n2. We need to solve the \"Everyone wants their own registry\" problem, as well as the \"Organizations outside of OpenBMC publish registries we want to be compatible with\" problem in this design.  This is eluded to a little in the fact that this design clearly doesn't want to implement the Intel-specific registry entries that were added in the past, to which I would wholeheartedly agree, but this isn't a unique problem to Intel/OpenBMC registries.  OCP, DMTF, and other sub-organizations publish OCP registries for which OpenBMC will want to implement a few messages from, identically to what's happening on the existing registry.\n\nSaying we're just going to break all client implementations in a year seems really heavy handed, and would lead to individual platforms not being upgraded to new versions because compatibility guarantees of redfish were broken.  Regardless of whether Intel agrees to that or not, we should solve the problem of Registry ownership and namespacing.  I suspect that there's a better migration path there, that likely involves some level of Intel putting the Intel-specific events into an intel-specific registry, and the this design being modified to support two important requirements: creation of multiple registry namespaces (possibly via a bmcweb meson option, or bmcweb checking for installed registries), and message ID sharing (ie, the same ID can exist in multiple registries).  If we don't add these things to the design, we're just swapping one registry that a subset of implementers don't like for another registry that a subset of implementers don't like.\n\n3. Eventing.  The phosphor-logging implementation in bmcweb doesn't support EventService, the rsyslog based ones do.  https://github.com/openbmc/bmcweb/blob/5ec22842d0d61380809d8e9cdfbc692c14c32cab/redfish-core/include/event_service_manager.hpp#L1197\n\nI see no mention of adding that support in this unification effort, nor do I know of any attempt to add them in the past.  I suspect there are implementations that live in forks, but those need someone to start pushing the patches to make that reality before this design can be approved.\n\n4. Support for log paging (by avoiding pulling in all entries to find only the latest entry)\nhttps://github.com/openbmc/bmcweb/blob/5ec22842d0d61380809d8e9cdfbc692c14c32cab/redfish-core/lib/log_services.hpp#L1553\nThe rsyslog based solution supports this, the phosphor-logging solution does not.  This is somewhat adjacent to #1, given it's a client-side optimization, but I call it out specifically because it would have a user-facing impact if we remove support for paging;  As is, one API supports paging, one doesn't.\n\n\nCertainly different implementations will have disagreements over what registries to publish, and this design glosses over that fact, but we've made it clear in the past that directly copying Redfish definitions into phosphor-dbus-interfaces is not a good thing to do.  In addition, as documented in https://github.com/openbmc/bmcweb/blob/master/OEM_SCHEMAS.md#oem-compatibility-and-authority, the point of Redfish is to provide compatibility between implementations, including outside of openbmc.  If a system wants an openbmc-specific implementation, there's always dbus-rest, which faithfully publishes the existing phosphor-logging system with eventing that folks can use to meet these requirements trivially, and in a way that doesn't require any conversion.\n\nRedfish exists in an odd middle ground where:\n- The protocol and schema spec is not owned by OpenBMC.\n- Multiple DMTF corporate members are working on adding new feature support in OpenBMC, based on the existing working groups structure.  \n- Development time for new systems is critical, and possibly can't wait for a DMTF rollout, and needs an intermediate ground for development that can be maintained.\n\nIf there are Redfish events that are TRULY common amongst all systems, they should go in a DMTF standard registry;  If the messages are OpenBMC specific, they need to be selectable at build time given the wide variety of places that OpenBMC is deployed.\n\nIn terms of final user facing output, what I'd like to see is:\n\n1. Individual end-platforms, SOC components, and organizations can enumerate their own versioned, namespaced message registries.\n2. Message logging in code isn't duplicated per-company/organization/registry/logging implementation.\n3. Components within OpenBMC can implement upstream, and in a way that doesn't burden bmcweb or other component maintainers, an OCP or DMTF created message registry implementation that's selectable, versionable, and able to be implemented\n4. The common implementation should be able to hit everyones performance targets and features.\n\n\n\nAs written, I don't see this design getting there.  In terms of next steps, I'd suggest that we:\n1. Write down the performance numbers, and get on the same page on what the current numbers are for each implementation.  (some scripts that folks can run across the various SOCs in openbmc-tools would be ideal)\n2. Enumerate the existing user-facing features on each implementation, and how we intend to not break them using this new design.  If we intend to explicitly break user-facing APIs, I don't see how that benefits the project overall.\n3. Regroup, and get this doc written with user/behavior facing impacts more filled out, some solutions for the above additional features, and see where we can get commonality in implementations.\n4. Determine how we plan to handle registries that we don't own.  As is, these are self contained within the bmcweb codebase, but if we're moving their definitions out, we need a design that can enumerate multiple registries."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "(There is a lot here so I might have missed some.  I think I've responded to most of the highlights in the document also but I'll try to respond to parts here also.)\n\n> Logging should be performant.\n\nI will address this by adding a compile option that turns `lg2::commit` into an `OPENBMC_MESSAGE_ID` record in the journal and bypass `phosphor-logging` (and add support in rsyslog config / bmcweb).  This allows effectively seamless transition for systems leveraging the rsyslog path today.\n\nI'm trying to decouple the \"phosphor-logging might have performance problems\" from \"get a consistent API people can code to for logging and reporting a wider class of issues\".\n\n> We need to solve the \"Everyone wants their own registry\" problem\n\nI tried to solve this in the design already, so I must be either missing your concern or poorly communicating.  There are some options in the design:\n\n1. Participants in OpenBMC can add `com.company` events in `phosphor-dbus-interfaces`.  These are most useful for script-generated events, IPMI/PLDM OEM events, etc.  Maybe these are useful for the OEM sections of `phosphor-debug-collector` also.  I think we wouldn't have `dbus-sensors`, as an example, create these.\n\n2. Downstream systems can create their own `phosphor-dbus-interfaces` style repository to hold their own downstream events; part of this will be having their own identifier.\n\n3. There is a `redfish-mapping` keyword in the YAML definition that allows translation of an internal BMC event to an existing external Redfish Message Registry record.\n\n> Eventing\n\nI wasn't aware of this implementation.  Thanks for pointing it out.  I'll add it to the `bmcweb` section (and general design requirements).\n\n> Support for log paging\n\nWill also add this.\n\n> If the messages are OpenBMC specific, they need to be selectable at build time given the wide variety of places that OpenBMC is deployed.\n\nI tried to cover this with the following requirement:\n\n```\n - The implementation must have a mechanism for vendors to be able to disable\n    specific tracing events to conform to their own system design requirements.\n```\n\nIs this what you had in mind or something else?\n\n> If a system wants an openbmc-specific implementation, there's always dbus-rest, which faithfully publishes the existing phosphor-logging system with eventing that folks can use to meet these requirements trivially, and in a way that doesn't require any conversion.\n\nI don't understand how this is an acceptable solution on a number of counts.\n\n* We already have an OpenBMC message registry and someone worked with DMTF to get it so OpenBMC is a valid prefix (even though we don't own openbmc.com).  We've therefore already concluded that an \"openbmc-specfic registry\" is perfectly acceptable?\n\n* dbus-rest has known security issues and is not standardized.  At least Redfish LogEntry (and everything else we gain from using the bmcweb implementation of Redfish) is standardized.\n\n* We already have a phosphor-logging to Redfish translation; all I'm proposing is making it better, right?\n\n> In terms of final user facing output, what I'd like to see is:\n> Individual end-platforms, SOC components, and organizations can enumerate their own versioned, namespaced message registries.\n> Message logging in code isn't duplicated per-company/organization/registry/logging implementation.\n> Components within OpenBMC can implement upstream, and in a way that doesn't burden bmcweb or other component maintainers, an OCP or DMTF created message registry implementation that's selectable, versionable, and able to be implemented\n> The common implementation should be able to hit everyones performance targets and features.\n\nMy belief is, with updates, I've covered all of this.  I'm willing to incorporate adds and follow-ons where there are gaps though.\n\n> As written, I don't see this design getting there. In terms of next steps, I'd suggest that we:\n\nWhat are the timelines for making that happen and are others willing to invest time to participate in this?  As written, it feels like a lot of \"committee work\" that will take a long time to execute on.\n\nI'm currently looking at this design as my primary development focus here for the next few months.  My feeling is that my proposal here is a huge step in the right direction, but I'm not deluded enough to believe it is going to be perfect in the first iteration.\n\nRight now we are effectively at an impasse.  Some maintainers have rejected `REDFISH_MESSAGE_ID`; some maintainers have rejected `phosphor-logging`.  I don't see any way someone can design a computer system that is able to be serviced with the status quo.  As we've worked through the Yosemite4 design there are a lot of serviceability gaps where in the \"Facebook OpenBMC\" we would have just inserted some random print statement (ala REDFISH_MESSAGE_ID) and my impression is that that won't be accepted across the board.  I'm attempted to move us past the impasse.\n\nAre there any one-way doors in this design that we can identify?  If there are, I'd like to have us assess those and understand what the risk is and how we can mitigate it.  If there aren't any one-way doors, unless there is a better proposal and manpower backing it, is there anything that should preclude us from starting in this direction?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 28,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "where"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 28,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "This shows a symbolic link when clicked on in readable view. Probably you need to link the actual schema path, may be, https://github.com/openbmc/bmcweb/blob/master/redfish-core/schema/dmtf/json-schema/LogEntry.v1_16_0.json?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Interesting...\n\nI converted it to a permalink then to the file you mentioned (as master changes over time this version is likely to change)."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 164,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Would it be possible to link some example code here as this seems to be the actual problem statement?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 164,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I assume these \"code examples\" are contained in private repositories that various companies have.  All of the ones I'm aware of at Meta are...\n\nKeep in mind that these are all assumed to be software running outside of the BMC.  The BMC wouldn't use the Redfish events itself for internal interactions."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 380,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Is the Message property still going to have the same generated format?  e.g. xyz.openbmc_project.Sensor.Error.ReadFailure?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 380,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I was expecting similar format, but hadn't decided if exact or similar was required.  Do you have an opinion one way or the other?\n\nIf the \"new events\" are obviously different than the \"old events\", it makes it easier for bmcweb to be able to know if the transformation to the Redfish event can be done successfully.  But, I can see how if you already have external code that relies on the \"old event\" names you might prefer they are left alone.\n\nI think this is similar to Ed's question about what do we do with the existing \"OpenBMC\" registry."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 380,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Matt: do you require it to have the same name or not?\n\nI know there are already error references in the method / property definitions.  I could make these work either way."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 380,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "No, I don't think they need to stay the same.  The other code that cares is just other openbmc code that could change as well, as long as it knows what to change to."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 521,
                    "reviewer": {
                        "name": "Ramesh Iyyar",
                        "email": "rameshi1@in.ibm.com",
                        "username": "RameshIyyar"
                    },
                    "message": "I have a question:\n\nHow will redfish-mapping help point to a Redfish resource using the object path?\n\nI'm trying to understand how the following Redfish message registries will work with this design:\n\n- PropertyValueResourceConflict\n- ResourceCreationConflict\n\nDo we need to define the interface of an object to transform it into an external interface resource like Redfish?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 521,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Later in the doc I wrote this:\n\n> 4. A mechanism should be implemented to translate DBus `object_path` references\n   to Redfish Resource URIs. When an `object_path` cannot be translated,\n   `bmcweb` will use a prefix such as `object_path:` in the `MessageArgs` value.\n   \nIf we want an internal BMC error to map to these particular Redfish messages, we would need a corresponding internal event defined (in the YAML format) with the same properties as those required by the Redfish event.  Then we would use the `redfish-mapping: Base.PropertyValueResourceConflict` on that internal event definition as the hint that bmcweb should turn the internal event into that pre-defined Redfish event."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 619,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "What do you mean by this?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 619,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "If you want to make your own errors downstream you cannot use \"OpenBMC\" as the Redfish Message Registry prefix.  You should use \"IBM...\"."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 621,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "by defining new yaml files in a forked phosphor-dbus-interfaces?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 621,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "No, by adding new yaml files in their own downstream repository.\n\nAdded a few statements throughout."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 621,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 629,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "so if someone has a downstream version of a repo and adds a downstream only error, what do they do?  Make a new yaml file in their forked PDI?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 629,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Clarified."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 641,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "good, it was always confusing."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 641,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "+1"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "The Report() interface would look the same? (when someone wants to just log an error, not throw it). Also, the event interface would use the same Report API?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 666,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Added a clarifying sentence here and in other places about no-throw contexts.  You could alternatively called `Example(...).commit()`."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 732,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm leaving comments in this section unaddressed currently.  There are likely aspects I don't fully grasp yet."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 874,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 884,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "f692f2fa339d2363ffdd27e4f0832083175e9a06",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/4",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1717091944,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "PS4: https://github.com/openbmc/docs/blob/f692f2fa339d2363ffdd27e4f0832083175e9a06/designs/event-logging.md"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 920,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 930,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "866bef0be37b039296c8042f8605faefeb260d5c",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/5",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1717093978,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 926,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 936,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "b1fc843ad3b272f372a4bdb2523e7e7fecc74b62",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/6",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1717094631,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-format",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -3
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 927,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 941,
            "sizeDeletions": 3
        },
        {
            "number": 7,
            "revision": "20a1149e4ed54c26621cffab8a0ccf895fb348ed",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/89/71489/7",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1717157946,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 927,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 937,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "f42539d833cc9245a8d2bfccff5d71f6029bc442",
            "parents": [
                "5a727b484f69eaea8accb6f066687cc06abc9ad2"
            ],
            "ref": "refs/changes/89/71489/8",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1719836757,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I believe I've addressed all the review comments I can without further feedback.  I've had offline discussions with some of the reviewers (especially those who left a lot of comments) and it seems we're overall pointed in the right direction.\n\nThere is one \"TODO\" left in here.  @Matt, can you look at it and give your thoughts?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "PS8: https://github.com/openbmc/docs/blob/f42539d833cc9245a8d2bfccff5d71f6029bc442/designs/event-logging.md"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Overall it seems pretty reasonable. I have several nitpicks inline."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 167,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Is this meant to be \"does not\"?"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 167,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 181,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Can you clarify the phrasing here? It's hard to pick apart whether \"both\" refers to only \"complete\" and \"fully accepted\", or covers those together along with the comment about tracing (I suspect not, because that just makes it even more confusing)."
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 181,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 673,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "s/equiavalent/equivalent/"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 673,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 749,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "IMO it will have greater impact to drop the 'and' and split the sentence:\n\n> The original `phosphor-logging` error descriptions allowed inheritance between two errors. This is not supported by the proposal for two reasons:"
                },
                {
                    "file": "designs/event-logging.md",
                    "line": 749,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 985,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 995,
            "sizeDeletions": 0
        },
        {
            "number": 9,
            "revision": "fb282b1e290f4c9ef3224007b7eb2a297c950579",
            "parents": [
                "5a727b484f69eaea8accb6f066687cc06abc9ad2"
            ],
            "ref": "refs/changes/89/71489/9",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1719951764,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 985,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 995,
            "sizeDeletions": 0
        },
        {
            "number": 10,
            "revision": "ede0a25e7237d9e51651d9260fc0157a8408ed95",
            "parents": [
                "696c1d870e1c022bc358d384db482bb06ec816fa"
            ],
            "ref": "refs/changes/89/71489/10",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1722461844,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/event-logging.md",
                    "type": "ADDED",
                    "insertions": 985,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 995,
            "sizeDeletions": 0
        }
    ]
}