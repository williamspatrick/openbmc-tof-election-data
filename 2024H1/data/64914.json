{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "topic": "bmc-health-metrics",
    "id": "I014a047f9db6fe470124baa41dcce93caf7ceb4b",
    "number": 64914,
    "subject": "phosphor-health-monitor: add new D-Bus interface",
    "owner": {
        "name": "Jagpal S Gill",
        "email": "paligill@gmail.com",
        "username": "jagpalgill"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/64914",
    "hashtags": [],
    "createdOn": 1689200800,
    "lastUpdated": 1705077288,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1689200800,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1689200830,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1689200830,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1689201088,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/70860/ : FAILURE"
        },
        {
            "timestamp": 1689201161,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1689201199,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1689201199,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1689201633,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/70862/ : SUCCESS"
        },
        {
            "timestamp": 1689202464,
            "reviewer": {
                "name": "Edward Lee",
                "email": "edwarddl@google.com",
                "username": "dodolee12"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1689202614,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1691533476,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Abandoned\n\n<Changing the DBus Interface>"
        },
        {
            "timestamp": 1691547981,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1691618055,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Restored"
        },
        {
            "timestamp": 1691618159,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1691618232,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1691629906,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1691629932,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1691629932,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1691630279,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/72698/ : FAILURE"
        },
        {
            "timestamp": 1691633469,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1691633493,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1691633493,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1691633839,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/72705/ : SUCCESS"
        },
        {
            "timestamp": 1693333762,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(8 comments)"
        },
        {
            "timestamp": 1693334057,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1693335056,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1693357261,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 4:\n\n(11 comments)"
        },
        {
            "timestamp": 1693357273,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1693357314,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1693357314,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1693357693,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/73624/ : SUCCESS"
        },
        {
            "timestamp": 1693608876,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 6: Commit message was updated.\n\nCopied Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1693608923,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1693608923,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1693609285,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/73731/ : SUCCESS"
        },
        {
            "timestamp": 1695159181,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(4 comments)"
        },
        {
            "timestamp": 1695161922,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1695161954,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1695161970,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695161970,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1695162341,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74261/ : SUCCESS"
        },
        {
            "timestamp": 1695162573,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1695162680,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1695164373,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1695164419,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 8.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1695164434,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 7:\n\n(2 comments)"
        },
        {
            "timestamp": 1695164439,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695164439,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1695164801,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74262/ : SUCCESS"
        },
        {
            "timestamp": 1695165345,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(6 comments)"
        },
        {
            "timestamp": 1695165468,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1695235476,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1695237719,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(3 comments)"
        },
        {
            "timestamp": 1695237910,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1695321091,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 9.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1695321128,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695321128,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1695321141,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 8:\n\n(9 comments)"
        },
        {
            "timestamp": 1695321493,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74333/ : SUCCESS"
        },
        {
            "timestamp": 1695326431,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1695327634,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1695330150,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(3 comments)"
        },
        {
            "timestamp": 1695330399,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(2 comments)"
        },
        {
            "timestamp": 1695332276,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1695357084,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1695754424,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 10.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1695754453,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695754453,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1695754460,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1695754806,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74494/ : SUCCESS"
        },
        {
            "timestamp": 1695762015,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1696805247,
            "reviewer": {
                "name": "Thu Nguyen",
                "email": "thu@os.amperecomputing.com",
                "username": "ThuBaNguyen"
            },
            "message": "Patch Set 10:\n\n(2 comments)"
        },
        {
            "timestamp": 1696807303,
            "reviewer": {
                "name": "Thu Nguyen",
                "email": "thu@os.amperecomputing.com",
                "username": "ThuBaNguyen"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1697578024,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 10:\n\n(4 comments)"
        },
        {
            "timestamp": 1697578475,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 11.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1697578500,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1697578501,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1697578877,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/75068/ : SUCCESS"
        },
        {
            "timestamp": 1697631772,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1697632267,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 11:\n\n(7 comments)"
        },
        {
            "timestamp": 1697954304,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 11:\n\n(8 comments)"
        },
        {
            "timestamp": 1697954313,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 12.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1697954341,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 13: Patch Set 12 was rebased."
        },
        {
            "timestamp": 1697954352,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1697954352,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: -Ok-To-Test"
        },
        {
            "timestamp": 1697954453,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1697954660,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/75356/ : SUCCESS"
        },
        {
            "timestamp": 1701185522,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 14: Patch Set 13 was rebased\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701185542,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701185542,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: -Ok-To-Test"
        },
        {
            "timestamp": 1701185701,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 14: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1701185862,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76483/ : SUCCESS"
        },
        {
            "timestamp": 1701193096,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        },
        {
            "timestamp": 1701193557,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 14: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1701209526,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Uploaded patch set 15.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701209543,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701209543,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: -Ok-To-Test"
        },
        {
            "timestamp": 1701209545,
            "reviewer": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        },
        {
            "timestamp": 1701209857,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76493/ : SUCCESS"
        },
        {
            "timestamp": 1701210396,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 15: Code-Review+2"
        },
        {
            "timestamp": 1701210405,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged"
        },
        {
            "timestamp": 1705077288,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Topic set to bmc-health-metrics"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "7dc06661b2e5a59788df23cb9b5c8434a39a3e32",
            "parents": [
                "88902e67bcd86b2122b4c1f3b1eaa550b329b08a"
            ],
            "ref": "refs/changes/14/64914/1",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1689200800,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/BMC/MemoryUtilization.interface.yaml",
                    "type": "ADDED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/BMC/RebootStatistics.interface.yaml",
                    "type": "ADDED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/RebootStatistics/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/CpuUtilization/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/BMC/CpuUtilization.interface.yaml",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/meson.build",
                    "type": "ADDED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/MemoryUtilization/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 249,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "387c7c3172b1d9532c1d15dab5dca159ccee31b7",
            "parents": [
                "88902e67bcd86b2122b4c1f3b1eaa550b329b08a"
            ],
            "ref": "refs/changes/14/64914/2",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1689201161,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Edward Lee",
                        "email": "edwarddl@google.com",
                        "username": "dodolee12"
                    },
                    "message": "Where is the planned location for these objects?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Please refer to https://gerrit.openbmc.org/c/openbmc/docs/+/64917."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Generally it is preferred to keep the same change set open even if you\u2019re changing it significantly because then reviewers can look back at the previous discussion."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Sure, opened the review request again and marked it in progress."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/BMC/MemoryUtilization.interface.yaml",
                    "type": "ADDED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/BMC/RebootStatistics.interface.yaml",
                    "type": "ADDED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/RebootStatistics/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/CpuUtilization/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/BMC/CpuUtilization.interface.yaml",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/meson.build",
                    "type": "ADDED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/BMC/MemoryUtilization/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 248,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "678b7c1a32073c0b68c8f4379464607d6cdde9f8",
            "parents": [
                "402dc6a5beee58ee1e6514a425c542a0d879954c"
            ],
            "ref": "refs/changes/14/64914/3",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1691629906,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 66,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 218,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "6e9c01a32175c3d5ab55c4737ee269e81ebcf72a",
            "parents": [
                "402dc6a5beee58ee1e6514a425c542a0d879954c"
            ],
            "ref": "refs/changes/14/64914/4",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1691633469,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Thanks for the review. Addressed your comments."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Let's break this out into multiple properties.\n\nDoes this need to be read-only?  Are any of them const?\n\nMake the key as \"struct[self.Type, self.Level]\".\n\nMake one property as \"Value\" and one as \"Asserted\"."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Sure, as discussed broken this into Value and Asserted properties. For Asserted, my understanding is either any threshold level is asserted or not and if asserted there would be just one threshold type asserted at a time, hence with this thought i think its better to model Asserted type as \"enum[self.Type]\"\n\nMarked Value as const and Asserted as readonly."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 15,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\"AlarmChanged\"?  Or two signals: \"Asserted\", \"Deasserted\"?\n\nIt seems a little unusual to use the word \"alarm\" here.  Is that word used in Redfish also to describe thresholds?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 15,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Changed it to AssertionChanged with a status property (as boolean) which depicts whether its asserted to deasserted."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 66,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we want to make this Bound.Upper / Bound.Lower?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 66,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 10,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What is InternalFailure going to be used for?  What is the client expected to do about it?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 10,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "The intent behind internalerror is to depict that the operation didn't go through. But as we discussed it won't be much useful to the end user in terms of action. The main failure in this case can be persistent memory being in-accessible which is a critical problem with the system and shall be handled in other better ways such as process core dump etc. Hence, i am removing this error."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We should find a way to document the object paths in here so that we can generate them as constants."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Sure i will propose additions to the DBus interface. Let's keep that as a separate activity. Once we have converged on that proposal, i can update this interface as a separate commit to reflect the change."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Add flags to mark them as read-only, please."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This one is 'const'."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 31,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Drop, because this can be used for any number of counts."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 31,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We should use a different verb.  'measuring'?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Inventory.Item only."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 66,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 226,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "6c4ef952cd4af7c20bb340a2be9c1e2d4a8f7cfc",
            "parents": [
                "4de8a3b03cbb375eae92184cce3bc69be85f07d4"
            ],
            "ref": "refs/changes/14/64914/5",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1693357273,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 237,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
            "parents": [
                "4de8a3b03cbb375eae92184cce3bc69be85f07d4"
            ],
            "ref": "refs/changes/14/64914/6",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1693608876,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Addressed and replied to your comments. Thanks"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm pretty confused why this isn't just a bool, and this description in the documentation doesn't help me understand at all.\n\nI think the intent is better met with something like\n\nUpperCriticalThreshold: double\nUpperCriticalAsserted: bool\nUpperWarningThreshold: Double\nUpperWarningAsserted: bool\n\nif we're now putting all the thresholds in one interface.  As written, I suspect you've mostly just recreated the Properties interface (which already can return a dict of propertyname, value.)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We then have to create 10 (now) properties and probably more as someone adds new threshold names.  I suspect most metrics/sensors only use ~4 threshold levels.\n\nWe also have to define a way to indicate \"this threshold doesn't exist\".  The current way we do that was using NaN, which we were told that wasn't desirable...  So, Jagpal went with this explicit dictionary."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We then have to create 10 (now) properties and probably more as someone adds new threshold names.  I suspect most metrics/sensors only use ~4 threshold levels.\n\nI agree, and would really expect most sensors only use 2 levels (warning and critical) because that was all that existed for a long time.\n\nSure, you'd have to add a property for every new level, but in the current method to add an additional level, you still have to add the enum, so it's not like it saves us a code review/update all the daemons round, or lets us support arbitrary level names as written.  I guess I just don't see the advantage of making it more complex.\n\n> \n> We also have to define a way to indicate \"this threshold doesn't exist\".  The current way we do that was using NaN, which we were told that wasn't desirable...  So, Jagpal went with this explicit dictionary.\n\nThe problem wasn't directly with NAN it was that it was one of two ways to represent that a property wasn't filled;  You could represent a non-existent threshold by simply omiting the interface itself, or omitting one of two properties, or setting one of two properties to NAN, or setting both properties to NAN.  Handling all those cases was a pain.  This interface smashes all thresholds into one interface, which solves that problem, regardless of whether a map is used, because NAN can just be used directly, and there's no other way to represent properties non-existence.\n\nA map in a property is a pain to use because this interface now doesn't' look like anything else, so in most code, you end up now having to pull the individual parameters out in custom to thresholds code.  There's already a lot of code that can pull out an interface of named properties, so making it look like a bunch of properties on one interface means we're not doing something special for thresholds.\n\nThe other advantage of using properties is that you can have implementations that change thresholds at runtime.  Property.Set can be used to update a single threshold.  As written you'd have a do a read->modify->write, which isn't easy to handle in code, and has data races if the data is updated in between a read and a write."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "As i understand the main point of discussion is on having \"named properties vs generic container for properties\" as proposed. \nI would take a step back and try to understand the issues with the existing threshold interface. My understanding - it was something to do with usage of Nan for properties which didn't exist as interfaces were defining concrete properties. Hence, as solution to that problem we proposed is this generic container type interface rather than concrete properties and moved all those types into one interface. But as i see now above from Ed's comment he was more concerned about having different methods to define the non-existent properties rather than just not defining them at all. Some of this has been solved through collapsing 5 interface files into one.\n\nNow, if we converge on \"named properties vs generic container for properties\", the next is we can define a standard way to represent non-existent properties.\n\n@Patrick,\nAre you on board with named properties based on easy match expression reasoning given by Ed?\n\n@Ed,\nIs there any other issue/limitations with the existing interface that we need to consider?\nIn relation to data races, these properties are going to set once at start time and shouldn't change as they are read from platform configuration, unless there is a plan to change that to make them writable at runtime?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not totally buying the match-ease as the reason to use individual properties.  argN is the match statement for ensuring that specific fields in the signal match a desired value.  It's not really hard to match { Critical, Upper } if that's what you want to do.\n\nThis map turns into a map in C++ also.  Doing a lookup is not really any more work than reading an individual property.  It's also easier to iterate on a map than it is individual properties.  (If someone wants to operate / look through multiple thresholds, they end up having to unroll-the-loop by hand with the individual property method, but they can just do a map-lookup with the map case.)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "From coding perspective, i agree it may be easier with using map rather than named properties."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I'm not totally buying the match-ease as the reason to use individual properties.\n\nWe have sdbusplus library code that can parse out named properties into their individual named components (sdbusplus::unpackPropertiesNoThrow).  So far as I'm aware, we don't have an equivalent for map<string, string>.  Maybe I'm mistaken or there's an existing example that does something like this?  The only example I know of that's similar to this is User.Manager.GetUserInfo, and maintaining it has been a mess because it's an array of structs.  I'm trying to avoid a similar complexity here.\n\n> This map turns into a map in C++ also. \n\nFYI, I don't think there's anywhere left that turns DBus properties into a std::map anymore in bmcweb, so it's not really \"also\" in that context.  Basically everywhere we do it, we're iterating a vector in O(n) time these days, because the actual \"map\" never really mattered, given we know the structure upfront.\n\nIf this is properties, it looks like:\n\n```\ndouble upperWarning = 0.0;\nbool upperWarningAsserted = false;\ndouble upperCritical = 0.0;\n<rest of the properties>\n\nbool success = sdbusplus::unpackPropertiesNoThrow(\n    dbus_utils::UnpackErrorPrinter(), ret, \"UpperWarning\", upperWarning, \"UpperWarningAsserted\", upperWarningAsserted,\n    \"UpperCritical\", upperCritical... etc);\n```\n\nAnd is much simpler than the equivalent\n\n\n```\nstd::vector<std::pair<std::string, std::tuple<std::string, std::string, double> >> thresholds;\n\nbool success = sdbusplus::unpackPropertiesNoThrow(\n    dbus_utils::UnpackErrorPrinter(), ret, \"Value\", value);\n\nstd::optional<double> upperCritical = 0.0;\nstd::optional<double> upperWarning = 0.0;\n\nfor threshold in thresholds:\n    if (std::get<0>(threshold.second) == \"xyz.openbmc_proejct.Common.threshold.Critical\" && \n        std::get<1>(threshold.second) == \"xyz.openbmc_project.Common.Threshold.Bound.Upper\"){\n            upperBound = std::get<2>(threshold.second);\n    }\n    else if (std::get<0>(threshold.second) == \"xyz.openbmc_proejct.Common.threshold.Warning\" && \n        std::get<1>(threshold.second) == \"xyz.openbmc_project.Common.Threshold.Bound.Upper\"){\n            upperWarning = std::get<2>(threshold.second);\n    }\n    ..... \n    ...\n    {\n        Handle non-existent property.\n        Return;\n    }\n\nif (upperCritical){\n    Treshold present\n}\n...\n```\n\nWith all of the above said, if patchsets exist that show that there's a way to write this that isn't a mess of error handling to use a map, and we can have a similar amount of code using a map while still handling errors properly, I'm happy to be proven wrong, it just doesn't track in my head, having seen implementations of both, and given the above examples."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> they end up having to unroll-the-loop by hand with the individual property method\n\nGiven that Dbus is its own spec, and invents interfaces in addition to and not exactly matching the Redfish spec, we have to unroll the loop by hand anyway to map X in Dbus means Y in Redfish."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not sure we should be making arguments about the complexity or lack-there-of for code that goes out of its way to avoid using the generated bindings.\n\nsdbusplus (and the phosphor-dbus-interface headers) can turn this property into a map of enums, not even strings.\n\nThis is the generated async client binding:\n```\n    auto value()\n    {\n        return proxy.template get_property<std::map<std::tuple<Type, Bound>, double>>(context(), \"Value\");\n    }\n```\n\nAs you see, it turns into a `map<tuple<Type, Bound>, double>`, which is exactly what you'd expect from the interface definition here.\n\nSince the message pack/unpack code is common, I don't even see any reason why this wouldn't work with the ASIO unpackPropertiesNoThrow code (ie. the existing unpackProperties can handle either vector/map of the C++ enum values; this works today without even converting to the async co-routines support).\n\nAs far as iteration goes, if you don't want to use the bindings or map you'd end up with something like this:\n\n```\nvector<tuple<string, string>, double> value;\nsdbusplus::unpackPropertiesNoThrow(... \"Value\", value);\n\nconstexpr auto jsonMap = { \n   { \"UpperCritical\", { \"xyz...Critical\", \"xyz...Upper\" } },\n   { \"UpperWarning\", { \"xyz...Warning\", \"xyz...Upper\" } },\n};\n\nfor (auto& [j, t] : jsonMap)\n{\n    if (value.contains(t))\n    {\n        json[j] = value[t];\n    }\n    else\n    {\n        // Handle non-existent property.\n    }\n}\n```\n\nYour unpack-all-the-properties-at-once example doesn't handle NaN, which is yet another set of loop unrolling and if-conditions.  I don't see that example as shorter / better / more succinct than this constexpr-loop."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I'm not sure we should be making arguments about the complexity or lack-there-of for code that goes out of its way to avoid using the generated bindings.\n\n> \n> sdbusplus (and the phosphor-dbus-interface headers) can turn this property into a map of enums, not even strings.\n> \n> This is the generated async client binding:\n> ```\n>     auto value()\n>     {\n>         return proxy.template get_property<std::map<std::tuple<Type, Bound>, double>>(context(), \"Value\");\n>     }\n> ```\n> \n> As you see, it turns into a `map<tuple<Type, Bound>, double>`, which is exactly what you'd expect from the interface definition here.\n\nUnless this proposal is saying that bmcweb should take the generated bindings, or is proposing creating a new webserver that someone is going to maintain, or is going to exclusively use projects that make use of the generated bindings, then I'm not sure who the above helps.  I think the new async bindings are great, and have the potential to make code a lot cleaner with fewer bugs, but I'm not sure how they matter in the context of this review.\n\n> \n> Since the message pack/unpack code is common, I don't even see any reason why this wouldn't work with the ASIO unpackPropertiesNoThrow code (ie. the existing unpackProperties can handle either vector/map of the C++ enum values; this works today without even converting to the async co-routines support).\n\n\nThe enums vs strings don't really end up helping much in my experience, because we have to handle errors where the enum didn't exist without throwing and exception through the executor that we can't handle.  You're right, you can unpack as std::map (which bmcweb used to do heavily) but in practice it didn't really save code versus just unpacking as a string.\n\n> \n> As far as iteration goes, if you don't want to use the bindings or map you'd end up with something like this:\n> \n> ```\n> vector<tuple<string, string>, double> value;\n> sdbusplus::unpackPropertiesNoThrow(... \"Value\", value);\n> \n> constexpr auto jsonMap = { \n>    { \"UpperCritical\", { \"xyz...Critical\", \"xyz...Upper\" } },\n>    { \"UpperWarning\", { \"xyz...Warning\", \"xyz...Upper\" } },\n> };\n> \n> for (auto& [j, t] : jsonMap)\n> {\n>     if (value.contains(t))\n>     {\n>         json[j] = value[t];\n>     }\n>     else\n>     {\n>         // Handle non-existent property.\n>     }\n> }\n> ```\n> \n> Your unpack-all-the-properties-at-once example doesn't handle NaN, which is yet another set of loop unrolling and if-conditions.  I don't see that example as shorter / better / more succinct than this constexpr-loop.\n\nYep, but handling Nan already has to be a branch either way.  I didn't mean to make them seem different.  Your example still would be more code I think?\n\nI can't say I agree with the single property, and that's ok.  We had code that looked a lot like what you have above a while ago, and it caused pretty significant bugs and was hard to maintain.  value.contains() for example lets people typo Enum value namespaces, or ignore the enum namespace.  My preference is still for explicit properties, because the handling is simpler, the tooling and CLIs handles properties already, and you don't have the read-modify-write problem to cover."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Thu Nguyen",
                        "email": "thu@os.amperecomputing.com",
                        "username": "ThuBaNguyen"
                    },
                    "message": "Can someone explain why we don't support the `Fatal` threshold type in OpenBMC? Behind warning/critical sensor also have `fatal` threshold right?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "@Thu,\nI discussed with Patrick on this. You can say that critical is same as fatal as actions performed at the critical level are the last resort. Or in other words they would just be synonyms."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: I'm not positive if we want 'const' or 'readonly' for this.  'const' means you can't change the value, even internally, and no signals will be emitted.  I can conceive of implementations that might want to adjust metric thresholds based on other activity.\n\nThis is probably fine to leave as-is for now or change to readonly now.  We can easily change this flag in the future."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why is this an array?  We can't be over the Upper and under the Lower at the same time, right?\n\nSuppose we already had Critical-Upper asserted and we, in one polling interval, switch to Warning-Lower.  I would expect 2 signals: one to deassert the Critical-Upper and one to assert the Warning-Lower."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "This indicates the upper bound and lower bound (range) for the threshold level. Also, there is no Critical-Upper, there is just Critical, Upper bound and lower bound just defines the range for each threshold level.\n\nOther way to get this info would be to query the threshold interface using the ThresholdType from signal parameters. Let me know if you think thats better rather than sending it as part of signal?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don\u2019t really understand the utility of that. It means I have to pick apart this array and do math based on Value from the signal in order to know what\u2019s going on. I suspect typical usage is going to be:\n\n\u201cI see that Critical Upper is now asserted\u201d and do some reaction to that. Having the value in the signal is extra gravy.  \n\nAsking the consumer to do math from the signal values to know what is going on is going to end up with some boilerplate code copied around in order to reverse this information back out of the signal."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would suggest changing this to just a Bound property.  If someone needs the ranges they can read that property.  We don\u2019t need to send it along in each signal."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Also, while we are making a change, let's change the order in the signal.\n\n1. Type\n2. Bounds\n3. Status\n4. Value"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Having this signal param provides the user the upper and lower bound for the threshold assertion. My understanding is it has no special value but just extra info, it was there in original Threshold specification, but yes, user can query the threshold interface to get these bounds.\n\nThe bounds already exist in threshold interface as part of Value property. So, would just drop this."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Having this signal param provides the user the upper and lower bound for the threshold assertion. \n\nIs there anything that requires both the upper and lower bounds on an assertion of a single?  In the past, what's been required is:\n\nThe name and direction of the threshold we crossed (ideally they'd be combined).\nWhether or not the threshold got asserted or deasserted\nThe value that the sensor read that crossed the value.\n\nAnything else is just kind of inventing complexity IMO.\n\n\nOverall, I suspect this interface would be a lot simpler with defining 10 signals:\nWarningAsserted\nWarningDeasserted\nCriticalAsserted\nCriticalDeasserted\n.....\n\nwith each signal only containing the value that caused the crossing.  Making dictionaries of these things seems like a good idea, but really messes with the ability to define DBus match expressions properly.  For example, on the interface you published, try to write a match that only fires when and upper critical threshold is posted.  Even if you could do it, it's going to be complicated.  Versus if the threshold is a named Property, it's significantly easier, you can just match on the interface name and member."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "@Patrick,\nAdded the bounds to signal and changed the order of properties.\n\n@Ed,\nYes, thats what the signal should report. You can refer to latest commit update.\n\nFor having named vs generic properties, we already have another comment above. Once we conclude on that, we can absorb that change at other places as well. So, lets discuss on that comment thread. Resolving this one."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?????  What does a \"none\" level represent?  \"None\" is already effectively handled by just omitting the interface."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I suspect this was needed so that the Asserted property could indicate None?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why would a threshold level be \"none\"?  At a minimum, the description doesn't call out what it represents, given it's non-obvious based on the name. At most, I suspect there's no reason for this to exist and could be removed."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ok, I re-read your comment, and I think I get it.  The Asserted property itself being one property is why this is odd, given that it's very likely that multiple thresholds are asserted at a time (generally a critical threshold would imply an asserted Warning, but that isnt' called out or specified);  I suspect when we come to conclusion on the other comment about separating out the properties, this will be solved at the same time."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "My understanding is that at any particular time we have only one threshold asserted. So, lets say we were in warning and the value increased to critical range. We will de-assert warning and assert critical because now value is out of warning range and falls in critical range. Please correct me if i am wrong?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> My understanding is that at any particular time we have only one threshold asserted.\n\nThis generally isn't true in the existing interfaces, and as you've written is going to enforce constraints like \"upper Warning is always below upper critical\", and corner cases, like what happens when Critical and PerformanceLoss are the same value.  Given that most of the time these are user-settable values, there can exist cases where warning is higher than critical (even if it's only as it's being set) that I don't think this interfaces documents the interactions of sufficiently, and frankly, I don't think it's worth making an interface that needs documented to that level.\n\nI really think just asserting/deasserting each threshold separately will be simpler, and have fewer corners that would need documented in this interface.\n\nFWIW, Redfish and IPMI both separate out thresholds into separate properties/struct fields.  I don't know of any that publish a single \"current threshold assertion level\""
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 52,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done.\n\nRemoved the None level as discussed above and changed the asserted thresholds to an array."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, typo."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 64,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "the range would generally be a numerical value, I suspect this needs to be changed to \"direction\"\n\nAlso, the way you've phrased this makes it really sound like you're handling hysteresis, when upper/lower is generally used to represent whether it's a high critical or a low critical."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 70,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 78,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do we need to publish the hysteresis on any of these?  I forget if it's on the old one.  If it's not in the old one, it's fine to omit here."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 78,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 3,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: I'm not sure if this is interesting information.  It could change in the future."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 3,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done, removed specific examples."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally in telemetry it's better if all counters don't support an explicit reset, and clients rely on the count incrementing as being an event.  This avoids problems in architecture where one client might reset a reboot count before another client has read it."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "FWIW, I think the purpose of this interface definition is so that we could implement the ManagerDiagnosticData.ResetMetrics action."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do we really want to support that though?  I don't have context on why DMTF added that action, if I was in the meeting I would've argued against it, but from a generalized \"reset all telemetry\" that seems like a bad idea to have?\n\nMy opinion here isn't that strong if we want to keep it, I just feel like it allows one client to monopolize a set of telemetry, effectively making other callers data useless, which somewhat defeats the open nature of what we're trying to do.  It might be a difference in requirements between an open bmc stack, and a corporate stack, where there's likely only one caller into this telemetry."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "I would consider this analogous to configuration data as well which can be set by multiple clients."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I would consider this analogous to configuration data as well which can be set by multiple clients.\n\nBut.... you can't have multiple clients resetting a single counter.  I'm confused how that would work?  Would each client have its own counter that could be reset?\n\nTo be clear, the problem becomes:\nCounter increments 0 -> 1.\nClient 1 reads counter.  Counter reads 0.\nClient 1 resets counter.\nClient 2 reads counter, counter reads 0."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Shoot, I typoed.  Corrected is below.\n\n```\nCounter increments 0 -> 1.\nClient 1 reads counter. Counter reads 1.\nClient 1 resets counter.\nClient 2 reads counter, counter reads 0.\nClient 2 never sees counter increment.\n```"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "I think the question here is about how the manageability is being performed. Is device using multiple client interfaces (for example, ipmi, redfish etc) for communication or a single one. In case, we are using multiple, the same issue is going to be there for configuration flow because a device config being set by one client interface can be reset or over-written by the other. What architecture solution do we have on that front?\n\nPS: I have dropped the reset interface for now."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I think the question here is about how the manageability is being performed. Is device using multiple client interfaces (for example, ipmi, redfish etc) for communication or a single one. In case, we are using multiple, the same issue is going to be there for configuration flow because a device config being set by one client interface can be reset or over-written by the other. What architecture solution do we have on that front?\n\nMultiple interface types effectively look the same as multiple interface clients.  Two users on Redfish look the same as one Redfish user and one IPMI user.\n\nGenerally configuration items have strategies for solving this.  For example, in Redfish, to add a new IP address, you can either specify IfMatch, to ensure that your updates haven't collided for read-modify-write operations, or use the append/delete syntax to specify an update that isn't dependent on the current state (Ie, Delete X ip address, rather than update the entire ip address list).  On DBus, generally this is handled by multiple objects, so unless you're interacting with the same object from two interfaces, it's pretty tough to actually collide.\n\nAlso, FWIW, the configuration APIs are called probably an order of magnitude less than the monitoring APIs, and only during predominantly during onboarding phases where the clients are well known and isolated in time from one another.\n\n> \n> PS: I have dropped the reset interface for now.\n\nCool.  I think that makes things simpler to separate them, so we can enumerate why the reset api exists, and call out that it's for implementing the appropriate Redfish APIs."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Are you going to follow up with the new constants support in a separate commit?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 44,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Yes, we will make that addition to interface separately. Will float a PR for that."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 240,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "5cfb68dac2aa2cdc05b048d9d238775b1003d991",
            "parents": [
                "262b9220e59434f8031d9dc24e481b28f420c73a"
            ],
            "ref": "refs/changes/14/64914/7",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1695161922,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Addressed Comment. Thanks"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 239,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "cded0faf5aeb510eb41a66b9ce72f767a30b1f36",
            "parents": [
                "262b9220e59434f8031d9dc24e481b28f420c73a"
            ],
            "ref": "refs/changes/14/64914/8",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1695164419,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Thanks for reviewing. Addressed & Replied comments."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 20,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Similar to what I mentioned in the signal, missing the Bound here isn't very helpful."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 20,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 235,
            "sizeDeletions": 0
        },
        {
            "number": 9,
            "revision": "89b494f2d509a69769dda5383c6c9a23d5d07bb8",
            "parents": [
                "262b9220e59434f8031d9dc24e481b28f420c73a"
            ],
            "ref": "refs/changes/14/64914/9",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1695321091,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
                    "type": "ADDED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Reset/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 75,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 237,
            "sizeDeletions": 0
        },
        {
            "number": 10,
            "revision": "7b6ba1e97c51c88d6dc4599a21858e8a54281cf3",
            "parents": [
                "262b9220e59434f8031d9dc24e481b28f420c73a"
            ],
            "ref": "refs/changes/14/64914/10",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1695754424,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Thu Nguyen",
                        "email": "thu@os.amperecomputing.com",
                        "username": "ThuBaNguyen"
                    },
                    "message": "I have one question about the community plan in support the settable value.\nIn DSP0248 V1.2.2 PLDM platform and control, https://www.dmtf.org/sites/default/files/standards/documents/DSP0248_1.2.2.pdf, section `28.11 Numeric Effecter PDR`, this PDR type provide interface so BMC can set an controllable value to the SOC.\nThis PDR type is similar as Nummeric sensor PDR types, it only have base unit, rate unit, min/Max, unit modifier.\nIn my point of view, this numeric effecter PDR still can be proposed to D-Bus interface as one sensor with set table value.\nOr\nShould we add one new control interface to allow set the effecter as we support for fan PWM?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "@Thu,\nI am not sure if i understand the question completely and it doesn't seem to be related to this PR? If not can you please start a thread on your question in discord and discuss it there for wider community participation. Resolving this comment for now."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Thanks for reviewing. Addressed  & replied to the comments."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would expect most Numeric Sensor PDRs to be Sensor-types and not Metric-types.  If they have a physical unit (such as RPM or DegreesC) they are sensor.  If they are unit-less or have an abstract unit (such as bytes) they are a metric.\n\nWe should not have a generic \"this metric came from a PDR\" as that implies all consumers need to understand PLDM."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Thu Nguyen",
                        "email": "thu@os.amperecomputing.com",
                        "username": "ThuBaNguyen"
                    },
                    "message": "Do we support setting `MaxValue` and `MinValue` in value interface? They are required by phosphor-host-ipmid https://github.com/openbmc/phosphor-host-ipmid/blob/085de48d5c43dccd7c3d5e3aa54250bed8ba741c/dbus-sdr/sensorcommands.cpp#L453"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done, added the MaxValue and MinValue."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 75,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 200,
            "sizeDeletions": 0
        },
        {
            "number": 11,
            "revision": "cc3110cc24675b6579aad4ce073a27c0b8a2c483",
            "parents": [
                "262b9220e59434f8031d9dc24e481b28f420c73a"
            ],
            "ref": "refs/changes/14/64914/11",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1697578475,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Thanks for the review. Addressed the comments."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "While there is potentially some contention around this property, my overall feeling is that we should go with it approximately like this for now and see how it works.  We can refactor it once we see the implementation in phosphor-health-monitor and the corresponding implementation in bmcweb.\n\nWe know how individual properties work.  We know (unfortunately) what multiple interfaces would look like.  This approach seems better in some ways and worse in other ways, but we should get some firmer data by seeing the code.\n\nI don't know if we want to add anything to the description to indicate that this property is \"experimental\" for the time being."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Sure, we can see how the actual code looks like and make decision on this one accordingly. We can always update the interface.\nWill add experimental to description for now."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 16,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we need this to become a set / array?  You can have multiple thresholds asserted.  In the old threshold design you'd see them as independent properties.  We probably shouldn't eliminate that visibility?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 16,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 29,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is it ok if we split these into two properties?  Doing a 'match' on a struct is a lot more cumbersome I think than a 'match' on two argNs."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 29,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: \"asserted (true) or deasserted (false)\""
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 38,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: Let's keep these sorted by 'name'."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 38,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 49,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We should add this association to Inventory.Item also."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "line": 49,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 57,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 75,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 214,
            "sizeDeletions": 0
        },
        {
            "number": 12,
            "revision": "14d4a5bfd908ec26117e46895cd2bf0994533b05",
            "parents": [
                "262b9220e59434f8031d9dc24e481b28f420c73a"
            ],
            "ref": "refs/changes/14/64914/12",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1697954313,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 57,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 76,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 222,
            "sizeDeletions": 0
        },
        {
            "number": 13,
            "revision": "61f6a63422e8de9f1b5e6c5bf2528aa8bec93efa",
            "parents": [
                "8a2674b8b6afe66759fd878b40512eff6b6f6396"
            ],
            "ref": "refs/changes/14/64914/13",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1697954341,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 57,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 76,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 222,
            "sizeDeletions": 0
        },
        {
            "number": 14,
            "revision": "f61d8a212b5c68dbb6ec6e7707609cbd6da3e853",
            "parents": [
                "4f0a9a7c02415680712ec8af55ea9067f93a0c00"
            ],
            "ref": "refs/changes/14/64914/14",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1701185522,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 17,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "set?  Or does that not work for some reason?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 17,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Yes, thats the change i was going to make in my implementation since its easier to use with a set. Will verify this. Thanks."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 17,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ok.  Go ahead and push up a new commit here (and make sure it is rebased) and I can merge it fairly quickly.  This commit sequence has been open long enough for feedback."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "line": 17,
                    "reviewer": {
                        "name": "Jagpal S Gill",
                        "email": "paligill@gmail.com",
                        "username": "jagpalgill"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 57,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 76,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 222,
            "sizeDeletions": 0
        },
        {
            "number": 15,
            "revision": "a60ff8459393e8a043d203c02ee658c14c967ff0",
            "parents": [
                "4f0a9a7c02415680712ec8af55ea9067f93a0c00"
            ],
            "ref": "refs/changes/14/64914/15",
            "uploader": {
                "name": "Jagpal S Gill",
                "email": "paligill@gmail.com",
                "username": "jagpalgill"
            },
            "createdOn": 1701209526,
            "author": {
                "name": "Jagpal Singh Gill",
                "email": "jagpalgill@meta.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
                    "type": "ADDED",
                    "insertions": 57,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Metrics/Value/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
                    "type": "ADDED",
                    "insertions": 76,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Common/Threshold/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 222,
            "sizeDeletions": 0
        }
    ]
}