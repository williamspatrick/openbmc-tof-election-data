{
    "project": "openbmc/x86-power-control",
    "branch": "master",
    "id": "I3a21c2e5214dfcf05cdae8efc2ebbb21c4b4e080",
    "number": 48951,
    "subject": "Add HpmStbyEn signal",
    "owner": {
        "name": "Konstantin Aladyshev",
        "email": "aladyshev22@gmail.com",
        "username": "Kostr"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/x86-power-control/+/48951",
    "hashtags": [],
    "createdOn": 1637223613,
    "lastUpdated": 1709566494,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1637223613,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1637223627,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637223793,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30464/ : SUCCESS"
        },
        {
            "timestamp": 1637224577,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1637226086,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 2: Commit message was updated."
        },
        {
            "timestamp": 1637268603,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1637269596,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1637312055,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1638262135,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1638265398,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1638265587,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1638274884,
            "reviewer": {
                "name": "Ian Woloschin",
                "email": "ian.woloschin@hpe.com",
                "username": "iwoloschin"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1638294078,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1707497384,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1707497714,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1707499165,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1707517389,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1707517433,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707517433,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1707517455,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1707517581,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/79062/ : SUCCESS"
        },
        {
            "timestamp": 1707518993,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1707519164,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1707519193,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1707519193,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1707519339,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/79063/ : SUCCESS"
        },
        {
            "timestamp": 1707519640,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1707519650,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1707928900,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1707928924,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708046942,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1708048515,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708061107,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708083314,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708096134,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708121009,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708482168,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1708510302,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Code-Review+1, Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1708510315,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1708510315,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1708510383,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1708510527,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/79596/ : SUCCESS"
        },
        {
            "timestamp": 1708637252,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1708656120,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1708661181,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1708661226,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1708661226,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1708661264,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1708661387,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/79707/ : SUCCESS"
        },
        {
            "timestamp": 1708972032,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1709024994,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1709025580,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1709089166,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1709104960,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1709109525,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6: -Code-Review\n\n(1 comment)"
        },
        {
            "timestamp": 1709154955,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 6: -Code-Review\n\n(1 comment)"
        },
        {
            "timestamp": 1709176740,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1709238657,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1709277045,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1709277058,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1709277058,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1709277213,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80061/ : SUCCESS"
        },
        {
            "timestamp": 1709278760,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1709296665,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 8.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1709296686,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1709296686,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1709296823,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1709296830,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80069/ : SUCCESS"
        },
        {
            "timestamp": 1709297859,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 9: Patch Set 8 was rebased.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1709297891,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1709297891,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1709298047,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80070/ : SUCCESS"
        },
        {
            "timestamp": 1709304174,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 9: Code-Review+1"
        },
        {
            "timestamp": 1709304344,
            "reviewer": {
                "name": "Supreeth Venkatesh",
                "email": "supreeth.venkatesh@amd.com",
                "username": "supven01"
            },
            "message": "Patch Set 9: Code-Review+1"
        },
        {
            "timestamp": 1709549017,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 9: Code-Review+2"
        },
        {
            "timestamp": 1709549053,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1709549070,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1709566494,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Change has been successfully rebased and submitted as cfc4d25edfdc12f02ea082fc4bb9ebe8f9c40dfb"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "e2a0703aa92770caa4f65eb54458ba58bbed0e50",
            "parents": [
                "48c94c59728023cdbff3bd62f203de3434af8b8a"
            ],
            "ref": "refs/changes/51/48951/1",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1637223613,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "\"Tested\" field is necessary and attach your test case and test result."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 28,
            "sizeDeletions": 1
        },
        {
            "number": 2,
            "revision": "3bd3fb12a3515f3b63031a9b248047a39d951bf7",
            "parents": [
                "48c94c59728023cdbff3bd62f203de3434af8b8a"
            ],
            "ref": "refs/changes/51/48951/2",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1637226086,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "FWIW, this description is I think a bit overly specific -- e3c246d4i (a Xeon system) has just such a GPIO, for example, and as far as I know no CPLD (it's just read by the BIOS so it can wait for the BMC to come online before proceeding with the boot sequence)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "This description comes from my experience with AMD boards (Ethanol/EthanolX/DaytonaX). In all of them BMC_READY goes to CPLD, and CPLD is responsible for launching all power to the board.\nSo BIOS wouldn't even have a change to run if BMC_READY is inactive.\nHow do you suggest to change it?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I might suggest something like:\n\n```\nSome boards use a GPIO driven by the BMC to signal to the host that the BMC is fully up and running (the host's BIOS or other components like a CPLD might wait for it to be asserted before allowing the host's boot sequence to proceed, for example).\n```"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Konstantin - Not sure if you are actively working on this patch or not. if not, Jayanth (from AMD) will send v2 renaming this signal to \"HPM_STBY_EN\""
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Patchset 3 only appears to have changed the commit message?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Oops, sorry, friday night mistake. Fixed"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I would have expected this to be done significantly later -- presumably we don't want to assert the ready signal if we're not yet actually ready (and there are plenty of things after this point that could still fail before we are)."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  I wouldn't really expect this to be done in x86-power-control at all.  There's a systemd target (whos name is escaping me this second) that we use to determine the \"readiness\" of the BMC.  Power control being up doesn't mean the BMC is ready."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "What do you suggest? What things are needed to be done before we can assert this pin?\nBasically after we activate this pin it is possible to power on the platform. For example manually with a button. And I think we don't want to delay this functionality for too long for the user experience.\nAlso activation of this pin should be done before restoring any power policy."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Well, even if we set aside the question of whether or not this daemon is even the right thing to be asserting `BMC_READY`, this seems to be a premature point in the daemon's start-up sequence to be doing so (at this point in main() we haven't yet finished initializing x86-power-contro's view of the host's existing power state, for example).\n\nThe question Ed has raised seems like quite a legitimate one to me though -- there are other parts of the BMC's functionality that are important to consider when declaring the BMC \"ready\" that aren't taken into account here at all.  For example, on systems I'm familiar with, I think the IPMI service and kcsbridged should be running (so that the host can query the BMC for things like boot source settings and such).  With this approach we might very well end up asserting `BMC_READY` when the BMC is not, in fact, actually ready to do all the things it's supposed to do."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "This is a good point. Some systems truly would need to have BMC IPMI daemon started before the start of the main system. But at the same time I guess some don't. And these systems would prefer to set `BMC_READY` as soon as possible. I guess it means that we would need a systemd service that would assert these kind of signals?\n\nAs I understand, with the modern gpiolib framework it is not possible to permanently set GPIO signals with the sysfs. Does it mean that we would need another OpenBMC application to set `BMC_READY` signal? How should it be done? This is another question for the discussion.\n\nAlso the questions you are raising aren't specific to the `BMC_READY` signal from this commit.\nRight now `x86-power-control` performs all its power policies with no relation to start of IPMI or any other OpenBMC service. So the problems you are referring are not connected to this commit.\n\nMy point is that the raised issues are truly important, but it looks like they should be dealt separately. This commit simply provides an ability to launch AMD systems with OpenBMC."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Maybe there is a simpler solution?\nIf a user would want to start IPMI before `BMC_READY` it simply should override `xyz.openbmc_project.Chassis.Control.Power%40.service` of 'x86-power-control`.\nIn this case we don't need another application to set `BMC_READY` signal."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ian Woloschin",
                        "email": "ian.woloschin@hpe.com",
                        "username": "iwoloschin"
                    },
                    "message": "I think BMC_READY may be a confusing name, but that's what the schematic calls it so it is appropriate to re-use here. Without BMC_READY being asserted though there is no system power on these boards, so it also seems appropriate to have x86-power-control control this pin.\n\nI also agree with the idea of overriding x86-power-control's systemd unit file to not start until after ipmid is started, but I think this sort of thing should be clearly documented, ideally right in README in a new section under Build Options. It'd be even better if x86-power-control could provide a unit file itself that could be optionally installed in the recipe, I think there are some ways Yocto/Meson could work together to support something like this?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This is a good point. Some systems truly would need to have BMC IPMI daemon started before the start of the main system. But at the same time I guess some don't.\n\nWhich ones don't?  Generally the BMC ready signal is used to communicate to the host processor that the BMC is ready to handle commands (be they ipmi pldm or redfish).  Do your systems use it to mean something different?\n\n> What things are needed to be done before we can assert this pin?\n\nAll daemons should be launched and ready.  Generally we would use something like multi-user.target to determine this.\n\n>Without BMC_READY being asserted though there is no system power on these boards, so it also seems appropriate to have x86-power-control control this pin.\n\nConsidering that x86-power-control doesn't control the \"readiness\" of the BMC (systemd does), that doesn't seem accurate.  MAYBE x86-power-control might be the thing that actually toggles the gpio, but it needs to be using something from systemd to determine when the right time to do it is.\n\n\n> I also agree with the idea of overriding x86-power-control's systemd unit file to not start until after ipmid is started\n\nPlease don't do that.  It enforces incorrect dependencies within the system.  x86-power-control as an application and state machine has no need to wait for IPMI, and the systemd target is easily waited on with a match expression from within the app.\n\n\n> If a user would want to start IPMI before `BMC_READY` it simply should override `xyz.openbmc_project.Chassis.Control.Power%40.service` of 'x86-power-control`.\n\nIt's much simpler if this is just a configure option within the repository itself.  Making a user understand systemd targets to configure their system is a tall order."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "\"BMC_READY\" on AMD platforms just means that confirmation goes out to the HPM FPGA/CPLD that FPGA/CPLD can relinquish control of power control GPIOs to BMC.\n\ni.e., Indicates that all DC-SCM STBY power rails are enabled and good and enables STBY power rails on the HPM.\n\nBMC_READY\" may be a misnomer.\n\nThis signal exists as \"HPM_STBY_EN\" in OCP DC-SCM specification: https://drive.google.com/file/d/11svaATDlTM83ZpQn8igNsJerIqtkbtKv/view.\n\nSince its part of Open Compute project DC-SCM Specification dealing power sequence signals, we should add a signal called \"HPM_STBY_EN\" instead of BMC_READY.\nInternally, which signal gets mapped depends on the platform design."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> \"BMC_READY\" on AMD platforms just means that confirmation goes out to the HPM FPGA/CPLD that FPGA/CPLD can relinquish control of power control GPIOs to BMC.\n\nThat's different than any other platform I've worked on, but fine, if that works for you, all good.\n\n> \n> i.e., Indicates that all DC-SCM STBY power rails are enabled and good and enables STBY power rails on the HPM.\n> \n> BMC_READY\" may be a misnomer.\n> \n> This signal exists as \"HPM_STBY_EN\" in OCP DC-SCM specification: https://drive.google.com/file/d/11svaATDlTM83ZpQn8igNsJerIqtkbtKv/view.\n> \n> Since its part of Open Compute project DC-SCM Specification dealing power sequence signals, we should add a signal called \"HPM_STBY_EN\" instead of BMC_READY.\n> Internally, which signal gets mapped depends on the platform design.\n\nFrom that doc:\nActive High. Indicates that all DC-SCM STBY power rails are enabled and good.\nEnables STBY power rails on the HPM\n\nSo long as we change the name away from BMC_READY, that sounds like a reasonable approximation of that signal to me."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Acknowledged"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 31,
            "sizeDeletions": 1
        },
        {
            "number": 3,
            "revision": "5439e950fa0a874aa553d83112c496abf1c52646",
            "parents": [
                "b1e34a11f5c64a7c4225fb4cf15ee7f9368cbef4"
            ],
            "ref": "refs/changes/51/48951/3",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1707517389,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 33,
            "sizeDeletions": 1
        },
        {
            "number": 4,
            "revision": "4717761beb344de23fe52371d34b2f06961512b9",
            "parents": [
                "b1e34a11f5c64a7c4225fb4cf15ee7f9368cbef4"
            ],
            "ref": "refs/changes/51/48951/4",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1707519164,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "So if we're just unconditionally asserting it and leaving it that way, I'm not sure I understand the point.  Is the assumption just that if the BMC is running at all, then all the standby rails must be in a good state?  Is there some other input (like a voltage measurement from an ADC or something) that the BMC should be checking first instead of just blindly asserting it?  Because if this is really the entirety of the logic that's needed, it seems like it might as well just be a gpio-hog in the device tree."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "A typical power and boot sequence is specified in Open Compute Project - DC SCM v1.0 specification: https://www.opencompute.org/documents/ocp-dc-scm-spec-rev-1-0-pdf\nPlease refer section 3.4.12 Standby Power and Boot Sequence of the above document."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Okay, thanks for the spec link -- that's a useful reference, but I'm not clear on how it motivates this patch.  From that document, it looks like HPM_STBY_EN must be asserted before HPM_STBY_RDY, which in turn must be asserted before the BMC can even be released from reset, so something else on the SCM must be driving it prior to the BMC coming online -- a CPLD or the like, or maybe just a pull-up resistor?  Are there any situations in which the BMC might want to deassert HPM_STBY_EN, or would doing so also reset the BMC via HPM_STBY_RDY getting deasserted as a result?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "HPM_STBY_EN is a signal to HPM after verifying BMC side VRs are good [Which is optional if the VRs are self-enabled]. The purpose of this patch is to introduce a signal called \"HPM_STBY_EN\" which is a standard signal as per DC-SCM specification and initializing it to default state. HPM_STBY_EN is an indication for the HPM FPGA/CPLD to start the rest of the power sequencing. [Turn on host side power rails, etc]."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Okay, but what about\n\n> Are there any situations in which the BMC might want to deassert HPM_STBY_EN, or would doing so also reset the BMC via HPM_STBY_RDY getting deasserted as a result?\n\nBecause if it *is* just always unconditionally asserted, I'm back to what I mentioned in my first comment above: could/should it just be a gpio-hog in the device tree instead?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "\"gpio-hog\" sets the pin high/low during boot-up right? This approch will fail follow the sequence mentioned  in the \"Figure 30: Power and Boot Sequence Diagram\" in the document shared by Supreeth. Setting this pin prior to other existing GPIO's initialization can mess up the host power sequence."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "HPM_STBY_EN is one of the dedicated signals that will need to be controlled by power management/control module. i.e., it needs to be initialized at the beginning. Further, this signal will be set to indicate BMC's power control module is ready to take the inputs [PWR_GOOD] from the HPM FPGA. gpio-hog wont help here because this needs to be initialized first and will then need to be set before the start of IO loop. This patch only initializes it, You are correct that the setting part of it is missing in this. Jayanth will work with Konstantin to verify and push next version of the patch."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> \"gpio-hog\" sets the pin high/low during boot-up right?\n\nYes, the kernel simply holds the GPIO in a single fixed state (applied during boot) and prevents userspace from accessing it.\n\n> This approch will fail follow the sequence mentioned in the \"Figure 30: Power and Boot Sequence Diagram\" in the document shared by Supreeth. Setting this pin prior to other existing GPIO's initialization can mess up the host power sequence.\n\nThis is what I don't understand.  Figure 30 shows \"HPM_STBY_EN = 1\" *before* \"BMC reset released\".  If it's already asserted before the BMC even boots, how would a gpio-hog (re-)asserting it during the BMC's boot sequence change anything?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Please note that this is just a reasonable approximation of the signal. This signal is \"Power Management/Control\" signal as per DC-SCM spec, the sequence shown there is just one example. Hence the signal needs to be part of power control Configuration. on AMD platforms, this indicates to HPM FPGA/CPLD to start the power sequence and BMC is ready and will monitor/catch any power events that happens after the power sequence is started. Also, this signal needs to be asserted after firmware update or BMC reboot, after power control module is ready. @Zev - Can you please elaborate on what your specific concerns are, so that we address it appropriately?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "```\nAlso, this signal needs to be asserted after firmware update or BMC reboot, after power control module is ready\n```\n\nDoes it de-assert automatically after firmware update or BMC reboot? Or does it need to be explicitly de-asserted somehow?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2904,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Since there will be latch, it usually does not de-assert, but depends on the circuitry, if there is a low pullup/pulldown on the line."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 33,
            "sizeDeletions": 1
        },
        {
            "number": 5,
            "revision": "f0f017a8c1ca19186e3b9e8ec6a795089736b13d",
            "parents": [
                "b1e34a11f5c64a7c4225fb4cf15ee7f9368cbef4"
            ],
            "ref": "refs/changes/51/48951/5",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1708510302,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Seems okay to me, but I'd like Zev's feedback still.\n\nI'm curious about needing to initialize it de-asserted then shortly after assert it.  Is that in case x86-power-control crashes in between?  If we can assume that the GPIO must be de-asserted in the beginning, could we get by with just asserting it at the end?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Yes, we could get by with just asserting it at the end."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Were we going to make this change to only assert at the end?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 3481,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "You may not need this here as I think it happens automatically when hpmLine goes out of scope."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 3481,
                    "reviewer": {
                        "name": "Supreeth Venkatesh",
                        "email": "supreeth.venkatesh@amd.com",
                        "username": "supven01"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 3481,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 48,
            "sizeDeletions": 1
        },
        {
            "number": 6,
            "revision": "ed682b5c415a0b9518168196c696fc0a1ac8d143",
            "parents": [
                "dc0bab929c9b11f5d980ffb1421a3192253fbf4b"
            ],
            "ref": "refs/changes/51/48951/6",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1708661181,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Seems okay, but would still like to get Zev's feedback."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'm a bit confused about exactly what's now being done with the new line...\n\nDuring initialization in `main()` first we deassert it, and then later assert it just before entering the main event loop -- but both times it's then immediately reset?  (Explicitly at line 2910, and implicitly in the `hpmLine` dtor at line 3484.)  I'm not clear on (a) what the deassert & reassert are actually needed for (i.e. what operations in between them actually *need* to be in between them, or why they're placed where they are), and (b) if they're actually going to reliably do anything other than just momentarily glitch the state of the line if there's a `.reset()` right after each one.  Am I misunderstanding something here?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Zev,\nCan you please look/respond to https://gerrit.openbmc.org/c/openbmc/x86-power-control/+/48951/4..6/src/power_control.cpp#b2904 supreeth comments dated  on Feb 21."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'm assuming you mean the comment starting \"Please note ...\"?  Due to time zone differences (I'm guessing) that appears as Feb 20 for me, anyway (it sure would be nice if gerrit could link to a specific comment and not just an entire thread, but oh well...)\n\nAs for specific concerns, my main concern is just more a general lack of clarity about what's going on.  From Supreeth's description and the initial implementation, it seems like simply holding the line asserted and leaving it that way at all times (i.e. functionally equivalent to a gpio-hog as far as I can tell) is sufficient logic for the hardware you're working on to work, but then later the patch was changed to first deassert (at the same point in the initialization sequence where it had initially been asserted) and then later assert it (and again, both of those are immediately followed by resets, so it's even less clear what's actually happening).\n\nFrom Supreeth's description it sounds like this line being asserted is a signal that the BMC is ready to handle power events (i.e. a \"BMC ready\" signal but scoped only to power control, which if that's what it is does seem like a reasonable thing for x86-power-control to handle).  It seems like the only sensible way for that to work at a hardware level though would be to have a pull-up/down on the line to deassert it unless/until the BMC actively asserts it.  Is that the case?  (The reference to latching behavior in Supreeth's subsequent message is also confusing to me; I'm not sure what to make of it.)\n\nWhat I'd like is a clear explanation of:\n - what specifically the deassert/assert actions in the current patch are intended to achieve and why they're placed where they are, and\n - what the expected behavior is given that both of those actions are immediately followed by a reset of the line."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "1. https://gerrit.openbmc.org/c/openbmc/x86-power-control/+/48951/6/src/power_control.cpp#2900 --> Make sure when the power-control application starts , HpmStdby signal default state . deassert. This is based on earlier conversation with Jason and you. Yo make sure any application crash or reboot we need to hold the host power-control after the pre-steps completion, to avoid un-expected results due to HPM_STBY_EN ready state.\n\n2. https://gerrit.openbmc.org/c/openbmc/x86-power-control/+/48951/6/src/power_control.cpp#2910 -> this is only reset C++ object. No real hardware actions  \n\n3. https://github.com/brgl/libgpiod/blob/6d5d8afc9c7e9a7b47d54fe51f4cb8d7077cdb8b/bindings/cxx/gpiodcxx/line-config.hpp#L58)\nhttps://gerrit.openbmc.org/c/openbmc/x86-power-control/+/48951/6/src/power_control.cpp#3474 ->\nHPM_STBY_EN is one of the dedicated signals that will need to be controlled by power management/control module. , this signal will be set to indicate BMC's power control module is ready to take the inputs [PWR_GOOD] from the HPM FPGA after the app initialization completion. That is why we moved just before sd-event loop."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Summarizing some out-of-band discussion with Jayanth:\n\n - The deassert during initialization seems oddly placed to me; it seems like (to minimize the amount of time the line might theoretically be incorrectly asserted) we'd want to do that as early as possible, but currently it seems to have been inserted into the GPIO init sequence somewhat arbitrarily.  I'd think it should probably be OK to move it earlier; any foreseeable problems with that?\n\n - The `line.reset()` operation (by closing open file descriptors) effectively releases the line and leaves its state undefined, which isn't great -- however, this is an existing problem with the codebase and not a new issue with this patch (numerous existing GPIOs are already kind of only working by luck in the same way, so what's one more...)\n\n@Jason, any thoughts on the deassert reordering or historical background on why the daemon releases output GPIOs instead of holding them open persistently while it's running?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "The time between the init-to-deasserted (even if moved earlier) and the assert seems arbitrary.  The other GPIOs are initialized to de-asserted because we need to start somewhere and don't want to trigger hardware behavior.  In this case, it seems like we want to trigger the hardware behavior from the start.  So, my opinion is we don't need to init to deasserted at all, and we can just init to asserted at the end of x86-power-control init where it is currently placed.\n\nFor the GPIO release:  With libgpiod, only one application can hold a GPIO at a time.  If multiple applications need a GPIO, they should release the line when they are done.  On the other hand, you can \"protect\" a GPIO by claiming it persistently in an application.\n\nWith most GPIOs if you claim the line and set the output value, they will maintain that state even if the line is released, but I agree it's not intuitive to rely on this behavior.  POWER_OUT and RESET_OUT are special cases, because they are assumed to be connected to the BMC passthrough GPIOs.  Not sure about other vendors, but in the case of ASPEED, the pinctrl driver will automatically return the GPIO to the passthrough state when the line is released.  So, for POWER_OUT and RESET_OUT, we take control only when we want to override the passthrough, and we release to give control back to hardware.\n\nSo, my opinion on HpmStbyEn is if there isn't any special hardware reason to release, it would be better for x86-power-control to persistently claim this GPIO.  This will make it clear with tools like `gpioinfo` who owns it, and nobody else can change the state unexpectedly."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> So, my opinion is we don't need to init to deasserted at all, and we can just init to asserted at the end of x86-power-control init where it is currently placed.\n\nMy understanding was that the initial deassert was a sort of best-effort attempt to mitigate the problem of the line potentially being wrongly asserted if a previous instance of the daemon had crashed or something after asserting it (and I suppose would at least leave it correctly deasserted if it were to crash or exit during initialization).  I'm sort of on the fence here about whether I think it's worthwhile -- it's kind of \"closing the barn door after the horse has bolted\" in some ways, but maybe better than nothing?  (Shrug...)  I dunno, no strong opinion at the moment so I'd be okay either way (keeping it or removing it).\n\n> the pinctrl driver will automatically return the GPIO to the passthrough state when the line is released\n\nThat's only the case with an out-of-tree kernel patch though, right?  Though regardless I guess I'm still not clear on why we want to release it and re-enable passthrough while the daemon is running.  I can see wanting that functionality as a fallback if the daemon crashes or something, but if x86-power-control is there to receive button-press events and act on them appropriately (effectively acting as a software GPIO passthrough), why does it need the hardware passthrough?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "> That's only the case with an out-of-tree kernel patch though, right?\n\nWith the AST2500, yes.  With the AST2600, it works like this without the patches.\n\n> Though regardless I guess I'm still not clear on why we want to release it and re-enable passthrough while the daemon is running.\n\nTrue, it could have been designed that way.  When I wrote this, our platform had a policy of having the BMC do as little as possible in the path of host behavior.  So, I chose to let the hardware be in control except when necessary."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 1
        },
        {
            "number": 7,
            "revision": "7a4e3997f7b41981965b32cf92e9d5a388cb484d",
            "parents": [
                "b98e4fff6c1558751ac7fb30fa574df9699711d9"
            ],
            "ref": "refs/changes/51/48951/7",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1709277045,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Ok,now it is not much different from my v4 version of the patchset. Wonder if moving gpioset operation to the very end makes any difference"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Not really patch set 5 , shifted the assert code just before currentHostStateMonitor. Anyway iverified moving code , just before event loop , and verified."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 1
        },
        {
            "number": 8,
            "revision": "0b00e357b9fc664c843405e9aef78aaf17578f78",
            "parents": [
                "b98e4fff6c1558751ac7fb30fa574df9699711d9"
            ],
            "ref": "refs/changes/51/48951/8",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1709296665,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 1
        },
        {
            "number": 9,
            "revision": "30c71e1ab280fc928f08f9234256bd4015e19055",
            "parents": [
                "dc0bab929c9b11f5d980ffb1421a3192253fbf4b"
            ],
            "ref": "refs/changes/51/48951/9",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1709297859,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "it is a special signal and no impact for existing platforms."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "it is good to go."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 1
        },
        {
            "number": 10,
            "revision": "cfc4d25edfdc12f02ea082fc4bb9ebe8f9c40dfb",
            "parents": [
                "88dd68b5c6132db521be11b1bd45e87312675e66"
            ],
            "ref": "refs/changes/51/48951/10",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1709566494,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 1
        }
    ]
}