{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "I629b87b43103c0e0b1257350eacb4b8f085919c6",
    "number": 68860,
    "subject": "asio: Add async match",
    "owner": {
        "name": "Lei YU",
        "email": "mine260309@gmail.com",
        "username": "mine260309"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/68860",
    "hashtags": [],
    "createdOn": 1705407434,
    "lastUpdated": 1709930576,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1705407434,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1705407464,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1705407464,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1705407482,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78002/ : FAILURE"
        },
        {
            "timestamp": 1705460131,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1705460152,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1705460152,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1705460319,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78021/ : FAILURE"
        },
        {
            "timestamp": 1705461119,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78022/ : FAILURE"
        },
        {
            "timestamp": 1705464944,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1705470169,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1705497437,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1705549172,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1705593374,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1705594188,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1705594206,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1705594206,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1705594225,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78133/ : FAILURE"
        },
        {
            "timestamp": 1705594277,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1705629391,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1705629423,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1705629423,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1705629442,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/78175/ : FAILURE"
        },
        {
            "timestamp": 1705629628,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1705712871,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1705713090,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1705718610,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1705850166,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1705866117,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1705870117,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1705902549,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1705966398,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1706011865,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1706011894,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1706011894,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1706012298,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/78322/ : SUCCESS"
        },
        {
            "timestamp": 1706703175,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1707251611,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1707273793,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(6 comments)"
        },
        {
            "timestamp": 1708040081,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1708394761,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1709575120,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1709575446,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1709709300,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1709709338,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1709709365,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1709709365,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1709709786,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80228/ : SUCCESS"
        },
        {
            "timestamp": 1709930576,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "f8dfe04033fcbc48eb299e607455f4366d1d0ee9",
            "parents": [
                "de99330ba1472ef362e29eb2c26d9e0a0b2abbf9"
            ],
            "ref": "refs/changes/60/68860/1",
            "uploader": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "createdOn": 1705407434,
            "author": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "test/bus/match.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/bus/match.cpp",
                    "type": "MODIFIED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/test/sdbus_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 150,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
            "parents": [
                "3729a4e2713a456d70e65ff8fbcc2a3344b6470c"
            ],
            "ref": "refs/changes/60/68860/2",
            "uploader": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "createdOn": 1705460131,
            "author": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Delay or hang?  Is a delay when calling the dbus-broker really a problem?  I'm kind of surprised we need to go through all this effort.\n\nThe problem, in my mind, with using match_async is that you don't know when the match has been registered.  You potentially end up with ABA issues or causal-ordering violations."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "> Delay or hang? Is a delay when calling the dbus-broker really a problem? I'm kind of surprised we need to go through all this effort.\n\nIt depends.\nThe event will not be polled by asio until a new incoming event occurs.\nSo if there is no new incoming event, it hangs.\n\n> The problem, in my mind, with using match_async is that you don't know when the match has been registered. You potentially end up with ABA issues or causal-ordering violations.\n\nYes, this is valid concern. I have no idea how to make it behave correctly in such case.\nDo you have any suggesting if we really want an async match?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "How about adding a new functor for this new async match API, so the caller could pass a callback that does the init of the property.\n\nIn previous practice, we usually do:\n* Add a match\n* Initially get the property\nThen the property is guaranteed to be updated.\n\nWith asio API, we could do:\n* Add a match with a callback\n* Initially get the property in the callback\n\nThen we could trust the property as long as the initial callback is called."
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't like that we're mixing boost stuff into what use to be non-boost headers.  How do we unravel that?\n\nShould we make sdbusplus::asio::match that inherits from this match?"
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 5,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Let's discuss below."
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think this implementation has the behavior of implicitly changing behavior for existing code.  You use to be able to pass a connection to the match constructor and it would implicitly convert to the `match(bus_t` one.  Now, that implicit conversion is no more because the direct-constructor is called.  This means that existing code now starts to \"continue\" before the match is actually registered.\n\nWe need to at least make this code explicitly opt-in rather than implicitly changing the behavior of existing code.\n\n(As I've said earlier in the commit review, I'm not convinced this is a real problem we should even worry about.)"
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "> I think this implementation has the behavior of implicitly changing behavior for existing code. \n\nIndeed, and this is intended.\nThe issue is found in our WebUI's stress test, that bmcweb does not handle any request anymore (due to the events are already queued so epoll will not return), until we send a new request to bmcweb.\nBy changing the current code's behavior to use async match for asio, it effectively resolve the above issue, making sure all events are handled as expected.\n\n> We need to at least make this code explicitly opt-in rather than implicitly changing the behavior of existing code.\n\nAs the previous commit's example code shows, the current code using asio with match is wrong and has problem, so I would like to fix it.\nOtherwise we will have to change all the asio code using match to use the new async match API"
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > I think this implementation has the behavior of implicitly changing behavior for existing code. \n> \n> Indeed, and this is intended.\n> The issue is found in our WebUI's stress test, \n\nI'm very surprised that a UI stress test is creating match expressions.  Can you give a link which match expression in the bmcweb code is causing the blocking behavior?\n\n> that bmcweb does not handle any request anymore (due to the events are already queued so epoll will not return), until we send a new request to bmcweb.\n> By changing the current code's behavior to use async match for asio, it effectively resolve the above issue, making sure all events are handled as expected.\n\nPlease don't do that, as it will break existing code.  An example of something broken is this here:\n\nhttps://github.com/openbmc/bmcweb/blob/18f8f608b966c802b3e2a389e3c1ec5a1fd9407b/include/image_upload.hpp#L21\n\nThe code expects that the match is in place BEFORE it goes to the next line.  Now that it's async, there's a race condition if the match fails to create, or if the match isn't created by the time the message to the update daemon goes out.  If we had an asio matcher that supported async_wait() on construct, we could make that code better, but we really shouldn't be changing behavior for existing objects.\n\nThere needs to be SOME change made in code, and some judgement applied to determine if an async wait on a return is a problem.\n\n> \n> > We need to at least make this code explicitly opt-in rather than implicitly changing the behavior of existing code.\n\n+1000\n\n> \n> As the previous commit's example code shows, the current code using asio with match is wrong and has problem, so I would like to fix it.\n> Otherwise we will have to change all the asio code using match to use the new async match API\n\nAs much as it would be great to fix this here, we'll need to audit each usage for whether or not the blocking behavior was required.  A quick grep shows there are 19 match_t objects in bmcweb.  it should be pretty doable to move them over to a new object and solve your problem without effecting the rest of the code.  We can't just blanket change the behavior without breaking user-facing beahvior."
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "> I'm very surprised that a UI stress test is creating match expressions. Can you give a link which match expression in the bmcweb code is causing the blocking behavior?\n\nWe did not trace into which match causes the issue, most likely it's related to firmware update or task.\n\n> As much as it would be great to fix this here, we'll need to audit each usage for whether or not the blocking behavior was required. A quick grep shows there are 19 match_t objects in bmcweb. it should be pretty doable to move them over to a new object and solve your problem without effecting the rest of the code. We can't just blanket change the behavior without breaking user-facing beahvior.\n\nOK. Let's add a new API for asio async match, and fix all the usages in bmcweb."
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What about include/sdbusplus/async/match.hpp?"
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "test/bus/match.cpp",
                    "line": 11,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "We should not be mixing boost asio internals into the legacy interface which has nothing to do with them."
                },
                {
                    "file": "test/bus/match.cpp",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "This is for demo purpose, I could make a separate test file to separate the usage of async match, if necessary."
                },
                {
                    "file": "test/bus/match.cpp",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "test/bus/match.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/bus/match.cpp",
                    "type": "MODIFIED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/test/sdbus_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 150,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "337a71f47c6f8a4fa72115b31df2c33744d4f035",
            "parents": [
                "3729a4e2713a456d70e65ff8fbcc2a3344b6470c"
            ],
            "ref": "refs/changes/60/68860/3",
            "uploader": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "createdOn": 1705594188,
            "author": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Updated the root cause analysis in the commit message, and adds a separated match_async test case."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 67,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/bus/match.cpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/test/sdbus_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/bus/match_async.cpp",
                    "type": "ADDED",
                    "insertions": 55,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 186,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
            "parents": [
                "a2018b2e99ababd59303ce8ac459bb74bbe17aea"
            ],
            "ref": "refs/changes/60/68860/4",
            "uploader": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "createdOn": 1705629391,
            "author": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FWIW, the async version of add match didn't exist in sd-bus when we did the asio extensions initially.  We've known about this \"bug\" for a while, but given that the dbus daemon responds pretty quickly, it wasn't a huge issue in practice.\n\nI agree, it's probably time to fix it.\n\nWe probably need an async capable match_t in the asio namespace, that accepts a callback like the asio extensions would expect.  We should look at signals_set https://live.boost.org/doc/libs/1_84_0/doc/html/boost_asio/reference/signal_set.html\n\nAs a reference for how to do these callbacks and propagate errors on asio callbacks, including the queue.\n\nI've mocked up what that could look like here:\nhttps://gerrit.openbmc.org/c/openbmc/sdbusplus/+/68959\n\nFeel free to incorporate it into your patch, or take over mine."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> We've known about this \"bug\" for a while, but given that the dbus daemon responds pretty quickly, it wasn't a huge issue in practice.\n\nI feel like I'm still getting conflicting information here.  The commit message says \"delay\" but elsewhere LeiYU claimed there was a hang.  If this is about fixing a delay in the time it takes for the dbus-broker to respond, this seems like excessive work and excessive complexity for almost no benefit.  If we start making the match registration async, I'm certain people will start having incorrect code because they don't understand that there is this delay and further dbus queries they do have an implicit ordering incorrectness.\n\nIf there is a hang, we need to fix the hang; it is a bug in the asio code.\nIf there is a delay, I think we need a real use-case where these few ms cause a problem."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "It's not really delay nor hang, the events are queued and not handled until a new event is polled by `read_wait()`.\n\nWe need to fix it. And a proper fix is to add the new API for asio async match, and change the existing asio code to use the new API.\n\nI will integrate Ed's patch, test it and submit a new PS"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why do you say that is a \"proper fix\"?  I'm not following. \n\nYou're implying that any code using the asio server MUST use all async calls or else the server can fail. This is a bug. Requesting everyone to use async everywhere, while perhaps \"better\" in some regards, is not a fix because it means people have to be explicitly aware (rather than made aware by compile issues)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The commit message says \"delay\" but elsewhere LeiYU claimed there was a hang.\n\nIn my experience, assuming both dbus and non-dbus code are correctly written, it causes a delay, not a permanent deadlock.  I've seen deadlocks before on code that I would say is incorrect as written and had internal timing races that something like this exposed, but that's not sdbuspluses fault.\n\n\n> You're implying that any code using the asio server MUST use all async calls\n\n\"When using blocking calls, you will block all other async actions until this transaction completes\" I think is the correct statement.\n\nYes, the dbus transactions go through just fine, sd-bus.c epolls internally for some time, but things like sockets or timers that sd-bus doesn't know about don't get serviced.\n\nI updated the commit message on my other patch to be more specific about what the problem is.\n\n> (rather than made aware by compile issues).\n\nMy long term (6 monthish?) intent for me was to get the new match object in, get old code ported over to it, then make the asio bus_t inheritance [1] private, which would make these kinds of problems compile time failures if you bypassed the asio connection object (there'd be no API that let you do that anymore), and runtime failures if you tried to do a blocking call from within an async callback (by checking io_context::stopped() before doing a blocking call).  FWIW, writing up that complexity is why I've had the majority of the other patch content sitting in my TODO list for 12+ months.  I wanted to write up a \"fix it completely and forever\" plan, but if Lei is seeing the same issues I figured that patch might be a better starting point, even without the full plan written down.\n\n[1] https://github.com/openbmc/sdbusplus/blob/5828bccf3e0e50c15ce0ddd29d55551f08d55f2f/include/sdbusplus/asio/connection.hpp#L51C20-L51C27"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "The new asio::match is added."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lei,\n\nCan you confirm that these 3 match_t constructors are the ones causing issues in your tests?\n\nhttps://github.com/openbmc/bmcweb/blob/5ae1f7f3e0c78f84d153f7ef24ee22bb1c73eaa0/include/dbus_monitor.hpp#L209C21-L209C62\n\nThose are the only ones I know of that are constructed in response to an http request."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "There are matches created at runtime in task.hpp, image_upload.hpp and update_service.hpp as well"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Right.... which one is causing the problem you're seeing?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "All of the above could cause the issue.\n\nIn our real case, it's mostly likely the image_upload.hpp and update_service.hpp causing the issue."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK"
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We should not be adding an asio dependency to non-asio objects."
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "line": 13,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/bus/match.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why is install_callback nullptr?  Surely we need to notify the caller that the installation succeeded, or pass the error back?"
                },
                {
                    "file": "src/bus/match.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "From the sdbusplus docs:\n\n> If this function is specified as NULL a default implementation is used that terminates the bus connection should installing the match fail.\n\nI'm guessing that's really not the behavior we want."
                },
                {
                    "file": "src/bus/match.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Right, it's going to be replaced by a user-provided callback with the new asio async match API."
                },
                {
                    "file": "src/bus/match.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't understand.  There's no way to set a a user-provided handler if it's set to nullptr here.  it sounds like you're going to move to the asio match object, so this might not matter anymore (as that installs both handlers), but something to consider if this patch goes forward."
                },
                {
                    "file": "src/bus/match.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Yes, as discussed here, we all agree that we will introduce a new asio::match, and in that API it will have a user-provided callback.\nThe code here will be replaced by the new asio::match API."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 67,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/bus/match.cpp",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/test/sdbus_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/bus/match_async.cpp",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 192,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "1d26ae368b42350442eaa302341a059bd6da27f2",
            "parents": [
                "83f35cbdcb4379783f215cf7fa79952ea9fb58f3"
            ],
            "ref": "refs/changes/60/68860/5",
            "uploader": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "createdOn": 1706011865,
            "author": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we rephrase this a bit.  Arguably, if we found an issue in the current model, we should just fix the bug.\n\nWhat this class is doing is adding a method for calling a match expression asynchronously, which is useful outside of the bug, because it allows not blocking the io reactor for other uses."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "Done.\nAdded some description of how to use asio::match to avoid the problem situation."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "@Patrick @Ed Could you kindly review this new asio::match?\nWe will send the patches to bmcweb using the new API later"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You haven't answered my question above yet.  Not sure why I would review again when there's still open questions from the last time I reviewed."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "The new PS added asio::match it should have addressed all the comments."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I appreciate that you've taken a similar approach to https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/68959\n\nCan you please help to review that design.  I don't really care which patch merges, but there's a question of how we register and return callbacks that I think we need to come to a conclusion on before we start talking patchesets.  Namely, that there are 3 callback events, when the match is installed, when the match fails to install, and when an event is returned.  Do those go in one callback, 2 callbacks, or 3?  What is the expectation of users if an error is returned?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "> but there's a question of how we register and return callbacks that I think we need to come to a conclusion on before we start talking patchesets. Namely, that there are 3 callback events, when the match is installed, when the match fails to install, and when an event is returned. Do those go in one callback, 2 callbacks, or 3? What is the expectation of users if an error is returned?\n\nIn my implementation, there are 2 callbacks, one for install, the other for match event callback.\n\nFor install, there are two cases:\n1. If the match install fails directly (sd_bus_add_match_async returns failure directly), SdBusError is thrown, and the asio::match object constructor throws.\n2. If sd_bus_add_match_async() succeeds, whenever the install is successful or not, caller could get the callback containing the message, and the caller could check the message to determine if it's successful or not."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep, so why would we go with that design over something that returns a single callback, like basically the rest of asio does?\n\nWe've had other things that DIDN'T have a single callback, and in practice, required capturing by copy in a lot of cases that otherwise wouldn't be required, just to duplicate objects between the two callbacks.\n\nI'm not saying it's wrong, but it goes against asio conventions, so we should be careful doing it.  Ideally we'd have examples of using this new interface somewhere that we could look at and make sure that we don't cause lifetime problems."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 67,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/match.hpp",
                    "type": "ADDED",
                    "insertions": 108,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/test/sdbus_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/bus/match_async.cpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 276,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "f518b6125f136d6bb41e156d04074d197cbafbc3",
            "parents": [
                "530b7520b855e758f05e88e48abd308b05f5b00e"
            ],
            "ref": "refs/changes/60/68860/6",
            "uploader": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "createdOn": 1709709338,
            "author": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/match.hpp",
                    "type": "ADDED",
                    "insertions": 108,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/test/sdbus_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/bus/match_async.cpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 282,
            "sizeDeletions": 0
        }
    ]
}