{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I136d5206ea1373ee3cdb1440b65240d3af3f2966",
    "number": 68873,
    "subject": "support DelayMs property",
    "owner": {
        "name": "Thang Tran",
        "email": "thuutran@amperecomputing.com",
        "username": "thangtran-ampere"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/68873",
    "hashtags": [],
    "createdOn": 1705463967,
    "lastUpdated": 1706845361,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1705463967,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1705463988,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1705463988,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1705464257,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/78026/ : SUCCESS"
        },
        {
            "timestamp": 1705466285,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1705484169,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1705533459,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1705566730,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1705566754,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1705566754,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1705566831,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1705567013,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/78119/ : SUCCESS"
        },
        {
            "timestamp": 1705604897,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1705634511,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1705949868,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1705959855,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1705978767,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1706052245,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1706080589,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1706547651,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1706845337,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1706845361,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Abandoned\n\nupdate ADC sensor instead"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "cc95203c057069e0549a8ec2337eb19b0adff11c",
            "parents": [
                "ae4639667132e9bca62277815f0dca5c77c0b887"
            ],
            "ref": "refs/changes/73/68873/1",
            "uploader": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "createdOn": 1705463967,
            "author": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The PowerState parameter it intended to solve host-owned sensors.  Does that not work in this case?\n\nNeeding a delay here implies that the device driver is wrong and needs corrected.  Which sensors specifically are you applying this to?\n\nI really suspect this doesn't need to be a config item, but would be based on the device itself."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "> The PowerState parameter it intended to solve host-owned sensors.  Does that not work in this case?\n\nSometime the sensors do not take enough time to initialize after Chassis is On or Host is Running.\n> \n> Needing a delay here implies that the device driver is wrong and needs corrected.  Which sensors specifically are you applying this to?\n\nIn the 1 Socket system, I did not get the ADC sensors lower threshold event issue, but in the 2 Socket system, some ADC sensors of Socket2 are not ready after Host is running -> lower threshold events are logged.\nAbout the FAN sensors issue: We are using SUNON FAN controller, it needs time to initialize FAN speed after Power is turned on, if the Chassis state changes to On before FAN controller is completely initialized, lower threshold events are logged.\n> \n> I really suspect this doesn't need to be a config item, but would be based on the device itself.\n\nI hope that, but that are the limitation of devices, we can not change or update them now."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > The PowerState parameter it intended to solve host-owned sensors.  Does that not work in this case?\n> \n> Sometime the sensors do not take enough time to initialize after Chassis is On or Host is Running.\n\nRight, then why don't the drivers handle that case?  Things like the peci driver specifically poll the device to wait for it to become available.\n\n> > \n> > Needing a delay here implies that the device driver is wrong and needs corrected.  Which sensors specifically are you applying this to?\n> \n> In the 1 Socket system, I did not get the ADC sensors lower threshold event issue, but in the 2 Socket system, some ADC sensors of Socket2 are not ready after Host is running -> lower threshold events are logged.\n\nSo the ADC devices are up, and have power, but just require some delay while we wait for the lines to charge?  This makes sense to have a parameter for, as the time to wait before the voltage lines come up is a property of the board.\n\nWe already have a similar delay for the bridge GPIO, can we just use that parameter in this ADC case?\n\n> About the FAN sensors issue: We are using SUNON FAN controller, it needs time to initialize FAN speed after Power is turned on, if the Chassis state changes to On before FAN controller is completely initialized, lower threshold events are logged.\n\nThen why doesn't the linux driver handle that?  If the driver is expected to initialize the device at runtime, it should be capable of doing that.\n\n> > \n> > I really suspect this doesn't need to be a config item, but would be based on the device itself.\n> \n> I hope that, but that are the limitation of devices, we can not change or update them now.\n\nRight, it's a limitation of drivers.  Just go fix the drivers."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "Thank you for your comments, I will close this commit and update ADC sensor instead.\nI checked the `SetupTime` property of `BridgeGpio`, this property is using to start a delay after assert a GPIO, it does not mean to check how long from Chassis is On/Host is running. Therefore, I use `PowerStatePost` property (https://gerrit.openbmc.org/c/openbmc/entity-manager/+/68926) to update ADC sensor.\nAbout FAN sensor, I will check is this hardware limitation or driver issue.\n\nThanks"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Can you please link to the entity-manager commit where the `DelayMs` schema was accepted?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "I created new commit to add \"DelayMs\" property to EM.\nhttps://gerrit.openbmc.org/c/openbmc/entity-manager/+/68926.\n\nI will update the commit message when that commit is merged."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "This commit start from my question on Discord https://discord.com/channels/775381525260664832/1187158775438778408/1191629649189544006. Please help me to review this commit"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Instead of using 3 time_point variables,\nwould it be possible to just set a single std::optional<...::time_point>\nwhen the sensor is enabled and then set it to std::nullopt when it's disabled? Then the 'good to read' function could perhaps check the elapsed time.\n\nOr the check could happen in the code that emits the threshold events. Since the sensor might be technically 'good to read' but not yet arrived at a stable reading.\n\n\nEven if it works now I'm afraid the feature could break in the future due to lack of unit tests. But it's definitely needed to avoid the unwanted threshold events."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "> Instead of using 3 time_point variables,\n> would it be possible to just set a single std::optional<...::time_point>\n> when the sensor is enabled and then set it to std::nullopt when it's disabled? Then the 'good to read' function could perhaps check the elapsed time.\n\nUsing std::optional<...::time_point> is unnecessary, in the readingStateGood function, we checked isPowerOn/hasBiosPost/isChassisOn, if they fail, we don't have to check time_points are std::nullopt or not.\n> \n> Or the check could happen in the code that emits the threshold events. Since the sensor might be technically 'good to read' but not yet arrived at a stable reading.\n\nI have plan to add other commit to prevent reading sensor when PowerState is not ready, but this commit is necessary to add small delay after Chassis is On or Host is Running.\n> \n> \n> Even if it works now I'm afraid the feature could break in the future due to lack of unit tests. But it's definitely needed to avoid the unwanted threshold events."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -3
                },
                {
                    "file": "src/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -1
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -8
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 12
        },
        {
            "number": 2,
            "revision": "76d9978d0bc7ce41ae330c210e72953554ae741d",
            "parents": [
                "ae4639667132e9bca62277815f0dca5c77c0b887"
            ],
            "ref": "refs/changes/73/68873/2",
            "uploader": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "createdOn": 1705566730,
            "author": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This change depends on [add StartupDelay to legacy json schema](https://gerrit.openbmc.org/c/openbmc/entity-manager/+/68926) being merged."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "yes, I will update this commit when I finished the solution with @Ed"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why are we using system_clock here?  That's almost certainly incorrect.  We should be using a monotonic clock."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't resolve things that aren't completed."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't add more global variables.  I suspect these need to be in each sensor."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "I think those variables are created only once in each application, therefore it still be ok to create 3 more global variables."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "if they are only created once for each application, how will this work with a multi-host setup?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "As I see, the dbus-sensor did not support multi-host system now. If we want to support multi-host system, we have to make more changes to update other variables as\n ```\nstatic bool powerStatusOn = false;\nstatic bool biosHasPost = false;\nstatic bool manufacturingMode = false;\nstatic bool chassisStatusOn = false;\n\nstatic std::unique_ptr<sdbusplus::bus::match_t> powerMatch = nullptr;\nstatic std::unique_ptr<sdbusplus::bus::match_t> postMatch = nullptr;\nstatic std::unique_ptr<sdbusplus::bus::match_t> chassisMatch = nullptr;\n```"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "My comment has nothing to do with multi host.  Global variables, per the coding standard, need to be avoided.  Considering these are definitely per-sensor variables, they shouldn't be globals, regardless of whether or not multi-host would need them to be.\n\nAlso, if we account for multi-host, that design doc was approved long before this patch existed, so we don't want to go backward from the eventual goal."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why uint32_t?  Generally we would use something like std::chono::seconds for time values."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This constructor is already VERY long, going from 10 parameters to 11.  Should we roll this out into a \"SensorData\" class?"
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "I will update this one after finished discussion."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "When I start this commit, I considered 2 options:\n- Option 1: Add `delayMs` property to `Sensor` class (current implementation).\n- Option 2: Call `setupPowerMatchCallback` function in `ADCSensorMain.cpp` and `FanMain.cpp` files to get the time_point when `PowerState` is changed. Before reading a sensor, it shall checks Power State and Delay is expired or not.\n\nIn both options, I need to add `delayMs` property to calculate the delay time. But I think that the `delayMs` property can be a common property, other sensors may need this property, therefore I choose first option to implement.\n\nWhat do you think about this 2 options."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "The delayMs is used with PowerState, one option is to create a struct for PowerState or ReadState that has delayMs in it. ReadState Good == PowerState Always or power State On for more than delayMs."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "Thank your for your suggestion, it seems this solution impacts so much application. I will investigate to see can I support delayMs property w/o update `Sensor` class."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Understood."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 429,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Putting this in readingStateGood seems a little odd to me.  It's going to result in the sensor being polled, but the thresholds ignored.\n\nWouldn't we rather just use delayMs as the initial value on waitTimer.asyncWait (it would replace sensorPollMs on the initial read?).\n\nThat way, we're not reading the sensor until it's ready."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 429,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "It seems your suggestion as the option 2 which I mentioned above."
                },
                {
                    "file": "src/sensor.hpp",
                    "line": 429,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "it is not.  It involves only delaying the polling of the sensor, not changing when we set up the power match.\n\nThere's already a delay timer.  For the moment we scan the sensor as soon as boot happens, but your parameter could invoke a startup delay."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "src/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -3
                },
                {
                    "file": "src/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -1
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -8
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 12
        }
    ]
}