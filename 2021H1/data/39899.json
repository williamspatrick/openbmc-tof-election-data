{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "Ib58fccc5fcb71a55a79ac74c0113326bd8e40219",
    "number": 39899,
    "subject": "thresholds: Add threshold alarm signals",
    "owner": {
        "name": "Matt Spinler",
        "email": "spinler@us.ibm.com",
        "username": "spinler"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/39899",
    "commitMessage": "thresholds: Add threshold alarm signals\n\nDefine signals on every sensor threshold interface that can be sent when\na threshold alarm value changes.  The signal contains the sensor value\nthat caused the alarm change.\n\n<Threshold Name>HighAlarmAsserted:\n * Sent when the Warning/Critical/etc AlarmHigh property is asserted\n\n<Threshold Name>HighAlarmDeasserted:\n * Sent when the Warning/Critical/etc AlarmHigh property is deasserted\n\n<Threshold Name>LowAlarmAsserted:\n * Sent when the Warning/Critical/etc AlarmLow property is asserted\n\n<Threshold Name>LowAlarmDeasserted:\n * Sent when the Warning/Critical/etc AlarmLow property is deasserted\n\nThe threshold name, like 'Critical', is in the property name so that the\ngenerated C++ names are unique and a class can implement multiple\nthresholds at once.\n\nSigned-off-by: Matt Spinler <spinler@us.ibm.com>\nChange-Id: Ib58fccc5fcb71a55a79ac74c0113326bd8e40219\n",
    "createdOn": 1611264638,
    "lastUpdated": 1617824005,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1611264638,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1611264650,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611264918,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11279/ : SUCCESS"
        },
        {
            "timestamp": 1611355773,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1611587720,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1611843924,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1611843934,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611844023,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\nI removed the redundant fields.  A signal handler can handle signals from this binding and from dbus-sensors by just using the  get_path and get_interface methods."
        },
        {
            "timestamp": 1611844193,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11523/ : SUCCESS"
        },
        {
            "timestamp": 1611867973,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1611869432,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1611869635,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1611870092,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1611940591,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1611940606,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611940870,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11623/ : SUCCESS"
        },
        {
            "timestamp": 1611951027,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1611952040,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1611952331,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1611953279,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1611953366,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1611953763,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1611954858,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1616694110,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\nBump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?"
        },
        {
            "timestamp": 1616694128,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> Bump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?\n\nNot irc, the mailing list.  doh."
        },
        {
            "timestamp": 1616694227,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1616694556,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> Bump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?\n\nAs I understand it, my current patch set isn't the best because the properties are named the same on each interface, so with PDI/sdbusplus if the same object path has multiple thresholds there isn't a way to distinguish them."
        },
        {
            "timestamp": 1616697166,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > Bump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?\n> \n> As I understand it, my current patch set isn't the best because the properties are named the same on each interface, so with PDI/sdbusplus if the same object path has multiple thresholds there isn't a way to distinguish them.\n\nIn the current patch, they're different signals, right?\nHighAlarmAsserted, LowAlarmAsserted, ect."
        },
        {
            "timestamp": 1616697406,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > > Patch Set 3:\n> > > \n> > > Bump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?\n> > \n> > As I understand it, my current patch set isn't the best because the properties are named the same on each interface, so with PDI/sdbusplus if the same object path has multiple thresholds there isn't a way to distinguish them.\n> \n> In the current patch, they're different signals, right?\n> HighAlarmAsserted, LowAlarmAsserted, ect.\n\nThe problem is what Patrick mentioned earlier:\n\"These names are problematic for the class generator.  When the expectation is that we will combine classes together into a single instance using sdbusplus::object, we need to have different names for members across all the combined-classes.  That is why the property names here all include their interface type, like <Critical>AlarmLow.\n\nWithout unique names a server will call `instance->highAlarmAsserted(value)` and there is ambiguity as to which one you are intending to call.\""
        },
        {
            "timestamp": 1616697466,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > > Patch Set 3:\n> > > \n> > > > Patch Set 3:\n> > > > \n> > > > Bump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?\n> > > \n> > > As I understand it, my current patch set isn't the best because the properties are named the same on each interface, so with PDI/sdbusplus if the same object path has multiple thresholds there isn't a way to distinguish them.\n> > \n> > In the current patch, they're different signals, right?\n> > HighAlarmAsserted, LowAlarmAsserted, ect.\n> \n> The problem is what Patrick mentioned earlier:\n> \"These names are problematic for the class generator.  When the expectation is that we will combine classes together into a single instance using sdbusplus::object, we need to have different names for members across all the combined-classes.  That is why the property names here all include their interface type, like <Critical>AlarmLow.\n> \n> Without unique names a server will call `instance->highAlarmAsserted(value)` and there is ambiguity as to which one you are intending to call.\"\n\nI will go ahead and give each property a unique name."
        },
        {
            "timestamp": 1616769383,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1616769395,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616770082,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 4:\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > > Patch Set 3:\n> > > \n> > > > Patch Set 3:\n> > > > \n> > > > > Patch Set 3:\n> > > > > \n> > > > > Bump.  This patch got mentioned on IRC, and reading through the comments, it looks like everything was addressed or responded to.  Is there something else this is waiting on?\n> > > > \n> > > > As I understand it, my current patch set isn't the best because the properties are named the same on each interface, so with PDI/sdbusplus if the same object path has multiple thresholds there isn't a way to distinguish them.\n> > > \n> > > In the current patch, they're different signals, right?\n> > > HighAlarmAsserted, LowAlarmAsserted, ect.\n> > \n> > The problem is what Patrick mentioned earlier:\n> > \"These names are problematic for the class generator.  When the expectation is that we will combine classes together into a single instance using sdbusplus::object, we need to have different names for members across all the combined-classes.  That is why the property names here all include their interface type, like <Critical>AlarmLow.\n> > \n> > Without unique names a server will call `instance->highAlarmAsserted(value)` and there is ambiguity as to which one you are intending to call.\"\n> \n> I will go ahead and give each property a unique name.\n\nDone."
        },
        {
            "timestamp": 1616770302,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14429/ : SUCCESS"
        },
        {
            "timestamp": 1616770729,
            "reviewer": {
                "name": "Duke",
                "email": "Duke.Du@quantatw.com",
                "username": "dukedu83"
            },
            "message": "Patch Set 4: Code-Review+1\n\nIt looks good to me, thanks."
        },
        {
            "timestamp": 1617116926,
            "reviewer": {
                "name": "Matthew Barth",
                "email": "msbarth@linux.ibm.com",
                "username": "msbarth"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1617131531,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1617823997,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4: Code-Review+2"
        },
        {
            "timestamp": 1617824005,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "4d781838d273ecfb9a95d9e89876a11dcde81cf0",
            "parents": [
                "6f8ebc58ebe13e97522a7d1740690dde1adadaa8"
            ],
            "ref": "refs/changes/99/39899/1",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1611264638,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 62,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "None of this is needed right?  We can get this from the path of the asserted threshold, and we're never going to assert a threshold from any property other than \"Value\", and the interface is available in the signal message."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 62,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Sensor name and interface could definitely be retrieved from any signal, but I'm matching this to the signal already coded into dbus-sensors that the sel-logger code is consuming (i wasn't involved in that).  While I guess theoretically I could go change that code, my systems don't use sellogger so I can't test.\n\nThreshold interfaces have two alarm properties, alarm low and alarm high, and they are customized per interface name, like warningAlarmHigh vs criticalAlarmHigh, so the property name is needed in this case."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Isn't this always going to be true?"
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 67,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Alarms can deassert.  (yea, the signal name is ThresholdAsserted so that is a bit misleading,  but again I am just documenting what is actually being used today, so that I can implement this in other apps.)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/HardShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/SoftShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Warning.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 107,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "1d31bd2b7ce790125a6fb796c919ea3166a23a32",
            "parents": [
                "6f8ebc58ebe13e97522a7d1740690dde1adadaa8"
            ],
            "ref": "refs/changes/99/39899/2",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1611843924,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 62,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What if we did something like this instead?  The below greatly simplifies the content of the signal itself that needs sent, and has far fewer ways that a producer of this signal can mess it up.  IMO, it's also much more obvious, and lets consumers add matches on exactly what they want, rather than having to match on a generic threshold asserted then filter within the application.\n\nsignals:\n    - name: CriticalHighThresholdAsserted\n      description: >\n          One of the alarm properties changed.\n      properties:\n         - name: SensorValue\n           type: double\n           description: >\n               The sensor value that triggered the alarm change.\n    - name: CriticalHighThresholdDeAsserted\n      description: >\n          One of the alarm properties changed.\n      properties:\n         - name: SensorValue\n           type: double\n           description: >\n               The sensor value that triggered the alarm change.\n    - name: CriticalLowThresholdasserted\n      description: >\n          One of the alarm properties changed.\n      properties:\n         - name: SensorValue\n           type: double\n           description: >\n               The sensor value that triggered the alarm change.\n    - name: CriticalLowThresholdDeasserted\n      description: >\n          One of the alarm properties changed.\n      properties:\n         - name: SensorValue\n           type: double\n           description: >\n               The sensor value that triggered the alarm change."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 62,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I need to care about 5 thresholds (the new 3 just from virtual-sensor), so that would give me 20 signal handlers as opposed to 1, but I'm OK with it if that's what can merge.\n\nIt would be nice if someone would agree to make the corresponding change in phoshor-sel-logger (since I can't do the work) to change to using 8 matches for warning/critical so that dbus-sensors can change so I can get signals from it, which I will need to do (though that isn't quite as urgent)."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 62,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "At a minimum in the old way you'd need 1 per interface, right?  5 to 20 isn't great.\n\nIf we rename them to take the type name out of the signal, does it help?\n\nso, HighThresholdAsserted instead of CriticalHighThresholdAsserted, ect.\n\nI forget if match expressions let you match on multiple interfaces at once, but if it does the above would at least cut down on the duplication a little."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 62,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "You just need to match on the signal name, like member='ThresholdAsserted', so it's just 1 match.\n\nIf we reduced them to HighThresholdAsserted, HighThresholdDeasserted, LowThresholdAsserted, and LowThresholdDeasserted that would be 4 total matches, which isn't bad at all."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/HardShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/SoftShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Warning.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 71,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
            "parents": [
                "6f8ebc58ebe13e97522a7d1740690dde1adadaa8"
            ],
            "ref": "refs/changes/99/39899/3",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1611940591,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Don't we already get this same information from a PropertyChanged event though?  Why do we need to define a new one?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "it has the sensor value from the Value interface that tripped it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is solving a problem we've discussed a couple times on discord and IRC;  Those threads probably do it better justice than this commit message."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "These names are problematic for the class generator.  When the expectation is that we will combine classes together into a single instance using sdbusplus::object, we need to have different names for members across all the combined-classes.  That is why the property names here all include their interface type, like <Critical>AlarmLow.\n\nWithout unique names a server will call `instance->highAlarmAsserted(value)` and there is ambiguity as to which one you are intending to call."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I guess then I don't see a way forward here, which I'm OK with (other than all the time I've spent on it) since propertiesChanged followed by a getProperty will of course work for me.\n\n* Ed didn't want the ThresholdAsserted signal currently being used by dbus-sensors, which would have allowed 1 match to get all alarm changes on all types of threshold interfaces\n* How it is now has the problem you state.\n* having a unique signal for each property could mean up to 20 matches to watch all the interfaces."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I guess the single ThresholdAsserted signal would also have the multi-inheritance problems..."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Groan.... i forgot about that limitation in PDI.  I wonder how hard that would be to fix in the generator code, if an interface conflics, prefix the object with the interface name.\n\nAssuming that's not possible or easy, my preference here would be to just go back to the prefixed version and have the 20 matches if you really need to get every threshold event.  I imagine most things won't need 20 matches;  IPMI only cares about 4 types of events.  Redfish is pretty similar, in that it would need 4 matches.\n\nIn terms of dbus, having a lot of very precise matches is probably the more correct answer anyway, as just matching on signal name would mean that if we ever put this signal name in a non-sensors interface, we'd still hit the match unintentionally."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I mentioned this on Discord before but it sounded like these thresholds were an attempt at unnecessary optimization. The right approach from a dbus perspective is to send a single PropertiesChanged signal for both the Boolean and the value. Unfortunately, we don\u2019t have a great mechanism to facilitate that...\n\nI\u2019ll add it to the list of features for sdbusplus."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I mentioned this on Discord before but it sounded like these thresholds were an attempt at unnecessary optimization. The right approach from a dbus perspective is to send a single PropertiesChanged signal for both the Boolean and the value. Unfortunately, we don\u2019t have a great mechanism to facilitate that...\n\nThe threshold events exist on different Interfaces, and PropertiesChanged doesn't have an array for Interface name, so you're required to send two messages, and dbus doesn't have a concept of a properties \"transaction\" that I'm aware of.  It should be noted, we implemented this first with PropertiesChanged triggering a GetProperty call like dbus would expect, but it was inefficient, and had race conditions that occurred in practice for high poll rate sensors, so this was the solution that worked in practice. .\n\n> \n> I\u2019ll add it to the list of features for sdbusplus."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "line": 46,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> The threshold events exist on different Interfaces, and PropertiesChanged doesn't have an array for Interface name, so you're required to send two messages, and dbus doesn't have a concept of a properties \"transaction\" that I'm aware of. \n\nOh, you are right.  PropertiesChanged won't work here due to two different interfaces.\n\n> i forgot about that limitation in PDI.  I wonder how hard that would be to fix in the generator code, if an interface conflicts, prefix the object with the interface name.\n\nPretty hard.  The generator currently runs on one interface at a time.  We would have to have it load all of them at once and run unique across everything.  It doesn't really know \"these interfaces are likely to be combined together\".\n\nI suspect most compilers will tell you the call is ambiguous and force you to be explicit `<interface>::<function>(...)`, but I don't know how you possibly do overloads then, if that were necessary.\n\nOverloads are likely pretty handy for these in particular.  You could just call 'HighAlarmAsserted(value)' and have the alarm set as a side-effect of the overloaded function.  Probably cleans up some of our sensor threshold logic (basing that on some code in phosphor-virtual-sensors that Matt worked on recently)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/HardShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/SoftShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Warning.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 135,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "70ee1cff21ade602590f7be9310d68a6903a5bf8",
            "parents": [
                "ae956ad9efd2be24c5439a4ef6498fb5c8383719"
            ],
            "ref": "refs/changes/99/39899/4",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1616769383,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/HardShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/PerformanceLoss.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/SoftShutdown.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Threshold/Warning.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 168,
            "sizeDeletions": 0
        }
    ]
}