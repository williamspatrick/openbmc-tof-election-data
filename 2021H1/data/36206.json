{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "topic": "36206-schema",
    "id": "Id499e1cd6c7918179bb1729e5ce8546cf4121dfa",
    "number": 36206,
    "subject": "ExternalSensor: New service for external sensors",
    "owner": {
        "name": "Josh Lehan",
        "email": "krellan@google.com",
        "username": "Krellan"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36206",
    "commitMessage": "ExternalSensor: New service for external sensors\n\nThis code was mostly copied from HwmonTempSensor, and inspired by the\ninitial proof of concept from https://gerrit.openbmc-project.xyz/35476\n\nExternal sensors are designed to be placeholders, with no hwmon or\nother hardware support locally. Thus, there is no detection or kernel\ndriver load, so no change is necessary to entity-manager.\n\nThe expectation is that these sensors will be updated by something\nexternal to the BMC, such as the host, which can be useful for\nincluding host-based sensors into phosphor-pid-control thermal zones.\n\n* Added systemd service file, similar to the others.\n* Added CMakeLists blocks, similar to the others.\n* Also cleaned up some nearby formatting in CMakeLists.\n\nTested: With the addition of the Mutable feature from 36275, and the\ninstallation of the systemd file from 36272, and a change to our IPMI\ndaemon (still in the process of being upstreamed), the host can write\nto a sensor over IPMI. It correctly shows up in the IPMI SDR, and the\nwritten value correctly shows up on the D-Bus ExternalSensor here.\n\nHere is example JSON for use with entity-manager:\n{\n  \"Name\": \"HostOnlyDevTemp\",\n  \"Measure\": \"temperature\",\n  \"MinValue\": -10.0,\n  \"MaxValue\": 117.5,\n  \"Type\": \"ExternalSensor\"\n},\n\nSigned-off-by: Josh Lehan <krellan@google.com>\nChange-Id: Id499e1cd6c7918179bb1729e5ce8546cf4121dfa\nSigned-off-by: Ed Tanous <edtanous@google.com>\n",
    "createdOn": 1599136636,
    "lastUpdated": 1612217023,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1599136636,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1599136649,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599136656,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4154/"
        },
        {
            "timestamp": 1599136731,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4154/ : FAILURE"
        },
        {
            "timestamp": 1599137016,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1:\n\nThis builds on https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/35476 and finishes it into a working example.\n\nThe object path is different, /extsensors/ instead of /sensors/, but that is because phosphor-pid-control expects it that way.\n\nThis is good enough to get JSON of type \"ExternalSensor\" to result in an entry in the IPMI SDR that is visible to the host."
        },
        {
            "timestamp": 1599137234,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1599137249,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599137256,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4155/"
        },
        {
            "timestamp": 1599137337,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4155/ : FAILURE"
        },
        {
            "timestamp": 1599138775,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1599138789,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599138796,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4157/"
        },
        {
            "timestamp": 1599138856,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4157/ : FAILURE"
        },
        {
            "timestamp": 1599139245,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 4: Patch Set 3 was rebased."
        },
        {
            "timestamp": 1599139259,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599139266,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4158/"
        },
        {
            "timestamp": 1599139344,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4158/ : SUCCESS"
        },
        {
            "timestamp": 1599148502,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1599148799,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1599150507,
            "reviewer": {
                "name": "Alex Qiu",
                "email": "xqiu@google.com",
                "username": "alex310110"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1599154243,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1599154413,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1599165997,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 4:\n\n(8 comments)\n\nThanks for comments. I will upload another change that tries using the normal sensor object paths instead of the special \"extsensors\" path."
        },
        {
            "timestamp": 1599166371,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1599166772,
            "reviewer": {
                "name": "Alex Qiu",
                "email": "xqiu@google.com",
                "username": "alex310110"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1599168166,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1599187208,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 5: Patch Set 4 was rebased"
        },
        {
            "timestamp": 1599187220,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599187228,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4215/"
        },
        {
            "timestamp": 1599187314,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4215/ : SUCCESS"
        },
        {
            "timestamp": 1599256914,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1599385283,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1599385298,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599385305,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4307/"
        },
        {
            "timestamp": 1599385330,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4307/ : FAILURE"
        },
        {
            "timestamp": 1599385771,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1599385771,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 6:\n\nThis change is ready for review."
        },
        {
            "timestamp": 1599387835,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 7: Patch Set 6 was rebased."
        },
        {
            "timestamp": 1599387848,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599387855,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4309/"
        },
        {
            "timestamp": 1599387935,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4309/ : SUCCESS"
        },
        {
            "timestamp": 1599388686,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 7:\n\nOK, earlier comments are taken into account. The CMakeLists file has been cleaned up. The ExternalSensor now uses the same directory path as the other sensors. Added a new configuration parameter, \"Measure\", which lets you tell it the correct path component you want it to be added under (such as temperature, voltage, and so on). It should now act more orthogonally to the other sensors."
        },
        {
            "timestamp": 1599388838,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Topic set to 36206-external"
        },
        {
            "timestamp": 1599595891,
            "reviewer": {
                "name": "Peter Lundgren",
                "email": "peterlundgren@google.com",
                "username": "peterlundgren"
            },
            "message": "Patch Set 7:\n\nThere have been some good discussions in the comments here. Let's step up our documentation game and find a place to write this down. I propose a .md file documenting ExternalSensor, example JSON, what to expect on dbus, reference https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README, etc.\n\nI'll defer to James and Ed for approval of the technical details."
        },
        {
            "timestamp": 1599607578,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 7:\n\n> Patch Set 7:\n> \n> There have been some good discussions in the comments here. Let's step up our documentation game and find a place to write this down. I propose a .md file documenting ExternalSensor, example JSON, what to expect on dbus, reference https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README, etc.\n> \n> I'll defer to James and Ed for approval of the technical details.\n\nAgreed, documentation would be good, I want to get the code concept approved first, though. I recently learned of a YAML \"MIB\" for describing the existing objects on D-Bus, it could be added there, for example: https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/Sensor/Value.interface.yaml"
        },
        {
            "timestamp": 1599620343,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 7:\n\n(4 comments)"
        },
        {
            "timestamp": 1599623712,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n(4 comments)"
        },
        {
            "timestamp": 1599623751,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n> Patch Set 7:\n> \n> There have been some good discussions in the comments here. Let's step up our documentation game and find a place to write this down. I propose a .md file documenting ExternalSensor, example JSON, what to expect on dbus, reference https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README, etc.\n> \n> I'll defer to James and Ed for approval of the technical details.\n\nI'm stuck in GTI for a bit;  I will try to get back to this for review in more detail."
        },
        {
            "timestamp": 1599624071,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n(2 comments)\n\n> Patch Set 7:\n> \n> > Patch Set 7:\n> > \n> > There have been some good discussions in the comments here. Let's step up our documentation game and find a place to write this down. I propose a .md file documenting ExternalSensor, example JSON, what to expect on dbus, reference https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README, etc.\n> > \n> > I'll defer to James and Ed for approval of the technical details.\n> \n> Agreed, documentation would be good, I want to get the code concept approved first, though. I recently learned of a YAML \"MIB\" for describing the existing objects on D-Bus, it could be added there, for example: https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/Sensor/Value.interface.yaml\n\nI think the interface changes are going to drive changes to your code, so I'm hesitant to approve it in the reverse order.  With that said, for what you have now, I suspect you're ready to do a dbus-interfaces review, which I'm happy to also add input on."
        },
        {
            "timestamp": 1599628747,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 7:\n\n(7 comments)\n\n> Patch Set 7:\n> \n> (2 comments)\n> \n> > Patch Set 7:\n> > \n> > > Patch Set 7:\n> > > \n> > > There have been some good discussions in the comments here. Let's step up our documentation game and find a place to write this down. I propose a .md file documenting ExternalSensor, example JSON, what to expect on dbus, reference https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README, etc.\n> > > \n> > > I'll defer to James and Ed for approval of the technical details.\n> > \n> > Agreed, documentation would be good, I want to get the code concept approved first, though. I recently learned of a YAML \"MIB\" for describing the existing objects on D-Bus, it could be added there, for example: https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/Sensor/Value.interface.yaml\n> \n> I think the interface changes are going to drive changes to your code, so I'm hesitant to approve it in the reverse order.  With that said, for what you have now, I suspect you're ready to do a dbus-interfaces review, which I'm happy to also add input on.\n\nThanks! I'll also make a change for dbus-interfaces YAML, to add this field. I'm curious where this YAML is actually used? It seems advisory, instead of mandatory."
        },
        {
            "timestamp": 1599629112,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 7:\n\n(4 comments)"
        },
        {
            "timestamp": 1599629285,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n> Patch Set 7:\n> \n> (7 comments)\n> \n> > Patch Set 7:\n> > \n> > (2 comments)\n> > \n> > > Patch Set 7:\n> > > \n> > > > Patch Set 7:\n> > > > \n> > > > There have been some good discussions in the comments here. Let's step up our documentation game and find a place to write this down. I propose a .md file documenting ExternalSensor, example JSON, what to expect on dbus, reference https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README, etc.\n> > > > \n> > > > I'll defer to James and Ed for approval of the technical details.\n> > > \n> > > Agreed, documentation would be good, I want to get the code concept approved first, though. I recently learned of a YAML \"MIB\" for describing the existing objects on D-Bus, it could be added there, for example: https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/Sensor/Value.interface.yaml\n> > \n> > I think the interface changes are going to drive changes to your code, so I'm hesitant to approve it in the reverse order.  With that said, for what you have now, I suspect you're ready to do a dbus-interfaces review, which I'm happy to also add input on.\n> \n> Thanks! I'll also make a change for dbus-interfaces YAML, to add this field. I'm curious where this YAML is actually used? It seems advisory, instead of mandatory.\n\nIt's used for both documentation, and to generate code for certain kinds of daemons.  In modern times, we've moved a lot of the daemons to code generated via c++ template, which avoids the need for YAML code generation, but we still do it for documentation, as it's much easier to review in principal than code, and lets other people determine which side broke the dbus interface when conflicts come up."
        },
        {
            "timestamp": 1599629580,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n(3 comments)"
        },
        {
            "timestamp": 1599648851,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1599648865,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599648873,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4453/"
        },
        {
            "timestamp": 1599648950,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4453/ : SUCCESS"
        },
        {
            "timestamp": 1599650263,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 8:\n\nOK, I again took the comments into account. This is revised to use \"Mutable\" instead of \"ExtSettable\", as per the change just below this one. Cleaned up comments and wording to be less misleading. Removed the stray IPMI configuration parameters that had crept into the commit message by accident."
        },
        {
            "timestamp": 1599671490,
            "reviewer": {
                "name": "Peter Lundgren",
                "email": "peterlundgren@google.com",
                "username": "peterlundgren"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1599678612,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1599717595,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 8:\n\n(3 comments)\n\nSome good discussions here. However, perhaps getting off topic. Any thoughts on ExternalSensor itself?"
        },
        {
            "timestamp": 1599775920,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n> Patch Set 8:\n> \n> (3 comments)\n> \n> Some good discussions here. However, perhaps getting off topic. Any thoughts on ExternalSensor itself?\n\nI'm waiting for the results of the phorphor-dbus-interfaces review, as I'm assuming integrating those comments is going to cause a change to this.\n\nIf you're wanting this reviewed ahead of that review, happy to do it."
        },
        {
            "timestamp": 1599778224,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(5 comments)"
        },
        {
            "timestamp": 1600058567,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1600059140,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 8:\n\n(5 comments)\n\nThanks for comments! Busy now, but will return to this in the near future."
        },
        {
            "timestamp": 1600059140,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1600059147,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1608807089,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 9: Patch Set 8 was rebased."
        },
        {
            "timestamp": 1608807100,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Topic 36206-external removed"
        },
        {
            "timestamp": 1608807103,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608807156,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 10: Patch Set 9 was rebased."
        },
        {
            "timestamp": 1608807173,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608807177,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10299/ : ABORTED"
        },
        {
            "timestamp": 1608807268,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10300/ : FAILURE"
        },
        {
            "timestamp": 1608807430,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1608807443,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608807545,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10301/ : FAILURE"
        },
        {
            "timestamp": 1608812709,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1608812723,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608812817,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10302/ : SUCCESS"
        },
        {
            "timestamp": 1608813611,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 12:\n\nI found the time to revisit this patch. Removed dependencies on Mutable feature and the topic (patchset 9). Rebased to latest master (patchset 10). Added fix to make std::variant processing more robust (patchset 11). Temporarily removed Mutable integration until that feature lands (patchset 12). There was a lively discussion in the old comments. Are any of them still relevant? I could add a filter for the Name and Measure fields, as one comment suggested."
        },
        {
            "timestamp": 1608813611,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1608827777,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1608833832,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(17 comments)\n\nLots of minor stuff, nothing too major."
        },
        {
            "timestamp": 1608834049,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1610351629,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1610351643,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610351721,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10715/ : SUCCESS"
        },
        {
            "timestamp": 1610351757,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 13:\n\n(20 comments)\n\nOK, revised as per all the comments received. Thanks for looking at it earlier."
        },
        {
            "timestamp": 1610381563,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1610381758,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1610382251,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n(2 comments)\n\nA couple minor changes to the allowlist, then this looks good to go."
        },
        {
            "timestamp": 1610629941,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1611288748,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 14: Patch Set 13 was rebased."
        },
        {
            "timestamp": 1611288762,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611288842,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11288/ : SUCCESS"
        },
        {
            "timestamp": 1611291936,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 15."
        },
        {
            "timestamp": 1611291947,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611291983,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 15:\n\n(4 comments)\n\nCleaned up and addressed comments."
        },
        {
            "timestamp": 1611292029,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11290/ : SUCCESS"
        },
        {
            "timestamp": 1611292052,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Topic set to 36206-schema"
        },
        {
            "timestamp": 1611355099,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 15:\n\n(7 comments)"
        },
        {
            "timestamp": 1611466709,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 16."
        },
        {
            "timestamp": 1611466720,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611466801,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11342/ : SUCCESS"
        },
        {
            "timestamp": 1611466915,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 16:\n\n(6 comments)\n\nOK, further revised as per these new comments. The commit message is updated."
        },
        {
            "timestamp": 1611590385,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 16:\n\n(2 comments)"
        },
        {
            "timestamp": 1611590518,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 16:\n\n(1 comment)"
        },
        {
            "timestamp": 1611651819,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 17."
        },
        {
            "timestamp": 1611651834,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611651888,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 17:\n\n(3 comments)\n\nUpdated to use std::array"
        },
        {
            "timestamp": 1611651913,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11402/ : SUCCESS"
        },
        {
            "timestamp": 1611878154,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 17:\n\n(1 comment)"
        },
        {
            "timestamp": 1611900075,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 17:\n\n(1 comment)"
        },
        {
            "timestamp": 1611900621,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 17:\n\n(1 comment)"
        },
        {
            "timestamp": 1611944153,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 18."
        },
        {
            "timestamp": 1611944172,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611944253,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11630/ : SUCCESS"
        },
        {
            "timestamp": 1611944882,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1611953581,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1611953944,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1612200481,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18: Code-Review+2"
        },
        {
            "timestamp": 1612200489,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged by Ed Tanous"
        },
        {
            "timestamp": 1612214795,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 18:\n\n(1 comment)\n\nI am curious how this got merged without the topic link also being merged? I thought the purpose of \"Topic\" was to glue two submits together, so they could both be submitted simultaneously. The build broke \ud83d\ude1e"
        },
        {
            "timestamp": 1612215001,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)\n\n> Patch Set 18:\n> \n> (1 comment)\n> \n> I am curious how this got merged without the topic link also being merged? I thought the purpose of \"Topic\" was to glue two submits together, so they could both be submitted simultaneously. The build broke \ud83d\ude1e\n\nBecause I messed up;  There's nothing that actually enforces the topics unfortunately, and I didn't even the added topic when I merged this.\n\nRemedying shortly."
        },
        {
            "timestamp": 1612216088,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1612217023,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "41e2d32a55d06d3a82bb3a2bb22d8cc77c2f8d6d",
            "parents": [
                "c7e956275ffeff2b3e8ea9cad90bdccec61b4945"
            ],
            "ref": "refs/changes/06/36206/1",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599136636,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -1
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 230,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 370,
            "sizeDeletions": 1
        },
        {
            "number": 2,
            "revision": "26d944967a4d4635e923e6dfd8ac1ed54f2e1bf9",
            "parents": [
                "c7e956275ffeff2b3e8ea9cad90bdccec61b4945"
            ],
            "ref": "refs/changes/06/36206/2",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599137234,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -1
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 230,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 369,
            "sizeDeletions": 1
        },
        {
            "number": 3,
            "revision": "d15a17e19cd1fdf2c6a72ed1fcc0ff7b121b3e82",
            "parents": [
                "c7e956275ffeff2b3e8ea9cad90bdccec61b4945"
            ],
            "ref": "refs/changes/06/36206/3",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599138775,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -1
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 230,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 369,
            "sizeDeletions": 1
        },
        {
            "number": 4,
            "revision": "b742ceb9ccc0d91a938cb58e69355502adde9795",
            "parents": [
                "105a19754f003956def5934612b1de86225a4bc1"
            ],
            "ref": "refs/changes/06/36206/4",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599139245,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "What are these used for?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "They're configuration for another module, intel-ipmi-oem, that shouldn't be in this example. I will remove them."
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 228,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "can we do this for all sensors? or maybe just move these into the line 237 and below sections?"
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 228,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I'm not sure, honestly. I'm not great at the CMakeLists syntax, and wanted to just follow the existing model of what was there already. It would be worth making a separate change to clean up the CMakeLists file."
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 228,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "In the latest patchset, I was able to find a way to clean this up."
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Header here and other files?"
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Not sure what you mean? I followed the existing design of HwmonTempSensor."
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "James and I argued a lot about using inheritance here instead of composition.  Clearly he won, but I'm still bitter about it :)"
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "line": 12,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I copied the existing design of HwmonTempSensor. However, like you, I prefer composition (has-a), as it is easier and clearer to read and understand than inheritance. Plus, there are no constructor-destructor gotchas with composition, unlike with inheritance...."
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "James just felt a disturbance in the force."
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "line": 12,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": ":)"
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "this documented somewhere? These won't show in bmcweb I'd think"
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "This somewhat unusual path is documented here: https://github.com/openbmc/phosphor-pid-control/blob/master/sensors/README\n\nThe intent is to use these external sensors as inputs, from the host, into phosphor-pid-control, so I'm following that design."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 41,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "how is the value populated?"
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 41,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "Oh, it uses sensor override."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "It's populated externally from the host, using IPMI. Or, you can manually update it from the BMC using busctl set-property commands. The purpose of this daemon is just to be a placeholder, to be orthogonal to the other sensor types supported in dbus-sensors: recognize the sensor type from entity-manager, set it up in the usual way (thresholds, range, etc.), and register it with the IPMI SDR."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This was one thing I wondered, should the BMC itself be doing the thresholding, or should we defer that to dbus.  There's probably use cases for both, so this is fine as is, just something I wondered about."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I'm not sure about this, but I wanted to handle it as orthogonal as possible to the way it's done for the other sensors. If the host writes a wild value to this sensor, it should trigger the thresholds in the usual way, just as if it came from hwmon and the hardware sensed a wild value."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit: I think you can skip the things it's not, and just start this with\n\nExternalSensor is a sensor intended to be settable....."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 35,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, I can clean up the wording, but wanted to make it clear what's unique about it and why this daemon does not poll the local hardware in the usual way."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Idk, there are plenty of sensors that don't poll hardware.  This isn't that unique in that regard."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 35,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Interesting. I see that every other sensor in dbus-sensors does poll physical hardware, except for PwmSensor (and PwmSensor is tied to TachSensor). Are there any other sensors that do not poll physical hardware?"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Technically on dbus this isn't a valid sensor.  Sensors have to go in the /xyz/openbmc_project/sensors path.\n\nAlso, \"margin\" is not a valid sensor type today.\n\nI think I get what you're wanting here, but we'd have to roll this through as a phosphor-dbus-interfaces change.\n\nI suspect we just want this in the normal /xyz/openbmc_project/sensors/temperature path."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "+1"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Hmm. This is a good point. I tried to follow the (somewhat unusual) sensor object path syntax required by phosphor-pid-control design. It might be worth going the other way, adapting phosphor-pid-control to use more normal object paths, instead of trying to bend the rest of the system to adapt to it instead."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Patrick Venture",
                        "email": "venture@google.com",
                        "username": "pstrinkle"
                    },
                    "message": "The extsensor path is meant to convey that a sensor is populated directly from the host (via ipmi or other means), whereas all other sensors are populated by the BMC.  I think it's fine to change this here, but changing this in phosphor-pid-control would be a configuration breaking change - and it's only used for the json configurations - so perhaps that distinction should be kept - here though, in this code - it doesn't need to follow that appr"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "It looks like your text got cut off, but I think I get what you mean. I'll change the object path back, so that it looks more like a regular sensor, and see if it still works."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I cleaned up this wording in the later patchset."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Alex Qiu",
                        "email": "xqiu@google.com",
                        "username": "alex310110"
                    },
                    "message": "I don't know much about C++ lambda, but is it possible to make a normal function out of this block, and use the function pointer to init GetSensorConfiguration? This may reduce code indentation and help readability a lot."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "It would. I wanted to copy what was known good in HwmonTempSensor, though, to minimize risk of this change. It does seem strange how the original authors of HwmonTempSensor wanted to obfuscate this block into a lambda, I disagree with that as well. Something simple and iterative, like walking D-Bus paths during sensor discovery, doesn't necessarily need to be a lambda."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Alex Qiu",
                        "email": "xqiu@google.com",
                        "username": "alex310110"
                    },
                    "message": "I see. Thx!"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\"It does seem strange how the original authors of HwmonTempSensor wanted to obfuscate this block into a lambda\"\n\nJames wrote the first version of this sensor, and he's a big fan of lambdas.  As a project, OpenBMC probably overuses them."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks for the background. It hurts readability, especially in cases like this where there's no real need to defer execution or capture variables into a different context for later use (two very good reasons to use lambda). To declare a lambda and then call it immediately, this kind of defeats the purpose of a lambda, it should have been an ordinary function instead. However, what's done is done, and I didn't want to deviate too much from the standard \"look and feel\" of a dbus-sensors sensor module."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "Alex Qiu",
                        "email": "xqiu@google.com",
                        "username": "alex310110"
                    },
                    "message": "Are we expecting more sensor types? Or we can just need to find one constant string?"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Again, I wanted to minimize risk and differences between this and HwmonTempSensor. This also makes it trivial to add more recognized type strings in the future if needed."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "Alex Qiu",
                        "email": "xqiu@google.com",
                        "username": "alex310110"
                    },
                    "message": "I see. Thx!"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Are these defaults good for the extsensors also?"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "They look like it."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks, I'll keep using a signed byte. The JSON can always specify a different range if desired."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 118,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I could be misunderstanding, but I thought some of the comments hinted that \"Measure\" is going to be used as Prefix?"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 118,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "This is an old patchset, see the later patchset in which I changed it to \"Measure\"."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -1
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 230,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 369,
            "sizeDeletions": 1
        },
        {
            "number": 5,
            "revision": "4dcea539ccf4065a13a0a245a25b6f1125d2dbf9",
            "parents": [
                "838529b5400129e8a3a8007ca83102c7733ec01c"
            ],
            "ref": "refs/changes/06/36206/5",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599187208,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -1
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 230,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 369,
            "sizeDeletions": 1
        },
        {
            "number": 6,
            "revision": "2ca3d6627a33770589f092cd2e5a55fe67ac0c6a",
            "parents": [
                "b1d97fbd752870bd919322b410853f202e424e5f"
            ],
            "ref": "refs/changes/06/36206/6",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599385283,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 238,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 383,
            "sizeDeletions": 13
        },
        {
            "number": 7,
            "revision": "b5810fbe3a50b6c339b172d1e42277bb5bfddcf5",
            "parents": [
                "3abb40674b474d4f522f27696c4c372a3a597709"
            ],
            "ref": "refs/changes/06/36206/7",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599387835,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think we need something more generic here.  EntityId is something IPMI specific (although I'm spacing on what it's for)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks, I should take this out of the example. It is merely an implementation detail. In our case, it's parsed by intel-ipmi-oem, and it's transparent to dbus-sensors, so it doesn't really belong in this example.\n\nThat's the beauty of these JSON stanzas: some are parsed by dbus-sensors but other modules, such as entity-manager and intel-ipmi-oem, can also see the same stanzas. Aren't optional parameters convenient?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It's parsed by intel-ipmi-oem?  I don't remember writing something to parse that, I thought we hardcoded everything to 1.  That behavior must be newish.\n\n\"That's the beauty of these JSON stanzas: some are parsed by dbus-sensors but other modules, such as entity-manager and intel-ipmi-oem, can also see the same stanzas. Aren't optional parameters convenient?\"\nTell the guys that invented DBus :)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "Support for configurable entity ids and entity instances was added by Patrick Venture in https://gerrit.openbmc-project.xyz/c/openbmc/intel-ipmi-oem/+/26345.\n\nJosh is not changing behavior here."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Gotcha.  I was a little surprised because one of the core tennents of these config files is that they don't contain protocol-specific data, and when they need something like that, they use an indirection that we can define the behavior of and constrain as needed, so we don't have to break the API going forward, and we don't have to duplicate the information for IPMI/Redfish/Dbus/new protocol of the year.  Putting EntityID in the config file breaks that idea a bit.\n\nWith that said, that's a tangent, and not related to that patch."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, good to know."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is this required in your implementation?  In general, half the BMCs I look at do this incorrectly or differently.  I'd rather just generate it in intel-ipmi-oem if possible, rather than put IPMI specific data in the config file."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yes, in our case these fields are parsed by intel-ipmi-oem and they're used to override what would be placed there by entity-manager by default (it would re-use the entity ID/instance tuple of the underlying motherboard, but I needed a separate entity ID/instance tuple for each fan).\n\nI'll remove these from this example, because they're confusing and not relevant to dbus-sensors."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\"a separate entity ID/instance tuple for each fan\" I wonder if this logic can just be coded, rather than making it a config parameter, as hardcoding the entity here wouldn't support multiple chassis types."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "We had a similar discussion about sensors early. We relate instance numbers with physical locations / silkscreens, so being able to configure them has been necessary."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In theory that's what the fan connector object is for, so you can directly reference the silkscreen port on the baseboard and map it to an entity.  The entity itself never holds an \"index\".\n\nWith that said, again, unrelated to this patch."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "As for the fan connector, it also has a purpose, to relate the RPM object (a normally instantiated object) to the PWM object. This is really the only way to find the PWM object, since the PWM object is a weird one, it isn't instantiated in the normal way by entity-manager, it's synthesized by FanMain.\n\nThis PWM association is kind of weird, and could use some further thought: https://github.com/openbmc/dbus-sensors/issues/2"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 238,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 383,
            "sizeDeletions": 13
        },
        {
            "number": 8,
            "revision": "731a46cd2afbece4f4f6f0297f473a3f460b289e",
            "parents": [
                "dd7adf5586c277e107e43eebc01917a104d7bb51"
            ],
            "ref": "refs/changes/06/36206/8",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599648851,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "CMakeLists.txt",
                    "line": 220,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "When built in yocto, does the \"real\" cmake targets show up now?  They didn't in the past, which is why these were under \"if not yocto\" checks."
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 220,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Not sure. I didn't check the cmake targets.\n\nThe reason I made this edit is to make the large \"if (NOT YOCTO)\" block above, no longer necessary. The contents of this block have been scattered to their own individual \"if (NOT DISABLE_*)\" sections below. This is so that, if disabled, their dependencies will also be disabled."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 38,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This needs some kind of validation to ensure I'm not setting this to an invalid dbus path, or anything nefarious like that.  Usually simply limiting this to isalpha and isdigit for the name is enough.\n\nYou probably can use a lookup of valid types for sensorMeasure."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 38,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, will keep that in mind. Adding a lookup here would make it brittle if more types were added in the future, but I can easily add a filter to make sure they are using sane filenames."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, I don't ever see this supporting other sensor types, we'd just add new properties to the config for new use cases, so I suspect this can just be inlined."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Makes sense, I thought that too. Wanted to match the existing \"look and feel\" of the other sensors, though, and this was copied from HwmonTempSensor."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We don't have a scan loop, so does the power state handling do anything here?  I suspect it's unneeded."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I wanted to keep the power state initialized in the same way the other sensors are, to prevent some kind of breakage or incompatibility."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 172,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit/comment.  Now that we have c++17, I wonder if try_emplace would make this hack less nasty.  This exists because on a config change, the old ExternalSensor is still holding the dbus path, so you need the old one to be destroyed before you create the new one.  Unfortunately, operator= here will create the shared_ptr rvalue, THEN destroy the old one with a move, and cause a dbus conflict"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 172,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks for the background. It is a bummer that operator= gets them in the wrong order. I like the obviousness of setting it to nullptr, but will add a comment explaining why."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 238,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 382,
            "sizeDeletions": 13
        },
        {
            "number": 9,
            "revision": "32c2484b5c4d34011a30325a3d2eeb0877c0f758",
            "parents": [
                "f920e09ce4a05265b3d624aca2556579e05d2caf"
            ],
            "ref": "refs/changes/06/36206/9",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1608807089,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 238,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 382,
            "sizeDeletions": 13
        },
        {
            "number": 10,
            "revision": "8c3db2f9b9c3cef7faef754d86725fffdab46eb2",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/06/36206/10",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1608807156,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 238,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 382,
            "sizeDeletions": 13
        },
        {
            "number": 11,
            "revision": "85800276c84e08dcbe2fc958e3a7599fb3b65238",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/06/36206/11",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1608807430,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 313,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 457,
            "sizeDeletions": 13
        },
        {
            "number": 12,
            "revision": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/06/36206/12",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1608812709,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Venture",
                        "email": "venture@google.com",
                        "username": "pstrinkle"
                    },
                    "message": "If you want to save space on this line, you can just use:\nhttps://gerrit.openbmc-project.xyz/35476"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Nice, did not know that."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do you have the entity-manager schema changes ready yet?  When they're ready please link the two commits together with the same topic."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Hmm, where should they be added? In entity-manager/schemas/legacy.json I found 2 large dictionaries, \"properties\" and \"Types\". Should the new terms (Measure, MinValue, MaxValue) be added here? Other daemons have been using MinValue and MaxValue for some time as well (such as PSUSensor), I'm surprised they are not already listed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm a little surprised they're not listed as well.  I can investigate, but yes, the schemas folder is the right place to put them, and there's a document on how to write new ones in that same folder."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK. The document was somewhat confusing, a question: should they be added under \"properties\" or \"Types\"? Also, there's a note saying new additions to legacy.json are discouraged? That seems to be the only logical place to put it, though."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, added it here: https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/39923/"
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FYI, dbus-sensors is moving to meson, and is likely to land before this.  Luckily, the effort to move over is significantly less onerous than the cmake variant.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/27100"
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 23,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, thanks for the heads-up. The only reason I'm modifying this file is to add ExternalSensor compilation orthogonally to the others. This could be done either in Meson or CMakeLists.txt, I'm OK with either."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Still needs validation that these are valid names and types.\n\nsd-bus these days has helper functions for this, although most other things tend to do isalpha | isdigit checks.\n\nsensorMeasure should be tested against the known list of possible sensor types."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "After discussion, I'm going to make this a separate include file, and put an allowlist in the include file. Although I disagree with it, the existing design philosophy in dbus-sensors seems to be to use allowlists to represent what has been tested and approved already, instead of being made to be general enough to accept unapproved new things. It also appears that the allowlist of allowed sensor object paths is not yet enumerated anywhere in dbus-sensors, so it's a good opportunity to add it now."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The above would work just fine.\n\nThere really hasn't been a case before where we're taking a dbus-sensor type from the user, hence why that list doesn't exist yet.  Most sensors have a fixed type, or a type determined by the underlying linux objects."
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, good. See the later patchset, I added a validation check against that, instead of allowing any value for sensorMeasure."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think I commented on one of the other reviews, but this sensor will never support multiple interfaces, so should we just make this a const char* instead of an array, and inline the definition where needed?"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Done. Since it's singular, also changed its name to \"sensorType\"."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please put this in your commit message."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 31,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "It already is in the commit message."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Venture",
                        "email": "venture@google.com",
                        "username": "pstrinkle"
                    },
                    "message": "This and below should be in an anonymous namespace instead of static - but I think perhaps Intel prefers static?  I don't know.  But, either way, if you put these two methods into a small utility file and expose them, yeah the text contents might be larger because it can't optimize them out, but, you can add a test to make sure they behave how you expect in all cases."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This and below should be in an anonymous namespace instead of static - but I think perhaps Intel prefers static?\n>  I don't know.  But, either way, if you put these two methods into a small utility file and expose them, yeah the text contents might be larger because it can't optimize them out, but, you can add a test to make sure they behave how you expect in all cases.\n\n\nI don't have a strong opinion between the two;  If I were writing it I'd probably go anonymous namespace."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "That would be over-engineered. Removed this entire function anyway."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we move this to an enum class with values of \"Required\" and \"NotRequired\"  That seems much more clear than a bool when calling this function."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 52,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "That would be over-engineered. Removed this entire function anyway."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is probably a check that should be done at higher scopes.  Technically an empty string is valid in some cases."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, I'll have the caller check for an empty string, instead of doing it within this function."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please use the existing visitor patterns here."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Removed this entire function."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please add a return false here"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Removed this entire function."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 114,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please use the existing visitor patterns for this.  They handle more types than you've handled here, and do it with less code."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 114,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Done."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 125,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering almost all other sensors have the need to get numbers and strings out of config space, I'd like to see these utility functions moved into another commit, and the rest of the sensors be brought up to this new state of the art, before these utility functions are used in a new sensor.  Which order you want to do it (external sensor, then utility, or utility then external sensor) is up to you, but adding utility functions that are only used on one sensor increases the binary size, and leaves the sensors less consistent than they were before."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 125,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I removed these functions entirely. The usage of the visitors is more concise, so it isn't as much of a win anymore to have separate functions."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 145,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit;  Use a const& here.  I don't see any uses of these as a pointers."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 145,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, can use references instead. The earlier intention was to just follow the existing code pattern as it already existed for other dbus-sensors daemons."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 160,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For a sensor with only one type, this isn't neccesary.  You will only ever get events of the correct type.  Just inline sensorType."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 160,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, done. This also let me refactor it, to change more pointers to references."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 175,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is different than what I had thought.  I would like to see these values required, as it reduces the possibility someone might mess up a configuration file in a subtle way by simply omitting them."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 175,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, makes sense to require MinValue and MaxValue to be present. Since this sensor daemon is inherently more flexible than the others, it can't assume reasonable defaults, since reasonable values for the units will vary based on what's being measured."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not your fault, as this looks copied from another sensor, but this needs a better check than just endswith.  Otherwise the sensors \"bar\" and \"foobar\" will both match the same expression.\n\nLikely needs fixed other places too if you're up for it."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, beefed up the ends_with() matcher here, to test it with a slash in front of it, thus comparing \"/bar\" with \"/foobar\" in your example, to cause a mismatch unless the entire basename matches."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 252,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not your fault, and it's ok if you want to leave it, but in new (C++14) code, these three operations can be done in a single operation with something like:\n\n\nsensors.emplace(\n\tstd::piecewise_construct, std::make_tuple(sensorName),\n\tstd::forward_as_tuple(\n\tsensorType, objectServer, dbusConnection, sensorName, sensorMeasure,\n\tstd::move(sensorThresholds), *intefacePath,\n\tminValue, maxValue, readState));"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 252,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yikes. I think I'll go with the existing usage, as there's a lot of deep C++ voodoo in this alternative."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please avoid wildcard captures.  They make it much harder to review lifetimes of objects, even though in this case, in main, it's very unlikely to be incorrect.  I think you just need &filterTimer, &sensorsChanged"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, expanding out the wildcard captures. Also need the createSensors() parameters, used on line 297 here, so added those also."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 286,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For some reason I thought this was 5 seconds in other places, but I guess we're just inconsistent.  NBD"
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 286,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I'm not entirely sure why this little delay is here, but other dbus-sensors daemons seem to use it as well. Do you know what the purpose of it is? Also, you're right, this should be a constant defined somewhere else, and then used for all sensors that need it, instead of having to hardcode a number in each sensor. This should be the subject of another change, though."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 286,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I'm not entirely sure why this little delay is here, but other dbus-sensors daemons seem to use it as well. Do you know what the purpose of it is?\n\nIt's a timer to avoid the sensor version of the stampeeding herd problem.  When sensors are added/removed at boot, there tends to be a lot of config changes that come in at once.  This timer forces the sensor to wait for at least one second of \"no new updates\" before trying to reconfigure the sensor subsystem which is relatively expensive to do.  Without this timer, boot would take much much longer."
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "line": 286,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Got it, thanks for the info."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 72,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 313,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 459,
            "sizeDeletions": 13
        },
        {
            "number": 13,
            "revision": "37bd301c9c52564ce2205026328c31abd5905cdb",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/06/36206/13",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1610351629,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Make a char* to avoid a global constructor at boot time."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, did it. That's a gotcha about std::string! Added future note for C++20 allowing constexpr std::string."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "unordered_set or boost::container::flat_set please.\n\nAlso, as a general rule, if/elseif switch statements compile to less code and are faster than making a map for fixed value sets like this.  dbus-sensors doesn't currently follow this rule, so up to you if you want to do it, but something to consider.\n\nAlso, if this isn't intended to be used directly, can you declare it inside InAllowedMeasures so we don't add to the sensors namespace."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, changed to std::unordered_set. Keeping it a vector for now, as that seems to be the cleanest approach. I did put it inside InAllowedMeasures(), though. Perhaps someday C++ will allow the switch statement on strings."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "looks like you turned it into an unordered set, which is now going to construct every time it's looked up.\n\nAs far as switch statements on strings go, meh, they're about the same amount of code as an if/elseif statement with each element in a conditional, and only slightly less ugly."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "If constructor overhead is a problem, then this should work. I rewrote it as a C array, not C++, and then iterate over it in the usual C way."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "std::array would be the preference over c-style arrays."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, I'll change that, see Patchset 17. I assume std::array has no constructor overhead, which is what you were initially concerned about?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 78,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 264,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 441,
            "sizeDeletions": 13
        },
        {
            "number": 14,
            "revision": "befa3f45b5633eac1d47ef06066ae1e201bed758",
            "parents": [
                "a3e8f2a391f389ffb2c379ca0c181e67de43824e"
            ],
            "ref": "refs/changes/06/36206/14",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1611288748,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 78,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 264,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 441,
            "sizeDeletions": 13
        },
        {
            "number": 15,
            "revision": "8e7b84b6458013c595c36b6fa43a039a5d51e4eb",
            "parents": [
                "a3e8f2a391f389ffb2c379ca0c181e67de43824e"
            ],
            "ref": "refs/changes/06/36206/15",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1611291936,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "all this looks like it's wrapped on 50 character spacing?  Can you reformat it to match the 50/72 spacing we normally use?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 26,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Done."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you be a little more concrete than this?  I'd love to just trust you that \"it works\" but everyones definition of \"works\" seems to be different \ud83d\ude0a"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Done. I elaborated on it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 32,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you take the word \"zone\" out of this?  Zones are a different thing than a sensor, and might include multiple sensors."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 32,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Definitely. It was a misleading name."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we call this \"type\" or \"units\" and have it match the enumeration here:\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/6f8ebc58ebe13e97522a7d1740690dde1adadaa8/xyz/openbmc_project/Sensor/Value.interface.yaml#L51\n\nI realize this is just going off the path version, and that's fine, but I think the Units field (and subsequent naming) makes it a lot more clear what it does, and how it relates to the dbus output, whereas users shouldn't really be using path at all."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Sorry, I intentionally thought about both of these during development, but excluded both.\n\nReason is, the word \"Type\" is already massively overloaded, and I didn't want to add yet another meaning to it.\n\nAlso, the word \"Units\" to me means the units of measurement such as volts, amps, degrees C, and so on. There is also a well-known meaning of \"Units\" within IPMI, and I don't want to cause confusion with that.\n\nI intentionally want to use \"Measure\" to specify what physical property is being measured, such as \"temperature\" in this case, and it corresponds 1:1 to the path name component in the D-Bus object path. This adjective isn't used anywhere yet, so it is a good choice for a newly added field."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Sorry, I intentionally thought about both of these during development, but excluded both.\n> \n> Reason is, the word \"Type\" is already massively overloaded, and I didn't want to add yet another meaning to it.\n\nAgreed, type is a bad thing to pick.\n\n> \n> Also, the word \"Units\" to me means the units of measurement such as volts, amps, degrees C, and so on. There is also a well-known meaning of \"Units\" within IPMI, and I don't want to cause confusion with that.\n\nYes, that's what I'd like this field to represent, not the actual path, as we can point to the enum in phosphor-dbus-interfaces for documentation.\n\n\"Units\": \"DegreesC\"\n\nI think is a lot more clear, and can point to PDI for documentation.\n\n\"Measure\": \"temperature\"\nDoesn't have an equivalent doc we can point to, and is a lot less obvious what values are allowed, or why it's required.\n\nConsidering this file is supposed to contain zero IPMI data, it seems less likely that people would have any confusion about IPMI, but even if they do, IPMI is still a superset mapping of a \"units\" parameter, so it seems reasonable.\n\n> \n> I intentionally want to use \"Measure\" to specify what physical property is being measured, such as \"temperature\" in this case, and it corresponds 1:1 to the path name component in the D-Bus object path. This adjective isn't used anywhere yet, so it is a good choice for a newly added field.\n\n\"Measure\" isn't really a great descriptor either."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "You have a good point. However, it seems beyond the scope of this change, and unnecessary, to introduce an additional mapping layer that just would serve to add a further layer of obfuscation. I like having it correspond 1:1 with the D-Bus object path, as then it makes logical sense what it is referring to. Also, not all sensors correspond cleanly to units: fan PWM is unitless, for example."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm really not following how this is beyond the scope of the change, considering it's a change to the daemon you're building from scratch, and the config definition is being added.\n\nYou already have a mapping layer to some extent, looking up valid paths, now it just needs to map valid paths and units.  If you want me to write that code, I can.\n\nThe biggest reason I ask for this is there has been talk previously about deprecating the \"path is equal to units\" thing, and solely relying on units, and considering the config files are very long lived, I'd like to avoid that issue in this case.  Also, at some point, we'll actually use units properly, and we'll need a lookup table either way, I'd much rather the config file be Units->path than path->units, just for sanity in documentation."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "It is beyond the scope of ExternalSensor because all ExternalSensor needs to know, in order to function, is the correct name for the second-to-final path component. There's currently no way to define that, as \"Name\" is only for the final path component (the basename), not the second-to-final path component. ExternalSensor needs both, in order to compose the full path string that will be used. So, I added \"Measure\", to provide this missing piece of knowledge.\n\nAdding another feature, to get the content of \"Measure\" indirectly somehow, perhaps from a mapping table contained elsewhere, is another layer of indirection that isn't required for ExternalSensor to function. In my opinion, it just adds a layer of obfuscation. However, if you truly believe it is needed, then yes, I would like you to write it. That will save a lot of back-and-forth trying to come up with an acceptable table of \"unit names\" to second-to-final path components."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> It is beyond the scope of ExternalSensor because all ExternalSensor needs to know, in order to function, is the correct name for the second-to-final path component. There's currently no way to define that, as \"Name\" is only for the final path component (the basename), not the second-to-final path component. \n\nUnits has a 1:1 relationship with the second to final path component, so that is how you should define it.  I'm in no way suggesting you use Name to determine the units, or the second to last path.\n\n> ExternalSensor needs both, in order to compose the full path string that will be used. So, I added \"Measure\", to provide this missing piece of knowledge.\n\nAgain....  Replacing with Units would be much more clear, and would just as easily convey that knowledge.\n\n> \n> Adding another feature, to get the content of \"Measure\" indirectly somehow, perhaps from a mapping table contained elsewhere, is another layer of indirection that isn't required for ExternalSensor to function.\n\nIt doesn't have to get the mapping from anywhere, you just have to change your lookup table of legal values to a lookup table of legal units to path conversions.\n\n> In my opinion, it just adds a layer of obfuscation.\n\nHow so?  The config files are meant to model the system itself, and its external interfaces, not necessarily the internal structure.  IPMI and redfish expose \"units\" they do not expose the second to last dbus path.\n\n> However, if you truly believe it is needed, then yes, I would like you to write it. That will save a lot of back-and-forth trying to come up with an acceptable table of \"unit names\" to second-to-final path components.\n\nHappy to.  BTW, the acceptable table of unit names to second-to-final-path components is documented in the sensor value interface in dbus-interfaces already, no need to argue about what the list should be (at least in the context of this patchset)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done.  Let me know if that still works for you."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yes, it still works. Thanks for more explanation. What file contains the existing table? SensorMeasures.hpp (maybe this file should be renamed to SensorUnits) would be the best place to add this table lookup at."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You must've read my mind, because I already did that, well, kinda, I called it SensorPaths.hpp, because it was more than just units;  Check out the current patchset.\n\nThere's a pointer to the file in a comment in the newest patchset.  It's not a file that dbus-sensors owns."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I wonder if we should start checking these kinds of things into an examples folder.  Food for thought, not required for this patchset though."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "That would be a good idea, for another change. We really need more documentation and examples for people to follow, as the initial learning curve is sharp."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "And not everyone upstreams their systems config file \ud83d\ude0a\n\nThe hope was that there'd be a least one representation of each type of config within the systems, but that turned out to not really work out."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Agreed. At least, by putting an example in the change description text of this change, it becomes searchable, so somebody interested can find it in the future. It would be a good idea, for a future change, to collate these examples into another documentation file that can be added to the source somewhere."
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Now that this is in a function, can we just make this an array of const char* and do a linear search on it?  Constructing the unordered_set as well as all the strings is likely far more expensive than just doing a quick loop through values that are close to one another in RODATA."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 78,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 264,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 443,
            "sizeDeletions": 13
        },
        {
            "number": 16,
            "revision": "d8f1563e47706bad2c25a20ef87b3539786bfa68",
            "parents": [
                "a3e8f2a391f389ffb2c379ca0c181e67de43824e"
            ],
            "ref": "refs/changes/06/36206/16",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1611466709,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 78,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 264,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 450,
            "sizeDeletions": 13
        },
        {
            "number": 17,
            "revision": "094a5a73a379c97d3bf93dc9ae79753a78dcb529",
            "parents": [
                "a3e8f2a391f389ffb2c379ca0c181e67de43824e"
            ],
            "ref": "refs/changes/06/36206/17",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1611651819,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/SensorMeasures.hpp",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 78,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 264,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 450,
            "sizeDeletions": 13
        },
        {
            "number": 18,
            "revision": "2a40e939307c5ffccf19b19d500eac5935c63009",
            "parents": [
                "a3e8f2a391f389ffb2c379ca0c181e67de43824e"
            ],
            "ref": "refs/changes/06/36206/18",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1611944153,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/SensorPaths.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Unit of \"RPM\" would be appropriate here, as \"RPM\" is already an acronym that's plural: revolutions per minute. \"RPMS\" is unusual."
                },
                {
                    "file": "include/SensorPaths.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Feel free to take it up with phosphor-dbus-interfaces.  This file has no authority on dbus interfaces, and this is how PDI defines it today."
                },
                {
                    "file": "include/SensorPaths.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For reference:\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/1b4a98af49059da61695c41469e4b7b134c1bf68/xyz/openbmc_project/Sensor/Value.interface.yaml#L54"
                },
                {
                    "file": "include/SensorPaths.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Nice, didn't know this was already defined in a YAML file somewhere. Copying it verbatim, even with the grammatical error, is probably the best thing to do at the moment."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/SensorPaths.hpp",
                    "type": "ADDED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.externalsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "ADDED",
                    "insertions": 79,
                    "deletions": 0
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 263,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 471,
            "sizeDeletions": 13
        }
    ]
}