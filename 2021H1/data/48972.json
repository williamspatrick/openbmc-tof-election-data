{
    "project": "openbmc/estoraged",
    "branch": "master",
    "id": "Ib5d0b8bb201b43a60238bfd4f13a29a6519a9f7d",
    "number": 48972,
    "subject": "Format LUKS encrypted device",
    "owner": {
        "name": "John Wedig",
        "email": "johnwedig@google.com",
        "username": "johnwedig"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/estoraged/+/48972",
    "commitMessage": "Format LUKS encrypted device\n\nThis commit adds the functionality to format a new LUKS device, create a\nfilesystem, and mount it. Unit tests are included.\n\nCurrently, the D-Bus interface to format the LUKS device is synchronous,\nbut it may need to become asynchronous, since it can take some time. The\nformat operation took about 20 seconds when testing it.\n\nTested: Ran eStoraged on a machine with an eMMC, using the following\ncommands:\n$ /usr/bin/eStoraged -b /dev/mmcblk0 &\n$ busctl call xyz.openbmc_project.eStoraged.mmcblk0 \\\n  /xyz/openbmc_project/storage/mmcblk0 xyz.openbmc_project.eStoraged \\\n  Format ay 3 1 2 3\n$ busctl call xyz.openbmc_project.eStoraged.mmcblk0 \\\n  /xyz/openbmc_project/storage/mmcblk0 xyz.openbmc_project.eStoraged \\\n  Lock ay 3 1 2 3\n$ busctl call xyz.openbmc_project.eStoraged.mmcblk0 \\\n  /xyz/openbmc_project/storage/mmcblk0 xyz.openbmc_project.eStoraged \\\n  Unlock ay 3 1 2 3\n\nSigned-off-by: John Wedig <johnwedig@google.com>\nChange-Id: Ib5d0b8bb201b43a60238bfd4f13a29a6519a9f7d\n",
    "createdOn": 1637285080,
    "lastUpdated": 1638554123,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1637285080,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1637285091,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637285158,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/30517/ : FAILURE"
        },
        {
            "timestamp": 1637288538,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 2: Patch Set 1 was rebased"
        },
        {
            "timestamp": 1637288551,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637288617,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/30520/ : FAILURE"
        },
        {
            "timestamp": 1637688909,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1637688922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637688957,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/30731/ : FAILURE"
        },
        {
            "timestamp": 1637691932,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1637691947,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637692154,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30733/ : SUCCESS"
        },
        {
            "timestamp": 1637704597,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 5: Commit message was updated."
        },
        {
            "timestamp": 1637705247,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 5:\n\n(5 comments)"
        },
        {
            "timestamp": 1637706832,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1637706859,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637706871,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1637707077,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30742/ : SUCCESS"
        },
        {
            "timestamp": 1637718408,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 6:\n\n(8 comments)\n\nI worry about our estoraged object becoming a very large, with 20+ methods and 1000's of line of implementation"
        },
        {
            "timestamp": 1637781649,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1637792214,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 6:\n\n(11 comments)"
        },
        {
            "timestamp": 1638209961,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1638215116,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1638215131,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638215160,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/30862/ : FAILURE"
        },
        {
            "timestamp": 1638215262,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 7:\n\n(8 comments)"
        },
        {
            "timestamp": 1638215335,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1638215346,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638215631,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30863/ : SUCCESS"
        },
        {
            "timestamp": 1638221929,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 8: Code-Review+1"
        },
        {
            "timestamp": 1638269552,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1638386257,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1638386277,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638386562,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1638386573,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638386577,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/31012/ : ABORTED"
        },
        {
            "timestamp": 1638386822,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31014/ : SUCCESS"
        },
        {
            "timestamp": 1638386857,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 10:\n\n(5 comments)\n\nOh, looks like you started factoring out the wrappers already"
        },
        {
            "timestamp": 1638386898,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 10:\n\n(4 comments)"
        },
        {
            "timestamp": 1638388068,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 10:\n\n(1 comment)\n\n> Patch Set 10:\n> \n> (5 comments)\n> \n> Oh, looks like you started factoring out the wrappers already\n\nYes, I now have a class for the cryptsetup wrappers and another class for the filesystem wrappers."
        },
        {
            "timestamp": 1638418746,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 10:\n\n(6 comments)\n\nLooking good! Some nits here and there"
        },
        {
            "timestamp": 1638471160,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1638471173,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638471236,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 11:\n\n(6 comments)"
        },
        {
            "timestamp": 1638471267,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 11: Code-Review+1"
        },
        {
            "timestamp": 1638471373,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31106/ : SUCCESS"
        },
        {
            "timestamp": 1638478836,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 11: Code-Review+2"
        },
        {
            "timestamp": 1638492486,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Change has been successfully merged by John Wedig"
        },
        {
            "timestamp": 1638492937,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 11:\n\n(1 comment)\n\nle"
        },
        {
            "timestamp": 1638554123,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "aba31cf6e9be920a55c1b1d114e04ae5bd842829",
            "parents": [
                "a4594d83e442eaeac33e32ccbac44dfccd19d11e"
            ],
            "ref": "refs/changes/72/48972/1",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1637285080,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 224,
                    "deletions": -2
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 237,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 527,
            "sizeDeletions": 5
        },
        {
            "number": 2,
            "revision": "5d0319b390f7770d32619e886365fec33b66dc4e",
            "parents": [
                "751d93ed5cd34ab052a2216acd538fec57b16513"
            ],
            "ref": "refs/changes/72/48972/2",
            "uploader": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "createdOn": 1637288538,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 224,
                    "deletions": -2
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 237,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 527,
            "sizeDeletions": 5
        },
        {
            "number": 3,
            "revision": "a99e64fbd54bc0f92561ae863a4b60dcac6af265",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/3",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1637688909,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 88,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 316,
                    "deletions": -3
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 460,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 890,
            "sizeDeletions": 6
        },
        {
            "number": 4,
            "revision": "53fc030bbb3f113fbaf6df8d8f681301f1f4428a",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/4",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1637691932,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 99,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 325,
                    "deletions": -3
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 520,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 970,
            "sizeDeletions": 6
        },
        {
            "number": 5,
            "revision": "b21bbd894877df98f613fdf4ff5d675c750fd4f2",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/5",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1637704597,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "include/estoraged.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "isLock\n\ncamelCase for function names"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "rm void.\n\nI personally don't like it in C++ code (but maybe that's just me)."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 113,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "wait, I didn't even know that you can/show make private virtual function. Can we even override this?"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 113,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "gmock is in fact capable of overriding virtual private functions. So I figured this was fine. Here's an example in the googletest documentation: http://google.github.io/googletest/gmock_cook_book.html#mocking-private-or-protected-methods"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "const std::string&"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/test/meson.build",
                    "line": 16,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "replace each tap with 2 spaces."
                },
                {
                    "file": "src/test/meson.build",
                    "line": 16,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 99,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 325,
                    "deletions": -3
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 520,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 970,
            "sizeDeletions": 6
        },
        {
            "number": 6,
            "revision": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/6",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1637706832,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "How much is \"some time\"? D-Bus timeout I believe is at 40 seconds for reference."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I changed the commit message to say that it took about 20 seconds.\n\nI think the default timeout is actually 25 seconds, and one time I hit the timeout while testing this."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Hmm.. 20 seconds blocking call is not great, as the BMC may be VERY busy (firmware update for instance) and the 20 seconds may extend to 30-40 seconds. I would suggest asynchronous call here if possible - this can be tackled in an upcoming CL"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Agreed. It should change to be asynchronous, but I was hoping that could be in a different CL."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I understand your member variable is being initialized by your parameter of the same name (containerName). And it will work, but this shadowing is a bad practice"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I wasn't aware that this was a bad practice - would you be able to point to some references for my learning?\n\nIn this case, we're not referencing the parameter in the constructor and just using it within the member initialization list so i believe it's stylistic and I personally prefer it because it avoids having to create another variable name (that won't be used)."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "OpenBmc style guide follows the \"C++ Core Guidelines (CCG).\"\nhttps://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#global-guidelines-and-practices\n\nand the CCG has guidance on reusing variable names. https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es12-do-not-reuse-names-in-nested-scopes\n\nTwo different names make sense because there are two different variables. (a parameter and member variable)\n\nIf Brandon is good with it, I am good with it.\n(resolved from my side)"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I think the member initialization list is treated a little differently (especially in the case where we're just passing in the parameter for assignment and not using the parameter variable). I do think this is more stylistic and the best of both worlds is to use Google's convention of adding _ to denote member variable.\n\nAnyway, some links I found that show that this is valid (which we know) and is explicitly written in the standard (which, maybe points to this not being a discouraged practice):\n\nhttps://stackoverflow.com/questions/6185020/initializing-member-variables-using-the-same-name-for-constructor-arguments-as-f\n\nhttp://eel.is/c++draft/class.base.init#15"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: param doxygens"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "so there will be an class that inherits and overrides?"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "It sounds like it's just a wrapper so I would believe so.\n\nWould it make sense to have the wrappers be a separate class (for possibly easier mocking?)\n\nEdit: Saw the discussion you had with Willy regarding this - didn't know gTest allowed mocking of private virtual functions TIL. It does seem like the testing is clean written this way. I wonder if others have thoughts on whether we should have a different class just for these wrappers (which is how I usually implement)."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I saw the testing. Questions are answered.\n(resolved from my side)"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I'm relatively new to gTest, so I'm not sure how things are typically done. But it might be nice to de-clutter the estoraged class by moving the wrappers to a separate class (or even a couple different classes). For example, maybe we could have one class for the libcryptsetup wrappers and another for the filesystem-related operations, e.g. mount, unmount, createFilesytem."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "That's what I've seen done before but fragmenting everything too much, does lead to having to pass in those wrapper interface (for mocking purposes) into each classes that need it. For these ones though, I do think I prefer having a separate wrapper class. Maybe William can comment"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I went ahead and created a separate class for the cryptsetup wrappers and another class for the filesystem-related wrappers."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 113,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I guess we're now using snake case here but I'm guessing it's because of libcryptsetup.h?"
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 113,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I had copy-pasted the arguments from libcryptsetup and forgot to change it to camelCase. I did it now."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 160,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Technically we should have param doxygen here as well - even though I'm assuming we're just going to pass them in directly since these are just wrappers."
                },
                {
                    "file": "include/estoraged.hpp",
                    "line": 160,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I think I added all the param doxygens that I need."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: technically don't need this since we have the comment in the header"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 106,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: magic number - maybe we can declare this as a constant or have /* volume_key_size */ here and explain where this came from?"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 106,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "This argument should really be volumeKey.size(). I changed it accordingly."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 141,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: same here?"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 141,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 195,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "see above"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 211,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "The mount point does not need to appear and reappear."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 221,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "see above"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 229,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "This is unexpected (for me), I would think if mount failed. EstorageD would log an error and stop."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I think we should revisit this once you start using the the mount library - I also would imagine if mount failed, we can't unmount (since it didn't mount in the first place)."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 229,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Strictly speaking, this isn't unmounting; it's just removing the directory we created several lines up.\n\nWhen I wrote this, I thought it would be a good idea to remove the directory we created, once we don't need it anymore. But I can change this if people prefer."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I think this is fine."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 256,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "see above (you don't have to do this)"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 343,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "system almost never done.\n\nfor mount think about using:\n#include <sys/mount.h>\n  int mount(const char *source, const char *target,\n                 const char *filesystemtype, unsigned long mountflags,\n                 const void *data);\n\nFor creating the ext4 ext2fs_initialize is the c way, but it look like it might take some effort. \nhttps://kernel.googlesource.com/pub/scm/linux/kernel/git/davem/silo/+/eb6151388752b52804f80ff27e90ec2dbde71339/include/ext2fs/ext2fs.h#726\n\nI would see what the +2's want, before burning cycles on it.\n\nexample:\nhttps://github.com/tytso/e2fsprogs/blob/master/misc/mke2fs.c#L3078"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 343,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "For mounting and unmounting, it certainly makes sense to use the C function. Earlier, I guess I didn't realize it would be that simple.\n\nFor creating the filesystem, I haven't looked into it extensively, but it seems like a non-trivial task. And FWIW, udisks2 uses mkfs, as well. Here is where it lists out the different commands for creating different filesystem types: https://github.com/storaged-project/udisks/blob/d7b231263d6b3b0d2def6c974fe651a0538ac5d3/src/udiskslinuxfsinfo.c#L67\n\nAlso keep in mind that the new eStoraged interface (still in review) will allow for the client to specify filesystem type, so it could be difficult to support that without using mkfs. https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/48636"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 343,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Agreed that we should use the mounting library.\n\nRegarding filesystem, I'm unfortunately not familiar enough - hopefully William can be the tiebreaker here. My 2 cents is that I don't think using system call is too common within OpenBMC (at least in the repos I've touched) so my gut says we should try to use the libraries like the one that John Broadbent suggested - but I also see where the difficulties of supporting different types of file systems will come in."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 343,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I think William chimed in regarding filesystem (offline) that this is unfortunately what we'll have to do. Maybe we can resolve since mount is now using the correct library as pointed out by jebr@?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 99,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 325,
                    "deletions": -6
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 519,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 969,
            "sizeDeletions": 9
        },
        {
            "number": 7,
            "revision": "797f80d003955941e3353be5b532e0300f56ce23",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/7",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1638215116,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 115,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 331,
                    "deletions": -6
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 525,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 997,
            "sizeDeletions": 9
        },
        {
            "number": 8,
            "revision": "8091c5b958368e5712838a699b7da1e554645df9",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/8",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1638215335,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/estoraged.cpp",
                    "line": 28,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "You could probably pass crypt_device references into some of these to reduce crypt_init duplication."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 28,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done. Take a look at what I have now."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 82,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "It would be nice to use some kind of wrapper for managing these references.\nhttps://github.com/openbmc/stdplus/blob/master/src/stdplus/handle/managed.hpp\n\nI noticed you missed some `crypt_free()`'s below"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 82,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Take a look at what I have now. I created a CryptHandle class that uses that wrapper you referenced."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 115,
                    "deletions": -3
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 330,
                    "deletions": -6
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 525,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 996,
            "sizeDeletions": 9
        },
        {
            "number": 9,
            "revision": "58295e487028b99f3f8cec36da68a7a937cee903",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/9",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1638386257,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 84,
                    "deletions": -4
                },
                {
                    "file": "include/filesystemInterface.hpp",
                    "type": "ADDED",
                    "insertions": 91,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 242,
                    "deletions": -6
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 491,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1098,
            "sizeDeletions": 10
        },
        {
            "number": 10,
            "revision": "10cb443293a37d76d56582da6d3ff6c9e2cdb8a9",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/10",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1638386562,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "line": 6,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Usually prefer not having code in header - but these are straight passthrough functions so meh, I guess it's ok"
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "line": 6,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Yeah, introducing another cpp file just for this seemed unnecessary."
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "line": 14,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Hmmm, normally the interface class will be pure virtual - and therefore we shouldn't have the implementation detail in this class, declaring them as\n\n```\nvirtual <return type> functionName(params) = 0;\n```\n\nThen, we have the actual class Cryptsetup which inherits the interface class, and overrides the virtual functions.\n\nHere is an example: https://github.com/openbmc/phosphor-ipmi-flash/blob/a3f65698000d366b57d2916eae67518f89c1298b/tools/handler.hpp#L12"
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "line": 14,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done. Take a look at what I have now."
                },
                {
                    "file": "include/filesystemInterface.hpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Same here as above, we'll need 1 more level of abstraction. Hopefully it's not too much rework, mostly renaming the class + providing a derived class that uses the interface."
                },
                {
                    "file": "include/filesystemInterface.hpp",
                    "line": 15,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Same nit as below: I don't think we need to explicitly set these. If we do want to, we should probably set them as nullptr instead?"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done. I'm not setting it anymore.\n\nAlso, I changed all the null pointer references in this CL from \"NULL\" to \"nullptr\"."
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Same nit as below: I don't think we need to explicitly set these. If we do want to, we should probably set them as nullptr instead?"
                },
                {
                    "file": "src/estoraged.cpp",
                    "line": 70,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "line": 103,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: I don't think we need to explicitly set these. If we do want to, we should probably set them as nullptr instead?"
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "line": 103,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I removed this. The only reason I was setting this to NULL was to silence this warning:\n\nsrc/test/estoraged_test.cpp:106:5: warning: Member variable 'eStoragedTest::mockCryptIface' is not initialized in the constructor. [uninitMemberVar]\n    eStoragedTest() :\n    ^\nsrc/test/estoraged_test.cpp:106:5: warning: Member variable 'eStoragedTest::mockFsIface' is not initialized in the constructor. [uninitMemberVar]\n    eStoragedTest() :\n\nThose member variables actually get initialized in the SetUp() function, not the constructor."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 84,
                    "deletions": -4
                },
                {
                    "file": "include/filesystemInterface.hpp",
                    "type": "ADDED",
                    "insertions": 91,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 241,
                    "deletions": -6
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 491,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1097,
            "sizeDeletions": 10
        },
        {
            "number": 11,
            "revision": "b810c926021976665707f90d460aec0300f5ccf1",
            "parents": [
                "4e13b0a103353b48fac1c592dda0582cc6df26f7"
            ],
            "ref": "refs/changes/72/48972/11",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1638471160,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "line": 160,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "You should add a .get() or other method and avoid the extra parameter since the handle is guaranteed to have a copy."
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "line": 160,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I created a follow-up commit to address this: https://gerrit.openbmc-project.xyz/c/openbmc/estoraged/+/49312\n\nLet me know if that's what you're going for."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/cryptsetupInterface.hpp",
                    "type": "ADDED",
                    "insertions": 193,
                    "deletions": 0
                },
                {
                    "file": "include/estoraged.hpp",
                    "type": "MODIFIED",
                    "insertions": 84,
                    "deletions": -4
                },
                {
                    "file": "include/filesystemInterface.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/estoraged.cpp",
                    "type": "MODIFIED",
                    "insertions": 240,
                    "deletions": -6
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "src/test/estoraged_test.cpp",
                    "type": "ADDED",
                    "insertions": 491,
                    "deletions": 0
                },
                {
                    "file": "src/test/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1146,
            "sizeDeletions": 10
        }
    ]
}