{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "I630d03e61a97a2db4fe7b4e75242606f9d0e7084",
    "number": 40293,
    "subject": "Add SupportedConfiguration schema",
    "owner": {
        "name": "Adriana Kobylak",
        "email": "anoo@linux.ibm.com",
        "username": "anoo1"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/40293",
    "commitMessage": "Add SupportedConfiguration schema\n\nAdd a schema to describe supported configurations. This schema would\ncontain a set that describes the supported components for this\nconfiguration. In addition, the schema contains a Severity field to\nspecify if any actions should be taken in case the configuration is not\nmet, and an AllowExtraComponents flag to perform a strict check if\nadditional components are allowed or not.\n\nAn implementation example would be add to following to the 'Rainier 2U\nChassis.json' file to indicate that a supported configuration is to have\nthat chassis with 2 power supplies model Delta-123, or 4 power supplies\nmodel Delta-890:\n\n    \"Exposes\": [\n        {\n            \"Name\": \"2000W Rainier Configuration\",\n            \"Type\": \"SupportedConfiguration\",\n            \"Supported\": [\n                \"Rainier 2U Chassis\",\n                \"Delta-123\",\n                \"Delta-123\"\n            ],\n            \"Severity\": \"Error\",\n            \"AllowExtraComponents\": true\n        },\n        {\n            \"Name\": \"1000W Rainier Configuration\",\n            \"Type\": \"SupportedConfiguration\",\n            \"Supported\": [\n                \"Rainier 2U Chassis\",\n                \"Delta-890\",\n                \"Delta-890\",\n                \"Delta-890\",\n                \"Delta-890\"\n            ],\n            \"Severity\": \"Critical\",\n            \"AllowExtraComponents\": true\n        }\n    ],\n\nThe above file describes that the Rainier 2U chassis supports two power\nsupply configurations, one is 2 2000W power supplies of the specified\nmodel(s), the other is 4 1000W power supplies. A monitor app could then\nidentify if any of the supported power supplies are plugged, and then\nparse the entity-manager objects to find a PowerSupply with the specified\nmodel name to compare what's supported against what is present.\n\nThis would be accomplish by the monitoring app by looking for an instance\nof xyz.openbmc_project.Inventory.Item.PowerSupply\nwith a xyz.openbmc_project.Inventory.Decorator.Asset Model of any of the\nlisted models and get the properties for that supported configuration.\nIf for example a model Delta-890 is plugged, the power supply monitor\napp would check that there are at least 4 present. Additionally, the\nmonitoring app can query the power supply object to get additional\nproperties such as input voltage.\n\nThe phosphor power supply app could then have policies on how to react\nbased on this information. The reactions can be done via Severity value.\nExample use cases:\n- Severity: Critical: Log an error and drop system to a power safe mode\n  and/or boost fan speed if number of power supplies are less than the\n  specified number.\n- Severity: Error: Log an error if none of the supported models are not\n  found. This may indicate that the system is running in an unsupported\n  configuration and the warranty may no longer apply. Also the unsupported\n  model may have different power specifications (in the case of power\n  supplies) that may cause issues.\n- No action is taken if the system configuration matches what the EM\n  supported configuration specifies.\n\nIn summary, the supported configuration schema allows the BMC to notify\nthe user via logging events if their system does not have the HW\nconfiguration that is supported, and for the BMC to take actions such as\nlimiting the system operation because it has dropped to a safe power mode\nto protect the system.\n\nChange-Id: I630d03e61a97a2db4fe7b4e75242606f9d0e7084\nSigned-off-by: Adriana Kobylak <anoo@us.ibm.com>\n",
    "createdOn": 1612462227,
    "lastUpdated": 1620757791,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1612462227,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1612462237,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612462510,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11919/ : SUCCESS"
        },
        {
            "timestamp": 1613151084,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1613167267,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1613167288,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613167540,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\nThis change is ready for review."
        },
        {
            "timestamp": 1613167630,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12417/ : SUCCESS"
        },
        {
            "timestamp": 1613408468,
            "reviewer": {
                "name": "Derek Howard",
                "email": "derekh@us.ibm.com",
                "username": "derekhoward55"
            },
            "message": "Patch Set 2: Code-Review+1\n\nI agree to not require the max number or input_voltage in case for instance they don't care what the input voltage is for a specific ps ccin/model."
        },
        {
            "timestamp": 1614365697,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1614368964,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)\n\nSorry it took me so long to get to this.  It fell off my radar."
        },
        {
            "timestamp": 1614717735,
            "reviewer": {
                "name": "B. J. Wyman",
                "email": "bjwyman@gmail.com",
                "username": "bjwyman"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1615232720,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1615232732,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1615232999,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13485/ : SUCCESS"
        },
        {
            "timestamp": 1615233291,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 3:\n\n(5 comments)"
        },
        {
            "timestamp": 1615241523,
            "reviewer": {
                "name": "B. J. Wyman",
                "email": "bjwyman@gmail.com",
                "username": "bjwyman"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1615303393,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1615497101,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1615497112,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1615497298,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1615497374,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13657/ : SUCCESS"
        },
        {
            "timestamp": 1616013208,
            "reviewer": {
                "name": "B. J. Wyman",
                "email": "bjwyman@gmail.com",
                "username": "bjwyman"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1616077281,
            "reviewer": {
                "name": "Derek Howard",
                "email": "derekh@us.ibm.com",
                "username": "derekhoward55"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1616616308,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 4:\n\nHi Ed, wasn't sure what you meant with \"For example, this param should really be modifying the required redundancy parameters on the chassis, not coming up with a new parameter for it.\" For now I changed the property name to RedundantCount since that seems more appropriate for power supplies."
        },
        {
            "timestamp": 1617735577,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1617735591,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1617735650,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 5:\n\nPer feedback from Ed: added severity, moved it to be an opt-in option, be its own entity."
        },
        {
            "timestamp": 1617735939,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14923/ : SUCCESS"
        },
        {
            "timestamp": 1617737282,
            "reviewer": {
                "name": "Derek Howard",
                "email": "derekh@us.ibm.com",
                "username": "derekhoward55"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1618008979,
            "reviewer": {
                "name": "B. J. Wyman",
                "email": "bjwyman@gmail.com",
                "username": "bjwyman"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1618204276,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(3 comments)\n\nSome somewhat disjoint thoughts on something that I think would be a lot more extensible to everyone, and something that goes beyond just power supplies.  There's probably lots of details to work out, but please take a look at my proposal and let me know what you think."
        },
        {
            "timestamp": 1618863789,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1618863807,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1618864211,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/15750/ : SUCCESS"
        },
        {
            "timestamp": 1618864247,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 6:\n\n(3 comments)\n\nThanks Ed. I think your comments make it generic and flexible enough for the initial use case and for the future."
        },
        {
            "timestamp": 1618866693,
            "reviewer": {
                "name": "Peter Lundgren",
                "email": "peterlundgren@google.com",
                "username": "peterlundgren"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1618931868,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1618935835,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(3 comments)\n\nSome answers to the existing comments attached."
        },
        {
            "timestamp": 1618943074,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1618943701,
            "reviewer": {
                "name": "Peter Lundgren",
                "email": "peterlundgren@google.com",
                "username": "peterlundgren"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1618944126,
            "reviewer": {
                "name": "Peter Lundgren",
                "email": "peterlundgren@google.com",
                "username": "peterlundgren"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1619026314,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1620067952,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 6:\n\nMoving the discussion to a design doc so that we can flush out the details there: https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/42879"
        },
        {
            "timestamp": 1620067961,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1620757791,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Abandoned\n\nWill reopen once we iron out the details in the design doc."
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "56cb445369913576d039e2f992cafcf546a5b9f4",
            "parents": [
                "0836ce053c2ce94fb1d56eed37ad78514de7934e"
            ],
            "ref": "refs/changes/93/40293/1",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1612462227,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "schemas/AllowedConfiguration.json",
                    "type": "ADDED",
                    "insertions": 65,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 66,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "687a99e474759e011df91d8948631e51a8c8c8d7",
            "parents": [
                "f415aa5182e46e1505a5d7d0128b454c92b7776b"
            ],
            "ref": "refs/changes/93/40293/2",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1613167267,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Another option would be to create a \"PSU Supported Configuration\" schema that would contain properties related only to PSUs. Or have this schema be part of a vendor-specific file such as the IBM.json."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If at all possible, I'd really like to make this generic.  \"supported configurations\" have usefulness outside of just power supplies."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Sounds good, leaving it as a generic 'supported configuration' schema."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "B. J. Wyman",
                        "email": "bjwyman@gmail.com",
                        "username": "bjwyman"
                    },
                    "message": "Example"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "B. J. Wyman",
                        "email": "bjwyman@gmail.com",
                        "username": "bjwyman"
                    },
                    "message": "models"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Reworded."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can add some details about behaviors here?  for example, what would this would do if it somehow found 3 power supplies?  What about if it found a power supply that isn't a delta-123?  What happens in the case where everything is good?  Why would I want to add this to my chassis config?\n\nI suspect I know some of the answers, but I'd like to get that documented in the commit message for future users of this.\n\n\n\n\nOne thing that I'd like to sort through in this is to figure out a way to impose new policies for these supported configurations.  For example, this param should really be modifying the required redundancy parameters on the chassis, not coming up with a new parameter for it.  We don't have to have code to do it, but I'd like to at least make sure we have a path to get there that isn't in conflict with this.\n\nHow would this work for something like:\n\"If we are outside of a supported configuration, increase the fan speed to 50%\"\n\nWould we do that in configuration?  Code?\n\n\"If XYZ card is installed, increase the minimum fan floor to Y.\"\n\n\"If ABC fabric cable is installed on this chassis, decrease the exit air temp limit.\"\n\n\"If one power supply is installed, and we require 2, boost the fans\"\n\nThose are some other use cases I've heard of for these \"supported\" configurations.  Can you theorize a little bit about how your supported configurations schema could handle some of these?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "I removed the custom MaxCount in favor of the existing RedundantCount property. Removed also InputVoltage as that can also be specified with a vin_Max property. The thought is that we can leave it open to the user to add whatever property they want, or another option is to specify the properties that we believe should be supported here instead of having the user add any property name to their supported configuration implementation.\n\nAdded use cases that should describe what the power supply app would do in general. The plan is to have these decisions be set via configuration in the phosphor-power repo, for example default to log an error if redundantcount does not match the number of power supplies present, and additional optional policies such as boost fan speed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "A use case I am interested in is loading different PID coefficients for different supported configurations. Unsupported configurations should run at failsafe.\n\nThinking very roughly, I'm imagining being able to put any EMExposesElement inside a SupportedConfiguration. If it matches that configuration, expose all of those entries. Some open questions:\n- How would it handle multiple matches?\n- An else case for no matches succeed would be handy."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Just some thoughts. In order to expose a set of entries, the Probe could have conditions ANDd together, such as 'chassis present AND GPU present AND power supply present'. The Probe can be added to any configurations json file, not necessarily in a SupportedConfiguration standalone json, since the idea is that the SupportedConfigurations are a static list that tells you what the system supports, although it could also be implemented via a standalone 'supported' configurations json file."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'd like to steer us away from the thought of using probes here, for a couple reasons.\nFirst, probes are designed to be a runtime-modifiable thing;  Considering that supported configurations are going to need to be build-time configurable (I think?) ie at build time I would like to enforce a given set of configurations, and warn if it's outside those sets, I'm not sure how probes would mate up with that.  Just because someone is using an IBM chassis for example, doesn't necessarily mean they care about what IBM thinks is recommended, and in the case of second-hand hardware providers, they'll likely come up with their own supported configs against the same chassis.\n\nAlso, a Chassis is a mediocre way to detect whether or not you're on something that needs a supported configuration.  What if you have everything but the Chassis?  presumably you'd still want to trigger a warning."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "I don't have an opinion on matching mechanism, but I'm interested in seeing support configurations handle:\n\n- Match the quantity of entities exactly (e.g. in Adriana's example, 3 power supplies should not match).\n- In the future, match based on location. There's been some talk of a slot abstraction to identify where an entity is located. Match X in slot 1, Y in slot 2 as supported but treat X in slot 2 and Y in slot 1 as unsupported."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "The quantities we can enforce by listing the supported entities as many times as it's supported, then having monitoring apps do the check against what's expected and what's present.\nFor enforcing location, we'd need to think how to model that in the Supported schema to add that information."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "type": "ADDED",
                    "insertions": 59,
                    "deletions": 0
                },
                {
                    "file": "schemas/global.json",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 63,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "bd7ab2ba7f188f1bdaf23e52b3755c6c04a317dc",
            "parents": [
                "296667f0076888f3cdf898a3f2cdf66da260853e"
            ],
            "ref": "refs/changes/93/40293/3",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1615232720,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Should we specify the properties that the monitoring apps expect to support, or it's ok to rely on existing property names such as RedundantCount and vin_Max?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Going with specifying the properties to make make it standard what kind of information can be included."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 40,
                    "reviewer": {
                        "name": "B. J. Wyman",
                        "email": "bjwyman@gmail.com",
                        "username": "bjwyman"
                    },
                    "message": "speed"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 40,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Thanks."
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "line": 0,
                    "reviewer": {
                        "name": "B. J. Wyman",
                        "email": "bjwyman@gmail.com",
                        "username": "bjwyman"
                    },
                    "message": "So, RedundantCount from legacy.json (https://github.com/openbmc/entity-manager/blob/296667f0076888f3cdf898a3f2cdf66da260853e/schemas/legacy.json#L165) instead of MaxCount?"
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "line": 0,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Right. @Ed, is that what you meant by \"For example, this param should really be modifying the required redundancy parameters on the chassis, not coming up with a new parameter for it.\"? Or how do you imagine that this schema should look like?"
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "line": 0,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Going back to specifying the properties to make it standard the information that a supported configuration schema will contain. Keeping the replacement of MaxCount with RedundantCount because that's more relevant for a power supply. For other object types, a Max/Min Count may apply and new properties can be added as they're needed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "type": "ADDED",
                    "insertions": 47,
                    "deletions": 0
                },
                {
                    "file": "schemas/global.json",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 51,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "57fbccf7b9888249999505acbae111f6552d5876",
            "parents": [
                "f64d4397f8a56034615041c06e4e6e7cb6713742"
            ],
            "ref": "refs/changes/93/40293/4",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1615497101,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "type": "ADDED",
                    "insertions": 60,
                    "deletions": 0
                },
                {
                    "file": "schemas/global.json",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 64,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "d7d64f21a4fa2639f355b48663c78e5f4dd30346",
            "parents": [
                "756fcae177941038e3aed4df9e7d4b9f135d25cd"
            ],
            "ref": "refs/changes/93/40293/5",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1617735577,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems really specific to power supplies, for something that I've generally imagined implemented a a generalized feature.\n\nSome initial thoughts that I have.\n\nCouldn't the above two configurations be also be configured with something like \n{\nName:  \"1000W Rainier configuration\"\nSupported: [\n  \"Rainier 2U Chassis\",\n  \"Delta-890\",\n  \"Delta-890\",\n]\nAllowExtraComponents: True\n}\n\nThe above would be a set of components that are \"supported\" in this configuration.  Some key design points:\n1. The \"supported\" param is treated like a component \"set\" that is known to function.  This allows combining any number of configurations, and expands in the future if we wanted to say, have a configuration that required particular dimms, or specific CPU models.\n2. Redundancy count has been dropped in lieu of simply enumerating multiples of devices.  We already have a redundancy count object, so I'm not sure how the one described above would've interacted with the existing feature.  This way, we can easily just declare \"two of these are needed\", or if there's some odd mix of PSUs that was allowed, you could also model that without any trouble, as well as if a certain gpu needed a certain power supply.\n3. Input voltage seems like an odd thing to include, as it's a property of a given power supply model, right?  If a given PSU is present, that's all we really need to know about whether or not it's AC or DC?\n(note, I wrote the above, then re-read your comment.  I'll need to think through how to address this somewhat unique requirement).\n4. I've strawmanned the \"AllowExtraComponents\" flag, which would be a \"strict\" check on whether or not extra components would cause this to fail the configuration.  This would allow system manufacturers to declare the actual models of configurations they ship.\n5. The Probe part from the proposal seems a little odd;  It's not clear what it would do, or how it would function, given that we have to enable these at compile time anyway, it would seem like you should just include the chassis in with the given components.  Any sort of detection, I'd much rather have tied to the Entity name, rather than duplicating the probe statement.\n6. In theory, in this example you could have multiple overlapping supported configurations, for example, you could require that 2 power supplies are present to support 2 GPUs, and very separately, list the power supplies that this chassis supported.\n\n\nAdmittedly, this is a strawman, and has some issues, but it seems much more extensible than limiting to just power supplies and counts."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 58,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "1. The Supported set is a pretty good idea, that way we can add a list of components without having to specify the number for each.\n\n2. Yep, removed the count and will just duplicate the component names as needed to indicate the number of supported ones.\n\n3. I'm thinking of moving the input voltage into the power supply json file, and having 2 different json files, like: IBM_PS_1000W_110V.json and IBM_PS_1000W_220V.json, then the supported configuration set would specify the one that it supports.\n\n4. Nice. Added that flag.\n\n5. Yeah, changed it to add the SupportedConfiguration to an existing configuration json file.\n\n6. Yep, that'd work.\n\nI think overall the points you made make it work for this initial use case and it's generic and flexible enough to add to it in the future."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> 1. The Supported set is a pretty good idea, that way we can add a list of components without having to specify the number for each.\n> \n> 2. Yep, removed the count and will just duplicate the component names as needed to indicate the number of supported ones.\n> \n> 3. I'm thinking of moving the input voltage into the power supply json file, and having 2 different json files, like: IBM_PS_1000W_110V.json and IBM_PS_1000W_220V.json, then the supported configuration set would specify the one that it supports.\n\nI still need to think through this one.  I'm not really sure how to manage that in a reasonably generic way.  I'm assuming that in practice, this would need to be grabbing the input voltage.  How do you manage the difference between a brown out (or unplug) and whether the system actually got connected to the wrong line.  What do we do when the PSU hasn't been initialized in a config yet.  What do we do when   a PSU is unplugged.  There seems to be a lot of corner cases that we'd need to cover.\n\n> \n> 4. Nice. Added that flag.\n> \n> 5. Yeah, changed it to add the SupportedConfiguration to an existing configuration json file.\n\nNo, that's not quite what I meant.  Presumably the \"supportability\" of something really has nothing to do with the physical entity itself, that's somewhat why i worry about putting it in there.  For example, imagine another system starts using the Witherspoon chassis, and doesn't want to implement supported configurations, or wants different supported configs than IBM does.  We'd have to invent another data structure for that.\n\n> \n> 6. Yep, that'd work.\n> \n> I think overall the points you made make it work for this initial use case and it's generic and flexible enough to add to it in the future."
                },
                {
                    "file": "meson.build",
                    "line": 148,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I suspect we don't need to hide this behind an option flag.  I could imagine adding new supported configurations at runtime."
                },
                {
                    "file": "meson.build",
                    "line": 148,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Yep, removed."
                },
                {
                    "file": "meson_options.txt",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This option isn't mentioned in the commit message, and doesn't really seem to change any behavior, aside from whether or not the new schema is allowed.  That seems odd;  I'd be interested to know how this option optionally enables the actual supported configurations.  Would it be an install time thing?  runtime?"
                },
                {
                    "file": "meson_options.txt",
                    "line": 11,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Yeah, removed in favor of having the configuration added at runtime."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 90,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "type": "ADDED",
                    "insertions": 68,
                    "deletions": 0
                },
                {
                    "file": "schemas/global.json",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 81,
            "sizeDeletions": 1
        },
        {
            "number": 6,
            "revision": "78091a73b60c9c006bc96bbb00f2a22d1219e234",
            "parents": [
                "09e177fb1b10f49527b2db550197b7b63aed37e1"
            ],
            "ref": "refs/changes/93/40293/6",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1618863789,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See previous comment.  I'm not sure tying these to entities is going to work in the long run.  Entities are for specific devices, and supported configurations really feels like a non-entity thing, or its own entity that's standalone from the collection.  Said another way, a chassis itself doesn't not denote that it has a required supported config.  Especially as systems age, there will be those that want to reuse a chassis, but not require a supported configuration.\n\nThe supported config enforcement stuff probably needs to come from compile time, where you'd basically say \"I'd like to enforce supported configurations\", and the \"Supported\" list in your below somewhat becomes your probe."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Trying to understand how the probe should work, because even if components were missing, we still want the Supported d-bus object to show up since it's the list of expected components. Maybe some way to have a wildcard Probe that always makes the object show up, and add specific Supported configuration json files based on compile flags?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "We can probably do the Probe by OR'ing each component, like \"Rainier chassis\" OR \"Power supply X\", then the configurations d-bus object would show up.\n\nFor enforcing the supported config at compile time, yeah i guess compiling the supported json files based on a compile flag, or perhaps adding a property to an existing configurations json file, like Supported=True."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 64,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "I don't understand how the Severity cases interact with multiple supported configurations. If you match the 1000W config, does that trigger the error on the 2000W config? If you match none of them, does that trigger the errors an all of them? Trigger Critical because it's more severe than Error?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 64,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "My thought is that the power supply monitoring app for example, would read the model that's plugged in the system, then query the supported configurations to see which one (if any) had that model listed, then check the number of times listed to verify it has the right number of power supplies, therefore it wouldn't trigger the error on the 2000W config. If none match, yeah it's up to the app on what to do, like logging an error or failing, because it means the system is running in an unsupported configuration. Yeah, Critical is more severe than Error, just using the standard severities from syslog/logging which are also used in redfish."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 64,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "Ok, so you're imaging match based on entity and error based on quantity. That makes sense.\n\nWhat are your thoughts on more heterogeneous configurations? For example, if I have a system with 10 PCIe slots, I might support 1 X, 3 Y's, and 6 Z's?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 64,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "I'd say based on the latest feedback from Ed, the Supported set would look like:\n[\"X\", \"Y\", \"Y\", \"Y\", \"Z\", \"Z\", \"Z\", \"Z\", \"Z\", \"Z\"]."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 85,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "schemas/SupportedConfiguration.json",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "schemas/global.json",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 67,
            "sizeDeletions": 0
        }
    ]
}