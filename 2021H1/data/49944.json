{
    "project": "openbmc/jsnbd",
    "branch": "master",
    "id": "Ic4578c5863dc196628cdcfa9e453803c4d749751",
    "number": 49944,
    "subject": "Replace old base - new service added",
    "owner": {
        "name": "Przemyslaw Czarnowski",
        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
        "username": "phawryle"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/jsnbd/+/49944",
    "commitMessage": "Replace old base - new service added\n\nThis commit adds all build infrastructure and main with some basic\nstuff.\n\nOld content related to ndb-proxy.c has been removed.\n\nNew service infrastructure is as follows:\n- Meson build system\n- virtual-media/config.json config file\n- xyz.openbmc_project.VirtualMedia.service\n- tmpfiles.d/virtual-media.conf configuration for\nsystemd-tmpfiles-clean.service for VM temporary files\n- start code base\n  - logging facility\n  - configuration management\n  - NBD device management\n\nTested:\nAt this moment it compiles and reads the configuration. UT will be\nadded.\n\nChange-Id: Ic4578c5863dc196628cdcfa9e453803c4d749751\nSigned-off-by: Przemyslaw Czarnowski <przemyslaw.hawrylewicz.czarnowski@intel.com>\n",
    "createdOn": 1640221074,
    "lastUpdated": 1641384315,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1640221074,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1640353288,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(34 comments)"
        },
        {
            "timestamp": 1640358560,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1641382688,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1641384315,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 2:\n\n(36 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
            "parents": [
                "7b7c29369cfeb267efa7f45b271aca6910687461"
            ],
            "ref": "refs/changes/44/49944/1",
            "uploader": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "createdOn": 1640221074,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "CMakeLists.txt",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can we do Meson please?  New code is expected to be in meson."
                },
                {
                    "file": "CMakeLists.txt",
                    "line": 1,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Meson will be added in the next patchset."
                },
                {
                    "file": "OWNERS",
                    "line": 36,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would prefer we do this as a separate commit at the end, once the review of this new feature is complete.  I don't want this repository to simply turn into another playground without review."
                },
                {
                    "file": "OWNERS",
                    "line": 36,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Ok, sounds reasonable."
                },
                {
                    "file": "nbd-proxy.c",
                    "line": 1,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "I guess if the `jsnbd` feature is totally removed the appropriate capability should be also removed from webui-vue and bmcweb together.\nAdditionally, I guess there are manufactures that are still using nbd-proxy and I don't understand why this feature is removing.\nIf nbd-proxy is totally removing, then the repository name was confusing and brings implicit meaning. I guess after the current patch the repository will nether provide `jsnbd` and seems to me will be better to have a new separate repository like 'virtual-media' and the current repository might be removed when the nbp-proxy will be marked as obsolete and each manufacturer will give up of that feature."
                },
                {
                    "file": "nbd-proxy.c",
                    "line": 1,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This one has been discussed in the group conversation. The main reason is that:\n- this repo alrady exist\n- some of the code will remain\n- repo is already configured (CI).\n\nI don't like it, but I am not the one to decide."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't see anything here that uses boost/chrono.  Did I miss something?"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 8,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "nice catch. Will use <chrono>."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 54,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You could make this simply:\n\nreturn { \"-t\", timeout, \"-u\", ... };\n\nDRY it up by avoiding repeating yourself on the return type and more likely for the compiler to use RVO to avoid a copy."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 54,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "ok"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do you want this or std::optional<const MountPoint&>?  Having to deal with the nullptr is more error prone than something which is obviously nullable."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can we just use std::map or std::unordered_map?  I really don't think there is as much advantage of using boost::..::flat_map as often as people attempt to use it."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This it just the pattern we use. This could be changed to unordered_map."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 103,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do you want to simply catch all exceptions?  Why these two specifically?  Seems error prone in maintenance. \n\nShouldn't you log e.what() somewhere?"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 103,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This can be changed to catch generic exception and print reason added to current message."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 128,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can you simplify all this with:\n\nauto value = nbdDeviceIter->get_ref<const std::string&>();\n\n1. Prefer references over pointers.\n2. The typename of value is obvious from get_ref, so DRY."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 128,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This is the easiest and exceptionless getting of json values of given type.\nPointer in this case could be validated in opposite to reference. In case of type mismatch, get_ref<>() will throw nlohmann::type_error exception, so we must use try/catch block; get_ptr<>() will just return null pointer then. \n\nWe use this pattern very often in bmcweb while parsing redfish input."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 130,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't think this is possible, is it?\n\nOr, should you be checking nbdDeviceIter->is_string() somewhere?"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 130,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "see above"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why are you having the constructor take a C-string if the only caller of it has a 'const std::string&'?  Defer conversion to C-strings as late as possible in C++ code."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 132,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is fairly non-obvious to me.  Having a struct cast to bool to indicate \"invalid parsing\"."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 132,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Added dedicated method on the object"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 144,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I really dislike this nested logic pattern.  There is simply too much logic in this code and it will only get worse as people add new configuration parameters.  Can you, at a minimum, decrease the nesting on all of these using something like:\n\n  if (!value)\n  {\n      LogMsg(...);\n      continue;\n  }\n\n  // real logic."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 144,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 145,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "?"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 145,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 162,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It looks like you have this pattern a LOT in the configuration.  Can you simplify with a function to do it?\n\ntemplate<typename T, bool required = true>\nbool getConfig(const std::string_view key, T& value);\n\nif (!getConfig(\"UnixSocket\", mp.unixSocket))\n{\n   LogMsg(...);\n   continue;\n}"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 162,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Made a getConfig wrapper but left required/not required to the code flow. \nIt looks better now."
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 233,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "switch-case?"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 233,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 248,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "mountPoints.emplace(mountpoint.key(), std::move(mp));"
                },
                {
                    "file": "src/configuration.hpp",
                    "line": 248,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "ok"
                },
                {
                    "file": "src/logger.hpp",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please use phosphor-logging::lg2 and not make up your own logger."
                },
                {
                    "file": "src/logger.hpp",
                    "line": 1,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Is this really necessary? I consider phosphor logging heavy and not easy in use (with limitations)."
                },
                {
                    "file": "src/main.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "In what contexts is this used?  I would have guessed test cases, but this is main.cpp."
                },
                {
                    "file": "src/main.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "It is a part to simplify debugging. Removed."
                },
                {
                    "file": "src/main.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "server::manager_t"
                },
                {
                    "file": "src/main.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "ok"
                },
                {
                    "file": "src/main.cpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I prefer /etc/virtual-media/config.json instead of more files cluttering the root."
                },
                {
                    "file": "src/main.cpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Why virtual-media.conf stored in the /etc that is rwfs? Does we desire the VM-endpoints might be configured at runtime on the field mode? I'd prefer to store that config at the /usr/share/virtual-media/"
                },
                {
                    "file": "src/main.cpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "I would prefer to make it configurable on the fly. Modification of eg. timeout could be beneficial for some use cases."
                },
                {
                    "file": "src/main.cpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "seems reasonable."
                },
                {
                    "file": "src/main.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This doesn't seem obviously connected to virtual-media.  Someone's just going to see a random /tmp/sock directory?"
                },
                {
                    "file": "src/main.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "+1. \nI'd prefer to store the virtual-media-specific stuff at the (/var)/run/virtual-media/ directory."
                },
                {
                    "file": "src/main.cpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Yes, this has been changed recently. Will backport that."
                },
                {
                    "file": "src/main.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "In what contexts is this used?"
                },
                {
                    "file": "src/main.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "The use case is by running it on x86 platform natively (for debugging eg.) but with dbus tunneled to bmc platform.\nI will remove it in favor of DBUS_STARTER_BUS_TYPE=\"x\" and DBUS_STARTER_ADDRESS=\"unix:abstract=/tmp/socket\" what does the same, actually."
                },
                {
                    "file": "src/main.cpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Any reason you're not using the sdbusplus code here?"
                },
                {
                    "file": "src/main.cpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This is just for making remote dbus possible. Not needed anymore."
                },
                {
                    "file": "src/system.hpp",
                    "line": 21,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\"I want to type less\" is kind of a lousy reason to avoid C++ features."
                },
                {
                    "file": "src/system.hpp",
                    "line": 21,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Removed according to another suggestion"
                },
                {
                    "file": "src/system.hpp",
                    "line": 35,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It isn't obvious to me when a static (compile-time) reference to a particular nbd name is useful.  Can you elaborate?  It seems like this class should always take a string-like and check it against /dev for presence.  Why should we need to modify anything if we wanted to support more or less nbd channels?"
                },
                {
                    "file": "src/system.hpp",
                    "line": 35,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This class has been prepared to handler different nbd nodes on request. There was a problem with kernel implementation when device sometimes (rather rarely) couldn't be reused for some reason. We end up with this ready for future expansions when the problem will occur more often. In the end, the bug hasn't recurred (for >1year).\n\nThe mitigation for the problem was when requesting for some node it could return the other one that is free at the moment (that's why \"isReady\" function exists but is not used). This will be easier to manage with internal enum representation.\n\nI would recommend to leave some of this functionality (may be used), but indeed I will probably resign from using enum inside as it seems redundant at this moment."
                },
                {
                    "file": "src/system.hpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "As mentioned above, it isn't obvious to me why we want to do this search operation."
                },
                {
                    "file": "src/system.hpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "see above"
                },
                {
                    "file": "src/system.hpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Prefer to use range-find whenever possible now.\n\nstd::range:find(nameMatching, nbdName);"
                },
                {
                    "file": "src/system.hpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/system.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "std::end(nameMatching) \n\n(or cend if you really prefer, but generally the compiler will simply do the right thing anyhow)"
                },
                {
                    "file": "src/system.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/system.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please use spaceship operator."
                },
                {
                    "file": "src/system.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/system.hpp",
                    "line": 75,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This sounds expensive.  Can we simply check for dev node presence?  Maybe we're doing it infrequently enough that it doesn't matter."
                },
                {
                    "file": "src/system.hpp",
                    "line": 75,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "For the reason I mentioned above, this could help determine if device could be used."
                },
                {
                    "file": "src/system.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is all the more reason why I don't understand why you want to store as an enum and do this conversion back and forth all the time."
                },
                {
                    "file": "src/system.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Changed the internal representation to std::string."
                },
                {
                    "file": "src/system.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "If you're going to have this it should probably be a 'static constexpr std::array'?"
                },
                {
                    "file": "src/system.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtual-media.json",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This seems kind of silly.  Can we DRY up this configuration?  You've had to repeat yourself 4 times for a \"default\" configuration: Slot_0, /nbd/0, nbd0, nbd0.sock."
                },
                {
                    "file": "virtual-media.json",
                    "line": 8,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Those names are chosen arbitrarily this way to show how to define such configs. They could (and should) be replaced to something more meaningful. \n\nI don't see anything wrong to have everything customizable."
                },
                {
                    "file": "xyz.openbmc_project.VirtualMedia.service",
                    "line": 6,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We've been moving a lot of executables we don't intend users to run into /usr/libexec.  See https://github.com/openbmc/docs/blob/master/anti-patterns.md#incorrect-placement-of-executables-in-sbin-usrsbin-or-bin-usrbin"
                },
                {
                    "file": "xyz.openbmc_project.VirtualMedia.service",
                    "line": 6,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": ".clang-format",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "ADDED",
                    "insertions": 145,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -11
                },
                {
                    "file": "OWNERS",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "README",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -65
                },
                {
                    "file": "README.md",
                    "type": "ADDED",
                    "insertions": 117,
                    "deletions": 0
                },
                {
                    "file": "cmake/Findudev.cmake",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                },
                {
                    "file": "config.sample.json",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -17
                },
                {
                    "file": "configure.ac",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -21
                },
                {
                    "file": "m4/ax_append_compile_flags.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -67
                },
                {
                    "file": "m4/ax_append_flag.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -71
                },
                {
                    "file": "m4/ax_check_compile_flag.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -74
                },
                {
                    "file": "m4/ax_require_defined.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -37
                },
                {
                    "file": "m4/pkg.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -275
                },
                {
                    "file": "nbd-proxy.c",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -882
                },
                {
                    "file": "src/configuration.hpp",
                    "type": "ADDED",
                    "insertions": 254,
                    "deletions": 0
                },
                {
                    "file": "src/logger.hpp",
                    "type": "ADDED",
                    "insertions": 94,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "ADDED",
                    "insertions": 83,
                    "deletions": 0
                },
                {
                    "file": "src/system.hpp",
                    "type": "ADDED",
                    "insertions": 140,
                    "deletions": 0
                },
                {
                    "file": "tmpfiles.d/virtual-media.conf",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "virtual-media.json",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "xyz.openbmc_project.VirtualMedia.service",
                    "type": "ADDED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1078,
            "sizeDeletions": 1520
        },
        {
            "number": 2,
            "revision": "cfef539f8bdbb267f1e18070c95e72806045e99b",
            "parents": [
                "7b7c29369cfeb267efa7f45b271aca6910687461"
            ],
            "ref": "refs/changes/44/49944/2",
            "uploader": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "createdOn": 1641382688,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": ".clang-format",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                },
                {
                    "file": ".clang-tidy",
                    "type": "ADDED",
                    "insertions": 260,
                    "deletions": 0
                },
                {
                    "file": ".gitignore",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -11
                },
                {
                    "file": "README",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -65
                },
                {
                    "file": "README.md",
                    "type": "ADDED",
                    "insertions": 117,
                    "deletions": 0
                },
                {
                    "file": "config.sample.json",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -17
                },
                {
                    "file": "config/config.json",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -21
                },
                {
                    "file": "m4/ax_append_compile_flags.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -67
                },
                {
                    "file": "m4/ax_append_flag.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -71
                },
                {
                    "file": "m4/ax_check_compile_flag.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -74
                },
                {
                    "file": "m4/ax_require_defined.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -37
                },
                {
                    "file": "m4/pkg.m4",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -275
                },
                {
                    "file": "meson.build",
                    "type": "ADDED",
                    "insertions": 248,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "nbd-proxy.c",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -882
                },
                {
                    "file": "src/configuration.hpp",
                    "type": "ADDED",
                    "insertions": 226,
                    "deletions": 0
                },
                {
                    "file": "src/logger.hpp",
                    "type": "ADDED",
                    "insertions": 94,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "src/system.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "subprojects/boost.wrap",
                    "type": "ADDED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "subprojects/nlohmann.wrap",
                    "type": "ADDED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "subprojects/packagefiles/boost/meson.build",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "subprojects/sdbusplus.wrap",
                    "type": "ADDED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "tmpfiles.d/virtual-media.conf",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "xyz.openbmc_project.VirtualMedia.service",
                    "type": "ADDED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1366,
            "sizeDeletions": 1520
        }
    ]
}