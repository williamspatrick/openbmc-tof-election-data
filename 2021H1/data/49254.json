{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I2487be28418aec5063aca5e511f82bec006848be",
    "number": 49254,
    "subject": "psusensor: fix unnecessarily quadratic sensor-creation algorithm",
    "owner": {
        "name": "Zev Weiss",
        "email": "zev@bewilderbeest.net",
        "username": "zevweiss"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/49254",
    "commitMessage": "psusensor: fix unnecessarily quadratic sensor-creation algorithm\n\nPreviously we'd been iterating over the entire set of configured sensors\nfor every discovered hwmon path, resulting in O(n^2) running time and a\ncorresponding amount of \"Configuration skipping A-B because not C-D\"\nnoise sent to stderr.  We now instead construct a map of the configured\nsensors so we can look them up by bus+address to find the configuration\ncorresponding to a given hwmon path.\n\nTested: on an AST1250 system with 50 pmbus devices monitored by\npsusensor, daemon startup time is reduced from 30 seconds to 20 seconds,\nand produces 1225 fewer lines of log noise.\n\nSigned-off-by: Zev Weiss <zev@bewilderbeest.net>\nChange-Id: I2487be28418aec5063aca5e511f82bec006848be\n",
    "createdOn": 1638431603,
    "lastUpdated": 1640459430,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1638431603,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1638431617,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638431651,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/31066/ : FAILURE"
        },
        {
            "timestamp": 1638432026,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1638432042,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638432201,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/31070/ : FAILURE"
        },
        {
            "timestamp": 1638432400,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1638432412,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638432448,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/31072/ : FAILURE"
        },
        {
            "timestamp": 1638434107,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1638434122,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638434282,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31077/ : SUCCESS"
        },
        {
            "timestamp": 1638469729,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(8 comments)\n\nThanks for looking at this!  There's some stuff to refactor a little, but once done it looks like it'll be a good improvement to have."
        },
        {
            "timestamp": 1638471411,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(7 comments)"
        },
        {
            "timestamp": 1638472496,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1638483847,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1638483860,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638483895,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/31113/ : FAILURE"
        },
        {
            "timestamp": 1638484636,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 5:\n\n(6 comments)"
        },
        {
            "timestamp": 1638485582,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1638485595,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638485748,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31115/ : SUCCESS"
        },
        {
            "timestamp": 1639178923,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 6:\n\n(3 comments)\n\nNice improvement! Couple minor things and one question."
        },
        {
            "timestamp": 1639189932,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1639190646,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1639190660,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1639190815,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31791/ : SUCCESS"
        },
        {
            "timestamp": 1639197978,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 7:\n\n(2 comments)"
        },
        {
            "timestamp": 1639246082,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1639246585,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7: Code-Review+1\n\n(2 comments)\n\nMy only comments on the newest patch are nitpicks.  Up to you if you want to fix them, or want to merge this patch."
        },
        {
            "timestamp": 1639424464,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 7:\n\n(2 comments)\n\nlgtm"
        },
        {
            "timestamp": 1639424484,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 7: Code-Review+1\n\n> Patch Set 7:\n> \n> (2 comments)\n> \n> lgtm"
        },
        {
            "timestamp": 1640459430,
            "reviewer": {
                "name": "Arun Lal K M",
                "email": "arun.lal@intel.com",
                "username": "arunlalkm-intel"
            },
            "message": "Patch Set 7: Code-Review+1\n\n(1 comment)\n\nLGTM"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "a193d3760b78d70d6f8b133531350f2c546606aa",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/1",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1638431603,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 78,
                    "deletions": -96
                }
            ],
            "sizeInsertions": 78,
            "sizeDeletions": 96
        },
        {
            "number": 2,
            "revision": "a34e555391104c9a62614ba4a2391356e5064469",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/2",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1638432026,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 83,
                    "deletions": -96
                }
            ],
            "sizeInsertions": 83,
            "sizeDeletions": 96
        },
        {
            "number": 3,
            "revision": "a980bb9f2d016fc75a3f4f20b71287a5025b8f31",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/3",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1638432400,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 80,
                    "deletions": -96
                }
            ],
            "sizeInsertions": 80,
            "sizeDeletions": 96
        },
        {
            "number": 4,
            "revision": "9986aa87f57ef4b9b4b46f133f1d378c152cfceb",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/4",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1638434107,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Would a multi-level map make more sense here?\n\n\nie, flat_map<bus, flat_map<address>>  That seems like it would remove quite a few struct constructions and lead to more readable code"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Hmm, I guess I could see that if we had nested loops doing\n\n```\nfor each bus:\n    x = map.lookup(bus)\n    for each address on bus:\n        y = x.lookup(address)\n        ...stuff with y...\n```\n\nbut given that we don't, I'm a little unclear on what the perceived readability advantage is?  (With the structure we've got it would also mean twice as many map lookups/existence checks.)\n\nAs for struct constructions, with the caveat of my general lack of C++ expertise, I would've thought the work involved for those would be pretty trivial; is there something more complex that's going on implicitly?"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Hmm, I guess I could see that if we had nested loops doing\n> \n> ```\n> for each bus:\n>     x = map.lookup(bus)\n>     for each address on bus:\n>         y = x.lookup(address)\n>         ...stuff with y...\n> ```\n> \n> but given that we don't, I'm a little unclear on what the perceived readability advantage is?  (With the structure we've got it would also mean twice as many map lookups/existence checks.)\n\nTwice as many lookups, but on smaller maps.  The algorithmic complexity and lookup time I suspect would be identical.\n\n> \n> As for struct constructions, with the caveat of my general lack of C++ expertise, I would've thought the work involved for those would be pretty trivial; is there something more complex that's going on implicitly?\n\nIt's mostly about removing code, and making code easier to read.  Needing to know that std::less<std::pair<uint64_t, uint64_t>> does left to right lookup is a bit subtle.\n\nIf we did a dual stage map it would mean:\n1. Different code paths for bus missing and address missing (which might help with debug).\n2. relying on the identity function for std::less lookup, which should optimize smaller.\n3. Removes the need for a separate SensorConfigKey type declaration\n4. Removes the need to construct a SensorConfigKey on line 299.\n\n\nIt seems better to me, but maybe not?"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> Needing to know that std::less<std::pair<uint64_t, uint64_t>> does left to right lookup is a bit subtle.\n\nI (ahem)...*might* have written the code without any awareness of std::less at all...\n\nI guess overall the single-level map seems clearer and simpler to me -- given that once we've determined them we're not really doing anything special with the bus or address individually, it seems like we might as well treat them as the single unique identifier that they effectively are (when combined) instead of splitting that identifier in half and doing separate lookups for each part.  It just seems like sort of artificial key-sharding, I guess."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is kinda my point.  It's subtle behavior when you're somewhat abusing std::less<pair> .  To be less subtle, you could write an actual key type class and define an  ordering, but that's more code, although would be much less subtle.\n\n> we're not really doing anything special with the bus or address individually\n\nFor debug, we should ideally treat them differently in terms of logging.  Agreed that in the golden path we don't treat them differently.\n\n\nWith all of this said, I'm not prepared to stand and die on this bridge;  Your change is still better even with this, I'm just not a huge fan of how much it required me to thing about it to verify it was correct.  Up to you if you want to change."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 272,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Unless you're using the properties of a tuple (viadic expansion or similar) please prefer to have a normal struct for these kinds of things."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 272,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Yeah, this was basically just laziness (shorthand) I guess, I'll make it its own struct."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 272,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I get it, and I've done the same thing myself for testing, but a year from now, a real struct is going to be infinitely easier to read."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 272,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 290,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just init these on the same line you declare them, then check for null.\n\nconst uint64_t* bus = std::get_if<uint64_t>(&busCfg->second);\nif (bus == nullptr){\n   ... bus invalid\n   return\n}\n\n\nUsing the above pattern makes the code much easier to read quickly."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 290,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 308,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is doing two hash lookups.  you probably want something like\n\nstd::pair<iterator, bool> inserted = configSensors.emplace(....);\nif (inserted.second){\n    .... log duplicate entry.\n}"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 308,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ah, thanks -- I was looking for something like that but the boost flat_map docs were a bit of a mountain..."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 308,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I personally just read the std::map docs which are better.  99% of the time  the behavior and apis are identical, because boost::container is trying to match STL interfaces as close as it can."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 308,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 311,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering this block of code is largely self-contained, should it be its own method?  This method is already way too long, lets not make it worse, and now that this section is producing a map, it shoudl be easy enough to just have the method return configSensors"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 311,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Agreed, that sounds like a good idea."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 311,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 385,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is making a copy of all these keys, and is difficult to read into the types.  Please use a normal struct."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 385,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 395,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Pointers need to be null checked, although when you move the above to a struct, I suspect they should also be made references."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 395,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I had initially arranged this to use references, but got stuck on compilation errors I spent a while trying to figure out and got nowhere on but which were magically resolved by using pointers instead...not sure if the errors were an artifact of some subtlety of the tuple/pair business that'll be avoided with a plain struct, but I'll revisit it."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 395,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "you generally can't store a reference in a tuple (you actually can, but you really need a weird reference_wrapper thing).  When you go to a struct those problems will go away."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 395,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done (via `std::reference_wrapper` as discussed on discord)."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 858,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "possible nullptr dereference."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 858,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "(Obviated by reference conversion.)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 80,
                    "deletions": -96
                }
            ],
            "sizeInsertions": 80,
            "sizeDeletions": 96
        },
        {
            "number": 5,
            "revision": "cf95d61d7bff4f1ff65433ac534e18d7c2eb52e3",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/5",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1638483847,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 113,
                    "deletions": -98
                }
            ],
            "sizeInsertions": 113,
            "sizeDeletions": 98
        },
        {
            "number": 6,
            "revision": "bced986b82dd9b087ad5dae1f810aeaa8460a740",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/6",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1638485582,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 357,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I don't see this check in the optimized version. Maybe it is not necessary anymore. Please confirm."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 357,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "It's funny, I recall looking at this loop while writing the patch, initially being mystified as to its purpose, and then figuring it out...but now I'm back to being mystified again.\n\nLemme see if I can re-derive its purpose (pardon my \"thinking out loud\" here)...\n\nWe've got `pmbusPath` as a hwmon sysfs file path from line 270.\nWe've got `sensorData` as a SensorData object (an object-specific map keyed by sensor-type strings and storing SensorBaseConfigMaps, which are I believe the actual json-level string->variant maps) from line 347.\nWe're looping over the global `sensorTypes` array, with `type` as one of its entries.\nWe look up `type` in `sensorData` to try to find a config map for that type, and if we don't find one we give up on line 362.\nThe check at lines 365-373 tests if the config we've found is in fact actually for this sensor, giving up if not (the source of all the log spam).\n\nSo, I'm pretty sure all that logic is obviated by the new code (i.e. there's no need to add any code corresponding to this bit), but I'm still a bit confused as to why/how the `SensorData` map is keyed by sensor *type*.\n\n[...reads some more code...]\n\nAh, perhaps not strictly *type* but *interface*, as per the insertion on line 242 of Utils.hpp:\n\n```\nself->respData[path][interface] = std::move(data);\n```\n\nSo `sensorConfigs` is a {path: {interface: config}} map (to use python-style pseudocode), but it's not obvious to me why it isn't just {path: (inteface, config)}...perhaps some sensors can have multiple interfaces?  This loop certainly only appears to handle a single interface (type) though, so the replacement code certainly shouldn't be any worse as far as I can tell.  I *think* this loop could perhaps have been written slightly more efficiently by just iterating over `sensorData` directly, since I think its keys should be constrained to only be elements from `sensorTypes` anyway by the fact that that's what we pass to the `getConfiguration()` call on line 916.\n\nAnyway, that's all basically just a long-winded way of saying that I'm pretty sure there's no functionality in this loop that isn't preserved by the new code (but I figure I'll leave my brain-dump above here just in case it's useful to anyone else poring over the code who's similarly confused)."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 357,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Thanks for writing this up! - I was mystified also, hence the question. I will read through your write up carefully when my mind is fresh."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 357,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I read through the code, tested the change. I agree with the assessment - this logic is not needed with new code.\n\nThe interfaces it was filtering out are the ones created here https://github.com/openbmc/entity-manager/blob/master/src/EntityManager.cpp#L707.\n\nFor example in the case for pmbus devices, \n\nconfig file:\n{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Address\": \"$ADDRESS % 4 + 88\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Bus\": \"$bus\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Name\": PSU1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Type\": \"pmbus\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Thresholds\": [\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Direction\": \"greater than\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Label\": \"pin\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Name\": \"upper critical\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Severity\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Value\": 2149.5\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }]\n}\n\nThe above check will:\nprocess: xyz.openbmc_project.Configuration.pmbus (1)\nskip: xyz.openbmc_project.Configuration.pmbus.Thresholds0 (2)\n\nWith new function: (1) is added to the lookup map, (2) is skipped because it does not have a bus/address pair"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 265,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I think the following is (slightly) clearer \nif (bus < other.bus || (bus == other.bus && addr < other.addr))\n{\nreturn true;\n}\n\nBut I am ok with the way it is too."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 265,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "That does seem like a slightly nicer way of expressing it...though actually, given that it's just producing a bool anyway, it could just be\n\n```\nreturn bus < other.bus || (bus == other.bus && addr < other.addr);\n```\n\nPerhaps I'll update it to that..."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 265,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I like it!"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: name configSensors is a bit confusing where there is also \"sensorConfigs\"\nWould \"configMap\" be a better name here?"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Yeah, that does sound better; I'll switch it to that."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 117,
                    "deletions": -99
                }
            ],
            "sizeInsertions": 117,
            "sizeDeletions": 99
        },
        {
            "number": 7,
            "revision": "ca77e9f5ff4a56bc3ac4f229e30b23c56aea8bb5",
            "parents": [
                "77518b28db824e01af18351094680a99b1ba3cae"
            ],
            "ref": "refs/changes/54/49254/7",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1639190646,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 255,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, can we default initialize these.  (just add =0 to each)"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 258,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, can we write this out a little differently?\n\nif (bus != other.bus){\n   return bus < other.bus;\n}\nreturn addr < other.addr;\n\n\nSame logic functionally, but IMO is more readable."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 258,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I am ok with either."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 302,
                    "reviewer": {
                        "name": "Arun Lal K M",
                        "email": "arun.lal@intel.com",
                        "username": "arunlalkm-intel"
                    },
                    "message": "nit: Since we are optimizing.\nIf you make a move constructor for SensorConfig you can avoid copy and destroy of this temp variable."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 109,
                    "deletions": -99
                }
            ],
            "sizeInsertions": 109,
            "sizeDeletions": 99
        }
    ]
}