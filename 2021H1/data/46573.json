{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Id004e331ed4ce9f72904beefb8d5b0c59cc75169",
    "number": 46573,
    "subject": "Design doc for eStoraged",
    "owner": {
        "name": "John Wedig",
        "email": "johnwedig@google.com",
        "username": "johnwedig"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/46573",
    "commitMessage": "Design doc for eStoraged\n\nThis daemon will serve as an abstraction for an encrypted storage device,\nproviding a D-Bus interface for storage management.\n\nSigned-off-by: John Wedig <johnwedig@google.com>\nChange-Id: Id004e331ed4ce9f72904beefb8d5b0c59cc75169\n",
    "createdOn": 1630690770,
    "lastUpdated": 1634936790,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1630690770,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1631067043,
            "reviewer": {
                "name": "Matt Johnston",
                "email": "matt@codeconstruct.com.au",
                "username": "mkj"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nOne minor comment about the device password. I assume callers will be handling key derivation for this, but best to make the security considerations clear."
        },
        {
            "timestamp": 1631070675,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "miltonm@us.ibm.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1631113191,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1631140287,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1631140376,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 2:\n\n(6 comments)\n\nThank you for the review so far."
        },
        {
            "timestamp": 1631151907,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1631206360,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1631207042,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1631234875,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1631576132,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\nThanks for looking this over"
        },
        {
            "timestamp": 1631600443,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1631600587,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1631654878,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1631654979,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1631655785,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1631661698,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1631663220,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1631665430,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1631665470,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1632784662,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 3: Code-Review+1\n\nLooks good"
        },
        {
            "timestamp": 1632784958,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1632787291,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1632789363,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1632849166,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1632853558,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1632854606,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1632866305,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1632868044,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1633038713,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1633120063,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(2 comments)\n\nIs there anything else outstanding to be fixed on this patchset?"
        },
        {
            "timestamp": 1633121752,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1633121980,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1633126246,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(1 comment)\n\nSounds good, Let us know if there are any remaining issues to sort out.\n\nThank you"
        },
        {
            "timestamp": 1633370016,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1633371232,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1633426373,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1633451736,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1633452443,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "miltonm@us.ibm.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 5:\n\n(1 comment)\n\nI've been reading but staying out of this apparently application specific design.\n\nHave you considered using the udisk2 interfaces where applicable?"
        },
        {
            "timestamp": 1633457358,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(1 comment)\n\n> Have you considered using the udisk2 interfaces where applicable?\n\nIt would be nice to use udisks2, but when we tried adding it to our BMC image, we found that it increased the compressed image size by about 22 MB, due to all the dependencies being pulled in, making the image too big for us."
        },
        {
            "timestamp": 1633457765,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 5:\n\n> Patch Set 5:\n> \n> (1 comment)\n> \n> > Have you considered using the udisk2 interfaces where applicable?\n> \n> It would be nice to use udisks2, but when we tried adding it to our BMC image, we found that it increased the compressed image size by about 22 MB, due to all the dependencies being pulled in, making the image too big for us.\n\nAs I understand it, Milton is asking if we would be able to follow the udisk2 INTERFACES where possible, not use udisk2. \nWe can absolutely review the udisk2 interfaces, and try to make our interfaces similar. However, some of our interfaces will be unique."
        },
        {
            "timestamp": 1634262626,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5:\n\n(6 comments)"
        },
        {
            "timestamp": 1634266477,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 5:\n\n(3 comments)\n\nThanks for looking this over. \n\nI will find out more about how bmcweb's deals with async status of daemon."
        },
        {
            "timestamp": 1634580331,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1634668902,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1634669164,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1634762551,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 6:\n\n(2 comments)\n\nThanks for looking this over"
        },
        {
            "timestamp": 1634849674,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1634936782,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Verified+1 Code-Review+2"
        },
        {
            "timestamp": 1634936790,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully rebased and submitted as 0bc53ce7bdcc7968d10b17935e03a7792395c4b4 by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "c10646efd854d4b36626540da20d05a619172579",
            "parents": [
                "38c0f99a341106ebd0ddc7de0fd7d2183c5044b9"
            ],
            "ref": "refs/changes/73/46573/1",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1630690770,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Should we restrict this to eMMC devices or should we be able to easily extend this to USB keys and NVMe drives (attached over the BMC's PCIe)?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "My initial thinking was to make this generic for any type of storage device, but I wanted to make use the eMMC-specific password feature (CMD42). So my current plan to make this unique to eMMC devices.\n\nIf you think we might want to use this daemon with other types of storage devices, we could provide a way to leave out the eMMC device password and just use the encryption for those devices."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Re CMD42.  Doesn't SD also support that?  Isn't there an equivalent feature on normal SSDs?  CMD42 feels like an implementation of the feature and not the feature itself."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "SD does support the same CMD42. I'm not familiar with SSDs, but they seem to have something similar."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "I believe nearly all disks have a lock / unlock command of sorts. Not all of them implement it at all or well, but the command sets for SATA / NVME / MMC all support it."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "We can plan on supporting other types of devices, in addition to eMMC, if there's demand for that. But it seems to me that trying to support hardware locking will look different for each type of device.\n\nI don't know of anything that would abstract out the details of each type of command set. For example, the MMC kernel driver doesn't support this feature, as jebr@ pointed out earlier, so we need to use an ioctl to send the MMC-specific commands."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For the sake of this design doc, can we scope it on eMMC (ie the common bmc use case), with the understanding that we'll:\nA. Do our best to consider other use cases and not intentionally namespace our methods into a corner where they're not extendable later.\nB. Wait for other use cases to pop up that might want this, and discuss more then?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I've updated the doc to try to convey that eStoraged will be generic enough to allow us to support hardware locking on other types of devices, if we find a need to add it later. Or at the very least, it will allow encryption-only locking, if hardware locking isn't supported."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 16,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Both A and B sound good to me."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Can you provide some background on the storage model you intend to use here?\n\nI take it these encrypted storage volumes are not where the root file system is stored?  Or if they are how does the device boot?\n\nInstead it seems like this is either for host eMMC or is for some auxiliary storage volumes."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 23,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Sorry, I never mentioned that this is only meant to be used for secondary storage. I added a note about that."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 34,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "when you add the ability to lock/unlock the emmc will you add it to the linux mmc driver, and create a sys fs interface \n\u00e0 la https://www.spinics.net/lists/linux-mmc/msg32007.html\n\nOr will this new daemon have act like a userspace driver?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 34,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "My original thinking was that it would all be in userspace, e.g. by adding it to mmc utils: https://git.kernel.org/pub/scm/utils/mmc/mmc-utils.git/\n\nThat kernel patch looks useful. It doesn't look like it's actually in the mainline Linux, so we would need to add the patch to our kernel, if we want to add this functionality to the kernel driver."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 34,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "We talked about this offline, but the ioctl interface should provide the ability to run the arbitrary command from userspace. You will find it easier than building a specific kernel interface to perform this logic."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 34,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "sounds good, we have made progress on a user space tool"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 34,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I made note of this."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Again missing some of the model.  This says the host will be iniitating the request for a volume.  Are these expected to be exposed back to the host?  USB?  something else?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 69,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I think this paragraph adds unnecessary confusion. No, the volume is not expected to be exposed externally. (In the way I plan to use it, the host will know this encrypted eMMC exists, but it won't have access to the data.)\n\nI re-worked this paragraph to hopefully be less confusing, but let me know if something isn't clear."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 75,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "do you need decrypt method."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 75,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Maybe the name could be better, but this is really meant to be an initial formatting operation, to set up the encrypted filesystem on the device. The \"decrypt\" functionality you're thinking of might be what the Unlock method is for, which gets us access to the volume key, allowing us to read/write the encrypted data on the device."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 75,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "You probably want to name this \"format\" as that is how other tooling refers to it."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 75,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Yeah, that's probably more clear. Done."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 76,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Does erase need to shred/wipe or does it just need to zero?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 76,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "My plan for the erase is to do more than just write zeros. The security folks at Google prescribe a whole sequence of steps that involves more than just writing zeros."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 76,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "We probably want to make it possible to specify strategies here, in case multiple parties have different opinions on what secure erased means."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 76,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Agree"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 76,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I made note of this in the doc."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 100,
                    "reviewer": {
                        "name": "Matt Johnston",
                        "email": "matt@codeconstruct.com.au",
                        "username": "mkj"
                    },
                    "message": "It might be worth making it clear that the CMD42 device password must be different from the encryption password? Otherwise it could be recoverable from the eMMC and then used against the encryption."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 100,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I added a note about this."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Have you looked at UDisks2?  Does it provide most of what is needed?  It seems like UDisks2 has most of the dbus APIs you already mentioned above between the Encrypted and Block objects.  Maybe we could enhance it for what is missing?\n\nhttp://storaged.org/doc/udisks2-api/2.7.5/gdbus-org.freedesktop.UDisks2.Encrypted.html"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Hmm, thanks for pointing that out. I wasn't aware of UDisks2 and I just added a paragraph about it. I see it provides methods for Lock, Unlock, and ChangePassphrase. But it doesn't provide a way to do the initial encryption setup or wipe the device. Even if I enhanced UDisks2 to include those operations, I don't think I would be able to add the eMMC device password functionality, which is eMMC-specific. So, I'm leaning away from UDisks2, but I'd be interested to see if other people think I should pursue that route instead."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "using Udisk2 has some advantages because it is a generic disk managing deamon, rather then a custom secondary emmc tool. To use Udisk2 we would have to:\n - add a way lock/unlock the emmc\n - add a way to erase the device (you open the block and write zeros to it...)\n - make sure the size requirements were not an issue\n\n\nThere is a method for formatting a block \nhttp://storaged.org/doc/udisks2-api/latest/gdbus-org.freedesktop.UDisks2.Block.html#gdbus-method-org-freedesktop-UDisks2-Block.Format\nencrypting, decrypting, Changing the Password, and getting the status.\n\nIt is a very interesting suggestion."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Even if I enhanced UDisks2 to include those operations, I don't think I would be able to add the eMMC device password functionality, which is eMMC-specific. \n\nAs I mentioned above, I feel that this is an implementation of a \"hardware lock\" and not something entirely unique to eMMC.  Depending on how it is implemented at a kernel level, it is possible that the eMMC/SD-specifics end up being abstracted away by the kernel.\n\n> So, I'm leaning away from UDisks2, but I'd be interested to see if other people think I should pursue that route instead.\n\nI really think we should write up everything missing by UDisk2 and approach that project with our needs (and be willing to enhance it).  UDisk2 is widely leveraged by Linux-on-Desktop.  If we have a project that does 80% of what we desire and we can enhance it for the extra 20%, I'd way rather do that than write 100% unique code for us."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Thanks John for pointing out that the Format method is in fact capable of setting up encryption, which might make UDisks2 more appealing. It looks like the same method also has an erase feature, which can either write zeros to the device or do an ATA secure erase.\n\nSome things I noticed when looking through the UDisks2 code and documentation:\n- It would be nice if the Format method exposed more options for the encryption setup, e.g. cipher and volume key. But it mostly does what I want, except that it doesn't enforce a minimum amount of entropy when generating the volume key. At the very least, maybe I could check that there's enough entropy before calling Format.\n- The erase feature in Format probably won't satisfy the security folks at Google, since they expect a secure erase operation to involve more than just writing zeros.\n- I don't see anything in UDisks2 that would provide the hardware lock capability (CMD42). It doesn't look like the existing Lock and Unlock methods are intended to lock/unlock at the hardware level. If I do end up using UDisks2, I might still need something else to do the hardware lock."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "We looked at udisks2 and the project is very large when built (15MiB after removing polkit) on a bmc. It has a bunch of functionality that we don't need. The changes we would have to do to make it acceptable (2Mib) for our flash size would be extensive, and time consuming to maintain .\nWe think having a small custom daemon would be easier to maintain, and less effort to produce. \n\nLet us know if there are any tools that could drastically decrease the size of udisks2. \nThank you"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Yeah, it wouldn't be that much new code to wrap libcryptsetup and do the lock / unlock bits. The erase method would be unique to us anyway."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> We looked at udisks2 and the project is very large when built (15MiB after removing polkit) on a bmc.\n\nWe need to at least add this as rationale to the doc.\n\nBut, I really don't believe this.\n\n```\n-rwxr-xr-x 1 root root 493280 Aug  2 07:46 /usr/libexec/udisks2/udisksd\n-rwxr-xr-x 1 root root 545336 Aug  2 07:46 /usr/lib64/libudisks2.so.0.0.0\n-rwxr-xr-x 1 root root 60512 Aug  2 07:46 /usr/bin/udisksctl\n```\n\nThe entire application suite (minus the debug information and manpages) is only 1MB _uncompressed_ on my Linux desktop.  Are we really doing the right comparison?  Are you sure you looked at the _stripped_ version of the build?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "You need to compare all of the transitive dependencies that get added too. Someone can probably print an image diff with all of the files that get pulled in."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ok.  That wasn't what I derived from the claim: \"the project is very large when built\".\n\nI'm looking at the dependencies on gentoo and they're really not that big.  The only one that is obvious is `parted`.  Maybe that is where the mess is coming from."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I did an image diff between an image with udisks and one without. Here are some of the larger items that showed up in the image when adding udisks. This only includes things >1 MB.\n\n> 1.1M  ./usr/bin/pk11ectest\n> 1.5M  ./usr/bin/rsaperf\n> 1.5M  ./usr/lib/libgio-2.0.so.0.6800.4\n> 1.1M  ./usr/lib/libglib-2.0.so.0.6800.4\n> 21M   ./usr/lib/libmozjs-60.so\n> 1.1M  ./usr/lib/libnss3.so\n> 2.6M  ./usr/lib/libpython3.9.so.1.0\n> 1.1M  ./usr/lib/libsqlite3.so.0.8.6\n> 39M   ./usr/lib/python3.9\n> 1.5M  ./usr/lib/python3.9/asyncio\n> 1.1M  ./usr/lib/python3.9/asyncio/__pycache__\n> 1.8M  ./usr/lib/python3.9/distutils\n> 1.2M  ./usr/lib/python3.9/email\n> 2.5M  ./usr/lib/python3.9/encodings\n> 1.2M  ./usr/lib/python3.9/encodings/__pycache__\n> 2.8M  ./usr/lib/python3.9/idlelib\n> 1.7M  ./usr/lib/python3.9/idlelib/__pycache__\n> 4.2M  ./usr/lib/python3.9/lib-dynload\n> 1.1M  ./usr/lib/python3.9/lib-dynload/unicodedata.cpython-39-arm-linux-gnueabi.so\n> 9.1M  ./usr/lib/python3.9/__pycache__\n> 1.9M  ./usr/lib/python3.9/pydoc_data\n> 1.3M  ./usr/lib/python3.9/pydoc_data/__pycache__\n> 1.3M  ./usr/lib/python3.9/tkinter"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "The python and js can be removed with polkit, but the libglib, libgio, alone put us 2.6MiB, and they would be very difficult to remove. \n\nI don't know what effort it would take to remove libnss3, pk11ectest, rsaperf, libsqlite3, and maintain. We can look into this more, but it will be over 2.6MiB regardless. \n\nIt is very possible we have different drive sizes, and different pain tolerances for image size."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Obviously using an existing solution is preferable, but considering we don't know how to compile udisk2 to a reasonable enough size to fit on the BMC, it seems like we need to discount that option for the time being until there's a way to do this."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "you've already implied IPMI or other commands to invoke this D-bus API."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 118,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I added a note about how there may need to be a client daemon to make use of eStoraged. I removed the mention of IPMI from the example use case above, since it probably just added confusion. (At one point, I considered having an IPMI daemon that would make use of eStoraged.) But you don't necessarily need to use IPMI, to make use of this daemon. Let me know if you think something is missing from this section."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 123,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 123,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "c967347d72f543c821c137269f4ceebc7e4c3fe3",
            "parents": [
                "38c0f99a341106ebd0ddc7de0fd7d2183c5044b9"
            ],
            "ref": "refs/changes/73/46573/2",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1631140287,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/estoraged.md",
                    "line": 118,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Are we going to support separate keys for unlocking the firmware vs encryption? I suspect you don't want to tell the firmware the key you are using for encryption since part of the exercise is to avoid having to trust it. We could also use some kind of stable key derivation from the encryption key -> disk unlock key."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 118,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Yes, I intend for the 2 passwords to be different, and the client will need to provide both. As Matt Johnston suggested, I plan to return an error if they're the same."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 143,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 143,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "de3f393df72c59d53ea701b687b257e7b3e485b5",
            "parents": [
                "38c0f99a341106ebd0ddc7de0fd7d2183c5044b9"
            ],
            "ref": "refs/changes/73/46573/3",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1631665430,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "It seems kind of strange to me to have the client provide multiple passwords. Couldn't eStoraged just derive those from one password?\n\nAlso, what happens if we want to use this with a device that doesn't support device-level locking? Can we still use the encrypted storage functionality in that case?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I would like to see an interface for locking, that would be able to support NVME, SATA when they need to be supported. \n\nI could understand supporting different passwords, but not requiring they be different. \nI would like to hear Wedig's thoughts on this."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I like the idea of having the client only provide one password, and having eStoraged generate the 2 passwords. The 2 passwords should be different in case one of them gets leaked, e.g. we don't know how securely the eMMC actually manages its password.\n\nRegarding devices that don't support device-level locking, we can plan to support encryption-only locking in that case. Are you recommending that eStoraged not limit itself to just eMMC devices? It would enable device-level locking for a particular device if the device supports it (and we've implemented support for it in eStoraged)."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Yeah, I was kinda hoping you would 1-way hash the luks passphrase to the eMMC one since the eMMC one is the outer boundary. This would also make the locking detail less relevant to the callers of this interface."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": ">Are you recommending that eStoraged not limit itself to just eMMC devices?\n\nEven if it doesn't support anything besides eMMC devices, it would still be useful to have the D-Bus interface be generic enough to allow other daemons to implement it and support non-eMMC devices."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "yeah, I agree with Benjamin. We only implement the device level locking for emmc However, we use an interface that is generic enough for others to later support any device-level locking they want."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "It looks like this is still unaddressed?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Have you looked at the latest patchset (#5)? I mentioned there that the 2 passwords will be generated from the 1 password that the client provides. And I updated the doc to convey that we'll leave open the possibility of adding device locking for other types of devices in the future. Is there something else I'm missing?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "I guess what I'm trying to figure out is how the API looks for passing the pssswords. Is it up to the caller to derive the different passwords? It seems like the lock / unlock interface would still take a password. And whatever is passed to format would be the luks password. Presumably systemd-cryptsetup is reading a keyfile or similar and that is what unlocks the disk?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I'm thinking the password provided by the caller will be the LUKS password (as you suggested). And eStoraged will take that and do a 1-way hash to generate the device password.\n\nYes, the lock/unlock methods will still require a password from the caller. Even when locking the eMMC device using CMD42, you still need to provide the device password, so we would need the LUKS password from the caller in order to generate the device password again. And likewise, I'm expecting that the same LUKS password would also be required for the erase method.\n\nYes, systemd-cryptsetup typically uses a key file, but eStoraged won't use systemd-cryptsetup.\n\nLet me know if something is unclear."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "I'll just point out this will preclude multiple luks passwords.   Which also precludes changing to a new luks password."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 107,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Yes, we would only be able to use one LUKS password at a time, but I don't see anything preventing us from changing the LUKS password. When we change the LUKS password, eStoraged will also need to change the device password at the same time."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 150,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 150,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "456881d50f6a34644b0a0e8bb93c7a3a33167fac",
            "parents": [
                "38c0f99a341106ebd0ddc7de0fd7d2183c5044b9"
            ],
            "ref": "refs/changes/73/46573/4",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1632853558,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 152,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 152,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "53bae4b7fde9390e9e7d5acfad4d79fd4b6e62bc",
            "parents": [
                "38c0f99a341106ebd0ddc7de0fd7d2183c5044b9"
            ],
            "ref": "refs/changes/73/46573/5",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1633121752,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/estoraged.md",
                    "line": 90,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "startup"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 90,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is this really what you intend?  Doesn't that mean you're going to launch for each mtd partition if the mtdblock driver is loaded?  Also you'll launch if someone inserts a USB key...\n\nI thought you mentioned earlier this was only for eMMC?  Can we scope this to only those block devices?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 90,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I think we should add a udev rule that detects mmc device, and starts EstorageD daemon when the correct type of device is detected. Something like:\n\nSUBSYSTEM==\"block\",ENV{DEVPATH}==\"/block/mmcblk[0-9]\",ENV{DEVTYPE}==\"disk\",TAG+=\"systemd\",ENV{SYSTEMD_WANTS}=\"estoraged@$env{DEVNAME}\""
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 90,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "My initial plan was to keep this limited to eMMC, but I was under the impression that several reviewers (including you) wanted this to be more generic to support any type of storage device. So then I changed the doc to be more generic for block devices in general.\n\nI've updated this doc again to say that we only plan to use eStoraged with eMMC devices, but we'll keep the interfaces generic enough, so that we can extend it to other types of devices later, as desired. Does that sound reasonable?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 90,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Oops, fixed."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 90,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Fair enough. It was a mistake for me to define an emmc specific udev rule, when I have also advocated for other block devices. We might be generating a udev rule in meson so different systems can change their rules easily in recipes.\n\nBut lets cross that bridge when we have a repo and code that we can share."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What does this mean?"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 91,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I changed this to say that we'll use udev to launch eStoraged for each eMMC device."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there one daemon or a separate daemon instance per block device?  If there is one daemon you only need a single bus name."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 94,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I was under the impression it was separate daemons per block device.\nBut the doc could make that more clear."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 94,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I'm planning to have a separate daemon instance for each eMMC, hence the unique bus name for each one. It seems simpler to have a separate daemon for each one. For example, udev can launch a daemon for each eMMC it detects. But let me know if you think there should just be one daemon for all eMMC devices."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 95,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why the dot and not a slash?  (dots are actually invalid path characters)\n\nWe may want a 'storage' sub-directory at the root (after openbmc_project)?  Something to consider here is if the 'encrypted' part is all that interesting.  We might end up having multiple daemons eventually that manage block devices, including this one which takes care of additional encryption protections.  For example, you could have a 'stats' interface for the block device.  It might be handy, even though the interfaces are in separate daemons, for them to align on the same path.  Thus, `/xyz/openbmc_project/storage/<escaped block device name>` is everything about a local storage block device."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 95,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Oops, the dot was a typo.\n\nI changed the object path to match what you're suggesting (without the 'encrypted' part), and I made note in the doc that we might ultimately have several daemons using the same object path."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 125,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Are you going to access any of these interfaces via Redfish?  I think they don't like having to track status like this because internally they need to create a corresponding 'Task' instance and they like to have a dbus instance of some sort to correlate with the Task."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 125,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "That could be an issue for us. I will align with Ed.\n\nOur long term plans involve using the drive schema in redfish\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47657"
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 125,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We use the \"Status interface as a task\" pattern in other places (like firmware update), and right now we don't really have a better pattern for tracking that stuff, so while it is state, we have ok abstractions for it and no better alternative, so I'm ok with it."
                },
                {
                    "file": "designs/estoraged.md",
                    "line": 125,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": ">I'm ok with is.\n\nsounds good, I will mark as resolved. I am still willing to talk though this if there are questions."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 158,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 158,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "d00e04449a05dc3c376d7c1e6c0a18219fb55d60",
            "parents": [
                "38c0f99a341106ebd0ddc7de0fd7d2183c5044b9"
            ],
            "ref": "refs/changes/73/46573/6",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1634668902,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 168,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "0bc53ce7bdcc7968d10b17935e03a7792395c4b4",
            "parents": [
                "75345252a9b163061146d9d6739a0a62d71a3c4f"
            ],
            "ref": "refs/changes/73/46573/7",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1634936790,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/estoraged.md",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 168,
            "sizeDeletions": 0
        }
    ]
}