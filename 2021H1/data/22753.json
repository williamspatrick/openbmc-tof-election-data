{
    "project": "openbmc/phosphor-pid-control",
    "branch": "master",
    "id": "I6cc5e9d1908e2a697ffb7c875d1c1e58e10f1b14",
    "number": 22753,
    "subject": "Ignore sensor for error checking",
    "owner": {
        "name": "Will Liang",
        "email": "will.liang@quantatw.com",
        "username": "YHLiang85"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-pid-control/+/22753",
    "commitMessage": "Ignore sensor for error checking\n\nAdd the \"isIgnoreCheck\" property on the json file to define\nwhether this sensor needs to be checked.\nSince not all the fans/sensors need to do error check.\n\nIf do not add the property, the default value is false.\n\nNeed to check:\n\"isIgnoreCheck\": false\nDo not check :\n\"isIgnoreCheck\": true\n\nChange-Id: I6cc5e9d1908e2a697ffb7c875d1c1e58e10f1b14\nSigned-off-by: Will Liang <will.liang@quantatw.com>\n",
    "createdOn": 1560929343,
    "lastUpdated": 1614446696,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1560929343,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1560929365,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1560929379,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 1:\n\nBuild Started https://openpower.xyz/job/openbmc-repository-ci/31498/"
        },
        {
            "timestamp": 1560929656,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://openpower.xyz/job/openbmc-repository-ci/31498/ : SUCCESS"
        },
        {
            "timestamp": 1560966419,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\nI'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue."
        },
        {
            "timestamp": 1560966444,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n\ns/period/timeout"
        },
        {
            "timestamp": 1560967966,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n> \n> s/period/timeout\n\nYeah, if you set the default to 0 it never checks the timeout.  It does start all sensors in failsafe until they get their first value -- is that what you're trying to avoid?"
        },
        {
            "timestamp": 1561000203,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n> > \n> > s/period/timeout\n> \n> Yeah, if you set the default to 0 it never checks the timeout.  It does start all sensors in failsafe until they get their first value -- is that what you're trying to avoid?\n\nI know that the threshold or timeout will trigger the sensor to getFailed is true now.\nThe situation I want to avoid is not checking both conditions(threshold/timeout). \n\nFor some sensors, we have our own algorithm to check for errors. \nTherefore, we need to avoid some sensors performing error checking from the phosphor control package."
        },
        {
            "timestamp": 1561358418,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Patch Set 1:\n> > > > \n> > > > I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n> > > \n> > > s/period/timeout\n> > \n> > Yeah, if you set the default to 0 it never checks the timeout.  It does start all sensors in failsafe until they get their first value -- is that what you're trying to avoid?\n> \n> I know that the threshold or timeout will trigger the sensor to getFailed is true now.\n> The situation I want to avoid is not checking both conditions(threshold/timeout). \n> \n> For some sensors, we have our own algorithm to check for errors. \n> Therefore, we need to avoid some sensors performing error checking from the phosphor control package.\n\nHope this is OK with you. \nIf not, can you give me some thoughts and come up with any recommendations?"
        },
        {
            "timestamp": 1561392644,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Patch Set 1:\n> > > > \n> > > > > Patch Set 1:\n> > > > > \n> > > > > I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n> > > > \n> > > > s/period/timeout\n> > > \n> > > Yeah, if you set the default to 0 it never checks the timeout.  It does start all sensors in failsafe until they get their first value -- is that what you're trying to avoid?\n> > \n> > I know that the threshold or timeout will trigger the sensor to getFailed is true now.\n> > The situation I want to avoid is not checking both conditions(threshold/timeout). \n> > \n> > For some sensors, we have our own algorithm to check for errors. \n> > Therefore, we need to avoid some sensors performing error checking from the phosphor control package.\n> \n> Hope this is OK with you. \n> If not, can you give me some thoughts and come up with any recommendations?\n\nI guess I'm still confused with the issue.\n\nAre you 1. hitting the threshold error and do not wish to have thresholds? Can you not remove the thresholds?\n\nor are you 2. hitting the timeout, can you not set the timeout to 0?"
        },
        {
            "timestamp": 1561426787,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Patch Set 1:\n> > > > \n> > > > > Patch Set 1:\n> > > > > \n> > > > > > Patch Set 1:\n> > > > > > \n> > > > > > I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n> > > > > \n> > > > > s/period/timeout\n> > > > \n> > > > Yeah, if you set the default to 0 it never checks the timeout.  It does start all sensors in failsafe until they get their first value -- is that what you're trying to avoid?\n> > > \n> > > I know that the threshold or timeout will trigger the sensor to getFailed is true now.\n> > > The situation I want to avoid is not checking both conditions(threshold/timeout). \n> > > \n> > > For some sensors, we have our own algorithm to check for errors. \n> > > Therefore, we need to avoid some sensors performing error checking from the phosphor control package.\n> > \n> > Hope this is OK with you. \n> > If not, can you give me some thoughts and come up with any recommendations?\n> \n> I guess I'm still confused with the issue.\n> \n> Are you 1. hitting the threshold error and do not wish to have thresholds? Can you not remove the thresholds?\n> \n> or are you 2. hitting the timeout, can you not set the timeout to 0?\n\n\nThanks for your suggestion.\nI will abandon this patch."
        },
        {
            "timestamp": 1561427741,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Abandoned"
        },
        {
            "timestamp": 1561604080,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Restored"
        },
        {
            "timestamp": 1561604200,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Patch Set 1:\n> > > > \n> > > > > Patch Set 1:\n> > > > > \n> > > > > > Patch Set 1:\n> > > > > > \n> > > > > > > Patch Set 1:\n> > > > > > > \n> > > > > > > I'm kind of confused why this is needed? Right now getFailed only returns true if a threshold is tripped. Otherwise you can just set the scan period to 0 if thats issue.\n> > > > > > \n> > > > > > s/period/timeout\n> > > > > \n> > > > > Yeah, if you set the default to 0 it never checks the timeout.  It does start all sensors in failsafe until they get their first value -- is that what you're trying to avoid?\n> > > > \n> > > > I know that the threshold or timeout will trigger the sensor to getFailed is true now.\n> > > > The situation I want to avoid is not checking both conditions(threshold/timeout). \n> > > > \n> > > > For some sensors, we have our own algorithm to check for errors. \n> > > > Therefore, we need to avoid some sensors performing error checking from the phosphor control package.\n> > > \n> > > Hope this is OK with you. \n> > > If not, can you give me some thoughts and come up with any recommendations?\n> > \n> > I guess I'm still confused with the issue.\n> > \n> > Are you 1. hitting the threshold error and do not wish to have thresholds? Can you not remove the thresholds?\n> > \n> > or are you 2. hitting the timeout, can you not set the timeout to 0?\n> \n> \n> Thanks for your suggestion.\n> I will abandon this patch.\n\nSorry to reopen this issue again.\nWe may still need this feature after our internal discussions.\nOur architecture needs both fan1a and fan1b fail (dual rotor fan failure) and then this situation is identified as one fan fail.\n\nIf it can ignore fan failed detected from this package(phosphor-pid-control),\nthen we using our algorithm to check the dual rotor fan failed.\n\nI know that there is a FanReundancy function that has been merged.\nIt detects the number of fan failures which defined on YAML, and if this number is reached, the other fans are accelerating.\nBut this may not match our requirements."
        },
        {
            "timestamp": 1561738847,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n> Sorry to reopen this issue again.\n> We may still need this feature after our internal discussions.\n> Our architecture needs both fan1a and fan1b fail (dual rotor fan failure) and then this situation is identified as one fan fail.\n> \n\nI think this is a pretty common use case. Would it make more sense instead of ignoring, to add to the fan controller some functionality that says \"all inputs have to fail\" to count as a failure?"
        },
        {
            "timestamp": 1561984492,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Sorry to reopen this issue again.\n> > We may still need this feature after our internal discussions.\n> > Our architecture needs both fan1a and fan1b fail (dual rotor fan failure) and then this situation is identified as one fan fail.\n> > \n> \n> I think this is a pretty common use case. Would it make more sense instead of ignoring, to add to the fan controller some functionality that says \"all inputs have to fail\" to count as a failure?\n\nI would like to add \"groupId\" property to json file. \nEach fan has its own group ID and if fans which are in the same group id are all failed and then the other fans are accelerating.\nIf the group ID is not set in the json file, the default ID is 0, indicating that the fan is not in any group.\n\nAny comments will be much appreciated."
        },
        {
            "timestamp": 1561995877,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Sorry to reopen this issue again.\n> > > We may still need this feature after our internal discussions.\n> > > Our architecture needs both fan1a and fan1b fail (dual rotor fan failure) and then this situation is identified as one fan fail.\n> > > \n> > \n> > I think this is a pretty common use case. Would it make more sense instead of ignoring, to add to the fan controller some functionality that says \"all inputs have to fail\" to count as a failure?\n> \n> I would like to add \"groupId\" property to json file. \n> Each fan has its own group ID and if fans which are in the same group id are all failed and then the other fans are accelerating.\n> If the group ID is not set in the json file, the default ID is 0, indicating that the fan is not in any group.\n> \n> Any comments will be much appreciated.\n\nHow is this different then it being in the same fan controller? Would you have fan tach 1a be controlled with a different PID then fan tach 1b?"
        },
        {
            "timestamp": 1562030369,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Sorry to reopen this issue again.\n> > > > We may still need this feature after our internal discussions.\n> > > > Our architecture needs both fan1a and fan1b fail (dual rotor fan failure) and then this situation is identified as one fan fail.\n> > > > \n> > > \n> > > I think this is a pretty common use case. Would it make more sense instead of ignoring, to add to the fan controller some functionality that says \"all inputs have to fail\" to count as a failure?\n> > \n> > I would like to add \"groupId\" property to json file. \n> > Each fan has its own group ID and if fans which are in the same group id are all failed and then the other fans are accelerating.\n> > If the group ID is not set in the json file, the default ID is 0, indicating that the fan is not in any group.\n> > \n> > Any comments will be much appreciated.\n> \n> How is this different then it being in the same fan controller? Would you have fan tach 1a be controlled with a different PID then fan tach 1b?\n\nIn our system, the dual-rotor fan has two fan tach with the same PWM(two tachometer output, one PWM input). \nIf one fan tach reading is failed, another fan still can work normally.\nTherefore, it is need to be grouped to check if both fan tach reading are failed."
        },
        {
            "timestamp": 1562083075,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Patch Set 1:\n> > > > \n> > > > > Sorry to reopen this issue again.\n> > > > > We may still need this feature after our internal discussions.\n> > > > > Our architecture needs both fan1a and fan1b fail (dual rotor fan failure) and then this situation is identified as one fan fail.\n> > > > > \n> > > > \n> > > > I think this is a pretty common use case. Would it make more sense instead of ignoring, to add to the fan controller some functionality that says \"all inputs have to fail\" to count as a failure?\n> > > \n> > > I would like to add \"groupId\" property to json file. \n> > > Each fan has its own group ID and if fans which are in the same group id are all failed and then the other fans are accelerating.\n> > > If the group ID is not set in the json file, the default ID is 0, indicating that the fan is not in any group.\n> > > \n> > > Any comments will be much appreciated.\n> > \n> > How is this different then it being in the same fan controller? Would you have fan tach 1a be controlled with a different PID then fan tach 1b?\n> \n> In our system, the dual-rotor fan has two fan tach with the same PWM(two tachometer output, one PWM input). \n> If one fan tach reading is failed, another fan still can work normally.\n> Therefore, it is need to be grouped to check if both fan tach reading are failed.\n\nSo, I have the same situation in that I have two fan outputs with one pwm.  But, I ignore all fan failures by default, and detect a fan failure case elsewhere in the software stack.\n\nYour goal is to go into failsafe if both fans are failing?  How would you secure the fans together in this way?\n\nYou can, have a fan PID loop that has both fans as input/output, and then in that configuration ignore fan errors.  Then the system only goes into failsafe if the thermal inputs start to fail.\n\nYou could provide a custom fan sensor that is actually a pair of fans, and so the read() would return the average or max/min value, and then read wouldn't report failure unless both fans failed."
        },
        {
            "timestamp": 1562090631,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n> Your goal is to go into failsafe if both fans are failing?  How would you secure the fans together in this way?\n\nWe have a similar config here that can show both fans together: https://github.com/openbmc/entity-manager/blob/master/configurations/R1000%20Chassis.json#L345 \n\nMy thought was you could just add a bit to the fancontroller that requires all inputs in the controller to be failed."
        },
        {
            "timestamp": 1562132137,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> So, I have the same situation in that I have two fan outputs with one pwm.  But, I ignore all fan failures by default, and detect a fan failure case elsewhere in the software stack.\n\nI would like to know how to ignore all fan failures by default. This may be what I want.\n> \n> Your goal is to go into failsafe if both fans are failing?  How would you secure the fans together in this way?\n\nYes.\n> \n> You can, have a fan PID loop that has both fans as input/output, and then in that configuration ignore fan errors.  Then the system only goes into failsafe if the thermal inputs start to fail.\n\nSorry, I can not understand what you mean. Would you please tell me how to do it?"
        },
        {
            "timestamp": 1562163314,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > So, I have the same situation in that I have two fan outputs with one pwm.  But, I ignore all fan failures by default, and detect a fan failure case elsewhere in the software stack.\n> \n> I would like to know how to ignore all fan failures by default. This may be what I want.\n\nIf you set the timeout value explicitly to 0 in your configuration, then they can't timeout and that means they can't fail from timeout -- the only way they're checked for failure by the system.\n\n> > \n> > Your goal is to go into failsafe if both fans are failing?  How would you secure the fans together in this way?\n> \n> Yes.\n> > \n> > You can, have a fan PID loop that has both fans as input/output, and then in that configuration ignore fan errors.  Then the system only goes into failsafe if the thermal inputs start to fail.\n> \n> Sorry, I can not understand what you mean. Would you please tell me how to do it?"
        },
        {
            "timestamp": 1562825293,
            "reviewer": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "message": "Abandoned"
        },
        {
            "timestamp": 1614446696,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Removed reviewer Patrick Venture."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "41d01d802a3ee9e51d374632e683619b2c13b943",
            "parents": [
                "1dad21b935b8359806de9a9cc3aa7b7463cc8df3"
            ],
            "ref": "refs/changes/53/22753/1",
            "uploader": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "createdOn": 1560929343,
            "author": {
                "name": "Will Liang",
                "email": "will.liang@quantatw.com",
                "username": "YHLiang85"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "conf.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "experiments/drive.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "pid/zone.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "sensors/builder.cpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -5
                },
                {
                    "file": "sensors/buildjson.cpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "sensors/host.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                },
                {
                    "file": "sensors/host.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "sensors/pluggable.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "sensors/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -2
                },
                {
                    "file": "test/pid_fancontroller_unittest.cpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -5
                },
                {
                    "file": "test/pid_zone_unittest.cpp",
                    "type": "MODIFIED",
                    "insertions": 134,
                    "deletions": -11
                },
                {
                    "file": "test/sensor_host_unittest.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -4
                },
                {
                    "file": "test/sensor_manager_unittest.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "test/sensor_mock.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "test/sensor_pluggable_unittest.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 202,
            "sizeDeletions": 44
        }
    ]
}