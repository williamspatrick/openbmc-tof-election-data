{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "I6b089412edb31f1124a9e2364008cf170b17beff",
    "number": 49467,
    "subject": "Used erased type to reduce binary for getProperty",
    "owner": {
        "name": "Krzysztof Grobelny",
        "email": "krzysztof.grobelny@intel.com",
        "username": "krzysztof-i"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/49467",
    "commitMessage": "Used erased type to reduce binary for getProperty\n\nIntroduced erased type patern to reduce amount of templates which\nreduces binary size for bmcweb.\n\nTested:\n- Examples which use getProperty helper function are working as before.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44019\n\nSigned-off-by: Krzysztof Grobelny <krzysztof.grobelny@intel.com>\nChange-Id: I6b089412edb31f1124a9e2364008cf170b17beff\n",
    "createdOn": 1638962441,
    "lastUpdated": 1639625041,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1638962441,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1638962454,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638963124,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31546/ : SUCCESS"
        },
        {
            "timestamp": 1638964826,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1638965422,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1638965438,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638966103,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31549/ : SUCCESS"
        },
        {
            "timestamp": 1638981903,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1638985295,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1639036846,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1639036894,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1639057395,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1639057408,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1639057634,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1639058065,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31670/ : SUCCESS"
        },
        {
            "timestamp": 1639061556,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1639121656,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1639121667,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1639121736,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1639122330,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31738/ : SUCCESS"
        },
        {
            "timestamp": 1639130257,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1639139362,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1639162582,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1639162630,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1639182117,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1639245649,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1639381545,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1639382537,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1639382552,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1639382711,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1639383218,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/31829/ : SUCCESS"
        },
        {
            "timestamp": 1639407381,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1639414008,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1639414019,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1639607058,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1639613576,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1639622804,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1639624484,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1639625037,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5: Code-Review+2\n\n(1 comment)\n\nGoing to merge this.  We can revisit if someone finds a better way to avoid the extra template parameter specification at the call-site."
        },
        {
            "timestamp": 1639625041,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully rebased and submitted as 55949c29adbf88b05acc62ef972de7b5c6a21a4a by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "bce2ae698403a55cb3baf4fab25a735d5cdf9dde",
            "parents": [
                "6d83cf539ac0613e5639ec484c4865317795cd75"
            ],
            "ref": "refs/changes/67/49467/1",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1638962441,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "It looks like if std::variant<std::monostate, T> is used instead it produces same result and same binary size (tested on bmcweb).\n\nTo make code more simple I will remove CommonVariant in next patchset."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 72,
                    "deletions": -19
                },
                {
                    "file": "include/sdbusplus/utility/common_variant.hpp",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/utility/holds_type.hpp",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 142,
            "sizeDeletions": 19
        },
        {
            "number": 2,
            "revision": "d0b432b4973201929a72d6b74a8b73e5d6c31018",
            "parents": [
                "6d83cf539ac0613e5639ec484c4865317795cd75"
            ],
            "ref": "refs/changes/67/49467/2",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1638965422,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It is a little unfortunate that we need to allocate memory for this rather than being able to defer it until async_method_calls puts it in the final location (as a whole blob).  There is probably some complicated templates you could do to differentiate between Handlers which are L-value references (and thus need a lifetime longer than the async_method_call anyhow) vs R-value references (which require us to extend the lifetime with a move/copy).\n\nAlternatively you could attempt to do small-value-optimization (SVO) like std::string does so that small Handler objects are held in a byte-array with an in-place construction and large Handler objects revert to a unique_ptr.\n\nI'm not sure either of these are incredibly worthwhile, but if done correctly they would both eliminate the extra memory allocation and likely be even smaller (due to removing the `new` call intrinsic in the unique_ptr)."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> It is a little unfortunate that we need to allocate memory for this rather than being able to defer it until async_method_calls puts it in the final location (as a whole blob).  There is probably some complicated templates you could do to differentiate between Handlers which are L-value references (and thus need a lifetime longer than the async_method_call anyhow) vs R-value references (which require us to extend the lifetime with a move/copy).\n\nThe handlers have to have memory allocated anyway, because the stack is going to be destroyed before the callback gets called.  The issue here is that we're allocating for something that might have already been allocated.\n\n> \n> Alternatively you could attempt to do small-value-optimization (SVO) like std::string does so that small Handler objects are held in a byte-array with an in-place construction and large Handler objects revert to a unique_ptr.\n> \n> I'm not sure either of these are incredibly worthwhile, but if done correctly they would both eliminate the extra memory allocation and likely be even smaller (due to removing the `new` call intrinsic in the unique_ptr).\n\nSee below, I think std::function gets us all our optimizations.  If the user uses std::function, no new allocations are made.  If the user uses a stack variable (like a lambda) then std::function will allocate for us."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "using std::function as parameter won't prevent from allocating new TypeErasedCallback/std::function. There is common code that needs to be appended before actual callback is called (Lines 46-60).\n\nWe need to create another std::function which executes this common code and then executes std::function passed as parameter. So theoretically it should produce worse results, but I will check it and post values."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Isn't TypeErasedCallback basically re-inventing std::function?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Yes it is. I also measured size when std::function is used. Result was that both std::function and TypeErasedCallback decreased binary size, but TypeErasedCallback had better results."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering Handler always has the same return types, could we just remove the template alltogether, and change Handler to std::function<void(T)>"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "It should produce bigger binary, but I will double check it and post values."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Original bmcweb wihtout changes size: 2858380\n\nBmcweb with https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44019 and sdbusplus change patchset 3 size: 2837916\n\nBmcweb with https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44019 and sdbusplus change patchset 2 size: 2833812\n\nDifference is not that big, but still if TypeErasedCallback is used instead of std::function we get better results."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't think 0.1% size savings is worth the readability/simplicity decrease.  Let's go with #3 style.\n\nOne nice thing about std::function, beyond the readability, is that any static analyzers that already understand it will give us information on it, while they won't understand a custom type-erasure type."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I don't think 0.1% size savings is worth the readability/simplicity decrease.  Let's go with #3 style.\n\nAgreed.  Also, in the future when/if bmcweb moves to one common variant type, (which I've been looking into) we _should_ get these bytes back, along with a lot of others in the async_method_call.\n\nFWIW, in the history, this std::function pattern was what boost-dbus (that these handlers were derived from) did originally (technically boost::function, same thing), but we moved them to template handlers because at the time we didn't have c++14, and some lambdas couldn't implicitly turn into std::function, and it's not clear that James or I knew what we were doing when we did that.  These days, I think std::function is better.\n\nIdeally we should also make a similar change to async_method_call, but that's going to be trickier."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Ideally you would use something like fu2::unique_function that supports move only types, but std::function is good enough for now I guess."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not sure imposing a fu2 dependency on all sdbusplus apps is a good idea just for this case, although it looks like we might get something in c++23?  http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0288r9.html"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just FYI, the \"real\" problem here is that async_method_call has quite a bit of code that is shared between all the handlers, yet is in a template so it gets duplicated.  This is actually a way worse issue in bmcweb, and something that's been on my list to look at.  last time I looked at bloaty, async_method_call takes up ~15% of the binary size of bmcweb. (150ish KB last time I measured)."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 95,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "If this works out probably same approach could be used in async_method_call. I didn't analyze async_method_call if it's possible, there are variadic number of parameters and callback with variadic number of parameters."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep, agreed.  async_method_call could benefit from this.  async_send is supposed to do the type erasing (because we didn't have c++14 at the time) but clearly its been broken."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 71,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 71,
            "sizeDeletions": 19
        },
        {
            "number": 3,
            "revision": "c30fe0df9c785bfa49de110f3f0b0c41eabd0f02",
            "parents": [
                "6d83cf539ac0613e5639ec484c4865317795cd75"
            ],
            "ref": "refs/changes/67/49467/3",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1639057395,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This looks like a slight API change.  Are we sure that all the code using getProperty will compile with it?  Maybe there aren't too many users already.\n\nIt seems like the net change here is to change Handler from a template argument to a std::function.  It just means that all existing Handlers need to be convertible to the std::function format.  Hopefully they already are.\n\nCan't we now get rid of all changes except for the prototype and maybe something on the original line 26 (std::forward -> std::move)?  I'm just saying we can reduce the amount of change by not having the details function anymore."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "I changed signature from const T& to T and std::move. It should cover all cases and allow std::move if needed. In sdbusplus/Examples we have few use cases where it works. Telemetry service is using this helper function in unitTests and POC change in bmcweb also confirms that different signatures are correctly handled."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": -26
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 26
        },
        {
            "number": 4,
            "revision": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
            "parents": [
                "6d83cf539ac0613e5639ec484c4865317795cd75"
            ],
            "ref": "refs/changes/67/49467/4",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1639121656,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Complete nitpick, and might not change anything, but I wonder if this is the reason the binaries are bigger than patchset one.  This template is going to duplicate the function for both const and non-const parameters.  I wonder if we put a std::decay_t<T> here if we'd get closer to the same binary size as the type erased version?\n\nJust a guess, doesn't need to be done, I still think this patchset is good enough as-is."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "It's not likely because all use cases are like this:\ngetProperty<std::string>, getProperty<bool>.\n\nBefore this change T was explicitly provided by user, all tested use cases follow this pattern result should be the same. To void duplicated templates I would simply add static assert:\n\nstatic_assert(std::is_same_v<T, std::decay_t<T>>);\n\nIt's backward compatible and we will avoid creating additional templates by accident."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "I added static assert to ensure there wont be any duplicates. Everything compiles, T was always explicitly passed (previous signature didn't allow it to be deduced)."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, good point.  That makes sense."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "It still cannot be deduced, right? At least, it couldn't in my tests. I would like to avoid specifying the <T> if it were simple to fix."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "AH, that's a good point too if we can no longer deduce it."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm surprised type-deduction doesn't work here.  Was this with C++20?\n\nOne thing we could try would be to change the template parameters to be:\n\n    template <typename T, typename Handler = std::function<void(boost::system::error_code, T)>\n\nThis might help with the deduction if it doesn't work as-is."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "That default template parameter doesn't help.  It just gets us back into the boat we use to be in where we end up with many different handler types.\n\n\nLooking at the example/register-property.cpp we seem to have always needed the <T> though.  If I do a simple remove of it we get type-deduction failures even with the old code."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 9,
            "sizeDeletions": 9
        },
        {
            "number": 5,
            "revision": "68f7db95da145322f519b8712de3c897a8a5aceb",
            "parents": [
                "6d83cf539ac0613e5639ec484c4865317795cd75"
            ],
            "ref": "refs/changes/67/49467/5",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1639382537,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "So we cannot pass an existing std::function by lvalue reference. Probably an inconsequential restriction."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As a general rule, we can't do that anyway, because the lvalue reference is on stack, and the stack is going to be destroyed as part of the async callback, so the two ways to capture std::function are by value or by rvalue move, so we can take ownership of the callback."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "That's not necessarily true. Someone may have e.g. a (static) container of std::function callbacks and they want to pass one into here. In the previous code an lvalue reference would have been happily copied into the async_method_call lambda. Again, probably inconsequential."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "nit: any reason we don't start using std::error_code? Mixing the two will result in some extra copies, but otherwise they seem seamlessly convertible."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We didn't use it originally because boost asio uses boost::system::error_code, so ideally we make all of our async asio calls consistent.  With that said, I think there's a way to convert one to the other, so in theory we could move all of sdbusplus asio over to std::error_code, but I think that's probably more work than it's worth.\n\nstd::error_code is also annoying because it doesn't support implicit cast to boolean, so instead of writing \nif (ec){\n   // error is set\n}\n\nyou have to write\n\nif (ec != std::errc()){\n   /// error is set\n}\n\nWhich is a little more subtle IMO, but it's all just preference."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "I only took a cursory look into sdbusplus::asio but it looks like we are the ones choosing to use boost::system::error_code, rather than being imposed by boost::asio. So maybe the whole stack could be changed.\n\nUnless I'm misunderstanding, std::error_code does have an `operator bool` (to make that code example work) and boost::system::error_code has the requisite constructor and `operator std::error_code` to make them seamlessly interchangeable. I tested this patch by calling getProperty with a handler that takes a std::error_code and it seems to work fine. It's slightly inefficient to mix them like this, but otherwise seems fine."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 11,
            "sizeDeletions": 9
        },
        {
            "number": 6,
            "revision": "55949c29adbf88b05acc62ef972de7b5c6a21a4a",
            "parents": [
                "ce62764d6c0a72ec88eb433e1afd05b751225971"
            ],
            "ref": "refs/changes/67/49467/6",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1639625041,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 11,
            "sizeDeletions": 9
        }
    ]
}