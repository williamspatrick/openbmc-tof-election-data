{
    "project": "openbmc/phosphor-led-sysfs",
    "branch": "master",
    "id": "I75e65e4bd5853d9de719984f8ba86740c074fa8e",
    "number": 38993,
    "subject": "Disable emitting propertiesChanged signal",
    "owner": {
        "name": "George Liu",
        "email": "liuxiwei@inspur.com",
        "username": "lxwinspur"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-led-sysfs/+/38993",
    "commitMessage": "Disable emitting propertiesChanged signal\n\nSince LampTest is a diagnostic tool, we should not report the\nPropertyChanged signal, which would be confused for a real failure.\nSo the solution is to use the \"skipSignal\" feature that is in the\ninterface implementation.\n\nSigned-off-by: George Liu <liuxiwei@inspur.com>\nChange-Id: I75e65e4bd5853d9de719984f8ba86740c074fa8e\n",
    "createdOn": 1607763368,
    "lastUpdated": 1614074672,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1607763368,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1607763383,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1607763441,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9661/ : FAILURE"
        },
        {
            "timestamp": 1607763696,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1607763708,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1607763767,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9663/ : FAILURE"
        },
        {
            "timestamp": 1607907478,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 3: New patch set was added with same tree, parent, and commit message as Patch Set 2."
        },
        {
            "timestamp": 1607907487,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1607907490,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1607907565,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9670/ : FAILURE"
        },
        {
            "timestamp": 1607908202,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1607908214,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1607908281,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/9671/ : SUCCESS"
        },
        {
            "timestamp": 1607944983,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 4: Code-Review-1\n\n(1 comment)\n\nAlso please use ifdef LAMP_TEST"
        },
        {
            "timestamp": 1608019526,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4: Code-Review-1\n> \n> (1 comment)\n> \n> Also please use ifdef LAMP_TEST\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-led-sysfs/+/38081"
        },
        {
            "timestamp": 1608024400,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1608024415,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608024467,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1608024493,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9792/ : FAILURE"
        },
        {
            "timestamp": 1608024514,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1608024525,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608024574,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1608024585,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608024589,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9793/ : ABORTED"
        },
        {
            "timestamp": 1608024631,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9794/ : FAILURE"
        },
        {
            "timestamp": 1608024730,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1608024740,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608024786,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9795/ : FAILURE"
        },
        {
            "timestamp": 1608024874,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1608024885,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608024961,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/9796/ : FAILURE"
        },
        {
            "timestamp": 1608025099,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1608025111,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608025217,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/9797/ : SUCCESS"
        },
        {
            "timestamp": 1608040776,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 10:\n\n(6 comments)"
        },
        {
            "timestamp": 1608081519,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1608081533,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608081584,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 11:\n\n(5 comments)"
        },
        {
            "timestamp": 1608081658,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/9874/ : SUCCESS"
        },
        {
            "timestamp": 1608081695,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1608081708,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608081834,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/9875/ : SUCCESS"
        },
        {
            "timestamp": 1610373909,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1610439447,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1610439458,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610439463,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1610439516,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10795/ : SUCCESS"
        },
        {
            "timestamp": 1610449008,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1610524025,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 14."
        },
        {
            "timestamp": 1610524038,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610524079,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10882/ : FAILURE"
        },
        {
            "timestamp": 1610524365,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Uploaded patch set 15."
        },
        {
            "timestamp": 1610524378,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610524394,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        },
        {
            "timestamp": 1610524431,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10886/ : SUCCESS"
        },
        {
            "timestamp": 1610525144,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n(1 comment)"
        },
        {
            "timestamp": 1610525233,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n(1 comment)"
        },
        {
            "timestamp": 1610540537,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n(1 comment)"
        },
        {
            "timestamp": 1610708129,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 15: Code-Review-1\n\nWhy are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n\nIs there some discussion about this that I can read? Some documentation?"
        },
        {
            "timestamp": 1610709465,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15: Code-Review-1\n> \n> Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> \n> Is there some discussion about this that I can read? Some documentation?\n\nSorry, where do you see this doing things about error being present ?."
        },
        {
            "timestamp": 1610709630,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15: Code-Review-1\n> > \n> > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > \n> > Is there some discussion about this that I can read? Some documentation?\n> \n> Sorry, where do you see this doing things about error being present ?.\n\nFrom the commit message:\n\n> Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure."
        },
        {
            "timestamp": 1610953034,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15: Code-Review-1\n> > > \n> > > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > > \n> > > Is there some discussion about this that I can read? Some documentation?\n> > \n> > Sorry, where do you see this doing things about error being present ?.\n> \n> From the commit message:\n> \n> > Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure.\n\nOkay let me explain a bit. Any of the components in OpenBMC can subscribe to \"PropertyChanged\" signal. If the LEDs are turned [ON] by a valid problem, then yes, they need to get to know about that. \n\nHowever, Lamp-Test is a mechanism to test the LED functionality. In that case, we should not make components think that there is an issue because the LED is [ON]. Lamp test is a IBM requirement to test the functionality of LEDs."
        },
        {
            "timestamp": 1610953252,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15:\n> > > \n> > > > Patch Set 15: Code-Review-1\n> > > > \n> > > > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > > > \n> > > > Is there some discussion about this that I can read? Some documentation?\n> > > \n> > > Sorry, where do you see this doing things about error being present ?.\n> > \n> > From the commit message:\n> > \n> > > Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure.\n> \n> Okay let me explain a bit. Any of the components in OpenBMC can subscribe to \"PropertyChanged\" signal. If the LEDs are turned [ON] by a valid problem, then yes, they need to get to know about that. \n> \n> However, Lamp-Test is a mechanism to test the LED functionality. In that case, we should not make components think that there is an issue because the LED is [ON]. Lamp test is a IBM requirement to test the functionality of LEDs.\n\nthe \"SkipSignal\" feature that is in \"sdbusplus\" is what suits best for this."
        },
        {
            "timestamp": 1611011070,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15:\n> > > \n> > > > Patch Set 15: Code-Review-1\n> > > > \n> > > > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > > > \n> > > > Is there some discussion about this that I can read? Some documentation?\n> > > \n> > > Sorry, where do you see this doing things about error being present ?.\n> > \n> > From the commit message:\n> > \n> > > Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure.\n> \n> Okay let me explain a bit. Any of the components in OpenBMC can subscribe to \"PropertyChanged\" signal. If the LEDs are turned [ON] by a valid problem, then yes, they need to get to know about that. \n\nBut this is my point - no software of worth should be listening for the LED turning on to detect a problem. The only thing that LED state should be an input to is a human.\n\nDo we have software that uses the LED state as an input?\n\n> \n> However, Lamp-Test is a mechanism to test the LED functionality. In that case, we should not make components think that there is an issue because the LED is [ON]. Lamp test is a IBM requirement to test the functionality of LEDs.\n\nI understand this. That requirement perfectly sensible. What would _not_ be sensible is designing a system where the LED state is an input to other error reporting processes."
        },
        {
            "timestamp": 1611032115,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15:\n> > > \n> > > > Patch Set 15:\n> > > > \n> > > > > Patch Set 15: Code-Review-1\n> > > > > \n> > > > > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > > > > \n> > > > > Is there some discussion about this that I can read? Some documentation?\n> > > > \n> > > > Sorry, where do you see this doing things about error being present ?.\n> > > \n> > > From the commit message:\n> > > \n> > > > Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure.\n> > \n> > Okay let me explain a bit. Any of the components in OpenBMC can subscribe to \"PropertyChanged\" signal. If the LEDs are turned [ON] by a valid problem, then yes, they need to get to know about that. \n> \n> But this is my point - no software of worth should be listening for the LED turning on to detect a problem. The only thing that LED state should be an input to is a human.\n> \n> Do we have software that uses the LED state as an input?\n> \n> > \n> > However, Lamp-Test is a mechanism to test the LED functionality. In that case, we should not make components think that there is an issue because the LED is [ON]. Lamp test is a IBM requirement to test the functionality of LEDs.\n> \n> I understand this. That requirement perfectly sensible. What would _not_ be sensible is designing a system where the LED state is an input to other error reporting processes.\n\n>> > Do we have software that uses the LED state as an input?\nYes.. We need to report the state of LED to PHYP and above. If we report an LED being [ON] due to lamp-test, it results in OS saying \"look there is an LED ON\"."
        },
        {
            "timestamp": 1611072451,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 15: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1611096062,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15:\n> > > \n> > > > Patch Set 15:\n> > > > \n> > > > > Patch Set 15:\n> > > > > \n> > > > > > Patch Set 15: Code-Review-1\n> > > > > > \n> > > > > > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > > > > > \n> > > > > > Is there some discussion about this that I can read? Some documentation?\n> > > > > \n> > > > > Sorry, where do you see this doing things about error being present ?.\n> > > > \n> > > > From the commit message:\n> > > > \n> > > > > Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure.\n> > > \n> > > Okay let me explain a bit. Any of the components in OpenBMC can subscribe to \"PropertyChanged\" signal. If the LEDs are turned [ON] by a valid problem, then yes, they need to get to know about that. \n> > \n> > But this is my point - no software of worth should be listening for the LED turning on to detect a problem. The only thing that LED state should be an input to is a human.\n> > \n> > Do we have software that uses the LED state as an input?\n> > \n> > > \n> > > However, Lamp-Test is a mechanism to test the LED functionality. In that case, we should not make components think that there is an issue because the LED is [ON]. Lamp test is a IBM requirement to test the functionality of LEDs.\n> > \n> > I understand this. That requirement perfectly sensible. What would _not_ be sensible is designing a system where the LED state is an input to other error reporting processes.\n> \n> >> > Do we have software that uses the LED state as an input?\n> Yes.. We need to report the state of LED to PHYP and above. If we report an LED being [ON] due to lamp-test, it results in OS saying \"look there is an LED ON\".\n\nSounds like where this is going wrong is you're relying on the physical LED state, rather than the error state that the LED represents. The application that determines that a LED should be turned on (i.e. the application that concludes we are in an error state) is what should be reporting to the host firmware. We shouldn't be masking reality in the manner implemented in this patch."
        },
        {
            "timestamp": 1611125824,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15:\n> > > \n> > > > Patch Set 15:\n> > > > \n> > > > > Patch Set 15:\n> > > > > \n> > > > > > Patch Set 15:\n> > > > > > \n> > > > > > > Patch Set 15: Code-Review-1\n> > > > > > > \n> > > > > > > Why are things listening for the lamp turning on to determine whether an error is present? This seems like a completely backwards way of detecting failures. Lighting a lamp shouldn't be an input to anything.\n> > > > > > > \n> > > > > > > Is there some discussion about this that I can read? Some documentation?\n> > > > > > \n> > > > > > Sorry, where do you see this doing things about error being present ?.\n> > > > > \n> > > > > From the commit message:\n> > > > > \n> > > > > > Since LampTest is a diagnostic tool, we should not report the PropertyChanged signal, which would be confused for a real failure.\n> > > > \n> > > > Okay let me explain a bit. Any of the components in OpenBMC can subscribe to \"PropertyChanged\" signal. If the LEDs are turned [ON] by a valid problem, then yes, they need to get to know about that. \n> > > \n> > > But this is my point - no software of worth should be listening for the LED turning on to detect a problem. The only thing that LED state should be an input to is a human.\n> > > \n> > > Do we have software that uses the LED state as an input?\n> > > \n> > > > \n> > > > However, Lamp-Test is a mechanism to test the LED functionality. In that case, we should not make components think that there is an issue because the LED is [ON]. Lamp test is a IBM requirement to test the functionality of LEDs.\n> > > \n> > > I understand this. That requirement perfectly sensible. What would _not_ be sensible is designing a system where the LED state is an input to other error reporting processes.\n> > \n> > >> > Do we have software that uses the LED state as an input?\n> > Yes.. We need to report the state of LED to PHYP and above. If we report an LED being [ON] due to lamp-test, it results in OS saying \"look there is an LED ON\".\n> \n> Sounds like where this is going wrong is you're relying on the physical LED state, rather than the error state that the LED represents. The application that determines that a LED should be turned on (i.e. the application that concludes we are in an error state) is what should be reporting to the host firmware. We shouldn't be masking reality in the manner implemented in this patch.\n\nNot really.. 3 things.. \n\n1: Error itself\n2: Lamp test\n3: State of LED\n\nBMC has to send the state of LED to PHYP and they present the state of all LEDs to OS. So, it is a requirement that we have on POWER systems. As I mentioned, Lamp_test is a diagnostic tool. When this happens, we should not tell OS that a particular fault LED is on ( which was otherwise OFF ) since it would mean a different thing at OS level."
        },
        {
            "timestamp": 1611149403,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 15:\n\n> Not really.. 3 things.. \n> \n> 1: Error itself\n> 2: Lamp test\n> 3: State of LED\n> \n> BMC has to send the state of LED to PHYP and they present the state of all LEDs to OS. So, it is a requirement that we have on POWER systems. As I mentioned, Lamp_test is a diagnostic tool. When this happens, we should not tell OS that a particular fault LED is on ( which was otherwise OFF ) since it would mean a different thing at OS level.\n\nThis is hacky and unacceptable; please stop trying to justify it.  You are creating a hidden and undocumented dependency between two specific applications that violates dbus flags being put on this property and just creates something that another consumer likely needs to workaround.  Some other application without this \"lie to the OS requirement\" is no longer going to be able to rely on properties on LEDs to behave in a sane way and they are going to have to do something else.  (For example, what if webui wants to accurately show the state of the physical LEDs for someone who is sight-impaired?)\n\nIf your requirement is \"I need to send the state of the physical LED to the OS\", you wouldn't need this code change.\nIf your requirement is \"I need to send the state of the fru fault indicator to the OS\", you already have what you need to implement that.  Use the virtual LED group for fru_fault.\nIf your requirement is \"I need to send the state of the physical LED to the OS, except if lamptest mode is on I need to send the state of what the LED would be if we weren't in lamptest mode\", you already have what you need to implement that.  Create a new virtual LED for \"everything except lamptest\" which has no physical LED behind it and use that for the OS indicator."
        },
        {
            "timestamp": 1611238677,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Not really.. 3 things.. \n> > \n> > 1: Error itself\n> > 2: Lamp test\n> > 3: State of LED\n> > \n> > BMC has to send the state of LED to PHYP and they present the state of all LEDs to OS. So, it is a requirement that we have on POWER systems. As I mentioned, Lamp_test is a diagnostic tool. When this happens, we should not tell OS that a particular fault LED is on ( which was otherwise OFF ) since it would mean a different thing at OS level.\n> \n> This is hacky and unacceptable; please stop trying to justify it.  You are creating a hidden and undocumented dependency between two specific applications that violates dbus flags being put on this property and just creates something that another consumer likely needs to workaround.  Some other application without this \"lie to the OS requirement\" is no longer going to be able to rely on properties on LEDs to behave in a sane way and they are going to have to do something else.  (For example, what if webui wants to accurately show the state of the physical LEDs for someone who is sight-impaired?)\n\nThanks for the feedback.. But, I would not agree this is hacky. Circling back, what was the reason behind providing a \"skipSignal\" facility in sdbusplus ?. I remember some OpenBMC code is making use of that.\n\nAlso, the code here is within #ifdef and hence won't get in the way of anyone else.\n\n> \n> If your requirement is \"I need to send the state of the physical LED to the OS\", you wouldn't need this code change.\n> If your requirement is \"I need to send the state of the fru fault indicator to the OS\", you already have what you need to implement that.  Use the virtual LED group for fru_fault.\n> If your requirement is \"I need to send the state of the physical LED to the OS, except if lamptest mode is on I need to send the state of what the LED would be if we weren't in lamptest mode\", you already have what you need to implement that.  Create a new virtual LED for \"everything except lamptest\" which has no physical LED behind it and use that for the OS indicator.\n\nThe requirement is that :\n- PHYP needs to know state of all LEDs so that it can be reported to OS layer.\n- If a particular LED gets turned [ON/OFF] only because of Lamp_Test, then we should not advertise that to PHYP.\n\nThe specific change that is in here, will only cover the Enclosure level fault and Identify LEDs. For rest everything, we are keying off of virtual LED groups in our PLDM - LED design.\n\nThe problem with handling Enclosure level LEDs at virtual LED layer is this :\n\n- We can have enclosure level physical LEDs triggered as part of roll-up actions of a different virtual group.\n- The enclosure_fault and enclosure_identify virtual LED groups can still be in [Asserted=false]\n\nUnless, we have a code in led-manager that looks at the underlying enclosure fault and enclosure_identify physical LEDs to report the state of enclosure level physical LEDs, we can not resolve that issue. So, I thought a better code would be what we have here since this is only IF lamp_test _and_ it is under #ifdef _and_ it uses a feature that is already available."
        },
        {
            "timestamp": 1611268164,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 15:\n\n> Thanks for the feedback.. But, I would not agree this is hacky. \n\nThink of it this way... if all of four off disappear off the face of the earth and there is nobody left that understands these conversations.  What is going to happen when someone comes around and tries to modify this code?  They're not going to understand what is going on.  They're going to modify it and hope for the best or they're going to be afraid to touch it.  That is why this is a hack.  It is abnormal, unexpected, undocumented, cross-repo dependency, etc.  We shouldn't be writing code this way.\n\n> Circling back, what was the reason behind providing a \"skipSignal\" facility in sdbusplus ?. I remember some OpenBMC code is making use of that.\n\nThere are very specific cases when you dynamically create an object and you don't want the signal sent until the object is fully formed.  In that case you use 'skipSignal' for the initial property calls and never again.\n\nThere are some cases, which I do not agree with, that some people are using the 'skipSignal' because they think that the signal causes performance problems.  But, in this case, they aren't doing what you are doing here.  What you are proposing here is: \"I don't want someone to use the property value that I'm currently exposing, so I'm going to not send a signal and hope they don't notice the real property value.\"\n \n> Also, the code here is within #ifdef and hence won't get in the way of anyone else.\n\n#ifdef only makes the code harder to understand and maintain and test.\n\n> The requirement is that :\n> - PHYP needs to know state of all LEDs so that it can be reported to OS layer.\n> - If a particular LED gets turned [ON/OFF] only because of Lamp_Test, then we should not advertise that to PHYP.\n\nThis sounds like my \"everything except lamp test\" option.  Why does what I proposed not work?\n\n> The specific change that is in here, will only cover the Enclosure level fault and Identify LEDs. For rest everything, we are keying off of virtual LED groups in our PLDM - LED design.\n\n> The problem with handling Enclosure level LEDs at virtual LED layer is this :\n> \n> - We can have enclosure level physical LEDs triggered as part of roll-up actions of a different virtual group.\n> - The enclosure_fault and enclosure_identify virtual LED groups can still be in [Asserted=false]\n\nMaybe I'm using the wrong terminology.\n\nWe have physical LEDs, which are handled by this repository.  We have virtual LED groups, which are handled by led-manager.  And we have \"the result of combining virtual LED groups in a specific way\", which are calculated by led-manager but I don't remember what you call those or where they go.  This \"result of combining\" is what you should create a new one of, in my opinion.\n\n  enclosure_fault_physical <= enclosure_fault || lamp_test || (... roll up conditions...)\n  enclosure_fault_status_to_phyp <= enclosure_fault || (... roll up conditions...)\n\nEnclosure_fault_physical is the thing hosted by this repository.\nEnclosure_fault_Status_to_phyp is something that PLDM can use to get the underlying status.\n\n> Unless, we have a code in led-manager that looks at the underlying enclosure fault and enclosure_identify physical LEDs to report the state of enclosure level physical LEDs, we can not resolve that issue. So, I thought a better code would be what we have here since this is only IF lamp_test _and_ it is under #ifdef _and_ it uses a feature that is already available.\n\nAnytime you're doing a one-off that spans repositories, you're probably creating an unmaintainable set of code.  Please avoid doing this."
        },
        {
            "timestamp": 1611320827,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Thanks for the feedback.. But, I would not agree this is hacky. \n> \n> Think of it this way... if all of four off disappear off the face of the earth and there is nobody left that understands these conversations.  What is going to happen when someone comes around and tries to modify this code?  They're not going to understand what is going on.  They're going to modify it and hope for the best or they're going to be afraid to touch it.  That is why this is a hack.  It is abnormal, unexpected, undocumented, cross-repo dependency, etc.  We shouldn't be writing code this way.\n> \n\nFor completeness of the discussion, answering this \ud83d\ude0a\nI like to document things and if we think documentation is an issue, yes, we will go fix it. Having said that, most of OpenBMC code does not have good documentation. So, all of this you mentioned will be the case anyway. I get what you said about cross-repo dependency tho.\n\n> > Circling back, what was the reason behind providing a \"skipSignal\" facility in sdbusplus ?. I remember some OpenBMC code is making use of that.\n> \n> There are very specific cases when you dynamically create an object and you don't want the signal sent until the object is fully formed.  In that case you use 'skipSignal' for the initial property calls and never again.\n\nBut the signal in that case would be during Object creation ( emit_object_added ) right ?.. it won't be as part of setting a property right ?. \n\n> \n> There are some cases, which I do not agree with, that some people are using the 'skipSignal' because they think that the signal causes performance problems.  But, in this case, they aren't doing what you are doing here.  What you are proposing here is: \"I don't want someone to use the property value that I'm currently exposing, so I'm going to not send a signal and hope they don't notice the real property value.\"\n>  \n> > Also, the code here is within #ifdef and hence won't get in the way of anyone else.\n> \n> #ifdef only makes the code harder to understand and maintain and test.\n> \n> > The requirement is that :\n> > - PHYP needs to know state of all LEDs so that it can be reported to OS layer.\n> > - If a particular LED gets turned [ON/OFF] only because of Lamp_Test, then we should not advertise that to PHYP.\n> \n> This sounds like my \"everything except lamp test\" option.  Why does what I proposed not work?\n> \n> > The specific change that is in here, will only cover the Enclosure level fault and Identify LEDs. For rest everything, we are keying off of virtual LED groups in our PLDM - LED design.\n> \n> > The problem with handling Enclosure level LEDs at virtual LED layer is this :\n> > \n> > - We can have enclosure level physical LEDs triggered as part of roll-up actions of a different virtual group.\n> > - The enclosure_fault and enclosure_identify virtual LED groups can still be in [Asserted=false]\n> \n> Maybe I'm using the wrong terminology.\n> \n> We have physical LEDs, which are handled by this repository.  We have virtual LED groups, which are handled by led-manager.  And we have \"the result of combining virtual LED groups in a specific way\", which are calculated by led-manager but I don't remember what you call those or where they go.  This \"result of combining\" is what you should create a new one of, in my opinion.\n> \n>   enclosure_fault_physical <= enclosure_fault || lamp_test || (... roll up conditions...)\n>   enclosure_fault_status_to_phyp <= enclosure_fault || (... roll up conditions...)\n> \n> Enclosure_fault_physical is the thing hosted by this repository.\n> Enclosure_fault_Status_to_phyp is something that PLDM can use to get the underlying status.\n> \n> > Unless, we have a code in led-manager that looks at the underlying enclosure fault and enclosure_identify physical LEDs to report the state of enclosure level physical LEDs, we can not resolve that issue. So, I thought a better code would be what we have here since this is only IF lamp_test _and_ it is under #ifdef _and_ it uses a feature that is already available.\n> \n> Anytime you're doing a one-off that spans repositories, you're probably creating an unmaintainable set of code.  Please avoid doing this.\n\n\nLet me take a step back and explain this and take lamp_test out of discussion point. \n\nWe have LED groups + we have physical LEDs.\n\nxyz/openbmc_project/led/groups/fan0_fault ( Asserted: true )\n   physical LED:\n             fan0:\n             enclosure_fault_front:\n             enclosure_fault_rear:\n\nxyz/openbmc_project/led/groups/enclosure_fault ( Asserted: false )\n   physical LED:\n             enclosure_fault_front:\n             enclosure_fault_rear:\n\nEnd result,\n\n These physical LEDs are [ON] :  \n  - xyz/openbmc_project//led/physical/fan0 \n  - xyz/openbmc_project/led/physical/enclosure_fault_front\n  - xyz/openbmc_project/led/physical/enclosure_fault_rear\n\n xyz/openbmc_project/led/groups/fan0_fault. : Group Asserted\n xyz/openbmc_project/led/groups/enclosure_fault : group is _not_ asserted\n\n------\n\nNow, we want to give state of LEDs to PHYP so that they communicate that to OS.\nFor \"fan0\" and rest everything ( leaving enclosure level LEDs ), we can key off of [groups]\nOnly for enclosure level LEDs, we can not key off of [xyz/openbmc_project/led/groups/enclosure_fault]\nbecause the actual enclosure level physical LEDs are turned [ON] as part of roll-up. so, the accurate info can only be key'ed off of [xyz/openbmc_project/led/physical/enclosure_fault_front] and [xyz/openbmc_project/led/physical/enclosure_fault_rear]\n\n----\n\nIf we don't want to do it this way, then if someone asks \"give me the state of \"enclosure_fault\", then what we need to do : \n\n- Read: xyz/openbmc_project/led/groups/enclosure_fault. If it's set, well and good. \n- If the [Asserted is _not_true], then look at its [associate physical LEDs] and then actually read\n  xyz/openbmc_project/led/physical/<associated LEDs> and then return the response.\n\nDoing this way, will lead into if(group == enclosure_fault) kind of checks and I was avoiding that.\n\nPlease let me know if you have any suggestions."
        },
        {
            "timestamp": 1612203826,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\nAny comments Patrick ?"
        },
        {
            "timestamp": 1613645884,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n[[\nOkay.. Lets take this approach.\n\nIf your requirement is \"I need to send the state of the physical LED to the OS, except if lamptest mode is on I need to send the state of what the LED would be if we weren't in lamptest mode\", you already have what you need to implement that.  Create a new virtual LED for \"everything except lamptest\" which has no physical LED behind it and use that for the OS indicator.\n]]\n\nThe requirement is this ( with example )\n\n- No LED is on\n- LampTest starts\n- We should not report any LED as being ON because it happened during lamp test.\n\n-------------\n\n- No LED is on\n- LampTest starts\n- Fan0 fault is asserted during lamp test\n- We need to report state of fan0_fault, enclosure_fault rollup indicators to PHYP since those are also activated as part of FRU fault. This reporting needs to happen without PHYP asking for the data.\n\n-------------\n\nSo, if I am understanding it correctly, what you are proposing is that, when we assert any `fru_fault` group and it contains the enclosure level fault indicators as rollup, we also assert this new group \"enclosure_fault_mirror\" ?\n\nIf not, please help me understand what is it ?"
        },
        {
            "timestamp": 1613791537,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Thanks for the feedback.. But, I would not agree this is hacky. \n> > \n> > Think of it this way... if all of four off disappear off the face of the earth and there is nobody left that understands these conversations.  What is going to happen when someone comes around and tries to modify this code?  They're not going to understand what is going on.  They're going to modify it and hope for the best or they're going to be afraid to touch it.  That is why this is a hack.  It is abnormal, unexpected, undocumented, cross-repo dependency, etc.  We shouldn't be writing code this way.\n> > \n> \n> For completeness of the discussion, answering this \ud83d\ude0a\n> I like to document things and if we think documentation is an issue, yes, we will go fix it. Having said that, most of OpenBMC code does not have good documentation. So, all of this you mentioned will be the case anyway. I get what you said about cross-repo dependency tho.\n> \n> > > Circling back, what was the reason behind providing a \"skipSignal\" facility in sdbusplus ?. I remember some OpenBMC code is making use of that.\n> > \n> > There are very specific cases when you dynamically create an object and you don't want the signal sent until the object is fully formed.  In that case you use 'skipSignal' for the initial property calls and never again.\n> \n> But the signal in that case would be during Object creation ( emit_object_added ) right ?.. it won't be as part of setting a property right ?. \n> \n> > \n> > There are some cases, which I do not agree with, that some people are using the 'skipSignal' because they think that the signal causes performance problems.  But, in this case, they aren't doing what you are doing here.  What you are proposing here is: \"I don't want someone to use the property value that I'm currently exposing, so I'm going to not send a signal and hope they don't notice the real property value.\"\n> >  \n> > > Also, the code here is within #ifdef and hence won't get in the way of anyone else.\n> > \n> > #ifdef only makes the code harder to understand and maintain and test.\n> > \n> > > The requirement is that :\n> > > - PHYP needs to know state of all LEDs so that it can be reported to OS layer.\n> > > - If a particular LED gets turned [ON/OFF] only because of Lamp_Test, then we should not advertise that to PHYP.\n> > \n> > This sounds like my \"everything except lamp test\" option.  Why does what I proposed not work?\n> > \n> > > The specific change that is in here, will only cover the Enclosure level fault and Identify LEDs. For rest everything, we are keying off of virtual LED groups in our PLDM - LED design.\n> > \n> > > The problem with handling Enclosure level LEDs at virtual LED layer is this :\n> > > \n> > > - We can have enclosure level physical LEDs triggered as part of roll-up actions of a different virtual group.\n> > > - The enclosure_fault and enclosure_identify virtual LED groups can still be in [Asserted=false]\n> > \n> > Maybe I'm using the wrong terminology.\n> > \n> > We have physical LEDs, which are handled by this repository.  We have virtual LED groups, which are handled by led-manager.  And we have \"the result of combining virtual LED groups in a specific way\", which are calculated by led-manager but I don't remember what you call those or where they go.  This \"result of combining\" is what you should create a new one of, in my opinion.\n> > \n> >   enclosure_fault_physical <= enclosure_fault || lamp_test || (... roll up conditions...)\n> >   enclosure_fault_status_to_phyp <= enclosure_fault || (... roll up conditions...)\n> > \n> > Enclosure_fault_physical is the thing hosted by this repository.\n> > Enclosure_fault_Status_to_phyp is something that PLDM can use to get the underlying status.\n> > \n> > > Unless, we have a code in led-manager that looks at the underlying enclosure fault and enclosure_identify physical LEDs to report the state of enclosure level physical LEDs, we can not resolve that issue. So, I thought a better code would be what we have here since this is only IF lamp_test _and_ it is under #ifdef _and_ it uses a feature that is already available.\n> > \n> > Anytime you're doing a one-off that spans repositories, you're probably creating an unmaintainable set of code.  Please avoid doing this.\n> \n> \n> Let me take a step back and explain this and take lamp_test out of discussion point. \n> \n> We have LED groups + we have physical LEDs.\n> \n> xyz/openbmc_project/led/groups/fan0_fault ( Asserted: true )\n>    physical LED:\n>              fan0:\n>              enclosure_fault_front:\n>              enclosure_fault_rear:\n> \n> xyz/openbmc_project/led/groups/enclosure_fault ( Asserted: false )\n>    physical LED:\n>              enclosure_fault_front:\n>              enclosure_fault_rear:\n> \n\nI think this is not just `enclosure` problem, if all fan*_falut groups have the same physical LED, the above problem will also exist.\n\ne.g:\nxyz/openbmc_project/led/groups/fan0_fault ( Asserted: true )\n\tphysical LED:\n\t\tfront_fan\n\t\t\nxyz/openbmc_project/led/groups/fan1_fault ( Asserted: false )\n\tphysical LED:\n\t\tfront_fan\n\nhttps://github.com/openbmc/openbmc/blob/master/meta-inspur/meta-fp5280g2/recipes-phosphor/leds/phosphor-led-manager/led-group-config.json#L251-L297\n\n> End result,\n> \n>  These physical LEDs are [ON] :  \n>   - xyz/openbmc_project//led/physical/fan0 \n>   - xyz/openbmc_project/led/physical/enclosure_fault_front\n>   - xyz/openbmc_project/led/physical/enclosure_fault_rear\n> \n>  xyz/openbmc_project/led/groups/fan0_fault. : Group Asserted\n>  xyz/openbmc_project/led/groups/enclosure_fault : group is _not_ asserted\n> \n> ------\n> \n> Now, we want to give state of LEDs to PHYP so that they communicate that to OS.\n> For \"fan0\" and rest everything ( leaving enclosure level LEDs ), we can key off of [groups]\n\nFor the above situation, we can not key off of [groups] too, right?\nBecause at this time, the front_fan physical LED is truned [ON].\n\n> Only for enclosure level LEDs, we can not key off of [xyz/openbmc_project/led/groups/enclosure_fault]\n> because the actual enclosure level physical LEDs are turned [ON] as part of roll-up. so, the accurate info can only be key'ed off of [xyz/openbmc_project/led/physical/enclosure_fault_front] and [xyz/openbmc_project/led/physical/enclosure_fault_rear]\n> \n> ----\n> \n> If we don't want to do it this way, then if someone asks \"give me the state of \"enclosure_fault\", then what we need to do : \n> \n> - Read: xyz/openbmc_project/led/groups/enclosure_fault. If it's set, well and good. \n> - If the [Asserted is _not_true], then look at its [associate physical LEDs] and then actually read\n>   xyz/openbmc_project/led/physical/<associated LEDs> and then return the response.\n> \n> Doing this way, will lead into if(group == enclosure_fault) kind of checks and I was avoiding that.\n> \n> Please let me know if you have any suggestions.\n\nSorry, For LED, Since I am not familiar with the process(from BMC to PHYP to OS of LED states) and Maybe I missed some discussion, I am still not following.\nSo, I want to know what state PYHP wants to get the LED, is it the group state(like the Asserted property), or the physical LED state?\n\nI think it should get the physical LED state.\nIf so, All physical LEDs state can not be obtained through groups, Correct?\n\nAnd through your description, I think this is not just a problem of lamp test.\n\nAlso, I do not understand why we can not get the status of the LED through `xyz/openbmc_project/led/physical/`?\n\n@Vishwa, Please correct me if I am wrong, Thanks \ud83d\ude0a"
        },
        {
            "timestamp": 1613792247,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> [[\n> Okay.. Lets take this approach.\n> \n> If your requirement is \"I need to send the state of the physical LED to the OS, except if lamptest mode is on I need to send the state of what the LED would be if we weren't in lamptest mode\", you already have what you need to implement that.  Create a new virtual LED for \"everything except lamptest\" which has no physical LED behind it and use that for the OS indicator.\n> ]]\n> \n> The requirement is this ( with example )\n> \n> - No LED is on\n> - LampTest starts\n> - We should not report any LED as being ON because it happened during lamp test.\n\nYes, I agree with you.\nAnd we can notify PYHP that \"lamp test is in progress at this moment\"?\n\n> \n> -------------\n> \n> - No LED is on\n> - LampTest starts\n> - Fan0 fault is asserted during lamp test\n> - We need to report state of fan0_fault, enclosure_fault rollup indicators to PHYP since those are also activated as part of FRU fault. This reporting needs to happen without PHYP asking for the data.\n\nIs it possible to postpone the report here (after the lamp test is over and all waiting LEDs states are restored)?\n\n> \n> -------------\n> \n> So, if I am understanding it correctly, what you are proposing is that, when we assert any `fru_fault` group and it contains the enclosure level fault indicators as rollup, we also assert this new group \"enclosure_fault_mirror\" ?\n> \n> If not, please help me understand what is it ?"
        },
        {
            "timestamp": 1613978397,
            "reviewer": {
                "name": "Vishwanatha Subbanna",
                "email": "vishwa@linux.vnet.ibm.com",
                "username": "vishwabmc"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> > Patch Set 15:\n> > \n> > > Patch Set 15:\n> > > \n> > > > Thanks for the feedback.. But, I would not agree this is hacky. \n> > > \n> > > Think of it this way... if all of four off disappear off the face of the earth and there is nobody left that understands these conversations.  What is going to happen when someone comes around and tries to modify this code?  They're not going to understand what is going on.  They're going to modify it and hope for the best or they're going to be afraid to touch it.  That is why this is a hack.  It is abnormal, unexpected, undocumented, cross-repo dependency, etc.  We shouldn't be writing code this way.\n> > > \n> > \n> > For completeness of the discussion, answering this \ud83d\ude0a\n> > I like to document things and if we think documentation is an issue, yes, we will go fix it. Having said that, most of OpenBMC code does not have good documentation. So, all of this you mentioned will be the case anyway. I get what you said about cross-repo dependency tho.\n> > \n> > > > Circling back, what was the reason behind providing a \"skipSignal\" facility in sdbusplus ?. I remember some OpenBMC code is making use of that.\n> > > \n> > > There are very specific cases when you dynamically create an object and you don't want the signal sent until the object is fully formed.  In that case you use 'skipSignal' for the initial property calls and never again.\n> > \n> > But the signal in that case would be during Object creation ( emit_object_added ) right ?.. it won't be as part of setting a property right ?. \n> > \n> > > \n> > > There are some cases, which I do not agree with, that some people are using the 'skipSignal' because they think that the signal causes performance problems.  But, in this case, they aren't doing what you are doing here.  What you are proposing here is: \"I don't want someone to use the property value that I'm currently exposing, so I'm going to not send a signal and hope they don't notice the real property value.\"\n> > >  \n> > > > Also, the code here is within #ifdef and hence won't get in the way of anyone else.\n> > > \n> > > #ifdef only makes the code harder to understand and maintain and test.\n> > > \n> > > > The requirement is that :\n> > > > - PHYP needs to know state of all LEDs so that it can be reported to OS layer.\n> > > > - If a particular LED gets turned [ON/OFF] only because of Lamp_Test, then we should not advertise that to PHYP.\n> > > \n> > > This sounds like my \"everything except lamp test\" option.  Why does what I proposed not work?\n> > > \n> > > > The specific change that is in here, will only cover the Enclosure level fault and Identify LEDs. For rest everything, we are keying off of virtual LED groups in our PLDM - LED design.\n> > > \n> > > > The problem with handling Enclosure level LEDs at virtual LED layer is this :\n> > > > \n> > > > - We can have enclosure level physical LEDs triggered as part of roll-up actions of a different virtual group.\n> > > > - The enclosure_fault and enclosure_identify virtual LED groups can still be in [Asserted=false]\n> > > \n> > > Maybe I'm using the wrong terminology.\n> > > \n> > > We have physical LEDs, which are handled by this repository.  We have virtual LED groups, which are handled by led-manager.  And we have \"the result of combining virtual LED groups in a specific way\", which are calculated by led-manager but I don't remember what you call those or where they go.  This \"result of combining\" is what you should create a new one of, in my opinion.\n> > > \n> > >   enclosure_fault_physical <= enclosure_fault || lamp_test || (... roll up conditions...)\n> > >   enclosure_fault_status_to_phyp <= enclosure_fault || (... roll up conditions...)\n> > > \n> > > Enclosure_fault_physical is the thing hosted by this repository.\n> > > Enclosure_fault_Status_to_phyp is something that PLDM can use to get the underlying status.\n> > > \n> > > > Unless, we have a code in led-manager that looks at the underlying enclosure fault and enclosure_identify physical LEDs to report the state of enclosure level physical LEDs, we can not resolve that issue. So, I thought a better code would be what we have here since this is only IF lamp_test _and_ it is under #ifdef _and_ it uses a feature that is already available.\n> > > \n> > > Anytime you're doing a one-off that spans repositories, you're probably creating an unmaintainable set of code.  Please avoid doing this.\n> > \n> > \n> > Let me take a step back and explain this and take lamp_test out of discussion point. \n> > \n> > We have LED groups + we have physical LEDs.\n> > \n> > xyz/openbmc_project/led/groups/fan0_fault ( Asserted: true )\n> >    physical LED:\n> >              fan0:\n> >              enclosure_fault_front:\n> >              enclosure_fault_rear:\n> > \n> > xyz/openbmc_project/led/groups/enclosure_fault ( Asserted: false )\n> >    physical LED:\n> >              enclosure_fault_front:\n> >              enclosure_fault_rear:\n> > \n> \n> I think this is not just `enclosure` problem, if all fan*_falut groups have the same physical LED, the above problem will also exist.\n> \n> e.g:\n> xyz/openbmc_project/led/groups/fan0_fault ( Asserted: true )\n> \tphysical LED:\n> \t\tfront_fan\n> \t\t\n> xyz/openbmc_project/led/groups/fan1_fault ( Asserted: false )\n> \tphysical LED:\n> \t\tfront_fan\n> \n> https://github.com/openbmc/openbmc/blob/master/meta-inspur/meta-fp5280g2/recipes-phosphor/leds/phosphor-led-manager/led-group-config.json#L251-L297\n> \n> > End result,\n> > \n> >  These physical LEDs are [ON] :  \n> >   - xyz/openbmc_project//led/physical/fan0 \n> >   - xyz/openbmc_project/led/physical/enclosure_fault_front\n> >   - xyz/openbmc_project/led/physical/enclosure_fault_rear\n> > \n> >  xyz/openbmc_project/led/groups/fan0_fault. : Group Asserted\n> >  xyz/openbmc_project/led/groups/enclosure_fault : group is _not_ asserted\n> > \n> > ------\n> > \n> > Now, we want to give state of LEDs to PHYP so that they communicate that to OS.\n> > For \"fan0\" and rest everything ( leaving enclosure level LEDs ), we can key off of [groups]\n> \n> For the above situation, we can not key off of [groups] too, right?\n> Because at this time, the front_fan physical LED is truned [ON].\n\nRight.. It is no different than enclosure_leds. The thing here is \"common LEDs\" and enclosure_led is one such common LED.\n\n> \n> > Only for enclosure level LEDs, we can not key off of [xyz/openbmc_project/led/groups/enclosure_fault]\n> > because the actual enclosure level physical LEDs are turned [ON] as part of roll-up. so, the accurate info can only be key'ed off of [xyz/openbmc_project/led/physical/enclosure_fault_front] and [xyz/openbmc_project/led/physical/enclosure_fault_rear]\n> > \n> > ----\n> > \n> > If we don't want to do it this way, then if someone asks \"give me the state of \"enclosure_fault\", then what we need to do : \n> > \n> > - Read: xyz/openbmc_project/led/groups/enclosure_fault. If it's set, well and good. \n> > - If the [Asserted is _not_true], then look at its [associate physical LEDs] and then actually read\n> >   xyz/openbmc_project/led/physical/<associated LEDs> and then return the response.\n> > \n> > Doing this way, will lead into if(group == enclosure_fault) kind of checks and I was avoiding that.\n> > \n> > Please let me know if you have any suggestions.\n> \n> Sorry, For LED, Since I am not familiar with the process(from BMC to PHYP to OS of LED states) and Maybe I missed some discussion, I am still not following.\n> So, I want to know what state PYHP wants to get the LED, is it the group state(like the Asserted property), or the physical LED state?\n> \n> I think it should get the physical LED state.\n> If so, All physical LEDs state can not be obtained through groups, Correct?\n> \n> And through your description, I think this is not just a problem of lamp test.\n> \n> Also, I do not understand why we can not get the status of the LED through `xyz/openbmc_project/led/physical/`?\n> \n> @Vishwa, Please correct me if I am wrong, Thanks \ud83d\ude0a"
        },
        {
            "timestamp": 1614074672,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Abandoned\n\nWe have actually changed positions, need to use `virtual_xxx` in `led-groups-config.json` and instead of changing led-sysfs repo."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "27a8e16db26aca0e72a9d14d812d646a9f430a72",
            "parents": [
                "30968d042e645a02b543a3687c0e3b3bf3cf06a5"
            ],
            "ref": "refs/changes/93/38993/1",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1607763368,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 44,
            "sizeDeletions": 4
        },
        {
            "number": 2,
            "revision": "80a158cbca86d6f7ad82e57710436d0813d8d7ad",
            "parents": [
                "30968d042e645a02b543a3687c0e3b3bf3cf06a5"
            ],
            "ref": "refs/changes/93/38993/2",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1607763696,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 45,
            "sizeDeletions": 4
        },
        {
            "number": 3,
            "revision": "171a10b86691086d2c619ba0867bc49f66d9c15c",
            "parents": [
                "30968d042e645a02b543a3687c0e3b3bf3cf06a5"
            ],
            "ref": "refs/changes/93/38993/3",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1607907478,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 45,
            "sizeDeletions": 4
        },
        {
            "number": 4,
            "revision": "8e66218ba760d8e53a95a7af091c242562843fd7",
            "parents": [
                "30968d042e645a02b543a3687c0e3b3bf3cf06a5"
            ],
            "ref": "refs/changes/93/38993/4",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1607908202,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "physical.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "this would result in dead lock due to this reason.\n\nled manager calls led-sysfs to set the led \nled-sysfs now calls led-manager to get the state of asserted.\n\n---------------\n\nAlso, we can not call into led-manager for every request. Instead, we need led-sysfs watch for PropertiesChanged signal on lamp_test and maintain an internal variable. When the propertiesChanged is set to \"false\" then it indicates the lamp-test function is over."
                },
                {
                    "file": "physical.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "Sorry, I have not tested it.\nWill add propertiesChanged."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am.include",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 5
        },
        {
            "number": 5,
            "revision": "1d0821972be018ddc97136982f90d973db706813",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/5",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608024400,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am.include",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 55,
            "sizeDeletions": 5
        },
        {
            "number": 6,
            "revision": "c9f3c8143233d178552dc16338ed792a88cf7e81",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/6",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608024514,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am.include",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 54,
            "sizeDeletions": 5
        },
        {
            "number": 7,
            "revision": "25e9a1321266d569c404077093bc24bd42372d0f",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/7",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608024574,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 54,
            "sizeDeletions": 4
        },
        {
            "number": 8,
            "revision": "c2a9a67936bfa805cc733220bba7958be1217836",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/8",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608024730,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 38,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 4
        },
        {
            "number": 9,
            "revision": "5841e628be18600b6406733bb9f455d5395686a8",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/9",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608024874,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 50,
            "sizeDeletions": 4
        },
        {
            "number": 10,
            "revision": "5c2ff352675f3a71dc831688d6ba0f2d584e9c2f",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/10",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608025099,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "physical.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "Need a comment on why this is being done.. The comment goes like : \n\nLamp test is a diagnostic run and as part of that, all the LEDs are lit-up. When that happens, we should not send a message saying the the LED is [ON], since the listeners of the PropertyChanged signal on this would think that the Physical LED is ON due to a real issue. This feature is here to maintain the feature mapping with IBM previous generation behaviours."
                },
                {
                    "file": "physical.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "Ack"
                },
                {
                    "file": "physical.hpp",
                    "line": 12,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "hmm.. may I know why is this needed ?"
                },
                {
                    "file": "physical.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "This must be the last thing in the constructor."
                },
                {
                    "file": "physical.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "Done"
                },
                {
                    "file": "physical.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "where is this declared ?"
                },
                {
                    "file": "physical.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "https://github.com/openbmc/sdbusplus/blob/master/include/sdbusplus/bus/match.hpp#L197\n\n```\n#include <sdbusplus/bus.hpp>\nusing namespace sdbusplus::bus::match::rules;\n```"
                },
                {
                    "file": "physical.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "kinda looks cryptic to me . Is there a way to simplify this ?"
                },
                {
                    "file": "physical.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "move to the listenLampTestAsserted method."
                },
                {
                    "file": "physical.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "intf{};"
                },
                {
                    "file": "physical.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 47,
            "sizeDeletions": 4
        },
        {
            "number": 11,
            "revision": "de482953e65f4dac8c64e44cf9daea7b344b03ee",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/11",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608081519,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 46,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 69,
            "sizeDeletions": 5
        },
        {
            "number": 12,
            "revision": "0266a763b2a6614a6439f49a735363bc71cb9dc3",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/12",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1608081695,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "physical.cpp",
                    "line": 174,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "Please could u put some comments into this code ?"
                },
                {
                    "file": "physical.cpp",
                    "line": 174,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "Ack"
                },
                {
                    "file": "physical.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "please change the name : Asserted is a terminology used only in led group .\n\nHow about : listenForLampTestEvent();"
                },
                {
                    "file": "physical.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 46,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 68,
            "sizeDeletions": 5
        },
        {
            "number": 13,
            "revision": "4e7b8153c4659780bf8b26309aa2f709f6005dbe",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/13",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1610439447,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "Please add the testcase result ?.. Also, I feel we need to add the GTEST"
                },
                {
                    "file": "physical.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "hmm.. I thought it;s a method.. could u leave a space ? \n\nisLampTestRunning {false};\n\nIdeally, I would put all this new code under #ifdef USE_LAMP_TEST."
                },
                {
                    "file": "physical.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "George Liu",
                        "email": "liuxiwei@inspur.com",
                        "username": "lxwinspur"
                    },
                    "message": "> I thought it;s a method.. could u leave a space ? \n\nSince `.clang-format` is used, could not leave a space.\n\n\n> Ideally, I would put all this new code under #ifdef USE_LAMP_TEST.\nDone"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 49,
                    "deletions": -4
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 71,
            "sizeDeletions": 5
        },
        {
            "number": 14,
            "revision": "5450d7444c8bf6a930bb796e7ee9c5ec8a16e0e2",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/14",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1610524025,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 47,
                    "deletions": -1
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 71,
            "sizeDeletions": 2
        },
        {
            "number": 15,
            "revision": "c7830f59d124a9c380a3892d58b347355b01af46",
            "parents": [
                "2a3b83ef7ff0bdf7d883cc5f90cf73346843e53a"
            ],
            "ref": "refs/changes/93/38993/15",
            "uploader": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "createdOn": 1610524365,
            "author": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "physical.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is not an acceptable approach no matter what the purpose of the property/signal consumption is.\n\nI don't see any reason why you shouldn't emit PropertyChanged in 99.9% of scenarios.  This one doesn't qualify to me.\n\nPropertyChanged signals allow asynchronous responses to the properties, but you cannot rely on consumers to actually listen / consume them.  An implementation could alternatively simply query your property every N seconds (not that this would be a \"good\" implementation, but it is valid).\n\nTaking this a step farther, a very common practice is to read a bunch of the existing properties upon start up.  If your \"consumer\" were to crash or start up dynamically, they're going to get the \"wrong value\" based on your proposal in the comments here.\n\nIn no case should you set a property to a value that you are unhappy with another application consuming that value."
                },
                {
                    "file": "physical.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "these are common for both the cases. So why duplicate it ?"
                },
                {
                    "file": "physical.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "#ifdef USE_LAMP_TEST\n  if(lampTestRunning)\n  {\n    requested = .....\n  }\n#else\n  requested = ....\n#endif\n\ndriveLED();\nreturn value;"
                },
                {
                    "file": "physical.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Vishwanatha Subbanna",
                        "email": "vishwa@linux.vnet.ibm.com",
                        "username": "vishwabmc"
                    },
                    "message": "looks like a bug in the previous code itself. we are setting the base class value even before doing the actual work. Generally, we would set that after handling the request. Anyway, no need to fix that along with this commit."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "physical.cpp",
                    "type": "MODIFIED",
                    "insertions": 47,
                    "deletions": -1
                },
                {
                    "file": "physical.hpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 69,
            "sizeDeletions": 2
        }
    ]
}