{
    "project": "openbmc/peci-pcie",
    "branch": "master",
    "topic": "pci.ids",
    "id": "Ifca9bf24660cb4575fdbce0197938b243d656b7d",
    "number": 43645,
    "subject": "Use to pci.ids database to lookup device info",
    "owner": {
        "name": "Andrei Kartashev",
        "email": "a.kartashev@yadro.com",
        "username": "alatarum"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/peci-pcie/+/43645",
    "commitMessage": "Use to pci.ids database to lookup device info\n\nImplement feature to lookup human readable device information\nusing pci.ids database (https://pci-ids.ucw.cz/)\n\nTested: tested on Vegman server and verified additional fields are\nfilled as expected where it possible:\n~# busctl introspect xyz.openbmc_project.PCIe /xyz/openbmc_project/PCIe/S0B8D0\nNAME                                TYPE      SIGNATURE RESULT/VALUE                FLAGS\n[...]\nxyz.openbmc_project.PCIe.Device     interface -         -                           -\n.DeviceType                         property  s         \"SingleFunction\"            emits-change\n.Function0ClassCode                 property  s         \"0x060400\"                  emits-change\n.Function0DeviceClass               property  s         \"Bridge\"                    emits-change\n.Function0DeviceId                  property  s         \"0x1150\"                    emits-change\n.Function0DeviceName                property  s         \"AST1150 PCI-to-PCI Bridge\" emits-change\n.Function0FunctionType              property  s         \"Physical\"                  emits-change\n.Function0RevisionId                property  s         \"0x04\"                      emits-change\n.Function0SubsystemId               property  s         \"0x0000\"                    emits-change\n.Function0SubsystemName             property  s         \"\"                          emits-change\n.Function0SubsystemVendorId         property  s         \"0x0000\"                    emits-change\n.Function0VendorId                  property  s         \"0x1a03\"                    emits-change\n.Function0VendorName                property  s         \"ASPEED Technology, Inc.\"   emits-change\n[...]\n\nSigned-off-by: Andrei Kartashev <a.kartashev@yadro.com>\nChange-Id: Ifca9bf24660cb4575fdbce0197938b243d656b7d\n",
    "createdOn": 1622328740,
    "lastUpdated": 1625641970,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1622328740,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1622328764,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1622328787,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/18354/ : FAILURE"
        },
        {
            "timestamp": 1622329061,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1622329073,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1622329148,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/18355/ : SUCCESS"
        },
        {
            "timestamp": 1622670318,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\nIs there a recipe change to install the pci.ids file?"
        },
        {
            "timestamp": 1624282372,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\n> Patch Set 2:\n> \n> (1 comment)\n> \n> Is there a recipe change to install the pci.ids file?\n\nI will add it in case we decide to go ahead with this feature.\nActually in our design I have one more patch: to allow work with unsorted pci.ids file since we work with whitelisted database, ordered by types:\nhttps://github.com/YADRO-KNS/pciids/blob/vegman/pci.ids\nHow do you think, should I submit it too?"
        },
        {
            "timestamp": 1624433154,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Topic set to pci.ids"
        },
        {
            "timestamp": 1624490514,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(7 comments)\n\nThere's a lot of code here;  I didn't make it through all of it.  Overall this seems like a good idea, I'm a little worried about how much binary size increase it'll cause.  Has that been measured?"
        },
        {
            "timestamp": 1624525063,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n(6 comments)\n\n> Patch Set 2:\n> \n> (7 comments)\n> \n> There's a lot of code here;  I didn't make it through all of it.  Overall this seems like a good idea, I'm a little worried about how much binary size increase it'll cause.  Has that been measured?\n\nYes, I did. The size of pci.ids text file is 1.2MB, but overall impact to squashfs image ~250KB."
        },
        {
            "timestamp": 1624525349,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1624544227,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2:\n\nI guess I misunderstood this patch set.  I had assumed that this was still being generated at build time.\n\nIs there a reason this lookup needs to happen at runtime?  What happens when a server doesn't have access to the Internet, can the lookup still work?"
        },
        {
            "timestamp": 1624549291,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> I guess I misunderstood this patch set.  I had assumed that this was still being generated at build time.\n> \n> Is there a reason this lookup needs to happen at runtime?  What happens when a server doesn't have access to the Internet, can the lookup still work?\n\nIt doesn't require Internet connection, the file placed on filesystem.\nBenefit, as I said, in memory footprint: we don't need to store while list in memory."
        },
        {
            "timestamp": 1624552494,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1625259471,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\nSo, Jason, what do you think about this proposal: should I update the patch or cancel it?"
        },
        {
            "timestamp": 1625608904,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> So, Jason, what do you think about this proposal: should I update the patch or cancel it?\n\nTo clarify:\nWould the patch update move the parsing to compile time?\nIf so, is there still a benefit over the current solution?\n\nI'm open to see new approaches, but I want to be sure it's a good direction before you spend time on it."
        },
        {
            "timestamp": 1625641970,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > So, Jason, what do you think about this proposal: should I update the patch or cancel it?\n> \n> To clarify:\n> Would the patch update move the parsing to compile time?\n> If so, is there still a benefit over the current solution?\n> \n> I'm open to see new approaches, but I want to be sure it's a good direction before you spend time on it.\n\nNo, it will be just fix of minor things noticed above. \nI'm afraid I will not have time to implement compile-time parsing in near future. So it is all about runtime parsing.\n\nIn our platform we are fine with this solution and I can keep it as our private patch."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "0945103fcbf52cff2b6cf084f1861250c1049266",
            "parents": [
                "2fbf67e929512f13b59de98c6caa443e2fe29635"
            ],
            "ref": "refs/changes/45/43645/1",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1622328740,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/pci_ids.hpp",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/pci_ids.cpp",
                    "type": "ADDED",
                    "insertions": 384,
                    "deletions": 0
                },
                {
                    "file": "src/peci_pcie.cpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": -37
                }
            ],
            "sizeInsertions": 503,
            "sizeDeletions": 38
        },
        {
            "number": 2,
            "revision": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
            "parents": [
                "2fbf67e929512f13b59de98c6caa443e2fe29635"
            ],
            "ref": "refs/changes/45/43645/2",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1622329061,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/pci_ids.cpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "I think boost::flat_map is preferred for efficiency."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "It generally not so big to have any performance difference: this map only cache entries for devices found in the system. I believe we will have not more then ~10 entries for each."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "flat_map uses less memory because values are packed and there is no per-key overhead.\n\nThey're generally a good fit for things like this which are write-once read many in a limited environment (ie the BMC)"
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Don't declare as static.  This will use memory the whole life of the program for something that is temporal."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "My initial input to make it static was to exclude regexp compilation on each run, so here is trade of between memory and speed. But this compilation defensively not the most heavy operation here, so you probably right."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 47,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "std::array please."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 47,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "why is it better?"
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 47,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Because it follows the coding standard."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This range check is incorrect.  tmpStr has been incremented, sizeof(tmpStr) is no longer the limit."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "No, it is not incremented, it still char array of 16 bytes.\nBut probably I should use sstream here instead of snprintf."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ah, you're right, I got confused here about what was going on."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 57,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why static?  Maybe constexpr here instead?"
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "good point"
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is there a way to move this parsing to compile time>  it seems fairly inefficient to be reading in and parsing this file once per device found."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Hm, this, probably, good way to go, but then require completely new solution..."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Note that in this case we will have to load entire list to the memory.\nTaking in account the fact that there typically not so many devices installed and they not so frequently changes, I would prefer to load entries on demand."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "My concern here is for first boot times.  This is going to consume quite a bit of CPU on boot when the BMC really can't afford to be using a bunch of excess CPU and IO bandwidth.\n\nYes, it would require a different solution.  What I've done in the past would be to write a python script to generate sorted, std::arrays of elements that then get compiled into the app.  Because they're sorted, they can then be binary searched (using std::lower_range) at runtime without incurring any runtime overhead of reading in a file.\n\nUp to you and Jason if that's something you want to do, but I personally think it would be better.  It also prevents an attack vector if the attacker gets access to the filesystem and finds a bug in the parser algorithm, which is less of a concern, but has happened to other BMCs before."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 336,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Instead of packing this way, does it make more sense to have a real struct for this, with a std::hash method implemented?  That seems like it would be a lot more clear than embedding the values into a uint64_t then taking advantage of the fact that std::hash is already implemented for it.\n\nThe new struct could still call std::hash under the covers, and do the cacheKey algorithm in the background, but it would be more clear."
                },
                {
                    "file": "src/pci_ids.cpp",
                    "line": 336,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Will it work more effective with std::hash or just looks better?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/pci_ids.hpp",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/pci_ids.cpp",
                    "type": "ADDED",
                    "insertions": 384,
                    "deletions": 0
                },
                {
                    "file": "src/peci_pcie.cpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": -37
                }
            ],
            "sizeInsertions": 503,
            "sizeDeletions": 38
        }
    ]
}