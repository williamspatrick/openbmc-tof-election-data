{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "I2fa0b9e73c41f60f1af58f0027378112eca1ed6e",
    "number": 38270,
    "subject": "schema: ibm: Ambient temp schema",
    "owner": {
        "name": "Matt Spinler",
        "email": "spinler@us.ibm.com",
        "username": "spinler"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/38270",
    "commitMessage": "schema: ibm: Ambient temp schema\n\nIBM systems must take certain actions based on ambient temperature\nvalues, such as creating event logs, alerting the host, and powering off\nthe system after some amount of time.\n\nThis commit adds the schema so that entity-manager can hold the platform\nspecific data for this.\n\nSigned-off-by: Matt Spinler <spinler@us.ibm.com>\nChange-Id: I2fa0b9e73c41f60f1af58f0027378112eca1ed6e\n",
    "createdOn": 1605542490,
    "lastUpdated": 1612557281,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1605542490,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1605542503,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605543103,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7899/ : SUCCESS"
        },
        {
            "timestamp": 1605544527,
            "reviewer": {
                "name": "Matthew Barth",
                "email": "msbarth@linux.ibm.com",
                "username": "msbarth"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1605545477,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1605550055,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1605550814,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1605554904,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1605558089,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1605562768,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1605563173,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1605717716,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1605718751,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1612557281,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Abandoned\n\nwent a different direction"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "66077db346a3e0ae24af7d498571f66dbd06ac4a",
            "parents": [
                "9c7fd64642e4242d2422bd70abee04eda326e890"
            ],
            "ref": "refs/changes/70/38270/1",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1605542490,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These four properties would normally be covered by critical and warning thresholds for said sensor.  Is there a reason that the existing thresholding didn't meet your needs for declaring warning and critical temperatures?"
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "From an entity-manager JSON point of view, since the Thresholds array is basically just free format strings, theoretically I could have just encoded these values into that, using special string labels.  That really bypasses the added value a schema provides though.\n\nIn regards to using the actual Sensor.Threshold.Warning/Critical interfaces, I couldn't see how to make that work: \n1) I have 4 levels here, not just two.\n2) The 'WarningLow' parameter I suppose I could use as the TempReset value, but that isn't what it's defined to be used as.  Not sure if other code uses it that way."
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> From an entity-manager JSON point of view, since the Thresholds array is basically just free format strings, theoretically I could have just encoded these values into that, using special string labels.\n\nOr... you could use the existing labels as-is.  I'm not following why these are different.\n\n>  That really bypasses the added value a schema provides though.\n\nRegardless of what the schema definitions say, you're effectively redefining the idea of thresholds, with no new information.\n\n> \n> In regards to using the actual Sensor.Threshold.Warning/Critical interfaces, I couldn't see how to make that work: \n> 1) I have 4 levels here, not just two.\n\nNot following.  There is IBMAmbientTemp->PerfLoss->Temp.  That looks like two levels of json to me.\n\nUnless you mean actual trigger levels, in which case, the existing json abstractions have you covered already, and there are examples of having 4 independent levels today (critical high/low and warning high/low).\nHere's an example of a sensor with 4 thresholds.\nhttps://github.com/openbmc/entity-manager/blob/9c7fd64642e4242d2422bd70abee04eda326e890/configurations/WFT%20Baseboard.json#L32\n\n> 2) The 'WarningLow' parameter I suppose I could use as the TempReset value, but that isn't what it's defined to be used as.\n\nIn general the critical interfaces are used to define shutdown temperatures.\n\n>  Not sure if other code uses it that way.\n\nThis is how a number of bmcs work, not just openbmc"
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Say like for our EPOW3 section, the EPOW3 temp is 50, and the EPOW3 temp reset is 45.  So when the temperature is increasing, the EPOW3 handler doesn't do anything at all until it hits 50, then we'll stay in 'EPOW3' until it cools off past 45.\n\nI may be misunderstanding what 'lower critical' means, since isn't it the case that if I set lower critical to 45 then any temp under 45 is also critical?  How would I set up the existing interface to get the behavior I mentioned above?"
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Say like for our EPOW3 section, the EPOW3 temp is 50, and the EPOW3 temp reset is 45.  So when the temperature is increasing, the EPOW3 handler doesn't do anything at all until it hits 50, then we'll stay in 'EPOW3' until it cools off past 45.\n> \n> I may be misunderstanding what 'lower critical' means, since isn't it the case that if I set lower critical to 45 then any temp under 45 is also critical?  How would I set up the existing interface to get the behavior I mentioned above?\n\nSomething like:\n\n{\n    \"Address\": \"0x4B\",\n    \"Bus\": 6,\n    \"Name\": \"IntakeAirTemp\",\n    \"Thresholds\": [\n        {\n            \"Direction\": \"greater than\",\n            \"Name\": \"upper critical\",\n            \"Severity\": 1,\n            \"Value\": 50\n        },\n        {\n            \"Direction\": \"greater than\",\n            \"Name\": \"upper non critical\",\n            \"Severity\": 0,\n            \"Value\": 45\n        },\n        {\n            \"Direction\": \"less than\",\n            \"Name\": \"lower non critical\",\n            \"Severity\": 0,\n            \"Value\": 5\n        },\n        {\n            \"Direction\": \"less than\",\n            \"Name\": \"lower critical\",\n            \"Severity\": 1,\n            \"Value\": 0\n        }\n    ],\n    \"Type\": \"TMP75\"\n},\n\nThen another exposes section with:\n\n{\n    \"Name\": \"Chassis Host Monitor\",\n    \"SensorsToWatch\": [\n        {\n            \"Name\": \"IntakeAirTemp\",\n            \"Hysteresis\": 5\n            // Maybe add a severity field here? or can we just assume to use all severity 1 events?  Probably worth discussion.\n        }\n    ],\n    \"Type\": \"HostShutdownMonitor\"\n},\n\n\nDepending on your use cases, the second exposes might need some modifications/extended actions that can be set.  We also might discuss if hysteresis is better added to the thresholds, moving it out of the reactors control, but thusfar, sensors tend to be very regular, and all sensors of a given type seem to have the same, or a calculable hysteresis that's reasonable."
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I am actually using phosphor-virtual-sensors to put a virtual ambient temperature sensor on dbus that is basically the median of a handful of other regular temp sensors, so dbus-sensors will not be involved with   reading these thresholds or setting the Alarm properties.\n\nI was then going to put this proposed JSON on our chassis, and have another application, probably over in phosphor-fan or phosphor-power, watch that virtual sensor and compare it to these values, and then do IBM's requirements of PLDM alerts, notifying the OCC, creating phosphor event logs, shutting down after 2 different timeouts (EPOW3 and EPOW4), etc."
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I am actually using phosphor-virtual-sensors to put a virtual ambient temperature sensor on dbus that is basically the median of a handful of other regular temp sensors, so dbus-sensors will not be involved with   reading these thresholds or setting the Alarm properties.\n> \n> I was then going to put this proposed JSON on our chassis, and have another application, probably over in phosphor-fan or phosphor-power, watch that virtual sensor and compare it to these values, and then do IBM's requirements of PLDM alerts, notifying the OCC, creating phosphor event logs, shutting down after 2 different timeouts (EPOW3 and EPOW4), etc.\n\n\nAh, your problem makes a lot more sense now.  Sounds like phosphor-virtual-sensors needs EM support then.  It should be noted, I commented about this in the phosphor-virtual-sensors design review, to which the author said that it was designed for non-EM subscribers.  Which, fine by me, but it sounds like you're trying to do both.\n\nIMO, if you're going to combine phosphor-virtual-sensors with entity-manager, that's a much bigger discussion about \"static\" stacks, versus dynamic stacks, and we likely need to figure out where phosphor-virtual-sensor fits in cleanly (if at all).\n\nI'd be against referencing any sensor name in a config that didn't have an associated entity-manager name, because it largely defeats the self-contained-config-file purpose of entity-manager to do so.  If you wanted to make phosphor-virtual-sensors entity-manager aware, that'd probably be your path forward for something like that, although I realize that's a much bigger discussion than you were likely hoping for."
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I can send a note to the list regarding virtual-sensors being able to read its config from entity-manager.\n\nThat leaves me with still needing some new threshold support that virtual sensors would make use of:\n\n1) Having 4 threshold levels/severities instead of just two\n2) Hysteresis\n\nWhat would you think of adding a new 'hysteresis' property to the existing threshold interfaces (and the new ones if you agree to those) and just default it to 0.  Support can then be added into dbus-sensors and phoshpor-hwmon later in the future if someone needs it there.\n\nI believe I would still need an IBMAmbientTemp schema to hold things like which power off delays to use for which thresholds."
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 167,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I can send a note to the list regarding virtual-sensors being able to read its config from entity-manager.\n> \n> That leaves me with still needing some new threshold support that virtual sensors would make use of:\n> \n> 1) Having 4 threshold levels/severities instead of just two\n\nI think the current severity definition is just an int.  There might be changes to the consuming software to set it appropriately, but I think the config definition gets you what you need.\n\n> 2) Hysteresis\n\nMore pointedly, hysteresis that's configurable by the user.  Is there a reason that the defaults won't work in most cases?  We have threshold hysteresis today, but it's not configurable, and it seems to be correct for most use cases.\n\n> \n> What would you think of adding a new 'hysteresis' property to the existing threshold interfaces (and the new ones if you agree to those) and just default it to 0.\n\nPlease default it to something that allows the sensor to define it so we don't break all the existing configs.  Maybe 0 makes sense as an \"implementation defined\" value, but lets make sure we document it that way.\n\n>  Support can then be added into dbus-sensors and phoshpor-hwmon later in the future if someone needs it there.\n\nHow would you implement this without dbus-sensors?  I don't think phosphor-hwmon supports EM yet, so no worries there.  I would assume sensors would need to be aware of their threshold hysteresis to assert and deassert them appropriately.\n\n> \n> I believe I would still need an IBMAmbientTemp schema to hold things like which power off delays to use for which thresholds.\n\nI don't see anything ibm specific, and there's someone on the mailing list asking about doing exactly the same thing.  I'd rather this just be a generic, non-IBM thing, unless there's something IBM specific about shutting down when overtemp?"
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 199,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How is the EPOW3 temperature different than the PerfLoss->TempReset temperature?"
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 199,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "The perfLoss one is when our OCC starts throttling things, and that happens before it gets into EPOW conditions, which is where our operating systems are told about the alert and the impending shutdown."
                },
                {
                    "file": "schemas/IBM.json",
                    "line": 199,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "lets close on the other item first.  Considering the existing schemas can define as many thresholds as we need, I'm not really following why we need more."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "schemas/IBM.json",
                    "type": "MODIFIED",
                    "insertions": 136,
                    "deletions": 0
                },
                {
                    "file": "schemas/global.json",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 139,
            "sizeDeletions": 0
        }
    ]
}