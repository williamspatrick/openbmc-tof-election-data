{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "topic": "intel-ppin",
    "id": "I233931ac640338e8f50f37ba4cc7298c7a0db9bf",
    "number": 41054,
    "subject": "Expose Processor PPIN property",
    "owner": {
        "name": "Jonathan Doman",
        "email": "jonathan.doman@intel.com",
        "username": "jonathan-doman"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/41054",
    "commitMessage": "Expose Processor PPIN property\n\nSome Processors may support exposing a globally unique identifier in\naddition to a serial number. Redfish supports this via\nProcessorId.ProtectedIdentificationNumber property. (\"Protected\"\nindicates it may be a sensitive value due to tracking/privacy concerns -\nIntel CPUs allow the customer to mask the PPIN so it can't be exposed.)\n\ncpuinfoapp in smbios-mdr repo is currently implementing this interface.\n\nTested:\n- New property is shown (only for cpus with valid PPIN)\n- Passed Redfish Service Validator with no errors.\n\nSigned-off-by: Jonathan Doman <jonathan.doman@intel.com>\nChange-Id: I233931ac640338e8f50f37ba4cc7298c7a0db9bf\n",
    "createdOn": 1614826783,
    "lastUpdated": 1624471357,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1614826783,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1614826796,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614826817,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Topic set to intel-ppin"
        },
        {
            "timestamp": 1614827720,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13292/ : SUCCESS"
        },
        {
            "timestamp": 1614829800,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1615860316,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1615860341,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1615861277,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13812/ : SUCCESS"
        },
        {
            "timestamp": 1620667475,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 2:\n\n(3 comments)\n\nI know still a WIP.."
        },
        {
            "timestamp": 1620667480,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1620687553,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1620687569,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620687595,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/16976/ : FAILURE"
        },
        {
            "timestamp": 1620687733,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1620687754,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620687928,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 4:\n\n(3 comments)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1620688177,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/16977/ : SUCCESS"
        },
        {
            "timestamp": 1620688206,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1620752046,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1620755253,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 5: Commit message was updated."
        },
        {
            "timestamp": 1620755322,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1623118546,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1623118571,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623118984,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/18891/ : SUCCESS"
        },
        {
            "timestamp": 1623119130,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1623264101,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1623264133,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\nGunnar pointed out this is our first use of getProperty.  In terms of code, I don't have an issue with it, but I'd like to have an understanding of what it does to our binary size in comparison to the old way, so we can be sure that this pattern scales to all the handlers.  Ideally this would've been done as part of porting some old handlers over to the new call, but this example is simple enough that I'm ok if we want to A/B test on this one."
        },
        {
            "timestamp": 1623348369,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 6:\n\n> Patch Set 6:\n> \n> Gunnar pointed out this is our first use of getProperty.  In terms of code, I don't have an issue with it, but I'd like to have an understanding of what it does to our binary size in comparison to the old way, so we can be sure that this pattern scales to all the handlers.  Ideally this would've been done as part of porting some old handlers over to the new call, but this example is simple enough that I'm ok if we want to A/B test on this one.\n\nI'm not sure how to best compare sizes, but here what I found with a minsize build:\n\n* sdbusplus::asio::getProperty as used in PS6: 2710276 B\n* async_method_call following the pattern from getCpuLocationCode(): 2706180 B\n\nIt's exactly 4kB bigger, so I assume that's just page rounding and may only be a few bytes more. I think we would want to try converting many instances to see how the size changes in aggregate."
        },
        {
            "timestamp": 1623352263,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n> Patch Set 6:\n> \n> > Patch Set 6:\n> > \n> > Gunnar pointed out this is our first use of getProperty.  In terms of code, I don't have an issue with it, but I'd like to have an understanding of what it does to our binary size in comparison to the old way, so we can be sure that this pattern scales to all the handlers.  Ideally this would've been done as part of porting some old handlers over to the new call, but this example is simple enough that I'm ok if we want to A/B test on this one.\n> \n> I'm not sure how to best compare sizes, but here what I found with a minsize build:\n> \n> * sdbusplus::asio::getProperty as used in PS6: 2710276 B\n> * async_method_call following the pattern from getCpuLocationCode(): 2706180 B\n> \n> It's exactly 4kB bigger, so I assume that's just page rounding and may only be a few bytes more. I think we would want to try converting many instances to see how the size changes in aggregate.\n\ngzip -c \"$BBPATH/tmp/work/s7106-openbmc-linux-gnueabi/obmc-phosphor-image/1.0-r0/rootfs/usr/bin/bmcweb\" | wc -c\n\nIs the command I generally use (adjust the s7106 for whatever your platform is).  Build the image with one change, then build with the other, and it'll give you numbers for each, and avoid the whole \"pages get allocated in 4k blocks\" issue that you're seeing.  This tends to be a pretty good comparison.\n\nI'm a little worried that the getProperty seems to be bigger, but lets get the real numbers, maybe it's small enough that it doesn't matter."
        },
        {
            "timestamp": 1623359171,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 6:\n\n> Patch Set 6:\n> \n> > Patch Set 6:\n> > \n> > > Patch Set 6:\n> > > \n> > > Gunnar pointed out this is our first use of getProperty.  In terms of code, I don't have an issue with it, but I'd like to have an understanding of what it does to our binary size in comparison to the old way, so we can be sure that this pattern scales to all the handlers.  Ideally this would've been done as part of porting some old handlers over to the new call, but this example is simple enough that I'm ok if we want to A/B test on this one.\n> > \n> > I'm not sure how to best compare sizes, but here what I found with a minsize build:\n> > \n> > * sdbusplus::asio::getProperty as used in PS6: 2710276 B\n> > * async_method_call following the pattern from getCpuLocationCode(): 2706180 B\n> > \n> > It's exactly 4kB bigger, so I assume that's just page rounding and may only be a few bytes more. I think we would want to try converting many instances to see how the size changes in aggregate.\n> \n> gzip -c \"$BBPATH/tmp/work/s7106-openbmc-linux-gnueabi/obmc-phosphor-image/1.0-r0/rootfs/usr/bin/bmcweb\" | wc -c\n> \n> Is the command I generally use (adjust the s7106 for whatever your platform is).  Build the image with one change, then build with the other, and it'll give you numbers for each, and avoid the whole \"pages get allocated in 4k blocks\" issue that you're seeing.  This tends to be a pretty good comparison.\n> \n> I'm a little worried that the getProperty seems to be bigger, but lets get the real numbers, maybe it's small enough that it doesn't matter.\n\nWell, I guess it doesn't look too great on the compressed sizes either:\n\n1. Implement getCpuUniqueId() using async_method_call following the pattern from getCpuLocationCode(): 1144112 B\n2. Implement getCpuUniqueId() using getProperty: 1144980\n3. #2 + convert 4 other std::string D-Bus gets to hopefully amortize new function call: 1147674\n\nSo using getProperty seems to increase compiled size by some kilobytes. Surprised me but there it is. Should I write out the code instead of using the helper?"
        },
        {
            "timestamp": 1623360115,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n> Patch Set 6:\n> \n> > Patch Set 6:\n> > \n> > > Patch Set 6:\n> > > \n> > > > Patch Set 6:\n> > > > \n> > > > Gunnar pointed out this is our first use of getProperty.  In terms of code, I don't have an issue with it, but I'd like to have an understanding of what it does to our binary size in comparison to the old way, so we can be sure that this pattern scales to all the handlers.  Ideally this would've been done as part of porting some old handlers over to the new call, but this example is simple enough that I'm ok if we want to A/B test on this one.\n> > > \n> > > I'm not sure how to best compare sizes, but here what I found with a minsize build:\n> > > \n> > > * sdbusplus::asio::getProperty as used in PS6: 2710276 B\n> > > * async_method_call following the pattern from getCpuLocationCode(): 2706180 B\n> > > \n> > > It's exactly 4kB bigger, so I assume that's just page rounding and may only be a few bytes more. I think we would want to try converting many instances to see how the size changes in aggregate.\n> > \n> > gzip -c \"$BBPATH/tmp/work/s7106-openbmc-linux-gnueabi/obmc-phosphor-image/1.0-r0/rootfs/usr/bin/bmcweb\" | wc -c\n> > \n> > Is the command I generally use (adjust the s7106 for whatever your platform is).  Build the image with one change, then build with the other, and it'll give you numbers for each, and avoid the whole \"pages get allocated in 4k blocks\" issue that you're seeing.  This tends to be a pretty good comparison.\n> > \n> > I'm a little worried that the getProperty seems to be bigger, but lets get the real numbers, maybe it's small enough that it doesn't matter.\n> \n> Well, I guess it doesn't look too great on the compressed sizes either:\n> \n> 1. Implement getCpuUniqueId() using async_method_call following the pattern from getCpuLocationCode(): 1144112 B\n> 2. Implement getCpuUniqueId() using getProperty: 1144980\n> 3. #2 + convert 4 other std::string D-Bus gets to hopefully amortize new function call: 1147674\n> \n> So using getProperty seems to increase compiled size by some kilobytes. Surprised me but there it is. Should I write out the code instead of using the helper?\n\nOne thing to double check is whether or not the size keeps scaling per use.  For example, if we replaced 10 of these with getProperties calls, does that mean 10 * 868 bytes get added?  Or is the per-use cost significantly smaller than the fixed cost for the first one?  If we pay the cost once, and the incremental per-use cost is still relatively low, I suspect this is something we could still tolerate.  If this hit is per-call, and we have 100 calls in bmcweb (making up numbers for a second) then this is going to take 10% of the binary size, and that's not going to fly.\n\nIf your goal is to get this code merged quickly, I suspect we could write this out the \"old\" way and get it merged in short order.  If you're wanting to use this new pattern in bmcweb or are interested in trying to make it a drop-in, size equivalent mechanism we could use to save some code size, I'm all for it, but we need to do some more research there.\n\nNeither of the options are mutually exclusive."
        },
        {
            "timestamp": 1623441223,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1623441239,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623441652,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/19530/ : SUCCESS"
        },
        {
            "timestamp": 1623442389,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 7:\n\n> Patch Set 6:\n> One thing to double check is whether or not the size keeps scaling per use.  For example, if we replaced 10 of these with getProperties calls, does that mean 10 * 868 bytes get added?  Or is the per-use cost significantly smaller than the fixed cost for the first one?  If we pay the cost once, and the incremental per-use cost is still relatively low, I suspect this is something we could still tolerate.  If this hit is per-call, and we have 100 calls in bmcweb (making up numbers for a second) then this is going to take 10% of the binary size, and that's not going to fly.\n> \n> If your goal is to get this code merged quickly, I suspect we could write this out the \"old\" way and get it merged in short order.  If you're wanting to use this new pattern in bmcweb or are interested in trying to make it a drop-in, size equivalent mechanism we could use to save some code size, I'm all for it, but we need to do some more research there.\n> \n> Neither of the options are mutually exclusive.\n\nI went ahead and converted everything in redfish-core/ to use getProperty(). The size increase did seem to level off - see here: https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44019."
        },
        {
            "timestamp": 1623806387,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1623806403,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623806405,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 9: Patch Set 8 was rebased."
        },
        {
            "timestamp": 1623806423,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623806426,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/19817/ : ABORTED"
        },
        {
            "timestamp": 1623806462,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 9:\n\nI want to get it merged in short order - reverted back to old style.\n\nWe can discuss the merits of getProperty on the other WIP patch."
        },
        {
            "timestamp": 1623806847,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/19818/ : SUCCESS"
        },
        {
            "timestamp": 1623888687,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9: Code-Review+1\n\nLGTM."
        },
        {
            "timestamp": 1624319480,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1624324051,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1624324880,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 9: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1624471308,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 9: Code-Review+2"
        },
        {
            "timestamp": 1624471357,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Change has been successfully rebased and submitted as 49e429ca172365bd4ba16c924501321c73527cbe by Gunnar Mills"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "395de301821c58ae09434a0951c5b13b61b45e6d",
            "parents": [
                "feaf15005555a3099c7f22a7e3d16c99ccb40e72"
            ],
            "ref": "refs/changes/54/41054/1",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1614826783,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -13
                }
            ],
            "sizeInsertions": 30,
            "sizeDeletions": 13
        },
        {
            "number": 2,
            "revision": "58d026108cf4321074a9f3a22fb0d14e7e41a396",
            "parents": [
                "feaf15005555a3099c7f22a7e3d16c99ccb40e72"
            ],
            "ref": "refs/changes/54/41054/2",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1615860316,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 627,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Check ec?"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 627,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "This should not be nullptr, can we follow like getCpuLocationCode and set internalError if nullptr. \n\nE.g. \n\n            if (ec)\n            {\n                BMCWEB_LOG_DEBUG << \"DBUS response error\";\n                messages::internalError(aResp->res);\n                return;\n            }\n            const std::string* value = std::get_if<std::string>(&property);\n            if (value == nullptr)\n            {\n                // illegal value\n                BMCWEB_LOG_DEBUG << \"Location code value error\";\n                messages::internalError(aResp->res);\n                return;\n            }\n                aResp->res\n                    .jsonValue[\"ProcessorId\"][\"ProtectedIdentificationNumber\"] =\n                *value;"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "We typically don't check for empty. Is there a reason this would be empty?\n\nSee https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38044"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done, using sdbusplus utility"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "I have so far always checked for empty value for the same reason as that commit - the service validator complains. Personally, I think that's what we should do. But since this interface only has 1 property, there's no value to checking so I removed it."
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Actually, I guess I replied too soon. Non-populated CPUs will have an empty UniqueIdentifier on D-Bus and therefore creates a warning in the Redfish validator. I would rather filter out the empty strings, but ok."
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Actually, I guess I replied too soon. Non-populated CPUs will have an empty UniqueIdentifier on D-Bus and therefore creates a warning in the Redfish validator. I would rather filter out the empty strings, but ok.\n\nWarnings are generally ok to have, but shouldn't really appear on production systems where you have everything populated.  If the CPU sensors are publishing an interface that it's not filling, then it isn't really meeting its interface gaurantees, and probably needs fixed.\n\nbmcweb should not be making decisions about when/how data is valid, as that logic tends to be complex and system specific."
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 628,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Ok, agreed, I have fixed the backend to not publish the UniqueIdentifier interface if it doesn't exist."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "f05655255844021f56aeb1374393fa830d3d1fb2",
            "parents": [
                "ffed87b5ad1797ca966d030e7f97977028d258fa"
            ],
            "ref": "refs/changes/54/41054/3",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1620687553,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 38,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 38,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "93c9c5ea3533b663e549c6333c29a9d5dca60b7a",
            "parents": [
                "ffed87b5ad1797ca966d030e7f97977028d258fa"
            ],
            "ref": "refs/changes/54/41054/4",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1620687733,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 37,
            "sizeDeletions": 2
        },
        {
            "number": 5,
            "revision": "39f26fd4a2f39a3eccc88237e545de1be1f2195c",
            "parents": [
                "ffed87b5ad1797ca966d030e7f97977028d258fa"
            ],
            "ref": "refs/changes/54/41054/5",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1620755253,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 37,
            "sizeDeletions": 2
        },
        {
            "number": 6,
            "revision": "19cd00255a6974d376112579bb716b4e29c22306",
            "parents": [
                "90e97e1d26b78d899a543831a8051dacbbdde71a"
            ],
            "ref": "refs/changes/54/41054/6",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1623118546,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 629,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "This is our first sdbusplus::asio::getProperty. \nEd asked for some binary size info. Is that something you could get?\n\nFrom discord today (6/9/21)\nGunnarM\n \u2014 \nToday at 12:36 PM\n@edtanous Are you wanting to move to sdbusplus::asio::getProperty vs crow::connections::systemBus->async_method_call ? E.g. https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/41054/6/redfish-core/lib/processor.hpp#630\nvs https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43437/4/redfish-core/lib/chassis.hpp\nedtanous\n \u2014 \nToday at 12:37 PM\nOh.... I didn't really even process that's what was going on.\nAs it's currently written, I don't have a problem with getProperty\nGunnarM\n \u2014 \nToday at 12:37 PM\nIt is our first one.\nedtanous\n \u2014 \nToday at 12:37 PM\nyeah.... I forgot that\nGunnarM\n \u2014 \nToday at 12:37 PM\nIs that the preferred way now? \nIt is less code.\nedtanous\n \u2014 \nToday at 12:38 PM\nI want to see what it does to the binary size.  If it's comparable to the \"old\" way, I'm for it for the specific cases where we grab one property\nbecause as you say, it is less code\nGunnarM\n \u2014 \nToday at 12:39 PM\nIs that on the author to test that?\nedtanous\n \u2014 \nToday at 12:39 PM\nif they want to be the first usage, I think so.  For the possible cleanups it could provide it's worth to me that I can also add it to my neverending list"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 632,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As an interface, it's unfortunate that we didn't call this \"value\" or something to not duplicate the \"UniqueIdentifier\" name.  Oh well, not worth changing at this point."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 37,
            "sizeDeletions": 2
        },
        {
            "number": 7,
            "revision": "e1f020b6292713d7db7d833af868b15efeb574e6",
            "parents": [
                "0588a3b929b2a88784db2f3dcac04d69260fb585"
            ],
            "ref": "refs/changes/54/41054/7",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1623441223,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 37,
            "sizeDeletions": 2
        },
        {
            "number": 8,
            "revision": "fab52b0547ee6e507127052833dca31261b125cd",
            "parents": [
                "0588a3b929b2a88784db2f3dcac04d69260fb585"
            ],
            "ref": "refs/changes/54/41054/8",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1623806387,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 40,
            "sizeDeletions": 2
        },
        {
            "number": 9,
            "revision": "e0d7b0af225483b7244d3df726104db06eaabe3d",
            "parents": [
                "432a890cfca335e565b770b1604ed4e547c5a732"
            ],
            "ref": "refs/changes/54/41054/9",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1623806405,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 670,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: I don't think it makes a huge difference, but is there a particular reason why ec is not tested first before attempting to parse property?"
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 670,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Yes, to save having a second error message block, and the few bytes that takes up. Haha, if you read this whole review we were discussing binary size so I guess that was on my mind when I wrote this. But there is no downside to this pattern that I can see."
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "line": 670,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Right, binary size vs minimal runtime increase for error condition - creation of the static variable and function call"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 40,
            "sizeDeletions": 2
        },
        {
            "number": 10,
            "revision": "49e429ca172365bd4ba16c924501321c73527cbe",
            "parents": [
                "2205bbf681bfac508a9e985b9581ce9d662db4df"
            ],
            "ref": "refs/changes/54/41054/10",
            "uploader": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "createdOn": 1624471357,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/processor.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 40,
            "sizeDeletions": 2
        }
    ]
}