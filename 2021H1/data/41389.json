{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "If787364761647088174cb72006727ee4e1d9225f",
    "number": 41389,
    "subject": "HwmonTempSensor: Thresholds for multi-temp devices",
    "owner": {
        "name": "Matt Spinler",
        "email": "spinler@us.ibm.com",
        "username": "spinler"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/41389",
    "commitMessage": "HwmonTempSensor: Thresholds for multi-temp devices\n\nThis commit adds support to be able to create the Threshold interfaces\nfor the additional temperature sensors on multi-sensor devices.\nPreviously, there could only be a threshold on the first sensor on\nthe device.  In some sensors, such as the TMP401 family, the remote\nsensors which can be wired to other devices are the temp2+_input\nvalues and it's likely those remote values are the interesting ones,\nas opposed to just the local temp in temp1_input.\n\nTo specify thresholds for multiple sensors on the device, the 'Index'\nproperty is added to the entity-manager JSON for the sensor.  When the\nindex is present, code matches that threshold entry with the sensor that\nhas an input file with that index number in the tempX prefix.  For\nexample, Index = 2 would be used for the sensor that has temp2_input as\nthe sensor value file.\n\nExample JSON is:\n\n    {\n        \"Index\": 1 // This threshold is for the temp1_input sensor\n        \"Direction\": \"greater than\",\n        \"Name\": \"upper critical\",\n        \"Severity\": 1,\n        \"Value\": 70,\n    },\n    {\n        \"Index\": 2 // This threshold is for the temp2_input sensor\n        \"Direction\": \"greater than\",\n        \"Name\": \"upper critical\",\n        \"Severity\": 1,\n        \"Value\": 80,\n    }\n\nIf 'Index' is not present in the threshold data from entity-manager,\nthen just the first sensor will get the threshold, the same as before.\n\nTested:\nMade sensors for a TMP423 which provides 4 temperature values.  Verified\nthresholds showed up on each sensor when 'Index' was used.  Verified\nwhen less then 4 thresholds were specified that they were placed\nappropriately.  Also used just a single Threshold entry with no Index\nvalue and verified the threshold just showed up on the first sensor.\n\nSigned-off-by: Matt Spinler <spinler@us.ibm.com>\nChange-Id: If787364761647088174cb72006727ee4e1d9225f\n",
    "createdOn": 1616012416,
    "lastUpdated": 1620658337,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1616012416,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1616012429,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616012656,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13939/ : SUCCESS"
        },
        {
            "timestamp": 1616012961,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 2: Commit message was updated."
        },
        {
            "timestamp": 1616134695,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1616176803,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1616426786,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1616431643,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)\n\nOverall direction seems good to me, would like to see fewer \"hwmon-isms\" in the config file, but it's no worse than PSU sensor, which has been on my list to clean up for a while now."
        },
        {
            "timestamp": 1616437164,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1616437209,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1616438068,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1616449833,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1616449833,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1616449845,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616450101,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14153/ : SUCCESS"
        },
        {
            "timestamp": 1616526658,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1616565350,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1616592537,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1616608154,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1616613189,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1617112657,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1617131715,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1617873224,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 3: Code-Review+1\n\nTested on the LM95234 sensor on the AMD EthanolX CRB"
        },
        {
            "timestamp": 1620060445,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)\n\nSome minor mods to simplify this, then it should be good."
        },
        {
            "timestamp": 1620067952,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1620078593,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1620078606,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620078638,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1620079132,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/16604/ : FAILURE"
        },
        {
            "timestamp": 1620079334,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1620240879,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1620240904,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620241023,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/16716/ : SUCCESS"
        },
        {
            "timestamp": 1620245512,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1620246717,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1620251031,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1620252994,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1620253264,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1620326946,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1620326946,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1620326961,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620327077,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1620327080,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/16822/ : SUCCESS"
        },
        {
            "timestamp": 1620414562,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1620657548,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1620657559,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620657685,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/16938/ : SUCCESS"
        },
        {
            "timestamp": 1620658335,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7: Code-Review+2"
        },
        {
            "timestamp": 1620658337,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as 5636d52baad683fbb51447a716d66cb06959e52f by Ed Tanous"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "513e6988c0ecd9ee73f79c0a930b8e4b6f927962",
            "parents": [
                "d05867c0d32065d36b13bd452f7aff9dcb20ac2f"
            ],
            "ref": "refs/changes/89/41389/1",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1616012416,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -3
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 56,
            "sizeDeletions": 3
        },
        {
            "number": 2,
            "revision": "ad156bb7e879f01a306cd6095f094455c89855aa",
            "parents": [
                "d05867c0d32065d36b13bd452f7aff9dcb20ac2f"
            ],
            "ref": "refs/changes/89/41389/2",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1616012961,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "My only concern here is that we're putting hwmon specific terminology into the config file, which is supposed to stand alone from hwmon.  I realize that PSUsensor kind of broke this design point, but it's been on my list to fix for a while now.\n\nI'd say we should probably replace this with an integer, something like \"Index\", similar to how FanSensor maps tacho indexes into this file.  That keeps the linux-specific bits out of the config file, making it more self-describing.\n\n\nAlso, rather than this, I wonder if we should just have two completely disparate config spaces, something like.\n\n\nThresholds1: [\n   ....\n]\n\nThresholds2: [\n   ....\n]\n\nTo keep the internals somewhat the same, and make it more clear that those are the thresholds for the other sensor.  At this point I'm thinking out loud a little."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "When entity-manager converts the JSON to D-Bus, it's already adding numbers to the threshold interface names, like\nxyz.openbmc_project.Configuration.TMP75.Thresholds0.  I haven't looked at that area of entity-manager closely yet, but it could probably name the new interface something like ThresholdsX-Y, where X is taken from the JSON as you have above and Y is the index it was in the array.\n\nThe schema would also have to be updated to allow the new names.  I haven't looked at json-schema details in a while but I imagine there's a way to have regular expressions for element names."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Code will match Label with \"tempX\". May want clarify what is accepted Label."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Could you elaborate?  I don't quite follow what you're requesting."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think she's pointing out that you should document what label names are expected here.  I suspect if we go to integer indexes, this problem goes away."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Ed is right, I meant to document clearly what are valid Labels. I like the idea of making it more generic, less tied to hwmon. Index would work."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I will proceed with using Index instead as recommended."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 47,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Is it using the above JSON example? What happens when there are only two labeled threshold, but there are actually 4 sensors?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 47,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "It would only put the thresholds on the two sensors, and still create the other two sensors without thresholds.  (parseThresholdsFromConfig just returns no threshold interfaces when a label is passed in but there isn't a match)"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 212,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Why is this hard-coded to `temp1`?"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 212,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "This is for the first sensor. Label is expected to use \"tempX\", where X is the sensor number.\nLine 282 is doing essentially the same"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 212,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "As Zhikui said, this code path is always for temp1.  It's also hardcoded on line 251 below."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 223,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Since only accepted Label is in \"tempX\" format, may want add expected label if any here."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 223,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "This function only fails if the value, direction, or severity wasn't found in the D-Bus configuration put out by entity-manager, so it doesn't involve the label value at all.  Would you still like me to add it?"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 223,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I see your point, it might be misleading if it failed for other reason. My main concern is to make it obvious and provide helpful information for ill-formatted configurations. Maybe if Index is used, it is less an issue."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 289,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Add expected label"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 289,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Same comment as above.  Would you still like me to add it?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Should this be moved to after line 139?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "My intent was to return false if Label was missing from any entry in the config, meaning that the code wouldn't look for Labels in that case when making threshold interfaces.  If the break was moved to 139, it would only check the first Thresholds entry it finds which is a slightly different behavior.\n\nI'm fine either way, since really that is a mistake in the config if it isn't on all of them. would you like me to move it?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> My intent was to return false if Label was missing from any entry in the config, meaning that the code wouldn't look for Labels in that case when making threshold interfaces.  If the break was moved to 139, it would only check the first Thresholds entry it finds which is a slightly different behavior.\n\nCould we instead have behavior where, if the Label isn't present, we assume temp1.  If the label is present, we use its index?  That seems like it would be more helpful, and would avoid cases where someone adds one threshold with a Label, and breaks another threshold that they never touched.\n\n> \n> I'm fine either way, since really that is a mistake in the config if it isn't on all of them.\n\nI'd like to see that avoided if possible.\n\n> would you like me to move it?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "+1 for Ed's suggestion. If Label/Index is used, all thresholds are required to have Label/Index including temp1_input, i.e. only Thresholds have Label/Index will be used and tempX_input without such thresholds defined will  not have Thresholds created for them. This should constrain the new or updated configs. But if no Label/Index is used, Threshold will be created for temp1_input only, rest of sensors will not have Thresholds. This should preserve current behavior."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "If I understand these comments, I think my code is giving this behavior.  This function just checks if every threshold has a label (soon to be index) so it can be used by other code."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I think there is a subtle difference.  If one threshold has Index=2, one does not have Index, the current implementation is to use the one without Index for temp1_input and Index=2 for temp2_input, others will not have threshold. My initial thought was that this configuration should be rejected because it is likely a mistake. \nBut I can be convinced that maybe what we want to support. If that is the case, the only remaining question in my mind is what should be the \"correct behavior\" when there are multiple thresholds defined without index and some with index. Sorry for nit-picking here,"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "My latest patch set will do:\n\ntemp1: \n* if all thresholds have Index, use index, otherwise look for threshold without index\n\ntemp1+n:\n* if all thresholds have Index, use index, otherwise don't even look for a threshold\n\nI guess ideally the JSON schema would enforce them all using Index, but I don't think how the current Thresholds array is structured that that is possible.\n\nI'm not sure what dbus-sensors could do if it notices missing Indexes.  Crash?  Print a warning?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I think the latest behavior is good. It clearly defines the accepted format. Hopefully, the rejected mal-formatted configs will get noticed with missing thresholds and messages being logged."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -3
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 56,
            "sizeDeletions": 3
        },
        {
            "number": 3,
            "revision": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
            "parents": [
                "d05867c0d32065d36b13bd452f7aff9dcb20ac2f"
            ],
            "ref": "refs/changes/89/41389/3",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1616449833,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I did not have too much background, but why no use the \"Label\" to specify the sensor? That is already support by Thresholds.cpp"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "That was what my first patch set did.  The feedback was that hwmon terms like 'hwmon1' were not wanted in the entity-manager JSON."
                },
                {
                    "file": "include/Thresholds.hpp",
                    "line": 157,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Can integer be used here?"
                },
                {
                    "file": "include/Thresholds.hpp",
                    "line": 157,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "hmm, I don't think I understand the question?  Are you asking if it matchIndex should be an integer or something else?"
                },
                {
                    "file": "include/Thresholds.hpp",
                    "line": 157,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "The code works as is. It is just a style question. raw integer pointer can be avoided with:   \nOption 1: const int matchIndex? If matchIndex is <= 0 , skip match index. (equivalent to nullptr)\nOption 2: use std::optional <int>, if nullopt, skip match index"
                },
                {
                    "file": "include/Thresholds.hpp",
                    "line": 157,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I was matching the style of the previous argument, which was also a pointer which defaulted to nullptr.  I agree though that probably a raw pointer isn't the best, but in this case it's probably more important to keep it consistent."
                },
                {
                    "file": "include/Thresholds.hpp",
                    "line": 157,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Is this OK how I have it?  Do you want me to change?"
                },
                {
                    "file": "include/Thresholds.hpp",
                    "line": 157,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I am ok with this implementation. Consistent is good."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not quite following why this is here.  Wouldn't we just assume that indexes that are unspcified are index 1?  Having different behavior if all the indexes are specified seems like it would be confusing."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I think I can remove this as you suggest and just assume that a Threshold JSON entry without an Index only applies to index 1."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is different than I would've expected.  Requiring taking an index at a higher scope seems odd;  I would've expected something like\n\nint index = 1;\nauto indexFind = item.second.find(\"Index\");\nif (indexFind != item.second.end()){\n  index = std::visit(VariantToIntVisitor(), indexFind->second);\n}\n\nif (index != matchIndex){\n    ....\n}\n\n\nThis removes the need for the matchIndex parameter to be optional.  Also, unless I'm missing something, it's not really a \"match\" index, it's a sensor index, maybe a better variable name like sensorIndex?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "The previous parameter, matchLabel, is pretty much the same thing done for the Label property, and is also optional so that only psusensor actually had a code change for it. That seemed like a reasonable way to proceed here as well (my code is very similar to the matchLabel block above).  There is like 15 total callers of this function, and most of which also don't pass in the matchLabel argument, so to me  it still makes sense to do the same here and keep matchIndex/sensorIndex defaulting to a nullptr.  Or, is there a better way to handle it that I missed?\n\n\nAs far as the code in this commit goes, I think I can  do as you suggest and always pass it in, and assume 1 if \"Index\" isn't found.\n\n\nI called it matchIndex to match the naming of the previous parameter, but will change it."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See above, I suspect this can be entirely removed."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 159,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Done."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -4
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 42,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 79,
            "sizeDeletions": 7
        },
        {
            "number": 4,
            "revision": "6986bb352751a5c5d8e61ff6e5ad8e8a7c633173",
            "parents": [
                "6b6891c52e550c42507d4b413cbc4c6a09235535"
            ],
            "ref": "refs/changes/89/41389/4",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1620078593,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/Thresholds.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "/home/jenkins-op/workspace/ci-repository/openbmc/dbus-sensors/build-clang/../src/Thresholds.cpp:94:13: error: do not use 'else' after 'continue' [readability-else-after-return,-warnings-as-errors]\n            else if (indexFind != item.second.end())"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -4
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 47,
            "sizeDeletions": 7
        },
        {
            "number": 5,
            "revision": "db17ed885ab5c62eec9b8a2dee040eadaca023e1",
            "parents": [
                "6b6891c52e550c42507d4b413cbc4c6a09235535"
            ],
            "ref": "refs/changes/89/41389/5",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1620240879,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 211,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Doesn't this duplicate reading of the threshold data between this and line 271?  The only place I see sensorThresholds used is on line 248, which seems like an odd fast path (that frankly, I need to run blame and figure out why it's there, and hardcoded to something crazy.)"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 211,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "This path only handles the temp1_input reading and creates the sensor out of it on 248.\n\nThe 271 call is in a loop that starts on line 255 and handles the temp2_, temp3, etc files.  Those sensors are created on 291."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 211,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "groan.... ok, that makes sense.  I don't like the duplication, but I don't see a clean way to avoid it.... well, I kind of do, but that's much bigger than your pathset.  This is fine as-is."
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 243,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "temp1 is hard coded here simply because it was hard coded before commit \nhttps://github.com/openbmc/dbus-sensors/commit/100c20bfcbb35413a137e00095e072c8ae8eb105#\n\nTaking a minute to look at the logic:\nIt looks like if there is a config for hwmontempsensor with just a name.. then just that name will be used to name the first temperature only.\nI suppose this was a convenience feature so that system engs don't have to do something like this\n\n            {\n                \"Name\": \"max6581_1\",\n                \"Name1\": \"max6581_1\",        \n                \"Type\": \"MAX6581\"\n            },"
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "line": 243,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "we don't need variantToIntVisitor here, as we don't really want to accept floating point values in this field;  We know that the value in the json will be an int64_t, so we'd normally do something like\n\nconst int64_t* index = indexFind->second.get_ptr<uint64_t>();\nif (index == nullptr){\n    continue;\n}\nif (*index != sensorIndex){\n    continue;\n}\n\n\nThis is a little nitpicky, but in the future I'd like to reduce our uses of variantToXvisitor, as it's a crutch to not properly defining and enforcing our config APIs.\n\n\n\nApologies, I should've caught this in the first round of comments."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -4
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 7
        },
        {
            "number": 6,
            "revision": "2b3123719f0d60a18409f091606882cf6c476bef",
            "parents": [
                "6b6891c52e550c42507d4b413cbc4c6a09235535"
            ],
            "ref": "refs/changes/89/41389/6",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1620326946,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/Thresholds.cpp",
                    "line": 97,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "It turned out I could only get a number out as a double.  uint64_t nor int worked.  The index() function on the variant returned 4, which is the position of the double in the variant definition."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 97,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm really sorry, I forgot what context I was in for a second (thought I was in entity-manager).  What you had previously with the visitor was correct.  Again, really sorry about that.\n\nI would like to reduce the usage of the visitors, but there' entity-manager work that needs to happen before that will work."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 103,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I wonder if I should have this as something unsigned instead."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -4
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 29,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 7
        },
        {
            "number": 7,
            "revision": "ab4737501c759b4c41b76eefa2c6112aead670e6",
            "parents": [
                "6b6891c52e550c42507d4b413cbc4c6a09235535"
            ],
            "ref": "refs/changes/89/41389/7",
            "uploader": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "createdOn": 1620657548,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -4
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 7
        },
        {
            "number": 8,
            "revision": "5636d52baad683fbb51447a716d66cb06959e52f",
            "parents": [
                "b89967ffa471f235ea3ab8608ddb6ed8ee687265"
            ],
            "ref": "refs/changes/89/41389/8",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1620658337,
            "author": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -4
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 7
        }
    ]
}