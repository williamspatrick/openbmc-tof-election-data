{
    "project": "openbmc/pldm",
    "branch": "master",
    "id": "Ia94f46f68318a3a98440991bd76bcf1f41c29641",
    "number": 48059,
    "subject": "Make Endpoint ID configurable",
    "owner": {
        "name": "ManojKiran Eda",
        "email": "manojkiran.eda@gmail.com",
        "username": "manojkiraneda"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/pldm/+/48059",
    "commitMessage": "Make Endpoint ID configurable\n\nIn the current state, pldm stack is hardcoded to have an\nEndpoint ID as 8. And the pldmtool code also assumes the\ndefault endpoint id value as 8 for all the pldmtool commands\nwhich is not correct, pldm being a generic code that can run\non any device/system, It should ideally be a configurable\nvalue which can be set by vendors via meta-* layer.\n\nTested :\n\n1. Terminus Locator PDR is constructed with right values\n{\n    \"nextRecordHandle\": 89,\n    \"responseCount\": 19,\n    \"recordHandle\": 88,\n    \"PDRHeaderVersion\": 1,\n    \"PDRType\": \"Terminus Locator PDR\",\n    \"recordChangeNumber\": 0,\n    \"dataLength\": 9,\n    \"PLDMTerminusHandle\": 1,\n    \"validity\": \"valid\",\n    \"TID\": 1,\n    \"containerID\": 0,\n    \"terminusLocatorType\": \"MCTP_EID\",\n    \"terminusLocatorValueSize\": 1,\n    \"EID\": 8\n}\n\n2. Host poweron was successful.\n\nSigned-off-by: Manojkiran Eda <manojkiran.eda@gmail.com>\nChange-Id: Ia94f46f68318a3a98440991bd76bcf1f41c29641\n",
    "createdOn": 1634899986,
    "lastUpdated": 1635390495,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1634899986,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1634899999,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1634900008,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-repository-ppc64le/3419/ (2/2)\n\nppc64le CI Build Started"
        },
        {
            "timestamp": 1634901611,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/28801/ : SUCCESS\n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-repository-ppc64le/3419/ : ppc64le CI Build Successful"
        },
        {
            "timestamp": 1634908614,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n(2 comments)\n\nThis has been done correctly from a meson POV.  But I can't tell if the configurability is worth the extra complexity or not."
        },
        {
            "timestamp": 1634911118,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1634911135,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1634911248,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-repository-ppc64le/3423/ (2/2)\n\nppc64le CI Build Started"
        },
        {
            "timestamp": 1634911307,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 2:\n\n(2 comments)\n\n> Patch Set 1:\n> \n> (2 comments)\n> \n> This has been done correctly from a meson POV.  But I can't tell if the configurability is worth the extra complexity or not.\n\nI understand your point brad,I can take this down if other maintainers share the similar opinion."
        },
        {
            "timestamp": 1634915812,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/28808/ : SUCCESS\n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-repository-ppc64le/3423/ : ppc64le CI Build Successful"
        },
        {
            "timestamp": 1634917589,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 2: Code-Review-1\n\nThis may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?"
        },
        {
            "timestamp": 1634948179,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2: Code-Review-1\n> \n> This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n\nI am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n\nand also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n\nI have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n\nAnd also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?"
        },
        {
            "timestamp": 1635134389,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2: Code-Review-1\n> > \n> > This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n> \n> I am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n> \n> and also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n> \n> I have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n> \n> And also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?\n\nThe concern is that the EID is an MCTP layer default. Can PLDM assume a value independently?"
        },
        {
            "timestamp": 1635137299,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > > Patch Set 2: Code-Review-1\n> > > \n> > > This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n> > \n> > I am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n> > \n> > and also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n> > \n> > I have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n> > \n> > And also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?\n> \n> The concern is that the EID is an MCTP layer default. Can PLDM assume a value independently?\n\nI think, we should be able to have a value independently, because those are two different stacks (with in openbmc), and mctp stack does not lie as a subproject within pldm. And also we have proper error codes that we should be getting from mctp when we are not in sync.\n\nPlease correct me if my understanding is wrong."
        },
        {
            "timestamp": 1635137766,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > > Patch Set 2:\n> > > \n> > > > Patch Set 2: Code-Review-1\n> > > > \n> > > > This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n> > > \n> > > I am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n> > > \n> > > and also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n> > > \n> > > I have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n> > > \n> > > And also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?\n> > \n> > The concern is that the EID is an MCTP layer default. Can PLDM assume a value independently?\n> \n> I think, we should be able to have a value independently, because those are two different stacks (with in openbmc), and mctp stack does not lie as a subproject within pldm. And also we have proper error codes that we should be getting from mctp when we are not in sync.\n> \n> Please correct me if my understanding is wrong.\n\nI think the configuration should to to MCTP and PLDM should pick up the static EID value for the BMC (if there is one) from an MCTP provided interface."
        },
        {
            "timestamp": 1635140322,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > > Patch Set 2:\n> > > \n> > > > Patch Set 2:\n> > > > \n> > > > > Patch Set 2: Code-Review-1\n> > > > > \n> > > > > This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n> > > > \n> > > > I am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n> > > > \n> > > > and also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n> > > > \n> > > > I have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n> > > > \n> > > > And also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?\n> > > \n> > > The concern is that the EID is an MCTP layer default. Can PLDM assume a value independently?\n> > \n> > I think, we should be able to have a value independently, because those are two different stacks (with in openbmc), and mctp stack does not lie as a subproject within pldm. And also we have proper error codes that we should be getting from mctp when we are not in sync.\n> > \n> > Please correct me if my understanding is wrong.\n> \n> I think the configuration should to to MCTP and PLDM should pick up the static EID value for the BMC (if there is one) from an MCTP provided interface.\n\nyou mean that mctp should have it as configurable value(by the user) and then pldm should be able get it via the dbus interface/property hosted by MCTP service as part of the PLDM InitializationAgent ? and how does that work when PLDM depends on other transports like NCSI ?"
        },
        {
            "timestamp": 1635229999,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > > Patch Set 2:\n> > > \n> > > > Patch Set 2:\n> > > > \n> > > > > Patch Set 2:\n> > > > > \n> > > > > > Patch Set 2: Code-Review-1\n> > > > > > \n> > > > > > This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n> > > > > \n> > > > > I am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n> > > > > \n> > > > > and also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n> > > > > \n> > > > > I have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n> > > > > \n> > > > > And also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?\n> > > > \n> > > > The concern is that the EID is an MCTP layer default. Can PLDM assume a value independently?\n> > > \n> > > I think, we should be able to have a value independently, because those are two different stacks (with in openbmc), and mctp stack does not lie as a subproject within pldm. And also we have proper error codes that we should be getting from mctp when we are not in sync.\n> > > \n> > > Please correct me if my understanding is wrong.\n> > \n> > I think the configuration should to to MCTP and PLDM should pick up the static EID value for the BMC (if there is one) from an MCTP provided interface.\n> \n> you mean that mctp should have it as configurable value(by the user) and then pldm should be able get it via the dbus interface/property hosted by MCTP service as part of the PLDM InitializationAgent ? and how does that work when PLDM depends on other transports like NCSI ?\n\nIt could work with the right PLDM transport abstraction (there is a design proposal for the same)."
        },
        {
            "timestamp": 1635389064,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > > Patch Set 2:\n> > > \n> > > > Patch Set 2:\n> > > > \n> > > > > Patch Set 2:\n> > > > > \n> > > > > > Patch Set 2:\n> > > > > > \n> > > > > > > Patch Set 2: Code-Review-1\n> > > > > > > \n> > > > > > > This may not work without an MCTP change. This needs to be relayed to MCTP demux daemon else the requester flow may break. Tom - can you also comment?\n> > > > > > \n> > > > > > I am not sure i understood it correct, yes mctp demux should also have the same local/remote endpoint ID to establish communication, but why would that stop this ?\n> > > > > > \n> > > > > > and also if pldm tries to communicate with an eid value that mctp does not know, i assume we will get an ERRNO(end point not connected ?) back from mctp when we try to send a PLDM message ?\n> > > > > > \n> > > > > > I have not changed the eid value, it is still set to 8 by default(in meson_options.txt) - Its just that i have removed the hardcoding in the code and made it as config variable with default value 8. so this should not break anything ?\n> > > > > > \n> > > > > > And also the registerRequest() API used in the requester flow would use the mctp_eid as input parameter, i believe that will be filled with 8 by default, so the requester flow should not break ?\n> > > > > \n> > > > > The concern is that the EID is an MCTP layer default. Can PLDM assume a value independently?\n> > > > \n> > > > I think, we should be able to have a value independently, because those are two different stacks (with in openbmc), and mctp stack does not lie as a subproject within pldm. And also we have proper error codes that we should be getting from mctp when we are not in sync.\n> > > > \n> > > > Please correct me if my understanding is wrong.\n> > > \n> > > I think the configuration should to to MCTP and PLDM should pick up the static EID value for the BMC (if there is one) from an MCTP provided interface.\n> > \n> > you mean that mctp should have it as configurable value(by the user) and then pldm should be able get it via the dbus interface/property hosted by MCTP service as part of the PLDM InitializationAgent ? and how does that work when PLDM depends on other transports like NCSI ?\n> \n> It could work with the right PLDM transport abstraction (there is a design proposal for the same).\n\nIdeally this should be catered as part of the transport layer abstraction where MCTP layer picks up the EIDs and PLDM daemon bridges the TID to the discovered EID."
        },
        {
            "timestamp": 1635389917,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 2:\n\nThanks every one for the review comments. I believe i understood the correct way of implementing this. I also found the design that talks about the transport layer abstraction(https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/47519), I can check that for more information to see how the EID can be obtained from the transport rather than by a blunt meson option.\n\nAppreciate your time."
        },
        {
            "timestamp": 1635390495,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Abandoned\n\nWrong patch , this should be changed based on the new design direction as per https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/47519"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "abc8db77bf25faaeb7b2bf1fb892cc88416a2b05",
            "parents": [
                "f4a7dd792dc0ab2222d101a8d806e52f86bffa72"
            ],
            "ref": "refs/changes/59/48059/1",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1634899986,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Why would a vendor want to do that?  I think it's important to document that here.  Configurable just for the sake of being configurable is not really a good thing because it makes the code more complicated and harder to understand."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "There are a couple of things that led me to come up with this commit :\n1. Hardcoding the value of 8 is probably working fine for now, but if other companies want to use this stack they should be able to set it based on their requirements.\n2. This is might be too hypothetical, but if there is a need for having multiple PLDM/MCTP end points with-in BMC itself, so there might be two pldm daemons that are running, in that case we would want this to be configurable."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 36,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "a nit for sure - but this just has one l"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 36,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "libpldmresponder/base.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "libpldmresponder/pdr.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -2
                },
                {
                    "file": "libpldmresponder/platform.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "libpldmresponder/test/libpldmresponder_platform_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "oem/ibm/libpldmresponder/platform_oem_ibm.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -3
                },
                {
                    "file": "pldmtool/README.md",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "pldmtool/pldm_cmd_helper.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "pldmtool/pldm_cmd_helper.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 12,
            "sizeDeletions": 13
        },
        {
            "number": 2,
            "revision": "01b4b8e120de699fe15ad8c68f45aba0ccdca5ae",
            "parents": [
                "f4a7dd792dc0ab2222d101a8d806e52f86bffa72"
            ],
            "ref": "refs/changes/59/48059/2",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1634911118,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "libpldmresponder/base.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "libpldmresponder/pdr.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -2
                },
                {
                    "file": "libpldmresponder/platform.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "libpldmresponder/test/libpldmresponder_platform_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "oem/ibm/libpldmresponder/platform_oem_ibm.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -3
                },
                {
                    "file": "pldmtool/README.md",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "pldmtool/pldm_cmd_helper.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "pldmtool/pldm_cmd_helper.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 12,
            "sizeDeletions": 13
        }
    ]
}