{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I91f8272c2d5a2a8a446d95799fe8a987db9755a6",
    "number": 39687,
    "subject": "interface to track and control hypervisor state",
    "owner": {
        "name": "Andrew Geissler",
        "email": "geissonator@yahoo.com",
        "username": "geissonator"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/39687",
    "commitMessage": "interface to track and control hypervisor state\n\nIBM has a need to provide hypervisor state and control to its users. The\nintention is to map this new interface to the outside world via the\nredfish/v1/Systems/hypervisor API.\n\nSigned-off-by: Andrew Geissler <geissonator@yahoo.com>\nChange-Id: I91f8272c2d5a2a8a446d95799fe8a987db9755a6\n",
    "createdOn": 1610571149,
    "lastUpdated": 1612802815,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1610571149,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1610571164,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610571466,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10919/ : SUCCESS"
        },
        {
            "timestamp": 1610638818,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1610642595,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611159856,
            "reviewer": {
                "name": "Klaus Heinrich Kiwi",
                "email": "klaus@klauskiwi.com",
                "username": "klauskiwi"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611162056,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611338131,
            "reviewer": {
                "name": "Klaus Heinrich Kiwi",
                "email": "klaus@klauskiwi.com",
                "username": "klauskiwi"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611347499,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611452839,
            "reviewer": {
                "username": "npiggin"
            },
            "message": "Patch Set 1:\n\nThe word hypervisor could be confusing to some. As Klaus said, the OPAL boot and runtime firmware is not called a hypervisor (nor is UEFI on other platforms). And on the other hand, many systems would have a \"type 2\" hypervisor like KVM in an operating system image, which I guess this is not intended to control.\n\nPerhaps the name could be changed to something like host firmware state? As far as I know \"firmware\" is understood to include PowerVM at least internally to IBM, is this something that end users would also understand? That would clearly distinguish it from other hypervisors in the system and also make it possibly usable by other kinds of firmware."
        },
        {
            "timestamp": 1611583574,
            "reviewer": {
                "name": "Klaus Heinrich Kiwi",
                "email": "klaus@klauskiwi.com",
                "username": "klauskiwi"
            },
            "message": "Patch Set 1:\n\n> \n> Perhaps the name could be changed to something like host firmware state? As far as I know \"firmware\" is understood to include PowerVM at least internally to IBM, is this something that end users would also understand? That would clearly distinguish it from other hypervisors in the system and also make it possibly usable by other kinds of firmware.\n+1 on that with a small comment: Perhaps something like \"Host platform software / firmware\" instead of just \"firmware\" would help make the distinction between BMC, Hostboot, OPAL / PowerVM and OS?"
        },
        {
            "timestamp": 1611588375,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\nInstead of adding a new interface for this, can we add another implementation (object) of the existing State.Host interface that does all the right things?\n\nI suspect we'll need to define some new errors - probably not supported since this \"Host\" will only support a small subset of the state management interfaces."
        },
        {
            "timestamp": 1611598729,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> Instead of adding a new interface for this, can we add another implementation (object) of the existing State.Host interface that does all the right things?\n> \n> I suspect we'll need to define some new errors - probably not supported since this \"Host\" will only support a small subset of the state management interfaces.\n\nYeah, I could definitely make that work. Like you said, I'd need a new error response to say unsupported, and I'd probably need to add a new state to the existing interface enum, like safe or standby. Redfish has a \"StandbyOffline\" state that would map well to it."
        },
        {
            "timestamp": 1611610464,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > Instead of adding a new interface for this, can we add another implementation (object) of the existing State.Host interface that does all the right things?\n> > \n> > I suspect we'll need to define some new errors - probably not supported since this \"Host\" will only support a small subset of the state management interfaces.\n> \n> Yeah, I could definitely make that work. Like you said, I'd need a new error response to say unsupported, and I'd probably need to add a new state to the existing interface enum, like safe or standby. Redfish has a \"StandbyOffline\" state that would map well to it.\n\nI put a series of commits up at https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/39986/1 for input on this alternative option."
        },
        {
            "timestamp": 1612802815,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Abandoned\n\nLooks like we're going to go with enhancing the existing host interface over in https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/39986"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "83199e58b0b28f8de6162c1406e5ce33be09c750",
            "parents": [
                "962f955868979f588c32a9cfe927ef66ad0b361c"
            ],
            "ref": "refs/changes/87/39687/1",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "createdOn": 1610571149,
            "author": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Are these properties of a Redfish schema (I can't seem to find them) or are they the states of the Power hypervisor?  It would be nice if we could get someone with some expertise in other hypervisors to help determine if these are relatively standard / safe states or if they are IBM/PowerVM-specific.  Can you get someone from the PowerKVM team to weigh in?"
                },
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "> Are these properties of a Redfish schema (I can't seem to find them) or are they the states of the Power hypervisor? \n\nThese have a pretty good correlation with the BootProgress states we got in recently (see BootProgressTypes in https://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_13_0.json)\n\nSystemHardwareInitializationComplete -> Safe\nOSRunning -> Runtime\n\nAnd a new one which I've proposed and has been approved in https://github.com/DMTF/Redfish/issues/4336\n(name may change but currently it is this)\nSystemFirmwareSetupEntered -> Setup\n\nFrom a \"how will we show this in Redfish\" perspective, we'll do something like we do with Systems/system in https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/systems.hpp#L616 (getHostState()), we'll translate them over to what make sense.\n\n> Can you get someone from the PowerKVM team to weigh in?\n\nSure, let me add Klaus. I think OPAL at least has the Safe/Runtime concept."
                },
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Klaus Heinrich Kiwi",
                        "email": "klaus@klauskiwi.com",
                        "username": "klauskiwi"
                    },
                    "message": "> > Can you get someone from the PowerKVM team to weigh in?\n> \n> Sure, let me add Klaus. I think OPAL at least has the Safe/Runtime concept.\nOPAL is not really an hypervisor per-se, it just boots Linux who then acts as an hypervisor.\n\nI'm not yet sufficiently acquainted with Redfish to review this properly, but I wanted to point out:\n\n1) In OPAL we do use \"IPMI override\" bootdev such as diag, safe, disk, network etc. When we are requested a \"safe\" boot we just don't probe the disks (this will usually stall boot unless you have prepared a static configuration on the nvram). Not sure if that maps cleanly to 'safe'.\n\n2) Also regarding IPMI, we reset the boot counter sensor on successful boot\n\n3) I'm not sure what I'd do with this information.. i.e., in OPAL mode, would we monitor this? What would we do if this signals a transition to Runtime? I don't have an \"Idle\" state other than powered off, or auto-boot cancelled/failed perhaps\n\n4) Feels strange that we allow transitions from None to Runtime but apparently not the other way around.. Again, for OPAL/Linux, this is probably analogous with poweron/poweroff"
                },
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Thanks for the feedback Klaus.\n\n> 3) I'm not sure what I'd do with this information.. i.e., in OPAL mode, would we monitor this? What would we do if this signals a transition to Runtime? I don't have an \"Idle\" state other than powered off, or auto-boot cancelled/failed perhaps\n\nI think this would be an indication to boot the default device and try to start the OS?\n\n> 4) Feels strange that we allow transitions from None to Runtime but apparently not the other way around.. Again, for OPAL/Linux, this is probably analogous with poweron/poweroff\n\nYeah, I don't think there's anything to stop us from allowing you go from Runtime to Safe but there doesn't seem to be any use case for it now. Like you said, in most cases you just do the normal power off path of the system from Runtime."
                },
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Klaus Heinrich Kiwi",
                        "email": "klaus@klauskiwi.com",
                        "username": "klauskiwi"
                    },
                    "message": "> Thanks for the feedback Klaus.\n> \n> > 3) I'm not sure what I'd do with this information.. i.e., in OPAL mode, would we monitor this? What would we do if this signals a transition to Runtime? I don't have an \"Idle\" state other than powered off, or auto-boot cancelled/failed perhaps\n> \n> I think this would be an indication to boot the default device and try to start the OS?\n\nSo does this means that it is expected some hypervisor action whenever this field transitions? I'm not sure we have any (easy) way of doing this from Skiroot / Petitboot, much less from Linux, but I'll point the Skiboot folks (Vasant, Mahesh) to this topic.\n\n\n> > 4) Feels strange that we allow transitions from None to Runtime but apparently not the other way around.. Again, for OPAL/Linux, this is probably analogous with poweron/poweroff\n> \n> Yeah, I don't think there's anything to stop us from allowing you go from Runtime to Safe but there doesn't seem to be any use case for it now. Like you said, in most cases you just do the normal power off path of the system from Runtime.\n\n\nExcluding the scenario where this transitions and some action is expected from the hypervisor (question above), I guess that for reporting this, the BMC could monitor our ipmi boot sensor and set this field to 'runtime' accordingly. Note that we don't have any redfish interfaces in OPAL, so that's probably the easiest / most straightforward path."
                },
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "line": 37,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "> So does this means that it is expected some hypervisor action whenever this field transitions? I'm not sure we have any (easy) way of doing this from Skiroot / Petitboot, much less from Linux, but I'll point the Skiboot folks (Vasant, Mahesh) to this topic.\n\nNot a requirement that it's implemented, just an option if we want it. The way this will work with PHYP is there is a PLDM effecter which the BMC will send up.\n\n> Excluding the scenario where this transitions and some action is expected from the hypervisor (question above), I guess that for reporting this, the BMC could monitor our ipmi boot sensor and set this field to 'runtime' accordingly. Note that we don't have any redfish interfaces in OPAL, so that's probably the easiest / most straightforward path.\n\nYes this is my plan, to watch the BootProgress sensor to know the appropriate hypervisor state to report. This sensor works with both IPMI and PLDM inband protocols."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/State/Hypervisor/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/State/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/State/Hypervisor.interface.yaml",
                    "type": "ADDED",
                    "insertions": 50,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 79,
            "sizeDeletions": 0
        }
    ]
}