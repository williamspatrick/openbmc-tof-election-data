{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "topic": "unixDumpOffload",
    "id": "I3a072d255660ee8657253430b5fadbf9a7a26b8e",
    "number": 38051,
    "subject": "Add Dump offload support using http dynamic response",
    "owner": {
        "name": "Ravi Teja",
        "email": "raviteja28031990@gmail.com",
        "username": "raviteja-b"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38051",
    "commitMessage": "Add Dump offload support using http dynamic response\n\nThis commit\n1.Enables dynamic response support\n2.Defines new bmcweb rule to support dump streaming.\n3.Implemented routes for bmc and system dump offload.\n\nTested By:\n1. BMC dump offload\n2. System dump offload\n\nSigned-off-by: Ravi Teja <raviteja28031990@gmail.com>\nChange-Id: I3a072d255660ee8657253430b5fadbf9a7a26b8e\n",
    "createdOn": 1604855777,
    "lastUpdated": 1627401748,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1604855777,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1604855791,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1604855814,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1604855891,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 2: Commit message was updated."
        },
        {
            "timestamp": 1604856224,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/7481/ : FAILURE"
        },
        {
            "timestamp": 1604912586,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1604912604,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1604913610,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7499/ : SUCCESS"
        },
        {
            "timestamp": 1605002746,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1605002758,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605003791,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7573/ : SUCCESS"
        },
        {
            "timestamp": 1605068931,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1605068944,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605069967,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7667/ : SUCCESS"
        },
        {
            "timestamp": 1605205707,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(2 comments)\n\nHello,\n\nI was interested in the log dump feature and I tried out this change. I built a Palmetto image and ran it with QEMU. Overall this change works well for my purposes.\n\nI found some nits with this change:\n\n1) I had to create the folder /var/lib/bmcweb for the unix domain socket to be created correctly.\n2) I had to manually modify the file dump_offload.cpp in phosphor-debug-collector and change the type of the output file from an std::ofstream to a Unix domain socket; otherwise phosphor-dump-manager would fail to create an ofstream with the path pointing to the socket and throw a DBus error 5 back to BMCWeb.\n\nHope this helps a bit."
        },
        {
            "timestamp": 1605208125,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(57 comments)\n\nI had lots of comments on the old patchset that might no longer be valid.\n\nI think you're on the right track here.  Lots of cleanup is needed, and I think we need to reverse the model;  Dump services should be doing the unix socket accept, not bmcweb.  You also need to account for buffer under/overflows, as well as add timeouts to all your async calls to ensure that they don't leak memory if anything gets stuck."
        },
        {
            "timestamp": 1605208125,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1605208142,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\nIt should be noted, I haven't gone through this whole thing yet."
        },
        {
            "timestamp": 1605267069,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 5:\n\n(2 comments)\n\n> Patch Set 5: Code-Review+1\n> \n> (2 comments)\n> \n> Hello,\n> \n> I was interested in the log dump feature and I tried out this change. I built a Palmetto image and ran it with QEMU. Overall this change works well for my purposes.\n> \n> I found some nits with this change:\n> \n> 1) I had to create the folder /var/lib/bmcweb for the unix domain socket to be created correctly.\n> 2) I had to manually modify the file dump_offload.cpp in phosphor-debug-collector and change the type of the output file from an std::ofstream to a Unix domain socket; otherwise phosphor-dump-manager would fail to create an ofstream with the path pointing to the socket and throw a DBus error 5 back to BMCWeb.\n> \n> Hope this helps a bit.\n\nThank you so much for verifying this patch.\nyes, we need dump manager changes for bmc dump offload to work.\nyou can pull this commit https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-debug-collector/+/38226"
        },
        {
            "timestamp": 1605268338,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 5:\n\n> Patch Set 5:\n> \n> (57 comments)\n> \n> I had lots of comments on the old patchset that might no longer be valid.\n> \n> I think you're on the right track here.  Lots of cleanup is needed, and I think we need to reverse the model;  Dump services should be doing the unix socket accept, not bmcweb.  You also need to account for buffer under/overflows, as well as add timeouts to all your async calls to ensure that they don't leak memory if anything gets stuck.\n\nEd\n\nSure. I will work on your review comments which are relevant to patch set 5.\nI will think about Reversing unix acceptor, acceptee relationship, if this model works for both BMC and system dumps.\n\nThank you."
        },
        {
            "timestamp": 1605286671,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1605603631,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 5:\n\n(7 comments)\n\n> Patch Set 5:\n> \n> (57 comments)\n> \n> I had lots of comments on the old patchset that might no longer be valid.\n> \n> I think you're on the right track here.  Lots of cleanup is needed, and I think we need to reverse the model;  Dump services should be doing the unix socket accept, not bmcweb.  You also need to account for buffer under/overflows, as well as add timeouts to all your async calls to ensure that they don't leak memory if anything gets stuck."
        },
        {
            "timestamp": 1605628067,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Topic set to unixDumpOffload"
        },
        {
            "timestamp": 1605671326,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 5:\n\n(14 comments)"
        },
        {
            "timestamp": 1606240246,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 5:\n\n(24 comments)"
        },
        {
            "timestamp": 1606245692,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1606245709,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606246742,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/8491/ : SUCCESS"
        },
        {
            "timestamp": 1606364753,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1606720885,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 6:\n\n(11 comments)"
        },
        {
            "timestamp": 1606726575,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 6:\n\n(10 comments)"
        },
        {
            "timestamp": 1606736765,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1606751411,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1606918724,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1606918740,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606919772,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/8948/ : SUCCESS"
        },
        {
            "timestamp": 1606921070,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\n(7 comments)"
        },
        {
            "timestamp": 1606921186,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\n(2 comments)"
        },
        {
            "timestamp": 1607411109,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\n(2 comments)"
        },
        {
            "timestamp": 1607446281,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 7:\n\n(9 comments)\n\nThere is unaddressed comments. I pointed out a few, but can you go through and make sure all comment are addressed?"
        },
        {
            "timestamp": 1607448161,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\n(6 comments)\n\nI have posted questions for few comments on new patch sets.\non this commit its become little confusing becoz reviews were done on old patch sets even after new patch sets uploaded.\n\ni have gone through all comments and mostly addressed comments which were clear to me, otherwise i have queries asked. \nThank you Gunnar"
        },
        {
            "timestamp": 1607452162,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 7:\n\n(2 comments)\n\n> Patch Set 7:\n> \n> (6 comments)\n> \n> I have posted questions for few comments on new patch sets.\n> on this commit its become little confusing becoz reviews were done on old patch sets even after new patch sets uploaded.\n\nApologies for posting to old patchsets, but sometimes I don't get back to a review for a couple days.  If the comments are already addressed in the new patchsets, feel free to simply mark them \"done\".\n\n> \n> i have gone through all comments and mostly addressed comments which were clear to me, otherwise i have queries asked. \n\n> Thank you Gunnar"
        },
        {
            "timestamp": 1607453395,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\n(2 comments)\n\n> Patch Set 7:\n> \n> (2 comments)\n> \n> > Patch Set 7:\n> > \n> > (6 comments)\n> > \n> > I have posted questions for few comments on new patch sets.\n> > on this commit its become little confusing becoz reviews were done on old patch sets even after new patch sets uploaded.\n> \n> Apologies for posting to old patchsets, but sometimes I don't get back to a review for a couple days.  If the comments are already addressed in the new patchsets, feel free to simply mark them \"done\".\n> \n> > \nEd\nIts ok, no problem \ncan you please look at my patchset 7 queries and provides your inputs?\n\n> > i have gone through all comments and mostly addressed comments which were clear to me, otherwise i have queries asked. \n> \n> > Thank you Gunnar"
        },
        {
            "timestamp": 1607487707,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\n(3 comments)"
        },
        {
            "timestamp": 1607495815,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 7:\n\nEd\n\nCan you please go through latest patchset completely and post all your comment at once\nso that it will be easy to expedite reviews on this commit\n\nignore this, if have you gone through latest patchset completely and you have only those comments posted yesterday"
        },
        {
            "timestamp": 1607526459,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1607526479,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1607527776,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/9396/ : SUCCESS"
        },
        {
            "timestamp": 1607568480,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n> Patch Set 7:\n> \n> Ed\n> \n> Can you please go through latest patchset completely\n\nConsidering this patchset still hasn't addressed all of the previous issues I've found.  A complete review wouldn't be a good use of time.  Considering this is still a work in progress, I will continue to review in pieces as I get free time.\n\n> and post all your comment at once\n> so that it will be easy to expedite reviews on this commit\n> \n> ignore this, if have you gone through latest patchset completely and you have only those comments posted yesterday\n\nI have not at this point.  Once you believe all comments are addressed let me know and I will do a complete review again."
        },
        {
            "timestamp": 1607572311,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 8:\n\n(15 comments)\n\n> Patch Set 8:\n> \n> > Patch Set 7:\n> > \n> > Ed\n> > \n> > Can you please go through latest patchset completely\n> \n> Considering this patchset still hasn't addressed all of the previous issues I've found.  A complete review wouldn't be a good use of time.  Considering this is still a work in progress, I will continue to review in pieces as I get free time.\n> \n> > and post all your comment at once\n> > so that it will be easy to expedite reviews on this commit\n> > \n> > ignore this, if have you gone through latest patchset completely and you have only those comments posted yesterday\n> \n> I have not at this point.  Once you believe all comments are addressed let me know and I will do a complete review again.\n\n\nEd,\n\nyes, i agree we need to address few review comments which you have pointed out.\nbut we are looking for your inputs/queries on those comments\ncan you please provide your inputs?\n\nThank you"
        },
        {
            "timestamp": 1607574040,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(8 comments)\n\nLeft comments where I could."
        },
        {
            "timestamp": 1607626523,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 8:\n\n(4 comments)\n\n> Patch Set 8:\n> \n> (8 comments)\n> \n> Left comments where I could.\n\nThank you Ed"
        },
        {
            "timestamp": 1607629029,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1607949387,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1607966304,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1608302798,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1608309638,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1608718687,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1609755281,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1609755302,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1609755723,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10433/ : FAILURE"
        },
        {
            "timestamp": 1609760990,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1609761008,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1609761321,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 10:\n\n(5 comments)\n\nEd\n\nI was on vacation, will start working on this commit."
        },
        {
            "timestamp": 1609762292,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10439/ : FAILURE"
        },
        {
            "timestamp": 1609763375,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1609763394,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1609764450,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10446/ : SUCCESS"
        },
        {
            "timestamp": 1609834377,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1609869420,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1609913559,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1609913755,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1609939288,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1611223264,
            "reviewer": {
                "name": "sharad yadav",
                "email": "sharady@nvidia.com",
                "username": "sharady"
            },
            "message": "Patch Set 11:\n\nCould you please update the commit message, how its been tested to download BMC and System dump using REST APIs."
        },
        {
            "timestamp": 1611231849,
            "reviewer": {
                "name": "sharad yadav",
                "email": "sharady@nvidia.com",
                "username": "sharady"
            },
            "message": "Patch Set 11:\n\nI have tried cherry-picking this commit and https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-debug-collector/+/38226\nOn trying to download the dump via `curl -k -H \"X-Auth-Token: $token\" -H \"Content-Type: application/json\" -X GET https://${bmc}/redfish/v1/Managers/bmc/LogServices/Du\nmp/attachment/1` dump-manager is crashing.\n\nLogs:\nJan 21 12:04:54 xxxxx phosphor-dump-manager[2577]: socketInit: bind() failed\nJan 21 12:04:54 xxxxx phosphor-dump-manager[2577]: Failed to offload dump\nJan 21 12:04:54 xxxxx phosphor-dump-manager[2577]: terminate called after throwing an instance of 'sdbusplus::xyz::openbmc_project::Common::File::Error::Write'\nJan 21 12:04:54 xxxxx phosphor-dump-manager[2577]:   what():  xyz.openbmc_project.Common.File.Error.Write: Failed to write a file\nJan 21 12:04:54 xxxxx phosphor-dump-manager[2577]: Failed to write a file\nJan 21 12:04:55 xxxxx systemd[1]: Started Process Core Dump (PID 2672/UID 0)."
        },
        {
            "timestamp": 1611311717,
            "reviewer": {
                "name": "sharad yadav",
                "email": "sharady@nvidia.com",
                "username": "sharady"
            },
            "message": "Patch Set 11:\n\nIgnore my earlier comment, I fixed the socket bind issue via cherry-picking https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39792"
        },
        {
            "timestamp": 1611850424,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 11:\n\n> Patch Set 11:\n> \n> Ignore my earlier comment, I fixed the socket bind issue via cherry-picking https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39792\nso able to offload dumps using this patch set?"
        },
        {
            "timestamp": 1611850486,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 11:\n\nEd/Ratan\nI will work on this commit from next week onwards."
        },
        {
            "timestamp": 1611869884,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n> Patch Set 11:\n> \n> Ed/Ratan\n> I will work on this commit from next week onwards.\n\nOne thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n\n\nFood for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work."
        },
        {
            "timestamp": 1612271165,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 11:\n\n> Patch Set 11:\n> \n> > Patch Set 11:\n> > \n> > Ed/Ratan\n> > I will work on this commit from next week onwards.\n> \n> One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> \n> \n> https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> \n> \n> Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n\nsure. will look into your commit and see if i can offload work"
        },
        {
            "timestamp": 1613058641,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 12: Patch Set 11 was rebased."
        },
        {
            "timestamp": 1613058660,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613061895,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12307/ : SUCCESS"
        },
        {
            "timestamp": 1615527292,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1615910939,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 12:\n\n> Patch Set 11:\n> \n> > Patch Set 11:\n> > \n> > > Patch Set 11:\n> > > \n> > > Ed/Ratan\n> > > I will work on this commit from next week onwards.\n> > \n> > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > \n> > \n> > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > \n> > \n> > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> \n> sure. will look into your commit and see if i can offload work\n\nEd\n\nas discussed on the commit you mentioned, we cant use buffer body.\nCan we proceed with dynamic_buffer_body and framework this commit implemented?\n\nonce we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit."
        },
        {
            "timestamp": 1615911022,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1615911658,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 11:\n> > \n> > > Patch Set 11:\n> > > \n> > > > Patch Set 11:\n> > > > \n> > > > Ed/Ratan\n> > > > I will work on this commit from next week onwards.\n> > > \n> > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > \n> > > \n> > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > \n> > > \n> > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > \n> > sure. will look into your commit and see if i can offload work\n> \n> Ed\n> \n> as discussed on the commit you mentioned, we cant use buffer body.\n> Can we proceed with dynamic_buffer_body and framework this commit implemented?\n\nHow do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n\n> \n> once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n\nsure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body."
        },
        {
            "timestamp": 1616492475,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 11:\n> > > \n> > > > Patch Set 11:\n> > > > \n> > > > > Patch Set 11:\n> > > > > \n> > > > > Ed/Ratan\n> > > > > I will work on this commit from next week onwards.\n> > > > \n> > > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > > \n> > > > \n> > > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > > \n> > > > \n> > > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > > \n> > > sure. will look into your commit and see if i can offload work\n> > \n> > Ed\n> > \n> > as discussed on the commit you mentioned, we cant use buffer body.\n> > Can we proceed with dynamic_buffer_body and framework this commit implemented?\n> \n> How do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n> \n> > \n> > once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n> \n> sure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body.\n\n\n\nBy going through with this commit, Can we divide the comments in following categories?\n\n1) Flow Control\n\n2) HTTP Response type(dynamic_body v/s buffer_body v/s string_body)\n\n3) when to upgrade the connection?  Not needed as we should make it rule based\n\n1) flow control\n================\n\na) Read the data from the unix socket\n     any error : Close both the ends.\nb) write it on the http socket\n     any error: close both the ends.\n\nc) once successfully written then perform step a)\n\nAre we good here?\n\n2) HTTP Response type\n=====================\n\nbuffer_body: It adds the chunked transfer encoding.\n     cons: deprecated in http/2    \n     \nstring_body or dynamic_body: I don't have any strong preference here.\n\nIn the existing bmcweb code we have the response class which is using the response type as \nstring_body but can't be use as it is as it writes the content when code calls the\nres.end().\n\nin res.end() it calls the preaparePayload function which automatically adds the\ncontent-length header with the size of the intermediate data and it is not correct\nin this use case.\n\ncontent-length should be the length of the full response, in this case (whole dump size).\n\nWe have two choices here.\n1) Enhance the existing response class to support intermediate writes and don't depend on the\nres.end() for writing.\n2) Write the new class which has been done in the commit.\n\nMy preference to go with 1). Ed, are you with me or do you have other suggestion?\n\n\n3) when to upgrade the connection?  Not needed as per my understanding if we make it rule based\n==================================\n\nWe don't need this if we enhance the existing response and the connection class then it would be rule based.which function need to be called on connection and the response object , depends on the rule.\n\nThis is as per my understanding of this code, Ravi please correct me if I misunderstood."
        },
        {
            "timestamp": 1616515628,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 11:\n> > > > \n> > > > > Patch Set 11:\n> > > > > \n> > > > > > Patch Set 11:\n> > > > > > \n> > > > > > Ed/Ratan\n> > > > > > I will work on this commit from next week onwards.\n> > > > > \n> > > > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > > > \n> > > > > \n> > > > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > > > \n> > > > > \n> > > > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > > > \n> > > > sure. will look into your commit and see if i can offload work\n> > > \n> > > Ed\n> > > \n> > > as discussed on the commit you mentioned, we cant use buffer body.\n> > > Can we proceed with dynamic_buffer_body and framework this commit implemented?\n> > \n> > How do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n> > \n> > > \n> > > once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n> > \n> > sure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body.\n> \n> \n> \n> By going through with this commit, Can we divide the comments in following categories?\n> \n> 1) Flow Control\n> \n> 2) HTTP Response type(dynamic_body v/s buffer_body v/s string_body)\n> \n> 3) when to upgrade the connection?  Not needed as we should make it rule based\n> \n> 1) flow control\n> ================\n> \n> a) Read the data from the unix socket\n>      any error : Close both the ends.\n> b) write it on the http socket\n>      any error: close both the ends.\n> \n> c) once successfully written then perform step a)\n> \n> Are we good here?\n\nNo.  This opens up to slow write and slow read attacks.  Timers are required, just as they are on \"normal\" connections.\n\n> \n> 2) HTTP Response type\n> =====================\n> \n> buffer_body: It adds the chunked transfer encoding.\n\nOnly if you enable chunked transfer encoding.  If you leave it disabled (which is the default) chunked transfer encoding doesn't apply.\n\n>      cons: deprecated in http/2    \n\nbeast doesn't support http2, so this point is moot, but for what it's worth, I'm working on http2 using nghttp2. \n\n>      \n> string_body or dynamic_body: I don't have any strong preference here.\n\nCan't use string_body, as it requires all the data to be available in ram, and doesn't include the \"more\" attribute like buffer body does.\n\n> \n> In the existing bmcweb code we have the response class which is using the response type as \n> string_body but can't be use as it is as it writes the content when code calls the\n> res.end().\n> \n> in res.end() it calls the preaparePayload function which automatically adds the\n> content-length header with the size of the intermediate data and it is not correct\n> in this use case.\n\nThat seems like an issue relatively easily fixed by rearranging code and using buffer_body.\n\n> \n> content-length should be the length of the full response, in this case (whole dump size).\n> \n> We have two choices here.\n> 1) Enhance the existing response class to support intermediate writes and don't depend on the\n> res.end() for writing.\n> 2) Write the new class which has been done in the commit.\n> \n> My preference to go with 1). Ed, are you with me or do you have other suggestion?\n\nSounds good to me, although just to clarify, res.end() will still need to be used;  That's how the core knows that the write is complete for dynamic body types.\n\n> \n> \n> 3) when to upgrade the connection?  Not needed as per my understanding if we make it rule based\n> ==================================\n> \n> We don't need this if we enhance the existing response and the connection class then it would be rule based.which function need to be called on connection and the response object , depends on the rule.\n\n+1.  This is one of the benefits of doing it this way.  It also keeps the handlers prototype completely identical between dynamic and non-dynamic responses, and allows switching on the fly between them.\n\n> \n> This is as per my understanding of this code, Ravi please correct me if I misunderstood."
        },
        {
            "timestamp": 1616749514,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 11:\n> > > > > \n> > > > > > Patch Set 11:\n> > > > > > \n> > > > > > > Patch Set 11:\n> > > > > > > \n> > > > > > > Ed/Ratan\n> > > > > > > I will work on this commit from next week onwards.\n> > > > > > \n> > > > > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > > > > \n> > > > > > \n> > > > > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > > > > \n> > > > > > \n> > > > > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > > > > \n> > > > > sure. will look into your commit and see if i can offload work\n> > > > \n> > > > Ed\n> > > > \n> > > > as discussed on the commit you mentioned, we cant use buffer body.\n> > > > Can we proceed with dynamic_buffer_body and framework this commit implemented?\n> > > \n> > > How do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n> > > \n> > > > \n> > > > once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n> > > \n> > > sure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body.\n> > \n> > \n> > \n> > By going through with this commit, Can we divide the comments in following categories?\n> > \n> > 1) Flow Control\n> > \n> > 2) HTTP Response type(dynamic_body v/s buffer_body v/s string_body)\n> > \n> > 3) when to upgrade the connection?  Not needed as we should make it rule based\n> > \n> > 1) flow control\n> > ================\n> > \n> > a) Read the data from the unix socket\n> >      any error : Close both the ends.\n> > b) write it on the http socket\n> >      any error: close both the ends.\n> > \n> > c) once successfully written then perform step a)\n> > \n> > Are we good here?\n> \n> No.  This opens up to slow write and slow read attacks.  Timers are required, just as they are on \"normal\" connections.\n\nCan you explain more on the same? Do you have some suggestions? \nAre you suggesting that currently what we have in the kvm_websocket.hpp(flow control perspective) is it good?\n\n\n> \n> > \n> > 2) HTTP Response type\n> > =====================\n> > \n> > buffer_body: It adds the chunked transfer encoding.\n> \n> Only if you enable chunked transfer encoding.  If you leave it disabled (which is the default) chunked transfer encoding doesn't apply.\n> \n> >      cons: deprecated in http/2    \n> \n> beast doesn't support http2, so this point is moot, but for what it's worth, I'm working on http2 using nghttp2. \n> \n> >      \n> > string_body or dynamic_body: I don't have any strong preference here.\n> \n> Can't use string_body, as it requires all the data to be available in ram, and doesn't include the \"more\" attribute like buffer body does.\n\nIsn't true for all the response type? where we need to provide a infrastructure for intermediate writes by writing on the socket.\n\n> \n> > \n> > In the existing bmcweb code we have the response class which is using the response type as \n> > string_body but can't be use as it is as it writes the content when code calls the\n> > res.end().\n> > \n> > in res.end() it calls the preaparePayload function which automatically adds the\n> > content-length header with the size of the intermediate data and it is not correct\n> > in this use case.\n> \n> That seems like an issue relatively easily fixed by rearranging code and using buffer_body.\n> \n> > \n> > content-length should be the length of the full response, in this case (whole dump size).\n> > \n> > We have two choices here.\n> > 1) Enhance the existing response class to support intermediate writes and don't depend on the\n> > res.end() for writing.\n> > 2) Write the new class which has been done in the commit.\n> > \n> > My preference to go with 1). Ed, are you with me or do you have other suggestion?\n> \n> Sounds good to me, although just to clarify, res.end() will still need to be used;  That's how the core knows that the write is complete for dynamic body types.\n> \n> > \n> > \n> > 3) when to upgrade the connection?  Not needed as per my understanding if we make it rule based\n> > ==================================\n> > \n> > We don't need this if we enhance the existing response and the connection class then it would be rule based.which function need to be called on connection and the response object , depends on the rule.\n> \n> +1.  This is one of the benefits of doing it this way.  It also keeps the handlers prototype completely identical between dynamic and non-dynamic responses, and allows switching on the fly between them.\n> \n> > \n> > This is as per my understanding of this code, Ravi please correct me if I misunderstood."
        },
        {
            "timestamp": 1616994349,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12:\n> > > > > \n> > > > > > Patch Set 11:\n> > > > > > \n> > > > > > > Patch Set 11:\n> > > > > > > \n> > > > > > > > Patch Set 11:\n> > > > > > > > \n> > > > > > > > Ed/Ratan\n> > > > > > > > I will work on this commit from next week onwards.\n> > > > > > > \n> > > > > > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > > > > > \n> > > > > > > \n> > > > > > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > > > > > \n> > > > > > > \n> > > > > > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > > > > > \n> > > > > > sure. will look into your commit and see if i can offload work\n> > > > > \n> > > > > Ed\n> > > > > \n> > > > > as discussed on the commit you mentioned, we cant use buffer body.\n> > > > > Can we proceed with dynamic_buffer_body and framework this commit implemented?\n> > > > \n> > > > How do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n> > > > \n> > > > > \n> > > > > once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n> > > > \n> > > > sure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body.\n> > > \n> > > \n> > > \n> > > By going through with this commit, Can we divide the comments in following categories?\n> > > \n> > > 1) Flow Control\n> > > \n> > > 2) HTTP Response type(dynamic_body v/s buffer_body v/s string_body)\n> > > \n> > > 3) when to upgrade the connection?  Not needed as we should make it rule based\n> > > \n> > > 1) flow control\n> > > ================\n> > > \n> > > a) Read the data from the unix socket\n> > >      any error : Close both the ends.\n> > > b) write it on the http socket\n> > >      any error: close both the ends.\n> > > \n> > > c) once successfully written then perform step a)\n> > > \n> > > Are we good here?\n> > \n> > No.  This opens up to slow write and slow read attacks.  Timers are required, just as they are on \"normal\" connections.\n> \n> Can you explain more on the same? Do you have some suggestions? \n\nFeel free to look up slow read attack, or take a look at the HttpConnection class, which has timer-based mitigations for this already.\n\n> Are you suggesting that currently what we have in the kvm_websocket.hpp(flow control perspective) is it good?\n\nKVM websockets get around this by:\n1. being behind an auth check at all times (you can't upgrade a websocket if you're not authenticated).\n2. Having a fixed limit of 4 sessions, which your code wont have.\n\n> \n> \n> > \n> > > \n> > > 2) HTTP Response type\n> > > =====================\n> > > \n> > > buffer_body: It adds the chunked transfer encoding.\n> > \n> > Only if you enable chunked transfer encoding.  If you leave it disabled (which is the default) chunked transfer encoding doesn't apply.\n> > \n> > >      cons: deprecated in http/2    \n> > \n> > beast doesn't support http2, so this point is moot, but for what it's worth, I'm working on http2 using nghttp2. \n> > \n> > >      \n> > > string_body or dynamic_body: I don't have any strong preference here.\n> > \n> > Can't use string_body, as it requires all the data to be available in ram, and doesn't include the \"more\" attribute like buffer body does.\n> \n> Isn't true for all the response type? where we need to provide a infrastructure for intermediate writes by writing on the socket.\n\nNo, it's not true for all response types, string_body requires ALL payload data to be in ram, buffer body requires just the portion of data being written to be in ram.\n\n> \n> > \n> > > \n> > > In the existing bmcweb code we have the response class which is using the response type as \n> > > string_body but can't be use as it is as it writes the content when code calls the\n> > > res.end().\n> > > \n> > > in res.end() it calls the preaparePayload function which automatically adds the\n> > > content-length header with the size of the intermediate data and it is not correct\n> > > in this use case.\n> > \n> > That seems like an issue relatively easily fixed by rearranging code and using buffer_body.\n> > \n> > > \n> > > content-length should be the length of the full response, in this case (whole dump size).\n> > > \n> > > We have two choices here.\n> > > 1) Enhance the existing response class to support intermediate writes and don't depend on the\n> > > res.end() for writing.\n> > > 2) Write the new class which has been done in the commit.\n> > > \n> > > My preference to go with 1). Ed, are you with me or do you have other suggestion?\n> > \n> > Sounds good to me, although just to clarify, res.end() will still need to be used;  That's how the core knows that the write is complete for dynamic body types.\n> > \n> > > \n> > > \n> > > 3) when to upgrade the connection?  Not needed as per my understanding if we make it rule based\n> > > ==================================\n> > > \n> > > We don't need this if we enhance the existing response and the connection class then it would be rule based.which function need to be called on connection and the response object , depends on the rule.\n> > \n> > +1.  This is one of the benefits of doing it this way.  It also keeps the handlers prototype completely identical between dynamic and non-dynamic responses, and allows switching on the fly between them.\n> > \n> > > \n> > > This is as per my understanding of this code, Ravi please correct me if I misunderstood."
        },
        {
            "timestamp": 1617082244,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12:\n> > > > > \n> > > > > > Patch Set 12:\n> > > > > > \n> > > > > > > Patch Set 11:\n> > > > > > > \n> > > > > > > > Patch Set 11:\n> > > > > > > > \n> > > > > > > > > Patch Set 11:\n> > > > > > > > > \n> > > > > > > > > Ed/Ratan\n> > > > > > > > > I will work on this commit from next week onwards.\n> > > > > > > > \n> > > > > > > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > > > > > > \n> > > > > > > > \n> > > > > > > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > > > > > > \n> > > > > > > > \n> > > > > > > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > > > > > > \n> > > > > > > sure. will look into your commit and see if i can offload work\n> > > > > > \n> > > > > > Ed\n> > > > > > \n> > > > > > as discussed on the commit you mentioned, we cant use buffer body.\n> > > > > > Can we proceed with dynamic_buffer_body and framework this commit implemented?\n> > > > > \n> > > > > How do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n> > > > > \n> > > > > > \n> > > > > > once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n> > > > > \n> > > > > sure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body.\n> > > > \n> > > > \n> > > > \n> > > > By going through with this commit, Can we divide the comments in following categories?\n> > > > \n> > > > 1) Flow Control\n> > > > \n> > > > 2) HTTP Response type(dynamic_body v/s buffer_body v/s string_body)\n> > > > \n> > > > 3) when to upgrade the connection?  Not needed as we should make it rule based\n> > > > \n> > > > 1) flow control\n> > > > ================\n> > > > \n> > > > a) Read the data from the unix socket\n> > > >      any error : Close both the ends.\n> > > > b) write it on the http socket\n> > > >      any error: close both the ends.\n> > > > \n> > > > c) once successfully written then perform step a)\n> > > > \n> > > > Are we good here?\n> > > \n> > > No.  This opens up to slow write and slow read attacks.  Timers are required, just as they are on \"normal\" connections.\n> > \n> > Can you explain more on the same? Do you have some suggestions? \n> \n> Feel free to look up slow read attack, or take a look at the HttpConnection class, which has timer-based mitigations for this already.\n> \n> > Are you suggesting that currently what we have in the kvm_websocket.hpp(flow control perspective) is it good?\n> \n> KVM websockets get around this by:\n> 1. being behind an auth check at all times (you can't upgrade a websocket if you're not authenticated).\n> 2. Having a fixed limit of 4 sessions, which your code wont have.\n> \nEd \n\n1.our stream connection upgrade is also under auth check always right?\n2.yes we dont set any hard limit on sessions, how does limit matter here? \nbut we have max http connections right?\n> > \n> > \n> > > \n> > > > \n> > > > 2) HTTP Response type\n> > > > =====================\n> > > > \n> > > > buffer_body: It adds the chunked transfer encoding.\n> > > \n> > > Only if you enable chunked transfer encoding.  If you leave it disabled (which is the default) chunked transfer encoding doesn't apply.\n> > > \n> > > >      cons: deprecated in http/2    \n> > > \n> > > beast doesn't support http2, so this point is moot, but for what it's worth, I'm working on http2 using nghttp2. \n> > > \n> > > >      \n> > > > string_body or dynamic_body: I don't have any strong preference here.\n> > > \n> > > Can't use string_body, as it requires all the data to be available in ram, and doesn't include the \"more\" attribute like buffer body does.\n> > \n> > Isn't true for all the response type? where we need to provide a infrastructure for intermediate writes by writing on the socket.\n> \n> No, it's not true for all response types, string_body requires ALL payload data to be in ram, buffer body requires just the portion of data being written to be in ram.\n\nEd \n\ni have tried with string_body response instead of dynamic_body with this commit.\ni could see data get streamed with string_Body,seems as we are witting data on to connection socket.\nbut anyways i think string_body is not a way to go here, as we wanted to offload octate stream data.\n> \n> > \n> > > \n> > > > \n> > > > In the existing bmcweb code we have the response class which is using the response type as \n> > > > string_body but can't be use as it is as it writes the content when code calls the\n> > > > res.end().\n> > > > \n> > > > in res.end() it calls the preaparePayload function which automatically adds the\n> > > > content-length header with the size of the intermediate data and it is not correct\n> > > > in this use case.\n> > > \n> > > That seems like an issue relatively easily fixed by rearranging code and using buffer_body.\n> > > \n> > > > \n> > > > content-length should be the length of the full response, in this case (whole dump size).\n> > > > \n> > > > We have two choices here.\n> > > > 1) Enhance the existing response class to support intermediate writes and don't depend on the\n> > > > res.end() for writing.\n> > > > 2) Write the new class which has been done in the commit.\n> > > > \n> > > > My preference to go with 1). Ed, are you with me or do you have other suggestion?\n> > > \n> > > Sounds good to me, although just to clarify, res.end() will still need to be used;  That's how the core knows that the write is complete for dynamic body types.\n> > > \n> > > > \n> > > > \n> > > > 3) when to upgrade the connection?  Not needed as per my understanding if we make it rule based\n> > > > ==================================\n> > > > \n> > > > We don't need this if we enhance the existing response and the connection class then it would be rule based.which function need to be called on connection and the response object , depends on the rule.\n> > > \n> > > +1.  This is one of the benefits of doing it this way.  It also keeps the handlers prototype completely identical between dynamic and non-dynamic responses, and allows switching on the fly between them.\n> > > \n> > > > \n> > > > This is as per my understanding of this code, Ravi please correct me if I misunderstood."
        },
        {
            "timestamp": 1617082505,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12:\n> > > > > \n> > > > > > Patch Set 12:\n> > > > > > \n> > > > > > > Patch Set 12:\n> > > > > > > \n> > > > > > > > Patch Set 11:\n> > > > > > > > \n> > > > > > > > > Patch Set 11:\n> > > > > > > > > \n> > > > > > > > > > Patch Set 11:\n> > > > > > > > > > \n> > > > > > > > > > Ed/Ratan\n> > > > > > > > > > I will work on this commit from next week onwards.\n> > > > > > > > > \n> > > > > > > > > One thought I had, is I wonder if we overcomplicated the API by following the websockets model.   These are still transaction based, and only 1 wayso one brainstorming idea was to try to use the Response::write() method instead.  That would allow http keepalive to continue to work, wouldn't require us to invent a new timer system, and could mostly use the connection class as-is.\n> > > > > > > > > \n> > > > > > > > > \n> > > > > > > > > https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/39409\n> > > > > > > > > \n> > > > > > > > > \n> > > > > > > > > Food for thought, keep in mind, the above patchset is nowhere near working, or even compiling, but kinda goes through how I think it could work.\n> > > > > > > > \n> > > > > > > > sure. will look into your commit and see if i can offload work\n> > > > > > > \n> > > > > > > Ed\n> > > > > > > \n> > > > > > > as discussed on the commit you mentioned, we cant use buffer body.\n> > > > > > > Can we proceed with dynamic_buffer_body and framework this commit implemented?\n> > > > > > \n> > > > > > How do you plan to support keepalive and timeouts?  One thing this patch made me realize was that those two are kinda hard to implement in a model like this.  websockets largely avoids them because they have internal \"ping\" mechanisms, and are expected to stay alive forever, and therefore can have hard connection count limits.\n> > > > > > \n> > > > > > > \n> > > > > > > once we decide on buffer body type and framework, i will work incorporating outstanding comments on this commit.\n> > > > > > \n> > > > > > sure.  I'm still of the opinion that buffer_body is the way to go here, but I'm interested to see if you can build something better with dynamic_body.\n> > > > > \n> > > > > \n> > > > > \n> > > > > By going through with this commit, Can we divide the comments in following categories?\n> > > > > \n> > > > > 1) Flow Control\n> > > > > \n> > > > > 2) HTTP Response type(dynamic_body v/s buffer_body v/s string_body)\n> > > > > \n> > > > > 3) when to upgrade the connection?  Not needed as we should make it rule based\n> > > > > \n> > > > > 1) flow control\n> > > > > ================\n> > > > > \n> > > > > a) Read the data from the unix socket\n> > > > >      any error : Close both the ends.\n> > > > > b) write it on the http socket\n> > > > >      any error: close both the ends.\n> > > > > \n> > > > > c) once successfully written then perform step a)\n> > > > > \n> > > > > Are we good here?\n> > > > \n> > > > No.  This opens up to slow write and slow read attacks.  Timers are required, just as they are on \"normal\" connections.\n> > > \n> > > Can you explain more on the same? Do you have some suggestions? \n> > \n> > Feel free to look up slow read attack, or take a look at the HttpConnection class, which has timer-based mitigations for this already.\n> > \n> > > Are you suggesting that currently what we have in the kvm_websocket.hpp(flow control perspective) is it good?\n> > \n> > KVM websockets get around this by:\n> > 1. being behind an auth check at all times (you can't upgrade a websocket if you're not authenticated).\n> > 2. Having a fixed limit of 4 sessions, which your code wont have.\n> > \n> Ed \n> \n> 1.our stream connection upgrade is also under auth check always right?\n\nI don't see any isAuthenticated checks in your main path, granted, this is the less important of the two checks.\n\n> 2.yes we dont set any hard limit on sessions, how does limit matter here? \n> but we have max http connections right?\n\nThere's lots of resources on how slow read and slow write attacks work that you can research, and you can look at the current implementation in HttpConnection as a \"good\" example.  Walking through every kind of security attack in a code review is probably not worthwhile.\n\n> > > \n> > > \n> > > > \n> > > > > \n> > > > > 2) HTTP Response type\n> > > > > =====================\n> > > > > \n> > > > > buffer_body: It adds the chunked transfer encoding.\n> > > > \n> > > > Only if you enable chunked transfer encoding.  If you leave it disabled (which is the default) chunked transfer encoding doesn't apply.\n> > > > \n> > > > >      cons: deprecated in http/2    \n> > > > \n> > > > beast doesn't support http2, so this point is moot, but for what it's worth, I'm working on http2 using nghttp2. \n> > > > \n> > > > >      \n> > > > > string_body or dynamic_body: I don't have any strong preference here.\n> > > > \n> > > > Can't use string_body, as it requires all the data to be available in ram, and doesn't include the \"more\" attribute like buffer body does.\n> > > \n> > > Isn't true for all the response type? where we need to provide a infrastructure for intermediate writes by writing on the socket.\n> > \n> > No, it's not true for all response types, string_body requires ALL payload data to be in ram, buffer body requires just the portion of data being written to be in ram.\n> \n> Ed \n> \n> i have tried with string_body response instead of dynamic_body with this commit.\n> i could see data get streamed with string_Body,seems as we are witting data on to connection socket.\n> but anyways i think string_body is not a way to go here, as we wanted to offload octate stream data.\n> > \n> > > \n> > > > \n> > > > > \n> > > > > In the existing bmcweb code we have the response class which is using the response type as \n> > > > > string_body but can't be use as it is as it writes the content when code calls the\n> > > > > res.end().\n> > > > > \n> > > > > in res.end() it calls the preaparePayload function which automatically adds the\n> > > > > content-length header with the size of the intermediate data and it is not correct\n> > > > > in this use case.\n> > > > \n> > > > That seems like an issue relatively easily fixed by rearranging code and using buffer_body.\n> > > > \n> > > > > \n> > > > > content-length should be the length of the full response, in this case (whole dump size).\n> > > > > \n> > > > > We have two choices here.\n> > > > > 1) Enhance the existing response class to support intermediate writes and don't depend on the\n> > > > > res.end() for writing.\n> > > > > 2) Write the new class which has been done in the commit.\n> > > > > \n> > > > > My preference to go with 1). Ed, are you with me or do you have other suggestion?\n> > > > \n> > > > Sounds good to me, although just to clarify, res.end() will still need to be used;  That's how the core knows that the write is complete for dynamic body types.\n> > > > \n> > > > > \n> > > > > \n> > > > > 3) when to upgrade the connection?  Not needed as per my understanding if we make it rule based\n> > > > > ==================================\n> > > > > \n> > > > > We don't need this if we enhance the existing response and the connection class then it would be rule based.which function need to be called on connection and the response object , depends on the rule.\n> > > > \n> > > > +1.  This is one of the benefits of doing it this way.  It also keeps the handlers prototype completely identical between dynamic and non-dynamic responses, and allows switching on the fly between them.\n> > > > \n> > > > > \n> > > > > This is as per my understanding of this code, Ravi please correct me if I misunderstood."
        },
        {
            "timestamp": 1618858606,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1618858624,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1618858775,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/15747/ : FAILURE"
        },
        {
            "timestamp": 1619615448,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Uploaded patch set 14."
        },
        {
            "timestamp": 1619615462,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1619615604,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 14:\n\nEd \n\nthis latest patchset supports dumpoffload with buffer body.\n\ncan you please take a look and provide inputs"
        },
        {
            "timestamp": 1619616376,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/16321/ : SUCCESS"
        },
        {
            "timestamp": 1627067167,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 14:\n\n> Patch Set 14:\n> \n> Ed \n> \n> this latest patchset supports dumpoffload with buffer body.\n> \n> can you please take a look and provide inputs\n\nDoes it resolve the slow read/slow write attacks we discussed earlier?"
        },
        {
            "timestamp": 1627397681,
            "reviewer": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "message": "Patch Set 14:\n\n> Patch Set 14:\n> \n> > Patch Set 14:\n> > \n> > Ed \n> > \n> > this latest patchset supports dumpoffload with buffer body.\n> > \n> > can you please take a look and provide inputs\n> \n> Does it resolve the slow read/slow write attacks we discussed earlier?\n\nI could not really recreate and test slow read/write attacks."
        },
        {
            "timestamp": 1627401748,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 14:\n\n> Patch Set 14:\n> \n> > Patch Set 14:\n> > \n> > > Patch Set 14:\n> > > \n> > > Ed \n> > > \n> > > this latest patchset supports dumpoffload with buffer body.\n> > > \n> > > can you please take a look and provide inputs\n> > \n> > Does it resolve the slow read/slow write attacks we discussed earlier?\n> \n> I could not really recreate and test slow read/write attacks.\n\nUnderstood.  Let me know when you have."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "b3f81a9af7fa72ff824380282d64a5db2a5d0451",
            "parents": [
                "9878256f274e20871e310301bdd504b8290cdcc3"
            ],
            "ref": "refs/changes/51/38051/1",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1604855777,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 146,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 174,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 287,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 722,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "dac701847aab8b53ec46f06111aaa8038221a5ce",
            "parents": [
                "9878256f274e20871e310301bdd504b8290cdcc3"
            ],
            "ref": "refs/changes/51/38051/2",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1604855891,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "http/http_connection.hpp",
                    "line": 355,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think this is a sufficient check to know whether or not we need a dynamic body.  I suspect we nee to use something from the router."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 53,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Looks like debugging info?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 53,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Removed. Done."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 53,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems like an odd combination:  A flat static buffer of 1M, combined with a dynamic body;  Wouldn't you use some sort of dynamic type?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "unadressed"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "please provide suggestions here, what kind of buffer will be better here?\nmulti_buffer?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Thinking about it more, probably just a much smaller flat_static_buffer would be fine (maybe 4096 bytes)?\n\nTechnically, bmcweb shouldn't really be buffering anything outside of the TCP/SSL packet sizes, so 1M is giant for this."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Ed\nEven i had same thought initially but observation is \nEvery read on unix socket gets around 178k (when data > 178kB)and calls sendMessage() with this ~178k chunk which will be filled into bufferResponse.\nso we need larger bufferResponse size(>178k) so I used 1M"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 242,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You've invented a dynamic body, but you're using it like a flat static buffer body.  I wouldn't not expect a \"dynamic\" response type to have a body() method at all, as the body might be too large to represent in ram."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 291,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 291,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Removed. Done."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "One single, static, ungrouped timer isn't going to cut it for something like this.  Existing connections use timerQueue, I would expect this to do the same."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "removed"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please name this something other than Connection to disambiguate it from http::Connection.  I know it's protected by the namespace, but I'd like to see the name captured directly in the class name."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Having a timer check in every second to see if the connection is complete is not going to be performance, and leads to bugs if any single operation takes more than a second.  Please stream the data directly, and rely on the DynamicResponse.end() call to single completion."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Basically this function is to keep connection open, otherwise connection is getting closed immediately.\nI did not understand your point \"leads to bugs if any single operation takes more than a second\"\ni have tested system dump offload which takes 2-3 mins to get entire dump.\ni did not notice any issue.\nbut i agree that its better to rely on DynamicResponse.end()\nhow does DynamicResponse.end() can hold connection?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 74,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "done, modified to rely on DynamicResponse.end() call to single completion."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 81,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "passing string by const ref is preferred."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 81,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This shouldnt' be hardcoded in a library function.  Handlers should choose their content-type, which could be anything."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 84,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm pretty sure you want async_write_headers here, as the name of this method is \"sendStreamHEaders\"  async_write will send the beginning of the body as well."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "unaddressed?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "by the time we write header, i am sure there wont be any data populated in body.\nwith async_write_headers, we need to use a serializer."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\" i am sure there wont be any data populated in body.\"\nI'd prefer we don't rely on that.\n\n\n\"we need to use a serializer\"\n\nYes, you do anyway to handle dynamic responses properly."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "ok sure. i will use async_write_headers"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "right now facing some issues using serializer, i am working on this"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Once this has succeeded, we.... do nothing?  That doesn't seem right."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "unaddressed?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "this function used to send headers. once headers sent successfully, sendMessage function will be used to send further data"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 109,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "boost::asio::buffer_copy is what you want here.  There's not need to use an ostream with a static response payload.\n\nhttps://www.boost.org/doc/libs/1_74_0/doc/html/boost_asio/reference/buffer_copy.html"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 109,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "remove this commented out code"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 110,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 116,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "THis branch.... isn't needed?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 116,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "use boost::beast::lowest_layer here, to avoid the constexpr if"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "i am trying what's the problem constexpr?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "addressed in latest patch set"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  This needs checked before you do the write."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "we are already making sure that doWrite() will be called only after it writes given data using handler function.\nso i think no need to check"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "doWrite is called on line 111, and does not check if a write is in progress before it does."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "as i mentioned, next doWrite() will be called only after this doWrite() successfully writes"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You mentioned that.... but I don't see the code that actually enforces that.  Can you point it out to me?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38051/8/include/dump_offload.hpp#216\nplease take a look here, calling sendMessage with a handler, which will be called on completion of write, have a look at sendMessage() function implementation in latest patchsets"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "At the framework level, this imposes the constraint that you can't call sendMessage again until the last one completes, which would be the only handler type where we impose that."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Ed \nI understand your point, but here we need to do this way to achieve data streaming flow control, otherwise it wont work.\nit may work for smaller dump data like BMC dump, for a complete system dump use cases where dump data is in Gbs, we see flow control issues.\n\nin case of websocket, this is achieved via boost::beast::websocket::stream, write returns immediately(not sure if its because of websocket stream socket)\nin this case write on http socket takes few milliseconds, by the time write completes, we need to buffer some data which is pending for write on socket,\ndata needs to be buffered increases based on dump data size and hit buffer max limit.\nso implemented this way to achieve flow control and to avoid data buffer."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Ed \n> I understand your point, but here we need to do this way to achieve data streaming flow control, otherwise it wont work.\n\nTo be clear, I don't think this is necessarily bad, I just want to understand the consequences.\nPart of me wonders if we should do this for websockets too.\n\n> it may work for smaller dump data like BMC dump, for a complete system dump use cases where dump data is in Gbs, we see flow control issues.\n\nAgreed.  I wonder if there's a better way to model flow control.  \"SendMessage\" as an API makes a ton of sense for websockets, as they actually encapsulate payloads into messages, and handlers want control over how that encapsulation is done, but for a generic streaming thing, I wonder if we need the framework to provide a \"get bytes\" style API, where you register a \"here's where to get the bytes from\" callback, and the framework will pace the bytes for you.\n\nI'm thinking out loud a little bit, but just trying to convey where my head is at with this stuff.\n\n> \n> in case of websocket, this is achieved via boost::beast::websocket::stream, write returns immediately(not sure if its because of websocket stream socket)\n\nThat's not my understanding of how that works.  Async_write here:\nhttps://github.com/openbmc/bmcweb/blob/f16f62633a64f386fd0382703ff0949ea177f457/http/websocket.hpp#L244\n\nDoes not return immediately, the websocket buffers bytes within the implementations.  Websockets do have flow control problems today, so I'll fully admit, there are probably improvements we can make when we design this API.  The websockets API we inherited from crow.\n\n> in this case write on http socket takes few milliseconds, by the time write completes, we need to buffer some data which is pending for write on socket,\n> data needs to be buffered increases based on dump data size and hit buffer max limit.\n> so implemented this way to achieve flow control and to avoid data buffer.\n\nI get the intent, we just need to make sure we design the API around what we're going to need for more than just dump, although dump seems to be doing a pretty good job of figuring things out."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 137,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "> Ed \nI understand your point, but here we need to do this way to achieve data streaming flow control, otherwise it wont work.\n\nTo be clear, I don't think this is necessarily bad, I just want to understand the consequences.\nPart of me wonders if we should do this for websockets too.\n\n How does the client knows that they need to fire the websocket request instead of http.\nSay as part of http://<hostname>/redfish/v1/Systems/system/dump/<1>  \ngets the response which is having the data as \"offloadURI = <some uri>\", Now how does the client knows that they need to fire the websocket request rather then HTTP."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 139,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "if you need this put some text in front of it \"BMCWEB_LOG_DEBUG << \"Writing size"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 139,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 168,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "errorHandler doesn't look used?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 168,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yeah. did not use messageHandler and errorHanlder here, shall i remove?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 168,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do we need to handle errors?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please just inline this."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 21,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why is the unixSocket called bmcweb?  Shouldn't it be produced by the dump handler?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 28,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Don't use auto here.  It obfuscates the type.  size_t I believe it what you want here."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 28,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 187,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is going to have problems, as this is shared between all connection objects.\n\nChech the common_errors.md doc here:\nhttps://github.com/openbmc/bmcweb/blob/master/COMMON_ERRORS.md#lack-of-locking-between-subsequent-calls"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This needs a way to return a normal response object, like 404, or 500."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 203,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "String copy.  Use the existing string_view directly."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 203,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "unaddressed"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 203,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "will address"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 206,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This needs an error condition, and to return 500."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 211,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Inline below?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 217,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why do you unlink the path before you open it?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 217,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "removed"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 224,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If this isn't called, then what?  I suspect that you need a rearrange your response objects a bit."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 224,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "removed"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 227,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "reverse this check and return to avoid the added scope."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why unlink?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 273,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "possible nullptr dereference"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 275,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This leaks memory.  Handler isn't destroyed if this gets hit."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "why are we removing the unit socket entirely?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes.but after reversing model back-end will cleanup"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 280,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should be done in handler itself via RAII."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 282,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These two lines do the same thing.  Pick one."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 282,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 146,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 174,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 287,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 722,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "dc5d60360e120c50558f325ce621303ca260cf2a",
            "parents": [
                "9878256f274e20871e310301bdd504b8290cdcc3"
            ],
            "ref": "refs/changes/51/38051/3",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1604912586,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 124,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 169,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 283,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 690,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "89d21936c91330dde6ec065f35375119aa588133",
            "parents": [
                "da4784d8ab8490579ad21467efb2b2f8ce3c608c"
            ],
            "ref": "refs/changes/51/38051/4",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1605002746,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/dump_offload.hpp",
                    "line": 20,
                    "reviewer": {
                        "name": "Sui Chen",
                        "email": "suichen@google.com",
                        "username": "quadpixels"
                    },
                    "message": "Does this path exist on all BMCs?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 20,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "I think yes, its created on bmc"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 102,
                    "reviewer": {
                        "name": "Sui Chen",
                        "email": "suichen@google.com",
                        "username": "quadpixels"
                    },
                    "message": "It looks like phosphor-debug-collector needs to be modified a bit so that its offload function writes to a socket instead of an ofstream for this to work."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 102,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yeah. we need phosphor-debug-collector changes to write dump data on unix socket path.\nplease have a look at this commit\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-debug-collector/+/38226\nthis commit"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 124,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 186,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 283,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 707,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
            "parents": [
                "da4784d8ab8490579ad21467efb2b2f8ce3c608c"
            ],
            "ref": "refs/changes/51/38051/5",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1605068931,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/http_connection.hpp",
                    "line": 363,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you revisit this and make sure this is what you intended;  You are using the request payload type to determine if we need to switch to dynamic response mode?  That seems incorrect."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 363,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "I could not think of any other way, can you please suggest what's the right way to find out if is dynamic response."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 363,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Should we upgrade the connection by looking at the specific URL? or upgrade the connection at the route handler but we don't have that infra."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 162,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering that nlohmann doesn't support streaming, this doesn't really make sense in a \"dynamic\" response type."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 162,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "How we use the json value?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 162,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "not used, can remove"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 162,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 220,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering the body isn't available, I wouldn't expect a dynamic response to have a body method at all."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 220,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "If the body is not available then body will not be sent.I didn't get this comment, can you please explain more?\nI expect the response in that case would be \nHttp return code /r/n  http headers /r/n /r/n <body which is of 0 size>\n\nDo you mean to say that as the response is dynamic so we can not keep the whole reponse in memory so we shouldn't have the body method at all?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 249,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Error or Debug??"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 249,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "we can use debug here."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems odd.  Why is this here?"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "+1"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 269,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "can we create class for this?\n\nWhy do we need this base class and the derived class at line no 35?\n\nAre we expecting that there could be more concrete differnt type of classes under name space crow:streamsocket?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes.we can create class as well, but it will be useful to extend for different types in future.\n\nEd, what do you suggest here?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "> yes.we can create class as well\nI said that it is easy to read that class is being extended, However struct is same as class but with different access rules for member variables/functions.\n\n> but it will be useful to extend for different types in future.\nIf that is the case we can create this base class later but can you list out those possibilities?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "same way followed in other places under bmcweb.\nso i thought its right way to do. i dont see any possibilities of extending this class right now"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why does the connection at this level need to store the request?  Also, you should be storing the crow::Request type, not the underlying boost type."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "If I am getting correctly, this infrastructure is taken from the http/wbsocket..where it is same..\nUpgraded connection have the req and response."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "can this go as part of res.end() which takes completerequesthandler?\nSeems you wnat to keep the connection alive, if the connection is having the response and the response can't be destructed then connection will not get destroyed."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Ed has comment where you can not hardcode this header here, let the caller gives the header and its value."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Delete"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "replace with boost::beast::lowest_layer."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "any specific reason, why its better to use boost::beast::lowest_layer."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "1. It's less code.\n2. It allows any adapter to be injected, not just tcp_socket or ssl_stream<tcp_socket> so when we have unit/fuzz tests, this wont need to be fixed."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 167,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "do we need this two if conditions if the action are the same except logging a error journal trace.\nCan we convert it into debug and print the error code and remove one of the condition?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 167,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 394,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit, this isn't really a StreamSocket.  can we call this \"StreamingResponseRule\"?"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 394,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 441,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Do we need two handleUpgrade function if the SSL is enabled?\nSeems #ifdef should start from line no 410 and the function at line no 427 is required if SSL is enabled otherwise function at line no 410 is required."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 441,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes we need both, these are virtual functions in base class"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 477,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Doesn't look used in your example?"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 477,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "unaddressed"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 477,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "i have posted question already https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38051/2/http/http_stream.hpp#168"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please inline this definition."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "could not use inline, i see compilation error."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "by \"inline\" I mean don't use a using at the top.  Everywhere you write stream_protocol, replace it with boost::asio::local::stream_protocol and delete this line."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "ok"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "size_t here please."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering this is a streaming socket, 1M seems like a really big buffer size.  Maybe 10KB would be more appropriate?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "I found that one unix socket read gets around 178k data in this case, so i kept max of 1M."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "any suggestions?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It doesn't matter how much the socket can read at a time.  bmcweb should only buffer slightly more than the minimum SSL frame size, otherwise flow control semantics get difficult, and we waste a lot of time with copies."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "i did not understand why its waste of time with copies?\n\ncan we keep 64k?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "64k would be much more reasonable, although I my intuition says it's still a little higher than is required.  Ideally we would test performance vs buffer size, and pick something just before the performance degredation takes over, but I get that kind of performance testing takes time and effort.  My gut says that the optimal is close to 10k, but 64k would probably be be fine too?  See the math in the next paragraph.  1M is certainly too large.\n\nIt's not about wasting time copying really, it's more about limiting the maximum amount of memory bmcweb can take at any given time to a well defined (and low) value.  Limiting this buffer to 10k means that this would only ever have an overhead of 10k per connection, if we support 100 connections, the upper bound for our memory usage here is 10k, therefore 10k * 100 = 1M maximum memory usage.  If this buffer is 1M, we have a maximum memory usage of 100M, which wouldn't fit on a lot of BMCs."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done, lets keep 64k."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Missing timeouts."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 56,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "As Ed suggested , seems we need to revert the server / client terminology.\nBmcweb should act as a unix client and the entity which is giving the data should act as a server.. so bmcweb will do a connect."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 56,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 100,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "This is the path where the other end should start the server and bmcweb will connect on this path?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 100,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes. i think here we need one dbus method which setup socket and returns so that bmcweb will start connect using this path.\notherwise if bmcweb tries to connect before backend setup unix socket,this will be an issue."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 103,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "can we use std::string_view where we use the const std:string& for better performnace?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 141,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Needs a mechanism for timing out if data is not sent in a reasonable amount of time."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 141,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "can you please suggest a mechanism how can we accomplish timing out in this case."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 141,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "i have tried to use deadline or steady timer but seems these wont work in this case\nwe can't set timeout, if data size is large then read operation can go till 2-3 mins.\nwe just need to timeout when there is no data available on socket for 1-2 second\nhow do we achieve this? do we need to explore socket options?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In general, connections didn't have a write callback, they simply copied the data into it's internal buffers and returned immediately.  Changing this semantic means that this can possibly overflow."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "in this case, i have passed a handler which will be run inside write complete handler.\nthat means further sendMessage calls will be called only after sending data given.\notherwise we need to buffer lot of data."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 177,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Doesn't look used?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 177,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why unique_ptr here?  Should this just be used as-is?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 186,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "std::filesystem::path here please ."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 186,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 187,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  The bmc should not be accepting a socket connection that it now has to maintain.  Reversing the acceptor, acceptee relationship (The dump service exposes a unix socket that bmcweb can connect to) would simplify this a lot, and keep the principal similar."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 187,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "right now we have used existing DUMP manager infrastructure to offload dump, there is dbus method \"InitiateOffload\" which takes  nbd device path or unix socket path as argument.\ndump manager/PLDM will be using this path to write dump data.\n\nbmcweb frames a unique UNIX domain socket path for each dump offload request, create listening socket and send this path as argument to IntiateOffload method.\n\n1.If its BMC dump then DUMP manager connects to that socket using socket path given, write bmc dump data on socket.\n2.If its system dump then PLDM does connects to that socket using socket path given, write system dump data on socket.\n\nyes,i agree that it would be better to Reverse the acceptor, acceptee relationship\n\nHere is the flow to reverse the model:\nbmcweb frames a unique UNIX domain socket path for each dump offload request and call \"InitiateOffload\" D-bus method with socket path.\n\n1.If its BMC dump then DUMP manager creates listening socket using the socket path given and bmcweb connects to socket(socket path known), dump manager accepts socket connection, start writing bmc dump data on socket. bmcweb reads system dump data from socket.\n2.If its system dump then PLDM manager creates listening socket using the socket path given and bmcweb connects to socket(socket path known), PLDM accepts socket connection and start writing system dump data on socket, bmcweb reads system dump data from socket\n\ndo you see any problem if bmcweb generates socket path(/var/lib/bmcweb/bmc_dump_1) and pass it to InitiateOffload method.\nso that dump manager and pldm can use this socket path to setup socket??"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 187,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This can be done without a global, and at a minimum, this global isn't reentrant safe.  See COMMON_ERRORS.md."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Ed\ncan you please suggest how can we do without a global?\nGiven the single threaded nature of bmcweb, they are not required to be explicitly threadsafe, but they must be always left in a valid state, and checked for other uses before occupying.\ndo you want to me check if \"handlers\" variable is getting used before using?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Ed\n> can you please suggest how can we do without a global?\n\nusing lambda captures to capture the appropriate resources.\n\n> Given the single threaded nature of bmcweb, they are not required to be explicitly threadsafe, but they must be always left in a valid state, and checked for other uses before occupying.\n> do you want to me check if \"handlers\" variable is getting used before using?\n\nYou've roughly described what common_errors.md suggests about this."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes. i have seen global variables used in different places in bmcweb.\ni am thinking how can we make this variable reentrant in this case"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "looking for your inputs"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I have not looked at this too in depth, but I really would like to be able to get away from using globals for this if it's possible."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Routes should end in /"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 210,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should be using the params passed to it, not pulling the information out of target()"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 210,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "do you mean parameters passed to BMCWEB_ROUTE or onopen() handler?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 210,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I mean the route handler already has mechanisms for routing params, \n\n.onopen([](crow::streamsocket::Connection& conn, std::string& dumpId)\n\nI believe should fix your issue."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 210,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes we can add a parameter to open handler,\nbut openHandler is generic infrastructure which can be used for other use-cases other than dump\nright?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 210,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "looking for inputs"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 210,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "openHandler is generic infrastructure just like the other routes, which do handle pulling parameters out of the end."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 225,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "unique_ptr needed here."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 225,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "removed acceptor"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 225,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See bmcweb exception policy in DEVELOPING.md.  This case is not exceptional."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "ok"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 124,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 185,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 312,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 735,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "5829ee460c1a9b6cd5ae5aac17fb72eb567c15ae",
            "parents": [
                "da4784d8ab8490579ad21467efb2b2f8ce3c608c"
            ],
            "ref": "refs/changes/51/38051/6",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1606245692,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Ed, need your suggestion how can we upgrade this connection, if we can not depend on the content_type header."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I haven't looked at the problem in depth.  Feel free to propose something that's in line with the HTTP standard, and allows the dynamic upgrade only on the correct routes."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "for me it seems fine to upgrade based on header content-type, \nits aligned with http right?\ni am also thinking if we can do through rourtes as suggested\nbut i could not  find a way yet,\nplease provide your suggestions"
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Ed \nLooking for your inputs here"
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I still haven't looked at the problem in depth.  Feel free to propose a solution that's in line with the HTTP specification, and doesn't rely on a specific content type to decide to upgrade the connection.\n\nKeep in mind, you're doing something that I didn't really architect in or conceive of when I first built bmcweb, so you'll likely need to innovate more than you'd expect."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "ok. i will think more on this"
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "I understand that its not right way to upgrade connection based on content-type header\nfor now modifying to upgrade connection based on URI.\ni will think and try to propose a solution.\ndo you think upgrading connection based on rule is right way?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Comment not addressed from PS5."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Ed\ndo you agree with ratan's suggestion\n\"can this go as part of res.end() which takes completerequesthandler?\nSeems you wantt to keep the connection alive, if the connection is having the response and the response can't be destructed then connection will not get destroyed.\"\n\nany inputs?"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "made changes as ratan suggested"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 136,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Comment not addressed from PS5."
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 136,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "i did not understand why its better to use lower_layer"
                },
                {
                    "file": "http/http_stream.hpp",
                    "line": 136,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Comment not addressed from PS5"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "i see compilation error using inline here"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please just inline this type."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "cant use inline here"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "How long you will be waiting it, some timeout???"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "sure. will add timeout"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "async_wait on socket does not provide a way to timeout, \nwe can't use deadline/steady_timer in this case, becoz we need to timeout async wait on socket when its not ready to read for few secs.\n\ni have opened defect in boost community on the same\nhttps://github.com/chriskohlhoff/asio/issues/577\ni am trying to figure out a way for timeout mechanism\nplease do let us know your suggestions"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Can you write some documentation here what this function does?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "sure"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Should the function name be doConnect() or some thing similar?"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Change the function name, there is no nbd now."
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 196,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Comments not addressed from PS5"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 196,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "will address"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 196,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 206,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Comment not addresed from PS5"
                },
                {
                    "file": "include/dump_offload.hpp",
                    "line": 206,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "will address"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 171,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 282,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 678,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "c46d69454e572a3e67e2767a22d4aaecb7722386",
            "parents": [
                "da4784d8ab8490579ad21467efb2b2f8ce3c608c"
            ],
            "ref": "refs/changes/51/38051/7",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1606918724,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/dump_offload.hpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "can we  have check if socket file path exists, before calling async_connect?\nif files does not gets created with in timeout then throw error.\nwhat do you suggest?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 153,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 288,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 667,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "098e6fa03994f4a97b9f8c373e9da890cfa4af42",
            "parents": [
                "da4784d8ab8490579ad21467efb2b2f8ce3c608c"
            ],
            "ref": "refs/changes/51/38051/8",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1607526459,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 153,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 310,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 689,
            "sizeDeletions": 0
        },
        {
            "number": 9,
            "revision": "eff8cbd275d14aa2e6a75a0782e93b6bafe27bc4",
            "parents": [
                "1149cbfeb4275bbb145e82261c46004b2bdfc562"
            ],
            "ref": "refs/changes/51/38051/9",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1609755281,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 153,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 308,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 685,
            "sizeDeletions": 0
        },
        {
            "number": 10,
            "revision": "bbeb89210f8a5258e247916acb2ee3123ef25763",
            "parents": [
                "1149cbfeb4275bbb145e82261c46004b2bdfc562"
            ],
            "ref": "refs/changes/51/38051/10",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1609760990,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 153,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 308,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 685,
            "sizeDeletions": 0
        },
        {
            "number": 11,
            "revision": "e79f48a724ed28152e90644821a2cf1d2db95c78",
            "parents": [
                "1149cbfeb4275bbb145e82261c46004b2bdfc562"
            ],
            "ref": "refs/changes/51/38051/11",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1609763375,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/http_connection.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Here it is \"Rule based connection upgrade\", Till now we were upgrading the connection on the basis of Req header but here we are looking at the URL and upgrading the connection?"
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't add specific URLs in the core.  This file (and really everything in http/) should have no knowledge of specific routes or handlers."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "Ed\nThis specific URI needs connection upgrade to stream connection, so upgrading based on URI.\nif we can't use URI check to upgrade connection, then i don't see any other way\ncan you please suggest how can we upgrade connection in this case?"
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Ed\n> This specific URI needs connection upgrade to stream connection, so upgrading based on URI.\n> if we can't use URI check to upgrade connection, then i don't see any other way\n> can you please suggest how can we upgrade connection in this case?\n\nUse the registration mechanisms similar to how all the other URL handlers work."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "yes, we are registering same way https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38051/11/include/dump_offload.hpp#237\n\nbut we need to update connection here for that registered URI\nare you suggesting to upgrade connection from OnOpen handler instead of doing here"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 153,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 308,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 685,
            "sizeDeletions": 0
        },
        {
            "number": 12,
            "revision": "88ead1ad99a103106399b12ed5d9f4c9abd58a8a",
            "parents": [
                "2b3da45876aac57a36d3093379a992d699e7e396"
            ],
            "ref": "refs/changes/51/38051/12",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1613058641,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "For what this commit is, should probably have more detail in the commit msg"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ravi Teja",
                        "email": "raviteja28031990@gmail.com",
                        "username": "raviteja-b"
                    },
                    "message": "sure"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 153,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 308,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 685,
            "sizeDeletions": 0
        },
        {
            "number": 13,
            "revision": "a4e27e089e2100ee5ec379c9c75ac0287baf22e2",
            "parents": [
                "b295bf951f391380e60234d0fe6df7ad4f5b00c9"
            ],
            "ref": "refs/changes/51/38051/13",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1618858606,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 142,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 99,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 309,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 676,
            "sizeDeletions": 0
        },
        {
            "number": 14,
            "revision": "0f10678136d8b1e7844a8b9d47e1370524c165d4",
            "parents": [
                "b295bf951f391380e60234d0fe6df7ad4f5b00c9"
            ],
            "ref": "refs/changes/51/38051/14",
            "uploader": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "createdOn": 1619615448,
            "author": {
                "name": "Ravi Teja",
                "email": "raviteja28031990@gmail.com",
                "username": "raviteja-b"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "http/http_stream.hpp",
                    "type": "ADDED",
                    "insertions": 142,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 99,
                    "deletions": 0
                },
                {
                    "file": "include/dump_offload.hpp",
                    "type": "ADDED",
                    "insertions": 309,
                    "deletions": 0
                },
                {
                    "file": "src/webserver_main.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 675,
            "sizeDeletions": 0
        }
    ]
}