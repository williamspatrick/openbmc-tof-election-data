{
    "project": "openbmc/phosphor-host-ipmid",
    "branch": "master",
    "id": "If944620c895ecf4c9f4c3efe72479f4de276f4fb",
    "number": 40201,
    "subject": "dbus-sdr: Initial Dynamic Sensor Stack",
    "owner": {
        "name": "Willy Tu",
        "email": "wltu@google.com",
        "username": "wltu"
    },
    "assignee": {
        "name": "Vernon Mauery",
        "email": "vernon.mauery@linux.intel.com",
        "username": "vmauery"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201",
    "commitMessage": "dbus-sdr: Initial Dynamic Sensor Stack\n\nMigrate intel-ipmi-oem dynamic sensor stack into\nphosphor-host-ipmid for more general use.\n\nThe files are copied from\nhttps://gerrit.openbmc-project.xyz/c/openbmc/intel-ipmi-oem/+/39743\n\nhttps://gerrit.openbmc-project.xyz/plugins/gitiles/openbmc/intel-ipmi-oem/+/b910987a7d832e38e9342f0946aeb555a48f9cb0\n\nCreated `libdynamiccmds` to enable dynamic sensor stack.\n\nMinor changes in the migration include:\n\n1, Removing the use of `commandutils.hpp` in all files since it is only used\nfor\n```\nstatic constexpr bool debug = false;\n```\nIt is added to `sdrutils.hpp` instead.\n\n2, Update lastWriteAddr to size_t to match the vector.size() type\nduring comparison.\n\n3, Renamed the sensorcommand unit test to sensorcommands_unitest.cpp\n\n4, Removed unused variables.\n  - sensorcommands\n```\nconstexpr uint8_t thresholdMask = 0xFF;\n```\n  - sensorcommands_unitest\n```\ndouble yError = std::abs(y - yRoundtrip);\n```\n5, Removed Intel Specific Changes\n  - Redfish logs\n  - node manager/ME\n  - BIOS to SEL event\n6, Removed externing a global variable for sensorTree.\n  - Replaced it with a method that returns a singleton\n  - auto& sensorTree = getSensorTree(); for access\n7, Replaced intel_oem namespace with dynamic_sensors\n\n8, Removed types.hpp and use `ipmid/types.hpp` directly\n  - Updated the types to match ipmid/types\n  - Added Association and std::vector<Association>> under Value.\n\n9, Add cpp files for sdrutils and sensorutils.\n\n10, link libipmid as it is required for getManagedObjects needed\n    by sensorcommands.cpp\n\nSigned-off-by: Willy Tu <wltu@google.com>\nChange-Id: If944620c895ecf4c9f4c3efe72479f4de276f4fb\nSigned-off-by: Vijay Khemka <vijaykhemkalinux@gmail.com>\n",
    "hashtags": [
        "dynamic-sensors-wltu"
    ],
    "createdOn": 1612228142,
    "lastUpdated": 1617830618,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1612228142,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1612228189,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612228219,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/11744/ : FAILURE"
        },
        {
            "timestamp": 1612228434,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1612228473,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612228606,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/11745/ : FAILURE"
        },
        {
            "timestamp": 1612230332,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1612230343,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612230373,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/11749/ : FAILURE"
        },
        {
            "timestamp": 1612230640,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1612230653,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612230845,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11751/ : SUCCESS"
        },
        {
            "timestamp": 1612232019,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 4:\n\nHi All,\n\nI have migrated the dynamic sensor stacks from intel-ipmi-oem into phosphor-host-ipmid.\n\nSome minor changes are made to build/test the code."
        },
        {
            "timestamp": 1612288503,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(12 comments)\n\nI didn't review the code in great detail for content, considering it comes from I've reviewed most of it several times.\n\nThe biggest thing I think we need to sort out is removing all the stuff that is truly intel-specific.  These fall into two broad categories\n1. node manager/ME.  Not all systems have ME, so OpenBMC can't really be reacting to ME events in all cases.\n2. BIOS to SEL event code\n\nMy recommendation would be to remove those for now just to get the less contentious stuff (sensors and fru) merged, then we can loop back around on how to handle all the platform specific OEM stuff.  I'm guessing a lot of it needs to be reading from EM configs to determine the presence of ME and what type of BIOS is installed."
        },
        {
            "timestamp": 1612687227,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1612687245,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612687268,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12031/ : FAILURE"
        },
        {
            "timestamp": 1612687725,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 5:\n\n(13 comments)\n\n> Patch Set 4:\n> \n> (12 comments)\n> \n> I didn't review the code in great detail for content, considering it comes from I've reviewed most of it several times.\n> \n> The biggest thing I think we need to sort out is removing all the stuff that is truly intel-specific.  These fall into two broad categories\n> 1. node manager/ME.  Not all systems have ME, so OpenBMC can't really be reacting to ME events in all cases.\n> 2. BIOS to SEL event code\n> \n> My recommendation would be to remove those for now just to get the less contentious stuff (sensors and fru) merged, then we can loop back around on how to handle all the platform specific OEM stuff.  I'm guessing a lot of it needs to be reading from EM configs to determine the presence of ME and what type of BIOS is installed.\n\nThanks for the review. I went through it and removed/tested the code you mentioned that are intel only. \n\nThere are some minor stuff that I commented on. Also do we also want to update the namespaces to be different? from intel_oem?"
        },
        {
            "timestamp": 1612687777,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1612687800,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612688027,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12032/ : SUCCESS"
        },
        {
            "timestamp": 1612733476,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(3 comments)\n\n> Patch Set 5:\n> \n> (13 comments)\n> \n> > Patch Set 4:\n> > \n> > (12 comments)\n> > \n> > I didn't review the code in great detail for content, considering it comes from I've reviewed most of it several times.\n> > \n> > The biggest thing I think we need to sort out is removing all the stuff that is truly intel-specific.  These fall into two broad categories\n> > 1. node manager/ME.  Not all systems have ME, so OpenBMC can't really be reacting to ME events in all cases.\n> > 2. BIOS to SEL event code\n> > \n> > My recommendation would be to remove those for now just to get the less contentious stuff (sensors and fru) merged, then we can loop back around on how to handle all the platform specific OEM stuff.  I'm guessing a lot of it needs to be reading from EM configs to determine the presence of ME and what type of BIOS is installed.\n> \n> Thanks for the review. I went through it and removed/tested the code you mentioned that are intel only. \n> \n> There are some minor stuff that I commented on. Also do we also want to update the namespaces to be different? from intel_oem?\n\nI answered your couple questions.  this is looking close.\n\nYeah, should probably come up with a new namespace, so we don't send the wrong message, and don't clash with the intel-ipmi-oem stuff."
        },
        {
            "timestamp": 1612771242,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1612771254,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612771282,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12073/ : FAILURE"
        },
        {
            "timestamp": 1612771459,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1612771473,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612771614,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 8:\n\n(3 comments)\n\n> Patch Set 6:\n> \n> (3 comments)\n> \n> > Patch Set 5:\n> > \n> > (13 comments)\n> > \n> > > Patch Set 4:\n> > > \n> > > (12 comments)\n> > > \n> > > I didn't review the code in great detail for content, considering it comes from I've reviewed most of it several times.\n> > > \n> > > The biggest thing I think we need to sort out is removing all the stuff that is truly intel-specific.  These fall into two broad categories\n> > > 1. node manager/ME.  Not all systems have ME, so OpenBMC can't really be reacting to ME events in all cases.\n> > > 2. BIOS to SEL event code\n> > > \n> > > My recommendation would be to remove those for now just to get the less contentious stuff (sensors and fru) merged, then we can loop back around on how to handle all the platform specific OEM stuff.  I'm guessing a lot of it needs to be reading from EM configs to determine the presence of ME and what type of BIOS is installed.\n> > \n> > Thanks for the review. I went through it and removed/tested the code you mentioned that are intel only. \n> > \n> > There are some minor stuff that I commented on. Also do we also want to update the namespaces to be different? from intel_oem?\n> \n> I answered your couple questions.  this is looking close.\n> \n> Yeah, should probably come up with a new namespace, so we don't send the wrong message, and don't clash with the intel-ipmi-oem stuff.\n\nthanks,\nI have replaced `ipmi_oem` with `dyanmic_sensor` for now. Or if we have a better name, I can change it right now. Speaking of names, maybe we also want to rename the folder? I just named it dbus-sdr since that's what we thought of internally."
        },
        {
            "timestamp": 1612771697,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12074/ : SUCCESS"
        },
        {
            "timestamp": 1613422875,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 9: Patch Set 8 was rebased"
        },
        {
            "timestamp": 1613422886,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613423110,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12466/ : SUCCESS"
        },
        {
            "timestamp": 1613424323,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Hashtag added: dynamic-sensors-wltu"
        },
        {
            "timestamp": 1613439995,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9: Code-Review+1"
        },
        {
            "timestamp": 1613440003,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Assignee added: Vernon Mauery <vernon.mauery@linux.intel.com>"
        },
        {
            "timestamp": 1613450767,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 9:\n\nThanks Willy for pushing this patch. This helps in having a converged IPMI stack. I am not too familiar with all the aspects of the dynamic sensor stack. A section about dynamic sensor stack in the IPMI architecture will help the community.\n\nhttps://github.com/openbmc/docs/blob/master/architecture/ipmi-architecture.md"
        },
        {
            "timestamp": 1613469039,
            "reviewer": {
                "name": "Alexander Amelkin",
                "email": "a.amelkin@yadro.com",
                "username": "AlexanderAmelkin"
            },
            "message": "Patch Set 9:\n\nWow! This is really useful! Thank you!"
        },
        {
            "timestamp": 1613501169,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 9:\n\n> Patch Set 9:\n> \n> Thanks Willy for pushing this patch. This helps in having a converged IPMI stack. I am not too familiar with all the aspects of the dynamic sensor stack. A section about dynamic sensor stack in the IPMI architecture will help the community.\n> \n> https://github.com/openbmc/docs/blob/master/architecture/ipmi-architecture.md\n\nSounds good. I'll get more detail and write up some documentation on dynamic sensors stacks in the doc."
        },
        {
            "timestamp": 1613504695,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n> Patch Set 9:\n> \n> Thanks Willy for pushing this patch. This helps in having a converged IPMI stack. I am not too familiar with all the aspects of the dynamic sensor stack. A section about dynamic sensor stack in the IPMI architecture will help the community.\n> \n> https://github.com/openbmc/docs/blob/master/architecture/ipmi-architecture.md\n\nYep, that would be great, and it sounds like Willy is up for writing it, but in the context of this review, which is largely just moving code, can we not require the doc as a prerequisite?  Especially considering this doc still follows all the design principals in ipmi-architecture.md that exist today."
        },
        {
            "timestamp": 1613535879,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 9: Code-Review+1\n\n> Yep, that would be great, and it sounds like Willy is up for writing it, but in the context of this review, which is largely just moving code, can we not require the doc as a prerequisite? \n\nI didn't intend to have the merge of the doc as a prerequisite to merging this patch. At the same time felt apt to get IPMI docs some attention."
        },
        {
            "timestamp": 1613535946,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 9:\n\n> Sounds good. I'll get more detail and write up some documentation on dynamic sensors stacks in the doc.\n\nThanks Willy! Looking forward to it.."
        },
        {
            "timestamp": 1613589975,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 9:\n\n(6 comments)\n\nMostly looks good. Just a few minor things."
        },
        {
            "timestamp": 1613634998,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1613635027,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613635164,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12586/ : SUCCESS"
        },
        {
            "timestamp": 1613636054,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1613636066,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613636095,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 11:\n\n(6 comments)"
        },
        {
            "timestamp": 1613636207,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12587/ : SUCCESS"
        },
        {
            "timestamp": 1613672500,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n> Patch Set 9: Code-Review+1\n> \n> > Yep, that would be great, and it sounds like Willy is up for writing it, but in the context of this review, which is largely just moving code, can we not require the doc as a prerequisite? \n> \n> I didn't intend to have the merge of the doc as a prerequisite to merging this patch. At the same time felt apt to get IPMI docs some attention.\n\nCool.  Thanks."
        },
        {
            "timestamp": 1613676516,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 11:\n\n(1 comment)\n\nGreat to see this work being done, thanks!"
        },
        {
            "timestamp": 1613677464,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1613677477,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613677517,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12625/ : FAILURE"
        },
        {
            "timestamp": 1613677593,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1613677608,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613677818,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12627/ : SUCCESS"
        },
        {
            "timestamp": 1613680611,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1613681229,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1613682803,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 13:\n\n(7 comments)\n\nI won't agree with this blind move of intel-ipmi-oem code to this repo. There are many of functionalities which has prerequisite assumed by intel-ipmi-oem, for example SEL, all SEL should be stored in predefined directory. We should only be moving selected code like sensor SDRs, and Frus SDR which are read from dbus but not all other commands which has basic support. If user enable this then all other basic commands will also be ovridden by this which may or may not have expected behavior. \n\nAll common commands should be merged if it is not supported by ipmid."
        },
        {
            "timestamp": 1613687677,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13: Code-Review+1\n\n(4 comments)\n\n> Patch Set 13:\n> \n> (7 comments)\n> \n> I won't agree with this blind move of intel-ipmi-oem code to this repo. There are many of functionalities which has prerequisite assumed by intel-ipmi-oem, for example SEL, all SEL should be stored in predefined directory.\n\nVijay, SEL and sensors are very interrelated, as they share ID numbers, you can't simply exchange one without the other.  I'm not following you comment about \"predefined directory\".  Can you propose a patch on top of this one that does what you're thinking there?\n\n> We should only be moving selected code like sensor SDRs, and Frus SDR which are read from dbus but not all other commands which has basic support.\n\nThat's what we've done, but we're human, and we make mistakes.  Please read the patch, and point out the places you think we've errored, and we'll get them fixed.  See the comment on the sel code, the two things are interrelated in IPMI, and we can't move one without breaking the other.  I'm happy to have the SEL discussion somewhere outside this patch.\n\n> If user enable this then all other basic commands will also be ovridden by this which may or may not have expected behavior. \n\nThis is the expected behavior.  The two subsystems for the moment are incompatible, and implement the backends in very different ways.  This is why it's behind a compile time option to select.\n\n> \n> All common commands should be merged if it is not supported by ipmid.\n\nI'm not following this statement.  Are you saying we should have every command have a if(dynamic) switch at the top?  That seems significantly worse.\n\nI agree, these ideally wouldn't be overrides, but overrides are the cleanest way we have to implement this today.\n\nOverall, I'd like to see this patchset get merged in its current form, as there have been many discussions about it, and it being in an OEM repo is the source of many ungainly hacks.  While this design isn't perfect, it's much better than what exists today, with large amounts of this code being forked and copied because there's no good place to propose common changes.  We can continue to iterate on something better."
        },
        {
            "timestamp": 1613694000,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 13:\n\n> Patch Set 13: Code-Review+1\n> \n> (4 comments)\n> \n> > Patch Set 13:\n> > \n> > (7 comments)\n> > \n> > I won't agree with this blind move of intel-ipmi-oem code to this repo. There are many of functionalities which has prerequisite assumed by intel-ipmi-oem, for example SEL, all SEL should be stored in predefined directory.\n> \n> Vijay, SEL and sensors are very interrelated, as they share ID numbers, you can't simply exchange one without the other.  I'm not following you comment about \"predefined directory\".  Can you propose a patch on top of this one that does what you're thinking there?\n\nNo, SEL id and sensor ids are different. SEL list is created based on number of SEL entries available and IDS are serialize. Same with sensor but it has no relation until I am missing something basic. I meant by predefined directory as code is looking for SEL entries in /var/log and files starting with ipmi_sel which are only created by intel code only currently. There is no support of adding SEL provided here so there won't be any SEL entries until we follow the same rules and id creadted by intel's rsyslog patch. This doesn't support any of log entries created under phosphor-log/entries. It means if I enable this patch then I loose sel entries original command, not to mention that that one is also not complete. \n> \n> > We should only be moving selected code like sensor SDRs, and Frus SDR which are read from dbus but not all other commands which has basic support.\n> \n> That's what we've done, but we're human, and we make mistakes.  Please read the patch, and point out the places you think we've errored, and we'll get them fixed.  See the comment on the sel code, the two things are interrelated in IPMI, and we can't move one without breaking the other.  I'm happy to have the SEL discussion somewhere outside this patch.\n\nI am not denying that we can make mistakes. I will compare all other basic commands and get back here. I am happy to discuss SEL outside this patch but I would request here only to include SDRs and FRU based commands and fix SEL in common repo.\n> \n> > If user enable this then all other basic commands will also be ovridden by this which may or may not have expected behavior. \n> \n> This is the expected behavior.  The two subsystems for the moment are incompatible, and implement the backends in very different ways.  This is why it's behind a compile time option to select.\n\nThe whole idea behind this is to avoid several ipmi-oem copying code to their ipmi-oem. But code should be supporting all platforms.\n> \n> > \n> > All common commands should be merged if it is not supported by ipmid.\n> \n> I'm not following this statement.  Are you saying we should have every command have a if(dynamic) switch at the top?  That seems significantly worse.\n\nNo, I am not saying that, it will be worse to have so many pre compile options. My take is simple, add code step by step like first try to fix existing command which are basic and required by both approach and if it needs a fork of dynamic_sensor compile switch then put under that. This is simply creating intel-ipmi-oem under this repo by copying under dbus-sdr. It will be hard to follow code. \n> \n> I agree, these ideally wouldn't be overrides, but overrides are the cleanest way we have to implement this today.\n> \n> Overall, I'd like to see this patchset get merged in its current form, as there have been many discussions about it, and it being in an OEM repo is the source of many ungainly hacks.  While this design isn't perfect, it's much better than what exists today, with large amounts of this code being forked and copied because there's no good place to propose common changes.  We can continue to iterate on something better.\n\nI am not a maintainer and if everyone is in agreement with moving this code to this repo and then trim it down in following patch I can't say much here."
        },
        {
            "timestamp": 1613695218,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n> Patch Set 13:\n> \n> > Patch Set 13: Code-Review+1\n> > \n> > (4 comments)\n> > \n> > > Patch Set 13:\n> > > \n> > > (7 comments)\n> > > \n> > > I won't agree with this blind move of intel-ipmi-oem code to this repo. There are many of functionalities which has prerequisite assumed by intel-ipmi-oem, for example SEL, all SEL should be stored in predefined directory.\n> > \n> > Vijay, SEL and sensors are very interrelated, as they share ID numbers, you can't simply exchange one without the other.  I'm not following you comment about \"predefined directory\".  Can you propose a patch on top of this one that does what you're thinking there?\n> \n> No, SEL id and sensor ids are different. SEL list is created based on number of SEL entries available and IDS are serialize.\n\nYes, sensor ID and SEL Record ID are different, but they're both included in the individual SEL record.  To quote the IPMI spec:\nSection 32.1\nByte 11: Sensor type: Sensor Type Code for the sensor that generated the event\nbyte 12: Sensor #: Number of sensor that generated the event.\n\nThese are not to be confused with:\nBytes 1 and 2, Record id, ID used for SEL record access.\n\nBoth are required in the SEL.\n\n> Same with sensor but it has no relation until I am missing something basic.\n\nPlease see above, I think you are in fact missing something, although I wouldn't call it basic.  SEL is confusing as all getup.\n\n> I meant by predefined directory as code is looking for SEL entries in /var/log and files starting with ipmi_sel which are only created by intel code only currently. There is no support of adding SEL provided here so there won't be any SEL entries until we follow the same rules and id creadted by intel's rsyslog patch. This doesn't support any of log entries created under phosphor-log/entries. It means if I enable this patch then I loose sel entries original command, not to mention that that one is also not complete. \n\nCorrect, that is one of the tradeoffs made today.  If you have code that doesn't have that tradeoff, that would be great, but this is one of the reasons this is still under and option flag for the moment.\n\n> > \n> > > We should only be moving selected code like sensor SDRs, and Frus SDR which are read from dbus but not all other commands which has basic support.\n> > \n> > That's what we've done, but we're human, and we make mistakes.  Please read the patch, and point out the places you think we've errored, and we'll get them fixed.  See the comment on the sel code, the two things are interrelated in IPMI, and we can't move one without breaking the other.  I'm happy to have the SEL discussion somewhere outside this patch.\n> \n> I am not denying that we can make mistakes. I will compare all other basic commands and get back here. I am happy to discuss SEL outside this patch but I would request here only to include SDRs and FRU based commands and fix SEL in common repo.\n\nSee above why we can't do that and still have a working implementation.  I suspect vernon would be happy to take your patches and look at the changes you want, but as-is, this patchset makes things better than the current status quo.\n\n> > \n> > > If user enable this then all other basic commands will also be ovridden by this which may or may not have expected behavior. \n> > \n> > This is the expected behavior.  The two subsystems for the moment are incompatible, and implement the backends in very different ways.  This is why it's behind a compile time option to select.\n> \n> The whole idea behind this is to avoid several ipmi-oem copying code to their ipmi-oem. But code should be supporting all platforms.\n\nAgreed, but we have to start somewhere.  If you want to push code to support more platforms, today you have nowhere to do it;  That's largely what this patch is trying to fix.  Also, the list of current platforms in entity-manager is the one to be looking at for \"does this break anything\".  Any platforms not there are downstream forks that we don't yet have to concern ourselves with.\n\n> > \n> > > \n> > > All common commands should be merged if it is not supported by ipmid.\n> > \n> > I'm not following this statement.  Are you saying we should have every command have a if(dynamic) switch at the top?  That seems significantly worse.\n> \n> No, I am not saying that, it will be worse to have so many pre compile options. My take is simple, add code step by step like first try to fix existing command which are basic and required by both approach and if it needs a fork of dynamic_sensor compile switch then put under that. This is simply creating intel-ipmi-oem under this repo by copying under dbus-sdr. It will be hard to follow code. \n\nThis is code that a lot of people already use, and is largely just a moving code excersize.  If you're interested in splitting it up into smaller patches so it can be changed, that largely defeats the purpose of the patch, which is to give us a place to integrate new changes.\n\n> > \n> > I agree, these ideally wouldn't be overrides, but overrides are the cleanest way we have to implement this today.\n> > \n> > Overall, I'd like to see this patchset get merged in its current form, as there have been many discussions about it, and it being in an OEM repo is the source of many ungainly hacks.  While this design isn't perfect, it's much better than what exists today, with large amounts of this code being forked and copied because there's no good place to propose common changes.  We can continue to iterate on something better.\n> \n> I am not a maintainer and if everyone is in agreement with moving this code to this repo and then trim it down in following patch I can't say much here.\n\nI think everyone is in agreement from what I've seen on the mailing list, but it's really up to Vernon and Tom.  I think the best path forward is to get this into the common repo, then have people put up patchsets with their changes they want to see."
        },
        {
            "timestamp": 1613700168,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 13:\n\n> > > I won't agree with this blind move of intel-ipmi-oem code to this repo. There are many of functionalities which has prerequisite assumed by intel-ipmi-oem, for example SEL, all SEL should be stored in predefined directory.\n> > \n> > Vijay, SEL and sensors are very interrelated, as they share ID numbers, you can't simply exchange one without the other.  I'm not following you comment about \"predefined directory\".  Can you propose a patch on top of this one that does what you're thinking there?\n> \n> No, SEL id and sensor ids are different. SEL list is created based on number of SEL entries available and IDS are serialize. Same with sensor but it has no relation until I am missing something basic. I meant by predefined directory as code is looking for SEL entries in /var/log and files starting with ipmi_sel which are only created by intel code only currently. There is no support of adding SEL provided here so there won't be any SEL entries until we follow the same rules and id creadted by intel's rsyslog patch. This doesn't support any of log entries created under phosphor-log/entries. It means if I enable this patch then I loose sel entries original command, not to mention that that one is also not complete. \n\nThe upstream now has the support to add sel entries by phosphor-sel-logger with `SEL_LOGGER_SEND_TO_LOGGING_SERVICE` option.\nWith above, you could add sel entry by invoking the sel-logger's \"IpmiSelAdd\" or \"IpmiSelAddOem\" methods, it will create entries in logging service; ipmid will consume the logging entries to create sel entries."
        },
        {
            "timestamp": 1613772009,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 13:\n\nI am fine if it is just to find a place holder for moving working code and trimming down to merge with old code.\n\nBut I will still request one item, please move code from header files to cpp file. For example there are lots of code in sdutils.hpp and sensorutils.hpp. This way it will have lot more cleaner code and easy to write test code."
        },
        {
            "timestamp": 1613896985,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 14."
        },
        {
            "timestamp": 1613897011,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613897152,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12747/ : SUCCESS"
        },
        {
            "timestamp": 1613897544,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 14:\n\n(6 comments)\n\n> Patch Set 13:\n> \n> I am fine if it is just to find a place holder for moving working code and trimming down to merge with old code.\n> \n> But I will still request one item, please move code from header files to cpp file. For example there are lots of code in sdutils.hpp and sensorutils.hpp. This way it will have lot more cleaner code and easy to write test code.\n\nAll the functions in sdutils.hpp and sensorutils.hpp are inline static functions, I am having some trouble separating out into the cpp file. I am not exactly sure how to declare static function in header and define it in cpp. Maybe I am doing it wrong. please let me know if you have suggestion on how to do it."
        },
        {
            "timestamp": 1613938664,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 14:\n\n(2 comments)"
        },
        {
            "timestamp": 1613978410,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 14:\n\n(2 comments)"
        },
        {
            "timestamp": 1614278087,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 14:\n\n> Patch Set 14:\n> \n> (6 comments)\n> \n> > Patch Set 13:\n> > \n> > I am fine if it is just to find a place holder for moving working code and trimming down to merge with old code.\n> > \n> > But I will still request one item, please move code from header files to cpp file. For example there are lots of code in sdutils.hpp and sensorutils.hpp. This way it will have lot more cleaner code and easy to write test code.\n> \n> All the functions in sdutils.hpp and sensorutils.hpp are inline static functions, I am having some trouble separating out into the cpp file. I am not exactly sure how to declare static function in header and define it in cpp. Maybe I am doing it wrong. please let me know if you have suggestion on how to do it.\n\nYou can remove static and inline declaration and treat as a regular functions"
        },
        {
            "timestamp": 1614382294,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 14:\n\n(1 comment)\n\nthis is looking pretty good. Thanks for your work and patience. I know this is Intel code and I work at Intel, but now that it is moving into the phosphor codebase, I feel like there should be more scrutiny applied. There may be other little things, but really just the one comment needs to be changed before I think it is good enough to get merged."
        },
        {
            "timestamp": 1614581968,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 15."
        },
        {
            "timestamp": 1614581995,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614582021,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/13136/ : FAILURE"
        },
        {
            "timestamp": 1614583707,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 16."
        },
        {
            "timestamp": 1614583730,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614583807,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/13137/ : FAILURE"
        },
        {
            "timestamp": 1614584271,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 17."
        },
        {
            "timestamp": 1614584291,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614584369,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/13139/ : FAILURE"
        },
        {
            "timestamp": 1614584374,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 17:\n\n(5 comments)\n\n> Patch Set 14:\n> \n> > Patch Set 14:\n> > \n> > (6 comments)\n> > \n> > > Patch Set 13:\n> > > \n> > > I am fine if it is just to find a place holder for moving working code and trimming down to merge with old code.\n> > > \n> > > But I will still request one item, please move code from header files to cpp file. For example there are lots of code in sdutils.hpp and sensorutils.hpp. This way it will have lot more cleaner code and easy to write test code.\n> > \n> > All the functions in sdutils.hpp and sensorutils.hpp are inline static functions, I am having some trouble separating out into the cpp file. I am not exactly sure how to declare static function in header and define it in cpp. Maybe I am doing it wrong. please let me know if you have suggestion on how to do it.\n> \n> You can remove static and inline declaration and treat as a regular functions\n\nDone. Thanks. I have move the main codes in the cpp files."
        },
        {
            "timestamp": 1614584764,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 18."
        },
        {
            "timestamp": 1614584776,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614584906,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 17:\n\n> Patch Set 14:\n> \n> (1 comment)\n> \n> this is looking pretty good. Thanks for your work and patience. I know this is Intel code and I work at Intel, but now that it is moving into the phosphor codebase, I feel like there should be more scrutiny applied. There may be other little things, but really just the one comment needs to be changed before I think it is good enough to get merged.\n\nThanks for all the feedbacks. Sorry for the delays between the updates. \n\nI think I have addressed all the code change feedbacks. I tried my best to not change any functionalities when making the changes. Hopefully this will not require too many more changes down the line to get a working version. \n\nI think there are still some discussions left on the direction of the sensor handlers, but I don't really know how to address those."
        },
        {
            "timestamp": 1614584994,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13140/ : SUCCESS"
        },
        {
            "timestamp": 1614735480,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n(3 comments)\n\nOn a suggestion from Ed Tanous on Discord I tried testing this out as an alternative to intel-ipmi-oem.  With this enabled though I'm seeing a problem with one of my sensors that (legitimately) has a negative reading showing up as zero when retrieved via ipmitool.  This is a problem I'd had initially but was resolved when I added intel-ipmi-oem to my build, though with this branch supplanting that package it's reappeared.  I may well just have something misconfigured, but I'm not sure exactly what it might be."
        },
        {
            "timestamp": 1614736180,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 18:\n\n> On a suggestion from Ed Tanous on Discord I tried testing this out as an alternative to intel-ipmi-oem.  With this enabled though I'm seeing a problem with one of my sensors that (legitimately) has a negative reading showing up as zero when retrieved via ipmitool.  This is a problem I'd had initially but was resolved when I added intel-ipmi-oem to my build, though with this branch supplanting that package it's reappeared.  I may well just have something misconfigured, but I'm not sure exactly what it might be.\n\nHmm. How does your sensor configure the minimum and maximum value, to set the sensor IPMI range/scaling? It could be that there's a difference here."
        },
        {
            "timestamp": 1614737242,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > On a suggestion from Ed Tanous on Discord I tried testing this out as an alternative to intel-ipmi-oem.  With this enabled though I'm seeing a problem with one of my sensors that (legitimately) has a negative reading showing up as zero when retrieved via ipmitool.  This is a problem I'd had initially but was resolved when I added intel-ipmi-oem to my build, though with this branch supplanting that package it's reappeared.  I may well just have something misconfigured, but I'm not sure exactly what it might be.\n> \n> Hmm. How does your sensor configure the minimum and maximum value, to set the sensor IPMI range/scaling? It could be that there's a difference here.\n\nIt's got a range of -128 to 127; other sensors I've got with the same range (but positive readings) work as expected."
        },
        {
            "timestamp": 1614746884,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > On a suggestion from Ed Tanous on Discord I tried testing this out as an alternative to intel-ipmi-oem.  With this enabled though I'm seeing a problem with one of my sensors that (legitimately) has a negative reading showing up as zero when retrieved via ipmitool.  This is a problem I'd had initially but was resolved when I added intel-ipmi-oem to my build, though with this branch supplanting that package it's reappeared.  I may well just have something misconfigured, but I'm not sure exactly what it might be.\n> > \n> > Hmm. How does your sensor configure the minimum and maximum value, to set the sensor IPMI range/scaling? It could be that there's a difference here.\n> \n> It's got a range of -128 to 127; other sensors I've got with the same range (but positive readings) work as expected.\n\nStrange. In getSensorMaxMin() that is also the default: min -128 and max +127. Perhaps there is another issue. What is the Value for this sensor on D-Bus? I've noticed that \"ipmitool\" reports zero, unfortunately, for sensors that have a Value of floating-point NaN (that's a bug in ipmitool, it should instead report the sensor as not available). So, if you see 0 in ipmitool for your sensor value, verify it on D-Bus to make sure it's not something else."
        },
        {
            "timestamp": 1614754536,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > Patch Set 18:\n> > > \n> > > > On a suggestion from Ed Tanous on Discord I tried testing this out as an alternative to intel-ipmi-oem.  With this enabled though I'm seeing a problem with one of my sensors that (legitimately) has a negative reading showing up as zero when retrieved via ipmitool.  This is a problem I'd had initially but was resolved when I added intel-ipmi-oem to my build, though with this branch supplanting that package it's reappeared.  I may well just have something misconfigured, but I'm not sure exactly what it might be.\n> > > \n> > > Hmm. How does your sensor configure the minimum and maximum value, to set the sensor IPMI range/scaling? It could be that there's a difference here.\n> > \n> > It's got a range of -128 to 127; other sensors I've got with the same range (but positive readings) work as expected.\n> \n> Strange. In getSensorMaxMin() that is also the default: min -128 and max +127. Perhaps there is another issue. What is the Value for this sensor on D-Bus? I've noticed that \"ipmitool\" reports zero, unfortunately, for sensors that have a Value of floating-point NaN (that's a bug in ipmitool, it should instead report the sensor as not available). So, if you see 0 in ipmitool for your sensor value, verify it on D-Bus to make sure it's not something else.\n\nIt's got a normal (aside from being negative), non-NaN value when read from dbus, currently -72.015 for what it's worth.  (It's an Intel DTS temperature sensor, which reads in units of degrees Celsius relative to Tjmax.)"
        },
        {
            "timestamp": 1614755435,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > Patch Set 18:\n> > > \n> > > > Patch Set 18:\n> > > > \n> > > > > On a suggestion from Ed Tanous on Discord I tried testing this out as an alternative to intel-ipmi-oem.  With this enabled though I'm seeing a problem with one of my sensors that (legitimately) has a negative reading showing up as zero when retrieved via ipmitool.  This is a problem I'd had initially but was resolved when I added intel-ipmi-oem to my build, though with this branch supplanting that package it's reappeared.  I may well just have something misconfigured, but I'm not sure exactly what it might be.\n> > > > \n> > > > Hmm. How does your sensor configure the minimum and maximum value, to set the sensor IPMI range/scaling? It could be that there's a difference here.\n> > > \n> > > It's got a range of -128 to 127; other sensors I've got with the same range (but positive readings) work as expected.\n> > \n> > Strange. In getSensorMaxMin() that is also the default: min -128 and max +127. Perhaps there is another issue. What is the Value for this sensor on D-Bus? I've noticed that \"ipmitool\" reports zero, unfortunately, for sensors that have a Value of floating-point NaN (that's a bug in ipmitool, it should instead report the sensor as not available). So, if you see 0 in ipmitool for your sensor value, verify it on D-Bus to make sure it's not something else.\n> \n> It's got a normal (aside from being negative), non-NaN value when read from dbus, currently -72.015 for what it's worth.  (It's an Intel DTS temperature sensor, which reads in units of degrees Celsius relative to Tjmax.)\n\n\nThanks for testing this. \ud83d\ude0a. I haven't test it in a while, so its good to see that someone is willing to help out.\n\n----\n\nYou are sure that you were able to link the handlers, right? How did you include the library? \n\nI think you need `HOSTIPMI_PROVIDER_LIBRARY += \"libdynamiccmds.so\"` in https://github.com/openbmc/openbmc/blob/master/meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bb#L86.\n\nAlso, note that all the handers have the lowests priority `prioOpenBmcBase`, which is not the case for intel-ipmi-oem. Maybe some of the handlers that you want is not being used."
        },
        {
            "timestamp": 1614756795,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> You are sure that you were able to link the handlers, right? How did you include the library? \n> \n\nPrior to seeing this comment, all I had done was switch phosphor-ipmi-host to this branch...\n\n> I think you need `HOSTIPMI_PROVIDER_LIBRARY += \"libdynamiccmds.so\"` in https://github.com/openbmc/openbmc/blob/master/meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bb#L86.\n> \n\n...which means I hadn't done that.  I've now added that line and rebuilt, but no change so far.  For what it's worth, I do see libdyanmiccmds.so in ipmid's `/proc/$PID/maps`, though that was also the case before adding the above line to the bitbake recipe.\n\n> Also, note that all the handers have the lowests priority `prioOpenBmcBase`, which is not the case for intel-ipmi-oem. Maybe some of the handlers that you want is not being used.\n\nI'll try grepping around for anything obvious, but any pointers on where to adjust that would be welcome (I'm not real familiar with the details of the OpenBMC IPMI stack)."
        },
        {
            "timestamp": 1614758360,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> > Also, note that all the handers have the lowests priority `prioOpenBmcBase`, which is not the case for intel-ipmi-oem. Maybe some of the handlers that you want is not being used.\n> \n> I'll try grepping around for anything obvious, but any pointers on where to adjust that would be welcome (I'm not real familiar with the details of the OpenBMC IPMI stack).\n\n...alright, this is perhaps a somewhat crude, brute-force approach, but I ran `sed -i s/prioOpenBmcBase/prioMax/g dbus-sdr/sensorcommands.cpp`, rebuilt and reinstalled, and I now get appropriate-looking (negative) readings from my DTS sensor via ipmitool.\n\nHowever, now ipmid also segfaults & dumps core on hitting my voltage sensors (after logging a bunch of \"Failed to Getall\"/\"Failed to GetObject\" messages and one \"GetManagedObjects for getSensorMap failed\"), though that was also happening previously with intel-ipmi-oem and hence doesn't seem tied to this particular changeset...possibly related to my ADCSensors missing critical/warning thresholds on dbus?"
        },
        {
            "timestamp": 1614759511,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> However, now ipmid also segfaults & dumps core on hitting my voltage sensors (after logging a bunch of \"Failed to Getall\"/\"Failed to GetObject\" messages and one \"GetManagedObjects for getSensorMap failed\"), though that was also happening previously with intel-ipmi-oem and hence doesn't seem tied to this particular changeset...possibly related to my ADCSensors missing critical/warning thresholds on dbus?\n\n...after adding warning & critical thresholds to all my ADCSensors I still see the same messages and the same crash, so I guess that wasn't the cause.  (And since it appears tangential to this review I'll refrain from cluttering it up any further on this particular topic.)"
        },
        {
            "timestamp": 1614800290,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)\n\n> Patch Set 18:\n> \n> > However, now ipmid also segfaults & dumps core on hitting my voltage sensors (after logging a bunch of \"Failed to Getall\"/\"Failed to GetObject\" messages and one \"GetManagedObjects for getSensorMap failed\"), though that was also happening previously with intel-ipmi-oem and hence doesn't seem tied to this particular changeset...possibly related to my ADCSensors missing critical/warning thresholds on dbus?\n> \n> ...after adding warning & critical thresholds to all my ADCSensors I still see the same messages and the same crash, so I guess that wasn't the cause.  (And since it appears tangential to this review I'll refrain from cluttering it up any further on this particular topic.)\n\nCan you load symbols and grab a call stack from your crash?  That'll likely help us debug."
        },
        {
            "timestamp": 1614804244,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> (1 comment)\n> \n> > Patch Set 18:\n> > \n> > > However, now ipmid also segfaults & dumps core on hitting my voltage sensors (after logging a bunch of \"Failed to Getall\"/\"Failed to GetObject\" messages and one \"GetManagedObjects for getSensorMap failed\"), though that was also happening previously with intel-ipmi-oem and hence doesn't seem tied to this particular changeset...possibly related to my ADCSensors missing critical/warning thresholds on dbus?\n> > \n> > ...after adding warning & critical thresholds to all my ADCSensors I still see the same messages and the same crash, so I guess that wasn't the cause.  (And since it appears tangential to this review I'll refrain from cluttering it up any further on this particular topic.)\n> \n> Can you load symbols and grab a call stack from your crash?  That'll likely help us debug.\n\nSure -- it's a bit cumbersome for a gerrit comment, so pasted into a github gist: https://gist.github.com/zevweiss/8df4fd8ddc8b84755e39aefda4a72fc8"
        },
        {
            "timestamp": 1614806753,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > (1 comment)\n> > \n> > > Patch Set 18:\n> > > \n> > > > However, now ipmid also segfaults & dumps core on hitting my voltage sensors (after logging a bunch of \"Failed to Getall\"/\"Failed to GetObject\" messages and one \"GetManagedObjects for getSensorMap failed\"), though that was also happening previously with intel-ipmi-oem and hence doesn't seem tied to this particular changeset...possibly related to my ADCSensors missing critical/warning thresholds on dbus?\n> > > \n> > > ...after adding warning & critical thresholds to all my ADCSensors I still see the same messages and the same crash, so I guess that wasn't the cause.  (And since it appears tangential to this review I'll refrain from cluttering it up any further on this particular topic.)\n> > \n> > Can you load symbols and grab a call stack from your crash?  That'll likely help us debug.\n> \n> Sure -- it's a bit cumbersome for a gerrit comment, so pasted into a github gist: https://gist.github.com/zevweiss/8df4fd8ddc8b84755e39aefda4a72fc8\n\nThat helps a lot.  It looks like we found something broken in sdbusplus, at the very least it should be returning an error.  I'm assuming that the first unknown frame in your capture is yield_method_call.  Is there any chance you can compile a symbolized version of that so we can see the last couple frames of where where the problem is occurring?  I looked through the sdbusplus code, and I don't see anything obviously wrong.\n\nI don't think anyone else is able to reproduce this on their machines, otherwise I'd just do it myself."
        },
        {
            "timestamp": 1614807875,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > Patch Set 18:\n> > > \n> > > (1 comment)\n> > > \n> > > > Patch Set 18:\n> > > > \n> > > > > However, now ipmid also segfaults & dumps core on hitting my voltage sensors (after logging a bunch of \"Failed to Getall\"/\"Failed to GetObject\" messages and one \"GetManagedObjects for getSensorMap failed\"), though that was also happening previously with intel-ipmi-oem and hence doesn't seem tied to this particular changeset...possibly related to my ADCSensors missing critical/warning thresholds on dbus?\n> > > > \n> > > > ...after adding warning & critical thresholds to all my ADCSensors I still see the same messages and the same crash, so I guess that wasn't the cause.  (And since it appears tangential to this review I'll refrain from cluttering it up any further on this particular topic.)\n> > > \n> > > Can you load symbols and grab a call stack from your crash?  That'll likely help us debug.\n> > \n> > Sure -- it's a bit cumbersome for a gerrit comment, so pasted into a github gist: https://gist.github.com/zevweiss/8df4fd8ddc8b84755e39aefda4a72fc8\n> \n> That helps a lot.  It looks like we found something broken in sdbusplus, at the very least it should be returning an error.  I'm assuming that the first unknown frame in your capture is yield_method_call.  Is there any chance you can compile a symbolized version of that so we can see the last couple frames of where where the problem is occurring?  I looked through the sdbusplus code, and I don't see anything obviously wrong.\n> \n> I don't think anyone else is able to reproduce this on their machines, otherwise I'd just do it myself.\n\nActually my apologies -- I grabbed the wrong ipmid binary for the run that produced that stack trace, so it may be entirely bogus.\n\nI re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n(gdb) bt\n#0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n#1  0x009bdf20 in ?? ()\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\n```"
        },
        {
            "timestamp": 1614808541,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> \n> ```\n> Program received signal SIGSEGV, Segmentation fault.\n> 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> (gdb) bt\n> #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> #1  0x009bdf20 in ?? ()\n> Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> ```\n\nFor what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n\n```\n    size_t sdrLength =\n        sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n```\n\nAny chance `hdr` might have ended up NULL there?"
        },
        {
            "timestamp": 1614808797,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > \n> > ```\n> > Program received signal SIGSEGV, Segmentation fault.\n> > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > (gdb) bt\n> > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > #1  0x009bdf20 in ?? ()\n> > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > ```\n> \n> For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> \n> ```\n>     size_t sdrLength =\n>         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> ```\n> \n> Any chance `hdr` might have ended up NULL there?\n\nMy ARM assembly is pretty rusty, but:\n\n```\n(gdb) x/i $pc\n=> 0x76f35cdc <_ZN4ipmi17ipmiStorageGetSDRESt10shared_ptrINS_7ContextEEtthh+632>:       ldrb    r2, [r7, #4]\n(gdb) p $r7\n$3 = 0\n```\n\nand\n\n```\nstruct SensorDataRecordHeader\n{\n    uint8_t record_id_lsb;\n    uint8_t record_id_msb;\n    uint8_t sdr_version;\n    uint8_t record_type;\n    uint8_t record_length; // Length not counting the header\n} __attribute__((packed));\n```\n\nso I guess the above (NULL hdr) is looking likely."
        },
        {
            "timestamp": 1614808818,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > \n> > ```\n> > Program received signal SIGSEGV, Segmentation fault.\n> > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > (gdb) bt\n> > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > #1  0x009bdf20 in ?? ()\n> > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > ```\n> \n> For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> \n> ```\n>     size_t sdrLength =\n>         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> ```\n> \n> Any chance `hdr` might have ended up NULL there?\n\noh.......... :(. good catch. I thought I have that changes in. I guess not. I even linked it in the commit message. \n\nIt is fixed in https://github.com/openbmc/intel-ipmi-oem/commit/b910987a7d832e38e9342f0946aeb555a48f9cb0.\n\nFeel free to update that patch int. Or I can do it later."
        },
        {
            "timestamp": 1614811019,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 18:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > > \n> > > ```\n> > > Program received signal SIGSEGV, Segmentation fault.\n> > > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > (gdb) bt\n> > > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > #1  0x009bdf20 in ?? ()\n> > > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > > ```\n> > \n> > For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> > \n> > ```\n> >     size_t sdrLength =\n> >         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> > ```\n> > \n> > Any chance `hdr` might have ended up NULL there?\n> \n> oh.......... :(. good catch. I thought I have that changes in. I guess not. I even linked it in the commit message. \n> \n> It is fixed in https://github.com/openbmc/intel-ipmi-oem/commit/b910987a7d832e38e9342f0946aeb555a48f9cb0.\n> \n> Feel free to update that patch int. Or I can do it later.\n\nAlright, with that patch manually applied, ipmid no longer crashes, though now I don't get any readings from my voltage sensors at all -- just a stream of \"record header is null\" errors logged. Previously (without intel-ipmi-oem and before testing this branch of phosphor-host-ipmid) those had been working.  Any thoughts on why that might be?"
        },
        {
            "timestamp": 1616004956,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 19."
        },
        {
            "timestamp": 1616011690,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616012118,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13931/ : SUCCESS"
        },
        {
            "timestamp": 1616012442,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 19: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1616014431,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 19:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > Patch Set 18:\n> > > \n> > > > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > > > \n> > > > ```\n> > > > Program received signal SIGSEGV, Segmentation fault.\n> > > > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > (gdb) bt\n> > > > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > #1  0x009bdf20 in ?? ()\n> > > > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > > > ```\n> > > \n> > > For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> > > \n> > > ```\n> > >     size_t sdrLength =\n> > >         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> > > ```\n> > > \n> > > Any chance `hdr` might have ended up NULL there?\n> > \n> > oh.......... :(. good catch. I thought I have that changes in. I guess not. I even linked it in the commit message. \n> > \n> > It is fixed in https://github.com/openbmc/intel-ipmi-oem/commit/b910987a7d832e38e9342f0946aeb555a48f9cb0.\n> > \n> > Feel free to update that patch int. Or I can do it later.\n> \n> Alright, with that patch manually applied, ipmid no longer crashes, though now I don't get any readings from my voltage sensors at all -- just a stream of \"record header is null\" errors logged. Previously (without intel-ipmi-oem and before testing this branch of phosphor-host-ipmid) those had been working.  Any thoughts on why that might be?\n\n\nI will build it and test it on my setup to see what the issue is. But you can also checkout `getSensorDataRecords` to see if `sensorDataRecords.insert_or_assign()` has been call at all. Or maybe `getSensorTree` to see if that constructed the sensor tree correctly.\n\nI went over the code a bit and it seems like that `sensorTree` is not being updated. I'll have to take a closer look at it."
        },
        {
            "timestamp": 1616089165,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> > Patch Set 18:\n> > \n> > > Patch Set 18:\n> > > \n> > > > Patch Set 18:\n> > > > \n> > > > > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > > > > \n> > > > > ```\n> > > > > Program received signal SIGSEGV, Segmentation fault.\n> > > > > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > > (gdb) bt\n> > > > > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > > #1  0x009bdf20 in ?? ()\n> > > > > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > > > > ```\n> > > > \n> > > > For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> > > > \n> > > > ```\n> > > >     size_t sdrLength =\n> > > >         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> > > > ```\n> > > > \n> > > > Any chance `hdr` might have ended up NULL there?\n> > > \n> > > oh.......... :(. good catch. I thought I have that changes in. I guess not. I even linked it in the commit message. \n> > > \n> > > It is fixed in https://github.com/openbmc/intel-ipmi-oem/commit/b910987a7d832e38e9342f0946aeb555a48f9cb0.\n> > > \n> > > Feel free to update that patch int. Or I can do it later.\n> > \n> > Alright, with that patch manually applied, ipmid no longer crashes, though now I don't get any readings from my voltage sensors at all -- just a stream of \"record header is null\" errors logged. Previously (without intel-ipmi-oem and before testing this branch of phosphor-host-ipmid) those had been working.  Any thoughts on why that might be?\n> \n> \n> I will build it and test it on my setup to see what the issue is. But you can also checkout `getSensorDataRecords` to see if `sensorDataRecords.insert_or_assign()` has been call at all. Or maybe `getSensorTree` to see if that constructed the sensor tree correctly.\n> \n> I went over the code a bit and it seems like that `sensorTree` is not being updated. I'll have to take a closer look at it.\n\nI am spending more time now trying to get the whole system to work with my setup. The latest patch 19 does not seem to work. I'll try out the initial clean patch to see if it works, most likely some of my clean up changes messed it up.\n\nSo we can either wait for this to be functional, or fix it along the way."
        },
        {
            "timestamp": 1616401494,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> > Patch Set 19:\n> > \n> > > Patch Set 18:\n> > > \n> > > > Patch Set 18:\n> > > > \n> > > > > Patch Set 18:\n> > > > > \n> > > > > > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > > > > > \n> > > > > > ```\n> > > > > > Program received signal SIGSEGV, Segmentation fault.\n> > > > > > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > > > (gdb) bt\n> > > > > > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > > > #1  0x009bdf20 in ?? ()\n> > > > > > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > > > > > ```\n> > > > > \n> > > > > For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> > > > > \n> > > > > ```\n> > > > >     size_t sdrLength =\n> > > > >         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> > > > > ```\n> > > > > \n> > > > > Any chance `hdr` might have ended up NULL there?\n> > > > \n> > > > oh.......... :(. good catch. I thought I have that changes in. I guess not. I even linked it in the commit message. \n> > > > \n> > > > It is fixed in https://github.com/openbmc/intel-ipmi-oem/commit/b910987a7d832e38e9342f0946aeb555a48f9cb0.\n> > > > \n> > > > Feel free to update that patch int. Or I can do it later.\n> > > \n> > > Alright, with that patch manually applied, ipmid no longer crashes, though now I don't get any readings from my voltage sensors at all -- just a stream of \"record header is null\" errors logged. Previously (without intel-ipmi-oem and before testing this branch of phosphor-host-ipmid) those had been working.  Any thoughts on why that might be?\n> > \n> > \n> > I will build it and test it on my setup to see what the issue is. But you can also checkout `getSensorDataRecords` to see if `sensorDataRecords.insert_or_assign()` has been call at all. Or maybe `getSensorTree` to see if that constructed the sensor tree correctly.\n> > \n> > I went over the code a bit and it seems like that `sensorTree` is not being updated. I'll have to take a closer look at it.\n> \n> I am spending more time now trying to get the whole system to work with my setup. The latest patch 19 does not seem to work. I'll try out the initial clean patch to see if it works, most likely some of my clean up changes messed it up.\n> \n> So we can either wait for this to be functional, or fix it along the way.\n\nI think I just messed up on same patch. I had some configuration issue. It seems to be working fine. Have some delay before the sensors are ready with `ipmitool sdr` for some reason.\n\n\nFor the negative sensor issues, can you check how \n\n```\n    if (!getSensorAttributes(max, min, mValue, rExp, bValue, bExp, bSigned))\n    {\n        return ipmi::responseResponseError();\n    }\n\n    uint8_t value =\n        scaleIPMIValueFromDouble(reading, mValue, rExp, bValue, bExp, bSigned);\n```\n\nin ipmiSenGetSensorReading affect your sensor?\n\nAlso maybe you can try the latest intel-ipmi-oem first to see if that cause the same issue. If it does, then I think we can just submit this first and then fix it once we realize the issue."
        },
        {
            "timestamp": 1616432405,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 19: Code-Review+1"
        },
        {
            "timestamp": 1616432445,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 19:\n\n> Patch Set 18:\n> \n> > Patch Set 18:\n> > \n> > > Patch Set 18:\n> > > \n> > > > I re-ran with the correct binary, and shimmed in a symbolized version of libsdbusplus (though it ended up not appearing in the trace), after which I get a much smaller backtrace:\n> > > > \n> > > > ```\n> > > > Program received signal SIGSEGV, Segmentation fault.\n> > > > 0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > (gdb) bt\n> > > > #0  0x76f35cdc in ipmi::ipmiStorageGetSDR(std::shared_ptr<ipmi::Context>, unsigned short, unsigned short, unsigned char, unsigned char) () from /usr/lib/ipmid-providers/libdynamiccmds.so.0.0.0\n> > > > #1  0x009bdf20 in ?? ()\n> > > > Backtrace stopped: previous frame identical to this frame (corrupt stack?)\n> > > > ```\n> > > \n> > > For what it's worth, some manual (and hence perhaps error-prone, so not 100% confident this is correct) addr2line-ing points to line 1494 of sensorcommands.cpp:\n> > > \n> > > ```\n> > >     size_t sdrLength =\n> > >         sizeof(get_sdr::SensorDataRecordHeader) + hdr->record_length;\n> > > ```\n> > > \n> > > Any chance `hdr` might have ended up NULL there?\n> > \n> > oh.......... :(. good catch. I thought I have that changes in. I guess not. I even linked it in the commit message. \n> > \n> > It is fixed in https://github.com/openbmc/intel-ipmi-oem/commit/b910987a7d832e38e9342f0946aeb555a48f9cb0.\n> > \n> > Feel free to update that patch int. Or I can do it later.\n> \n> Alright, with that patch manually applied, ipmid no longer crashes, though now I don't get any readings from my voltage sensors at all -- just a stream of \"record header is null\" errors logged. Previously (without intel-ipmi-oem and before testing this branch of phosphor-host-ipmid) those had been working.  Any thoughts on why that might be?\n\nCan you retest with the latest patch?  It sounds like this is working on Willys system now."
        },
        {
            "timestamp": 1616445037,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> Can you retest with the latest patch?  It sounds like this is working on Willys system now.\n\nWith patch set 19 (commit 10634aa2b14a) temperatures & voltages are successfully retrieved, but the DTS sensor reading is still zeroed out.\n\nWith that plus my hack patch to max out the priority of dynamic sensors, ipmid logs \"Error: record header is null\" repeatedly to the journal, and ipmitool prints nothing and exits zero.  Is there some better, more appropriate way I should be addressing the priority issue?"
        },
        {
            "timestamp": 1616446596,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> > Patch Set 19:\n> > \n> > Can you retest with the latest patch?  It sounds like this is working on Willys system now.\n> \n> With patch set 19 (commit 10634aa2b14a) temperatures & voltages are successfully retrieved, but the DTS sensor reading is still zeroed out.\n> \n> With that plus my hack patch to max out the priority of dynamic sensors, ipmid logs \"Error: record header is null\" repeatedly to the journal, and ipmitool prints nothing and exits zero.  Is there some better, more appropriate way I should be addressing the priority issue?\n\nCould you add some debug info to `getSensorDataRecords()` to see if `sensorDataRecords.insert_or_assign(recordID, sdr);` is being called on your sensor.\n\n----\n\nDoes your setup work with the latest intel-ipmi-oem changes? \n\nActually, what commit for intel-ipmi-oem did you sue to get the negative values to work? and did you add any modification to it?\n\nWhen you said \n```\nipmitool prints nothing and exits zero\n```\n\nDoes it also not show the temperature & voltage values? Maybe you need to run it a few more times... I have that issue for some reason."
        },
        {
            "timestamp": 1616452918,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 19:\n\nI checked out this patch and testing for \"ipmitool fru\" But I am unable to see output"
        },
        {
            "timestamp": 1616453246,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> > Patch Set 19:\n> > \n> > > Patch Set 19:\n> > > \n> > > Can you retest with the latest patch?  It sounds like this is working on Willys system now.\n> > \n> > With patch set 19 (commit 10634aa2b14a) temperatures & voltages are successfully retrieved, but the DTS sensor reading is still zeroed out.\n> > \n> > With that plus my hack patch to max out the priority of dynamic sensors, ipmid logs \"Error: record header is null\" repeatedly to the journal, and ipmitool prints nothing and exits zero.  Is there some better, more appropriate way I should be addressing the priority issue?\n> \n> Could you add some debug info to `getSensorDataRecords()` to see if `sensorDataRecords.insert_or_assign(recordID, sdr);` is being called on your sensor.\n> \n> ----\n> \n> Does your setup work with the latest intel-ipmi-oem changes? \n> \n> Actually, what commit for intel-ipmi-oem did you sue to get the negative values to work? and did you add any modification to it?\n> \n> When you said \n> ```\n> ipmitool prints nothing and exits zero\n> ```\n> \n> Does it also not show the temperature & voltage values? Maybe you need to run it a few more times... I have that issue for some reason.\n\nI ran it probably five or six times over the course of maybe 30 minutes and it printed nothing at all (not a single line of output of any kind to stdout or stderr).\n\nHowever, after applying a small patch to add some logging for the requested debug info I saw the behavior I'd seen previously (temperatures retrieved successfully, with the correct negative DTS reading, but no voltages).  The debug logging of course shouldn't have affected that, so I reverted that patch and retried, and the same behavior (temps OK but no voltages) remained, so I guess I must have gotten something out of sync between what I was editing and what I was running somehow (sigh...apologies for the confusion there, not sure how/why I keep fumbling that).\n\nSo ultimately it looks like it's behaving pretty much how it had been previously -- no more crashing, but:\n - with the priority adjustment patch: successful negative DTS reading but no voltages\n - without the priority patch: temps & voltages retrieved, but negative DTS readings clamped to zero\n\nI went back to testing out intel-ipmi-oem at various commits:\n - aedf5a9efe124853b3c722e155fea931befce89d: negative value OK, crash on NULL dereference\n - b910987a7d832e38e9342f0946aeb555a48f9cb0: fixed NULL-deref crash, no voltage sensor data though\n - 17eadbfba70c56b36fd1b7c2b8fc2b0afe4f6771: still no voltage sensors, though now with an error message from ipmitool (\"Get SDR 000c command failed: Invalid data field in request\") repeated five times, and ipmid logging this sequence five times:\n\n> ipmid[264]: GetMangagedObjects for getSensorMap failed\n> ipmid[264]: getSensorDataRecord: getSensorMap error\n> ipmid[264]: ipmiStorageGetSDR: fail to get SDR\n\n(06aa21ab75cecce354b2a17e05d053c6f61d6a29, the current master branch, behaved the same as 17eadbfba70c56b36fd1b7c2b8fc2b0afe4f6771.)"
        },
        {
            "timestamp": 1616478421,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> I checked out this patch and testing for \"ipmitool fru\" But I am unable to see output\n\nThanks for checking out the patch.\n\nCan you check to see if the handler is actually being used?\n\nAny log from ipmid?\n\nDid you make any changes to the code? You might need to update ipmi::prioOpenBmcBase to ipmi::prioMax for the handlers to force it to use it.\n\nLast thing is that you might have run the commands a few times to get it to work properly."
        },
        {
            "timestamp": 1616478962,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> \n> > Patch Set 19:\n> > \n> > > Patch Set 19:\n> > > \n> > > > Patch Set 19:\n> > > > \n> > > > Can you retest with the latest patch?  It sounds like this is working on Willys system now.\n> > > \n> > > With patch set 19 (commit 10634aa2b14a) temperatures & voltages are successfully retrieved, but the DTS sensor reading is still zeroed out.\n> > > \n> > > With that plus my hack patch to max out the priority of dynamic sensors, ipmid logs \"Error: record header is null\" repeatedly to the journal, and ipmitool prints nothing and exits zero.  Is there some better, more appropriate way I should be addressing the priority issue?\n> > \n> > Could you add some debug info to `getSensorDataRecords()` to see if `sensorDataRecords.insert_or_assign(recordID, sdr);` is being called on your sensor.\n> > \n> > ----\n> > \n> > Does your setup work with the latest intel-ipmi-oem changes? \n> > \n> > Actually, what commit for intel-ipmi-oem did you sue to get the negative values to work? and did you add any modification to it?\n> > \n> > When you said \n> > ```\n> > ipmitool prints nothing and exits zero\n> > ```\n> > \n> > Does it also not show the temperature & voltage values? Maybe you need to run it a few more times... I have that issue for some reason.\n> \n> I ran it probably five or six times over the course of maybe 30 minutes and it printed nothing at all (not a single line of output of any kind to stdout or stderr).\n> \n> However, after applying a small patch to add some logging for the requested debug info I saw the behavior I'd seen previously (temperatures retrieved successfully, with the correct negative DTS reading, but no voltages).  The debug logging of course shouldn't have affected that, so I reverted that patch and retried, and the same behavior (temps OK but no voltages) remained, so I guess I must have gotten something out of sync between what I was editing and what I was running somehow (sigh...apologies for the confusion there, not sure how/why I keep fumbling that).\n> \n> So ultimately it looks like it's behaving pretty much how it had been previously -- no more crashing, but:\n>  - with the priority adjustment patch: successful negative DTS reading but no voltages\n>  - without the priority patch: temps & voltages retrieved, but negative DTS readings clamped to zero\n> \n> I went back to testing out intel-ipmi-oem at various commits:\n>  - aedf5a9efe124853b3c722e155fea931befce89d: negative value OK, crash on NULL dereference\n>  - b910987a7d832e38e9342f0946aeb555a48f9cb0: fixed NULL-deref crash, no voltage sensor data though\n>  - 17eadbfba70c56b36fd1b7c2b8fc2b0afe4f6771: still no voltage sensors, though now with an error message from ipmitool (\"Get SDR 000c command failed: Invalid data field in request\") repeated five times, and ipmid logging this sequence five times:\n> \n> > ipmid[264]: GetMangagedObjects for getSensorMap failed\n> > ipmid[264]: getSensorDataRecord: getSensorMap error\n> > ipmid[264]: ipmiStorageGetSDR: fail to get SDR\n> \n> (06aa21ab75cecce354b2a17e05d053c6f61d6a29, the current master branch, behaved the same as 17eadbfba70c56b36fd1b7c2b8fc2b0afe4f6771.)\n\nThanks for double checking on this issue. \n\nNo worries. All good as long as we figure out if there are critical issues with this compared to intel-ipmi-oem.\n\nSo from what you are saying, it looks like master of intel-ipmi-oem behave the same as this change?\n\n> correct negative DTS reading, but no voltages\n\nIf that is the expected output, then I think we are good to go for now?\n\nFor that error, caused by https://github.com/openbmc/intel-ipmi-oem/blob/master/src/sensorcommands.cpp#L247\n\nMaybe you can try to make the dbus call manually to see what the issue is."
        },
        {
            "timestamp": 1616620801,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 19:\n\n> Patch Set 19:\n> > I ran it probably five or six times over the course of maybe 30 minutes and it printed nothing at all (not a single line of output of any kind to stdout or stderr).\n> > \n> > However, after applying a small patch to add some logging for the requested debug info I saw the behavior I'd seen previously (temperatures retrieved successfully, with the correct negative DTS reading, but no voltages).  The debug logging of course shouldn't have affected that, so I reverted that patch and retried, and the same behavior (temps OK but no voltages) remained, so I guess I must have gotten something out of sync between what I was editing and what I was running somehow (sigh...apologies for the confusion there, not sure how/why I keep fumbling that).\n> > \n> > So ultimately it looks like it's behaving pretty much how it had been previously -- no more crashing, but:\n> >  - with the priority adjustment patch: successful negative DTS reading but no voltages\n> >  - without the priority patch: temps & voltages retrieved, but negative DTS readings clamped to zero\n> > \n> > I went back to testing out intel-ipmi-oem at various commits:\n> >  - aedf5a9efe124853b3c722e155fea931befce89d: negative value OK, crash on NULL dereference\n> >  - b910987a7d832e38e9342f0946aeb555a48f9cb0: fixed NULL-deref crash, no voltage sensor data though\n> >  - 17eadbfba70c56b36fd1b7c2b8fc2b0afe4f6771: still no voltage sensors, though now with an error message from ipmitool (\"Get SDR 000c command failed: Invalid data field in request\") repeated five times, and ipmid logging this sequence five times:\n> > \n> > > ipmid[264]: GetMangagedObjects for getSensorMap failed\n> > > ipmid[264]: getSensorDataRecord: getSensorMap error\n> > > ipmid[264]: ipmiStorageGetSDR: fail to get SDR\n> > \n> > (06aa21ab75cecce354b2a17e05d053c6f61d6a29, the current master branch, behaved the same as 17eadbfba70c56b36fd1b7c2b8fc2b0afe4f6771.)\n> \n> Thanks for double checking on this issue. \n> \n> No worries. All good as long as we figure out if there are critical issues with this compared to intel-ipmi-oem.\n> \n> So from what you are saying, it looks like master of intel-ipmi-oem behave the same as this change?\n> \n\nWell, sort of -- comparing this branch plus my priority hack patch against intel-ipmi-oem master, they both get the negative DTS reading correct and neither displays any voltage sensors, but intel-ipmi-oem reports some errors (both client-side from ipmitool and in the OpenBMC journal) that this branch doesn't.  Commit b910987a7d832e38e9342f0946aeb555a48f9cb0 of intel-ipmi-oem (a bit behind current master) is a closer match for the behavior of this branch.\n\n> > correct negative DTS reading, but no voltages\n> \n> If that is the expected output, then I think we are good to go for now?\n> \n\nIf by expected we mean just matching what intel-ipmi-oem currently does, perhaps so.  Ultimately it seems like it would be good to be able to retrieve voltage readings via IPMI as well, but that may be a separate issue independent of this changeset.\n\n> For that error, caused by https://github.com/openbmc/intel-ipmi-oem/blob/master/src/sensorcommands.cpp#L247\n> \n> Maybe you can try to make the dbus call manually to see what the issue is.\n\n`busctl call xyz.openbmc_project.ADCSensor / org.freedesktop.DBus.ObjectManager GetManagedObjects` doesn't produce any errors and lists all the expected voltage sensors; I'm not sure why ipmid doing (apparently) the same thing would have failed."
        },
        {
            "timestamp": 1616690511,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 19:\n\n@Vernon @Tom  Is this patchset going the right direction for you?  I think we're rounding up the last few things, and it'd be good to get your input."
        },
        {
            "timestamp": 1616803114,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Uploaded patch set 20."
        },
        {
            "timestamp": 1616803127,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616803195,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 20:\n\nThere were some link issues for getManagedObjects so linked libipmid library. I am not sure how others didn't see this."
        },
        {
            "timestamp": 1616803414,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14446/ : SUCCESS"
        },
        {
            "timestamp": 1617035377,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 20:\n\n> Patch Set 20:\n> \n> There were some link issues for getManagedObjects so linked libipmid library. I am not sure how others didn't see this.\n\nThanks for the patch. I wasn't sure how that didn't affect the other sensors."
        },
        {
            "timestamp": 1617129051,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 20: Code-Review+1\n\nWe can let this go as it is and keep fixing bugs when we encounter in our testing."
        },
        {
            "timestamp": 1617312319,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1617312694,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20: Code-Review+1"
        },
        {
            "timestamp": 1617381754,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 20: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1617383087,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 21."
        },
        {
            "timestamp": 1617383108,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1617383132,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 21:\n\n(2 comments)"
        },
        {
            "timestamp": 1617383202,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/14815/ : FAILURE"
        },
        {
            "timestamp": 1617384567,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 22."
        },
        {
            "timestamp": 1617384580,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1617384886,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14816/ : SUCCESS"
        },
        {
            "timestamp": 1617393744,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 22: Code-Review+1"
        },
        {
            "timestamp": 1617395954,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 22: Code-Review+1"
        },
        {
            "timestamp": 1617830590,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 22: Code-Review+2"
        },
        {
            "timestamp": 1617830618,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Change has been successfully merged by Vernon Mauery"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "20ead0235ee4521509623d7e61dcd28bc427d3cf",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/1",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612228142,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/ipmi_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 924,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/me_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 363,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1714,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1357,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/ipmi_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/me_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 185,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 148,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 6371,
            "sizeDeletions": 1
        },
        {
            "number": 2,
            "revision": "f142e33b8ffd4b5290d7e31d86dc4ccc3c2d7a4a",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/2",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612228434,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/ipmi_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 923,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/me_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 363,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1713,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1356,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/ipmi_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/me_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 185,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 148,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 6368,
            "sizeDeletions": 1
        },
        {
            "number": 3,
            "revision": "f3b545a3cd250b1bc79b5837aa80c1ac36e10743",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/3",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612230332,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/ipmi_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 923,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/me_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 363,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1713,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1356,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/ipmi_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/me_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 185,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 148,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 6368,
            "sizeDeletions": 1
        },
        {
            "number": 4,
            "revision": "6a9a92c39aacf011c3791bed7db9c7073fd50651",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/4",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612230640,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "dbus-sdr/ipmi_to_redfish_hooks.cpp",
                    "line": 833,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We probably need to remove these and their corresponding code trees for the generic implementation.  These events are only going to apply to an Intel BIOS, and likely need to stay in intel-ipmi-oem."
                },
                {
                    "file": "dbus-sdr/ipmi_to_redfish_hooks.cpp",
                    "line": 833,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/me_to_redfish_hooks.cpp",
                    "line": 1,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Same thing with this whole file.  Probably shouldn't be putting ME specific stuff into a generic daemon."
                },
                {
                    "file": "dbus-sdr/me_to_redfish_hooks.cpp",
                    "line": 1,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 391,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "More ME specific stuff that needs removed."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 391,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'd have to look up what this is intended to do in the history.  I'm having trouble understanding what it's doing, but it's probably fine."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Used for in https://gerrit.openbmc-project.xyz/c/openbmc/intel-ipmi-oem/+/28158\n\nI think it just give us an option to turn off the feature if people don't need it? I am not sure what the use cause will be."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not understanding why anyone would want to configure that out, but I'm not super worried about having the option here."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "yeah, same. I wasn't sure where the use case would be. should be fine."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "just realized that I don't think I even have the option to enable this... Will have to add that option."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. I just added \n\n```\n#define USING_ENTITY_MANAGER_DECORATORS\n```\n\nfor now in storagecommands.hpp. I tried to test out `-DUSING_ENTITY_MANAGER_DECORATORS` in the build option, but didn't seem to work. Is it okay to just leave it in code for now?"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 602,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ultimately up to Vernon, but I suspect this should be the default."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1107,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "more OEM stuff."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1107,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1304,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "More OEM stuff.  We shouldn't be installing an NM discovery SDR on systems that don't have NM"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1304,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dbus-sdr/me_to_redfish_hooks.hpp",
                    "line": 1,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "More OEM stuff."
                },
                {
                    "file": "include/dbus-sdr/me_to_redfish_hooks.hpp",
                    "line": 1,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "not your fault.... but probably not in line with the coding standard externing a global variable."
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "what is the recommended way of doing this?"
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "IMO, the best way is to have a method that returns a singleton.  Something like:\n\nSensorSubTree& getSensorTree(){\n    static SensorSubTree sensorTree;\n    return sensorTree;\n}\n\nI think that code is the way we should go, but it's a little invasive.  Alternatively, we could declare this in a common header somewhere, rather than externing it."
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "I updated the global variable to use the method that you described.\n\nAlso updated places that use it with \n\n```\nauto& sensorTree = getSensorTree();\n```\nOr just \n```\ngetSensorTree()\n```"
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't see this used."
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This doesn't look used."
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 132,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "More OEM stuff."
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 132,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "oem stuff."
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/ipmi_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 923,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/me_to_redfish_hooks.cpp",
                    "type": "ADDED",
                    "insertions": 363,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1713,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1356,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/ipmi_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/me_to_redfish_hooks.hpp",
                    "type": "ADDED",
                    "insertions": 185,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 148,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 6368,
            "sizeDeletions": 1
        },
        {
            "number": 5,
            "revision": "b94210fe0946cb6420c614453db563ad17a60928",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/5",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612687227,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 307,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "should this also get removed? It assume this is only true for ME right now."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 307,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yeah, this looks like something that probably shouldn't be propogated forward to a generic solution."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 307,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1624,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1281,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4588,
            "sizeDeletions": 1
        },
        {
            "number": 6,
            "revision": "02e6103629a9e11fe764d2277609d15644165fdd",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/6",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612687777,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1624,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1281,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4588,
            "sizeDeletions": 1
        },
        {
            "number": 7,
            "revision": "ecbed4b509c9b1d06b0b9a19753954ef5f1d90b2",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/7",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612771242,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1281,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4568,
            "sizeDeletions": 1
        },
        {
            "number": 8,
            "revision": "e3770fa34daecc3dec67ca0d7ef35ae5d1b04fb2",
            "parents": [
                "8a7236ae9309a413cec0644baf9e69f3f9a80160"
            ],
            "ref": "refs/changes/01/40201/8",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1612771459,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1287,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4574,
            "sizeDeletions": 1
        },
        {
            "number": 9,
            "revision": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/9",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1613422875,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "I am worried that not everybody will want this to be enabled by default. For now, it would probably be better to hide this behind a configure parameter."
                },
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. something like this? Also see configure.ac"
                },
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> I am worried that not everybody will want this to be enabled by default. For now, it would probably be better to hide this behind a configure parameter.\n\nIf it is IBM and other YAML using machines you are worried about ...FWIW I've got no issue with this being enabled by default now or later (in fact that probably makes the most sense?), as long there is a corresponding change to the in-tree layers that opt out where it would cause problems.  Is the hard part knowing which layers those are?  Maybe its anything with a yaml file in the ipmi tree?\n\nAnyway...just thinking about the future - no action required based on my comment."
                },
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "sounds good. thanks for the feedback. I have left it to be enabled by default for now.\n\nI am not sure where enabling this will cause any issue, but it's still good to try to see what issue this can cause in the future."
                },
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> sounds good. thanks for the feedback. I have left it to be enabled by default for now.\n> \n> I am not sure where enabling this will cause any issue, but it's still good to try to see what issue this can cause in the future.\n\nNot all platforms today support the dynamic way of building the SDR, so we don't want to break them by forcing these new commands on everything, only those that can work with it.\n\nBasically you would walk through the meta layers, and look for all platforms that have a phosphor-hwmon config file, and disable this option in a packageconfig.  I can walk you through it in more detail if you need.\n\nAs a note, It's on my list to go write a converter to try to convert the phosphor-hwmon files to EM configs automatically so we wont see any breakages with those platforms, but that's a ways off.\n\n\nWith all of the above said, up to Vernon if he doesn't want this enabled by default.  I think it's a good idea in the long run for this to be the default, but whether or not we do it in this patchset \u00af\\_(\u30c4)_/\u00af\n\nYou'll for sure need a feature for it, something similar to line 177."
                },
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "sounds good. thanks. I have the FEATURE in the latest patch. Please take a look. It should be right. I have left the default to true in https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201/14/configure.ac#269"
                },
                {
                    "file": "Makefile.am",
                    "line": 167,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "I just realized that I missed some part of the message.\n\nFor the packageconfig issue, I am actually not exactly sure why that is needed. Do we just want to prevent it from building the library in the first place? Could you point me to an example for that?\n\nI was under the impression that we can just not include the new library in `HOSTIPMI_PROVIDER_LIBRARY` like https://github.com/openbmc/openbmc/blob/master/meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bb#L86. Then this will not break anything?"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "I know this was just a copy from the Intel code, but not all the code there was perfect either. \ud83d\ude0a\n\nIf you replace all the \"boost::asio::yield_context yield\" parameters with an \"ipmi::Context::ptr ctx\", then you don't need to call getSdBus() because the bus is already there (ctx->bus)"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. thanks.\n\nI had to update the data type that is used in the code to use \n```\n#include <ipmid/types.hpp>\n```\n\ninstead of the custom one in `dbus-sdr/types.hpp`. Had to add \n```\nusing Association = std::tuple<std::string, std::string, std::string>;\n\nusing Value =\n    std::variant<bool, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t,\n                 uint64_t, double, std::string, std::vector<Association>>;\n```\n\nto make it work."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 242,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "this can use the yielding variant of the utils.cpp getManagedObjects()"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 242,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 304,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "just pass ctx to simplify things"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 304,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 1529,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "this should be ipmi::prioOpenBmcBase for all of these commands.\n\nWhen it was in the intel-ipmi-oem repo, prioOemBase was appropriate, but now that it is in the phosphor-host-ipmid repo, it should use a lower priority so it can be easily overridden by oems."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 1529,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. I have replaced all of the prioOemBase to the lowest priority of prioOpenBmcBase."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 232,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "util yielding version of getManangedObjects()"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 232,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "there is no `ipmi::Context::ptr ctx` available in this function. This is called within startMatch() which also does not have access to ctx. Is there a function to get ipmi::Context::ptr ctx?"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 232,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "Nope, you are right; while this is running as a coroutine, it is called from spawn below, which is where it gets its yield_context, and not from an ipmi call."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 232,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "There is another yield_method_call() in https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201/9/dbus-sdr/storagecommands.cpp#607\n\nHowever, changing that will require change the data structure used to follow ipmid/types.hpp instead of the ones defined in here. I tried it and it messed up https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201/9/dbus-sdr/storagecommands.cpp#622. There was some convention error.\n\nShould we just leave it as it is? or try to use `ipmid/types.hpp` as much as possible."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 232,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1287,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 512,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/types.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4574,
            "sizeDeletions": 1
        },
        {
            "number": 10,
            "revision": "5f26c73f70744d9e87f3bd09e2a11be9f8b77397",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/10",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1613634998,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1591,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 511,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4544,
            "sizeDeletions": 3
        },
        {
            "number": 11,
            "revision": "6643b0ea10fdb386a59e8f0351f9d6121482bc4e",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/11",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1613636054,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 275,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "not sure why this was done this way instead of just having the calling code unpack for you. Unless it is just so that it will properly respond to the command while you are still working on implementing something that uses all the parameters.\n\nipmi::RspType<> ipmiSenPlatformEvent(\n    uint8_t generatorID, uint8_t evmRev, uint8_t sensorType,\n    uint8_t sensorNum, uint8_t eventType, uint8_t eventData1,\n    std::optional<uint8_t> eventData2,\n    std::optional<uint8_t> eventData3)\n{\n   ...\n}"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 275,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just a guess, but James might have written this stuff before you got the template unpack callback magic working?"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 275,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Would this just be an empty handler then? assuming that payload unpack will always fully unpack? or should we also pass in the payload.\n\n```\nipmi::RspType<> ipmiSenPlatformEvent(uint8_t generatorID, uint8_t evmRev,\n                                     uint8_t sensorType, uint8_t sensorNum,\n                                     uint8_t eventType, uint8_t eventData1,\n                                     std::optional<uint8_t> eventData2,\n                                     std::optional<uint8_t> eventData3)\n{\n    return ipmi::responseSuccess();\n}\n```"
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 275,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yes, these days you would do it like you posted, which allows the calling code to handle the unpacking for you."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 275,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. thanks. The change is not in the latest patch."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1591,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 511,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4544,
            "sizeDeletions": 3
        },
        {
            "number": 12,
            "revision": "32d84e2a925ced54eec7ab3469201540e09da7e6",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/12",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1613677464,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1591,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 511,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4544,
            "sizeDeletions": 3
        },
        {
            "number": 13,
            "revision": "491cdffeeb709fd96296547cee1de5f55c2f0410",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/13",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1613677593,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 1520,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "Some of these sensor commands are already supported in https://github.com/openbmc/phosphor-host-ipmid/blob/da06d15cab1dd116d3279d66f70966f95afdf676/sensorhandler.cpp#L1098\n\nis it possible to merge them or do we need multiple copy in the same repo."
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "line": 1520,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "No, it is not possible to merge, as they have different behavior and different prerequisites.  This was discussed on the mailing list, and for the moment overriding is the best option we were able to come up with.  The hope is that having the code in the right repo will allow us to merge to one common solution over time, but rome was not built in a day.\n\nIf you're interested in helping to iterate, feel free to put patches forward."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 201,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "Many system has only single fru which is same as baseboard fru. Will ipmi fru command fail on single fru with this."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 201,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not following how you think this could fail, but this code is copied from intel-ipmi-oem.  Can we agree that this patchset is better than the alternative (continuing to have this code in intel-ipmi-oem) and for the systems you want to support, we can iterate here to get more things working?"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 239,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "please update this to the right name"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 239,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. thanks."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 254,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "Will this get through if devId is 0. As 0 is ignored while calculating hash as reserved for baseboard."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 254,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "good catch.\n\nDo we need a special case of devId of 0 like with 0xFF?\n\nmaybe just \n```\nif (devId == 0) {\n  devId = 1;\n}\n```\n\nor (I think this should work). Since only 0 is true and will set it to 1.\n```\ndevId += !devId\n```"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 254,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 738,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "How about SEL entries which is a part of phosphor log entries. This one is looking for a specific directory then all applications must store SEL into a predefined directories. Is this a prerequisite for SEL."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1085,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "Is this not implemented?"
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1085,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Because we need a null implementation of it that doesn't try to call into the old sensor code.  If you have input on how SEL should work, we're happy to hear it, but in the context of this patchset, the below code is correct.  If you're interested in implementing SEL add for ipmi-dynamic, I'd be interested to hear your ideas on how it should work, but not in the context of this patchset, in the context of a patchset that extends on this one, as it will need to support ALL bios variants, not just intels, hence why this code is no-op for now."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1238,
                    "reviewer": {
                        "name": "Vijay Khemka",
                        "email": "vijaykhemkalinux@gmail.com",
                        "username": "vijaykhemka"
                    },
                    "message": "These commands are nothing to do with sdr and should be a part of storagehandler.cpp. These should also be merged with existing storage commands."
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "line": 1238,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> These commands are nothing to do with sdr\n\nWhere did you get that idea?  SEL and SDR are very interrelated, as they share ID numbers.\n\n> and should be a part of storagehandler.cpp. These should also be merged with existing storage commands.\n\nThis is simply moving code that already exists that people want to use and I don't think making this patchset any larger is a good idea.  can we agree to get this merged as-is (as it was already reviewed, and has several active non-intel users) and agree that we can work on a better design for this stuff?  We'd love your input on how you think it should work, but we need to get the existing code checked in somewhere common so we can iterate with others.  This is what we discussed on the mailing list many months ago\n\nMerging the commands is going to take time and effort, if you're willing to do the work, feel free, but as-written, this is still useful in its current (compile time option) form, and I don't think should be blocked.\n\nWith that said, I'm not the maintainer."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1591,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 511,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4544,
            "sizeDeletions": 3
        },
        {
            "number": 14,
            "revision": "7387a4fef09cfda3b1d5a2d0d05606004976e337",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/14",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1613896985,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();"
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. thanks."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1578,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 511,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 170,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 334,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 111,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4531,
            "sizeDeletions": 3
        },
        {
            "number": 15,
            "revision": "ba5989158cc5fc8d471e430e7426593da9da2b74",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/15",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1614581968,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 447,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1578,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 328,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4627,
            "sizeDeletions": 3
        },
        {
            "number": 16,
            "revision": "8db9ed12be0efc9b3f736dbfa0f9816bb49c42cb",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/16",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1614583707,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1578,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 328,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1288,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4616,
            "sizeDeletions": 3
        },
        {
            "number": 17,
            "revision": "8ee688cffd20d6a0eca2e48e0ebe090910b43770",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/17",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1614584271,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1578,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 328,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1293,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4621,
            "sizeDeletions": 3
        },
        {
            "number": 18,
            "revision": "c19fc24880e9cf1830fbb024b020d82a2806f88b",
            "parents": [
                "da06d15cab1dd116d3279d66f70966f95afdf676"
            ],
            "ref": "refs/changes/01/40201/18",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1614584764,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Looks like this has now been done?"
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "line": 38,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Should this be marked `static` then?  (And the declaration removed from `sensorutils.hpp` if so?)"
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "line": 38,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "As with scaleFloatExp(), mark `static` and remove declaration from header?"
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1578,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 328,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1293,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4621,
            "sizeDeletions": 3
        },
        {
            "number": 19,
            "revision": "10634aa2b14a3381c9286f32cd3fe509261817fb",
            "parents": [
                "3b7a4078ee2ab814b9cfa2134134328e287eff2c"
            ],
            "ref": "refs/changes/01/40201/19",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1616004956,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 325,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1293,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4631,
            "sizeDeletions": 3
        },
        {
            "number": 20,
            "revision": "f7b592a1c04905eb0f014c5341447f799f5b07fb",
            "parents": [
                "3b7a4078ee2ab814b9cfa2134134328e287eff2c"
            ],
            "ref": "refs/changes/01/40201/20",
            "uploader": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "createdOn": 1616803114,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "this is not necessary, but I don't think it causes any overhead. The shared_ptr class overrides the -> operator which implicitly does the same thing as a get()->\n\nMore of an FYI."
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. thanks. I'll just clean it up for now."
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit, this should explicitly be int32_t, because that's what the dbus interface says.  If we use auto, this code will be incorrect if we ever get a 64 bit bmc.\n\nNot your fault, feel free to fix if you like."
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Done. thanks."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 325,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1293,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4633,
            "sizeDeletions": 3
        },
        {
            "number": 21,
            "revision": "0cc6757ca4be3710441cea64557546ea79b4800a",
            "parents": [
                "3b7a4078ee2ab814b9cfa2134134328e287eff2c"
            ],
            "ref": "refs/changes/01/40201/21",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1617383087,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 325,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1293,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4633,
            "sizeDeletions": 3
        },
        {
            "number": 22,
            "revision": "de54f486d633c5bc7a6d17b77ee46d8a8fdf57cd",
            "parents": [
                "3b7a4078ee2ab814b9cfa2134134328e287eff2c"
            ],
            "ref": "refs/changes/01/40201/22",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1617384567,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sdrutils.cpp",
                    "type": "ADDED",
                    "insertions": 436,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorcommands.cpp",
                    "type": "ADDED",
                    "insertions": 1597,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/sensorutils.cpp",
                    "type": "ADDED",
                    "insertions": 325,
                    "deletions": 0
                },
                {
                    "file": "dbus-sdr/storagecommands.cpp",
                    "type": "ADDED",
                    "insertions": 1293,
                    "deletions": 0
                },
                {
                    "file": "include/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                },
                {
                    "file": "include/dbus-sdr/sdrutils.hpp",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorcommands.hpp",
                    "type": "ADDED",
                    "insertions": 168,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/sensorutils.hpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "include/dbus-sdr/storagecommands.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "include/ipmid/types.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "test/Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/dbus-sdr/sensorcommands_unittest.cpp",
                    "type": "ADDED",
                    "insertions": 488,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4633,
            "sizeDeletions": 3
        }
    ]
}