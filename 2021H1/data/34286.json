{
    "project": "openbmc/libmctp",
    "branch": "master",
    "topic": "routing",
    "id": "Idfa4b7b4e04610f40ce3e861ef2c8a784311be17",
    "number": 34286,
    "subject": "core: Add packet framing binding hook",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@aj.id.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/libmctp/+/34286",
    "commitMessage": "core: Add packet framing binding hook\n\nEmploy explicit packet framing to bound the lifetime of the route table\nentry used in transmission of a message. Explicit packet framing allows\nrendering all the packets at once, not on a piecemeal basis when the bus\nis available.\n\nSigned-off-by: Andrew Jeffery <andrew@aj.id.au>\nChange-Id: Idfa4b7b4e04610f40ce3e861ef2c8a784311be17\n",
    "createdOn": 1593619971,
    "lastUpdated": 1611016176,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1593619971,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1593620002,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1593620012,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/317/"
        },
        {
            "timestamp": 1593620586,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/317/ : SUCCESS"
        },
        {
            "timestamp": 1593656888,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased."
        },
        {
            "timestamp": 1593656901,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1593656907,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/350/"
        },
        {
            "timestamp": 1593656949,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/350/ : SUCCESS"
        },
        {
            "timestamp": 1594806099,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1604925676,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1605067417,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1605067456,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605067502,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/7647/ : FAILURE"
        },
        {
            "timestamp": 1605068670,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 4: Patch Set 3 was rebased."
        },
        {
            "timestamp": 1605068687,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605068735,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7657/ : SUCCESS"
        },
        {
            "timestamp": 1605839837,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 4:\n\n(2 comments)\n\nJust a query on the framing requirement here, the code itself looks good though."
        },
        {
            "timestamp": 1607561619,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1611013932,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Abandoned\n\nFrame-at-packetisation aimed to resolve non-deterministic route lookups with respect to provisional endpoint IDs. The provisional endpoint ID concept was a bit of a straw man to flush out other proposals, and there's not a lot of acceptance of the idea itself. I think it's served it's purpose and is unlikely to be merged, so I'm abandoning the associated patches."
        },
        {
            "timestamp": 1611016176,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\na"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "06b60c50dc01bbc8e32af84b40464898bfdfb5d1",
            "parents": [
                "6fc10d0dbcfe4a15a29cf7340cf81d1f9139478e"
            ],
            "ref": "refs/changes/86/34286/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1593619971,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 70,
                    "deletions": -5
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 5
        },
        {
            "number": 2,
            "revision": "448af98618fe980adfdd6af3dde35b6017c3c3ad",
            "parents": [
                "0712afc5f7faaf3268d94f231879ea31e27b07ae"
            ],
            "ref": "refs/changes/86/34286/2",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1593656888,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "core.c",
                    "line": 1257,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "we don't need this if the pkt can hold max pad / header size of all the bindings so that we need to clean & re-format the header rather than copying the the MCTP packet as such."
                },
                {
                    "file": "core.c",
                    "line": 1257,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "What's your proposal for implementing that?"
                },
                {
                    "file": "libmctp.h",
                    "line": 209,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Why do we need to maintain this in the core. This will cause confusion with OEM binding type implementation if any. i.e. It is responsibility of tx to fill the medium specific header before transmission, and it should accordingly handle this ? \nWith this being kept in the binding_tx there are advantages for this, we frame it, when we are going to send it out. Also, any medium specific sequence or filling fields can be correctly formed.\n\nNote: There are certain advantage / disadvantage for both the models. The disadvantage i forsee in the other end is\n1. Binding must have this implementation --> checking route and doing the same\n2. By that time, when TX is doing the same, route table shouldn't be updated (But i am not worried about this one, much, as in any way, we need to clear out the pkts in queue based on routing update)."
                },
                {
                    "file": "libmctp.h",
                    "line": 209,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> Why do we need to maintain this in the core.\n\nWhat do you mean by \"in the core\"? The frame() callback is implemented by each binding, just as the tx() callback is. See the subsequent patches that implement frame() for the astlpc and serial bindings.\n\nThe point is the approach disconnects the use of the route table to frame the packet from when the packet is put out on the wire. It reduces the time we hold a reference to a route table entry from _unbounded_ to the time it takes to split a message into its constituent packets. Alternatively, we could query the route table each time we tx a packet, but that risks generating a packet stream with inconsistent terminus values (which would violate DSP0236 requirements).\n\n> This will cause confusion with OEM binding type implementation if any.\n\nHow?\n\n> It is responsibility of tx to fill the medium specific header before transmission, and it should accordingly handle this\n\nThe new callback just shifts that exact logic you mention out of the tx callback into the frame callback. As mentioned above, both of these callbacks are implemented by the binding. Nothing's really new in that regard, it just formalises the phases that were previously implemented by tx() in an ad-hoc way.\n\n> Note: There are certain advantage / disadvantage for both the models. The disadvantage i forsee in the other end is\n> 1. Binding must have this implementation --> checking route and doing the same\n> 2. By that time, when TX is doing the same, route table shouldn't be updated (But i am not worried about this one, much, as in any way, we need to clear out the pkts in queue based on routing update).\n\nI'm not following what your models are here. Can you clarify?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 70,
                    "deletions": -5
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 5
        },
        {
            "number": 3,
            "revision": "cf38e5570501e55862746a0d6d58cd57f7bc0f98",
            "parents": [
                "0ab605ae7999481c6666ef3d9779eb4eae96d446"
            ],
            "ref": "refs/changes/86/34286/3",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1605067417,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 70,
                    "deletions": -5
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 5
        },
        {
            "number": 4,
            "revision": "7a34a6df89d1da3b94ada438b0074d4854bf0e1a",
            "parents": [
                "8b779107e734c4ad315fa2b9ba6d516c9ff54c96"
            ],
            "ref": "refs/changes/86/34286/4",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1605068670,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Could you elaborate on why this (rendering all packets at once) is better though?\n\nIt looks like the main part of this change is that we can perform the route lookup once, during the initial message queue, rather than on each TX.\n\nHowever, that means we may be using stale physical addressing data on TX, are you OK with that? Not that it matters for either of the in-tree bindings, but we'll hit this later.\n\nIt might be worthwhile putting a comment on the binding->tx() function that the packet is required to be framed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "So backing up, I think I was trying to make the provisional EIDs work without carving them out into a separate address space like the current provisional EID patch does. Framing the packets all at once was a way to ensure that we didn't hit issues with that EID being reassigned (transitioning from locally provisional to formally assigned in the global sense) in between queuing the packets and having them hit the wire.\n\nThere was one race condition that I couldn't eliminate that drove me to separate out the provisional EIDs into a separate address space.\n\nWith that, I think the motivation for the framing patches disappears. Let me double check all the reasoning."
                },
                {
                    "file": "core.c",
                    "line": 1377,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "yikes!"
                },
                {
                    "file": "core.c",
                    "line": 1377,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yeah, that is ... not good.\n\nI should probably split it out into a separate patch!"
                },
                {
                    "file": "core.c",
                    "line": 1377,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done: https://gerrit.openbmc-project.xyz/c/openbmc/libmctp/+/39777"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 70,
                    "deletions": -5
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 5
        }
    ]
}