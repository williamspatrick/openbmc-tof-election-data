{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "I4325aac7737db59aaa11359ad7a0d575957f16e7",
    "number": 47512,
    "subject": "FruUtils: Add support for finding FRU at an offset",
    "owner": {
        "name": "Oskar Senft",
        "email": "osk@google.com",
        "username": "osenft"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/47512",
    "commitMessage": "FruUtils: Add support for finding FRU at an offset\n\nThis change adds findFRUHeader which can detect non-IPMI headers to\nidentify the offset for IPMI FRU data. An implementation for \"$TYAN$\"\nhas been added. The new findFRUHeader is now used by readFRUContents\nto generically read IPMI FRU both at offset 0 and at a offset as\ndetermined by findFRUHeader.\n\nSigned-off-by: Oskar Senft <osk@google.com>\nChange-Id: I4325aac7737db59aaa11359ad7a0d575957f16e7\n",
    "createdOn": 1633492503,
    "lastUpdated": 1634407495,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1633492503,
            "reviewer": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1633492513,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633492772,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/27542/ : SUCCESS"
        },
        {
            "timestamp": 1633552389,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)\n\nCouple minor things, then this looks fine to me."
        },
        {
            "timestamp": 1633552496,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1: Code-Review+1\n\nSome maintainer notes, even though we're hardcoding \"tyan\" into a daemon, this should have applications for more than just that system, and should work just fine as a pattern for matching EEPROMs that don't necessarily follow the FRU spec to the letter.  In the future we could extend this to support non IPMI FRUs as well, but that's a different story.\n\nLeaving open for a little bit to see if anyone else has strong opinions here."
        },
        {
            "timestamp": 1633572917,
            "reviewer": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1633572927,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633572960,
            "reviewer": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1633573177,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/27681/ : SUCCESS"
        },
        {
            "timestamp": 1633620945,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)\n\nLGTM, leaving in review for a bit to see if anyone else has an opinion here."
        },
        {
            "timestamp": 1633653941,
            "reviewer": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1633712620,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1633717740,
            "reviewer": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1633724530,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2: Code-Review+1\n\nLGTM"
        },
        {
            "timestamp": 1634327077,
            "reviewer": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "message": "Patch Set 2:\n\nPing ... any more comments, thoughts?"
        },
        {
            "timestamp": 1634407492,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+2"
        },
        {
            "timestamp": 1634407495,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as bd4075f74380271e58d01097cd10c6e1e2c3b92d by Ed Tanous"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "63148b812d0f937a31f9f44838be577c75dfc56e",
            "parents": [
                "8bb94ed6c9d64042ef367b5ff679336ff4d75093"
            ],
            "ref": "refs/changes/12/47512/1",
            "uploader": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "createdOn": 1633492503,
            "author": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/FruUtils.cpp",
                    "line": 609,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If we used std::span for these, don't the default overloads for == work to our favor and render this code unneeded?"
                },
                {
                    "file": "src/FruUtils.cpp",
                    "line": 609,
                    "reviewer": {
                        "name": "Oskar Senft",
                        "email": "osk@google.com",
                        "username": "osenft"
                    },
                    "message": "Ah yes, thanks for pointing that out! I should have done a bit more searching here. I forgot about std::equal which *almost* solves this issue. We also need to check for a being longer than b. I removed the code and folded it into findFRUHeader. I think it's readable \"enough\" like this. If not, we can move it back into an \"arrayStartsWith\" type function."
                },
                {
                    "file": "test/test_fru-utils.cpp",
                    "line": 150,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "[[maybe_unused]] here please because.... something something, iso compliance \ud83d\ude0a"
                },
                {
                    "file": "test/test_fru-utils.cpp",
                    "line": 150,
                    "reviewer": {
                        "name": "Oskar Senft",
                        "email": "osk@google.com",
                        "username": "osenft"
                    },
                    "message": "Nice, thank you! I guess I need to learn C++17 ...\n\nFixed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/FruUtils.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "src/FruUtils.cpp",
                    "type": "MODIFIED",
                    "insertions": 76,
                    "deletions": -20
                },
                {
                    "file": "test/test_fru-utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 100,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 193,
            "sizeDeletions": 20
        },
        {
            "number": 2,
            "revision": "d94e194fb8b18769fa3bb13c41471c20cbcd0a90",
            "parents": [
                "8bb94ed6c9d64042ef367b5ff679336ff4d75093"
            ],
            "ref": "refs/changes/12/47512/2",
            "uploader": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "createdOn": 1633572917,
            "author": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/FruUtils.cpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This wasn't quite what I was thinking, I was thinking something like:\n\nstd::span(tyanHeader.data(), tyanHeader.size()) != std::span(blockData.data(), blockData.size())\n\nWith that said, your code is fine too, and perfectly readable, so up to you if you want to change."
                },
                {
                    "file": "src/FruUtils.cpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Oskar Senft",
                        "email": "osk@google.com",
                        "username": "osenft"
                    },
                    "message": "Oh, I see. As I understand, operator!= for std::span just uses std::equal in the end, so I think I'll stick with the current implementation."
                },
                {
                    "file": "src/FruUtils.cpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The advantage is that you don't have to rely on the size check, because std::equal<std::span> already has that check in it, which would let you delete a line of code.\n\nBut again, the code here is clear enough, so it's fine.  Also, it turns out we don't have c++20 turned on for this repo yet, so my point is largely moot until that happens."
                },
                {
                    "file": "src/FruUtils.cpp",
                    "line": 618,
                    "reviewer": {
                        "name": "Oskar Senft",
                        "email": "osk@google.com",
                        "username": "osenft"
                    },
                    "message": "Haha, ok :-)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/FruUtils.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "src/FruUtils.cpp",
                    "type": "MODIFIED",
                    "insertions": 60,
                    "deletions": -20
                },
                {
                    "file": "test/test_fru-utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 100,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 177,
            "sizeDeletions": 20
        },
        {
            "number": 3,
            "revision": "bd4075f74380271e58d01097cd10c6e1e2c3b92d",
            "parents": [
                "a0d1b3f89cee163915ff51b97237f30bb063d96e"
            ],
            "ref": "refs/changes/12/47512/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1634407495,
            "author": {
                "name": "Oskar Senft",
                "email": "osk@google.com",
                "username": "osenft"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/FruUtils.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "src/FruUtils.cpp",
                    "type": "MODIFIED",
                    "insertions": 60,
                    "deletions": -20
                },
                {
                    "file": "test/test_fru-utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 100,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 177,
            "sizeDeletions": 20
        }
    ]
}