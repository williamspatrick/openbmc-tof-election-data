{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "topic": "need-36275",
    "id": "I8f0cc80b9b25d7cae43cad913d57912ac3531e1a",
    "number": 36275,
    "subject": "Add Mutable property to Sensor Value interface",
    "owner": {
        "name": "Josh Lehan",
        "email": "krellan@google.com",
        "username": "Krellan"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36275",
    "commitMessage": "Add Mutable property to Sensor Value interface\n\nCreating new \"Mutable\" property in the D-Bus Sensor object,\nin the Value interface.\n\nThis is false by default, except for PwmSensor.\n\nIn FanMain, if the JSON parameter \"Mutable\" exists,\nand is true, the \"Mutable\" property will be set true,\nfor the PwmSensor corresponding to that fan.\n\nThis could be implemented for all other sensors as well,\nbut the immediate need was for PwmSensor.\n\nThe purpose of \"Mutable\" is to provide a hint,\nto external-facing services such as IPMI,\nso that they can know how to secure their sensor values,\neither with read-only permissions or read-write permissions.\n\nIt is intentionally different from the already-existing\nD-Bus write permission of the Value property itself,\nwhich is intended for local D-Bus use,\nnot for granting write permission to external users.\n\nThis achieves feature parity with the ipmi::sensor::Mutability\nparameter of the old hardcoded YAML configuration files,\nas used by phosphor-host-ipmid.\n\nSigned-off-by: Josh Lehan <krellan@google.com>\nChange-Id: I8f0cc80b9b25d7cae43cad913d57912ac3531e1a\n",
    "createdOn": 1599384676,
    "lastUpdated": 1627710270,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1599384676,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1599384688,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599384695,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4306/"
        },
        {
            "timestamp": 1599384717,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4306/ : FAILURE"
        },
        {
            "timestamp": 1599387794,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1599387808,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599387815,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4308/"
        },
        {
            "timestamp": 1599387882,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4308/ : SUCCESS"
        },
        {
            "timestamp": 1599388549,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\nI am introducing a new Value object property \"ExtSettable\" which can be used to tell whether or not external write permission should be granted. All sensors are read-write on D-Bus, but read-only to the outside world (such as an IPMI server) by default. This new property lets you specify that you want a sensor to be read-write to the outside world as well. The idea is that the IPMI server can use this property to then set the appropriate permission bit in the SDR accordingly. It is not limited to IPMI, though."
        },
        {
            "timestamp": 1599462888,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1599539931,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(5 comments)\n\nGood comments, thanks. The use case here is to tell the IPMI server to serve these marked sensors with read-write permission, instead of the default of read-only permission. I don't yet see a way to cleanly do this within the sensor model yet. D-Bus write permissions aren't the same, because all sensors are writeable internally with D-Bus."
        },
        {
            "timestamp": 1599541335,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> (5 comments)\n> \n> Good comments, thanks. The use case here is to tell the IPMI server to serve these marked sensors with read-write permission, instead of the default of read-only permission. I don't yet see a way to cleanly do this within the sensor model yet. D-Bus write permissions aren't the same, because all sensors are writeable internally with D-Bus.\n\nThat's what I'm a little confused on.  IPMI has no read vs read-write concept of a \"permission\".  There's the SDR, but there's nothing in that that specifies if a sensor is read, or is read-write.\n\n\"D-Bus write permissions aren't the same, because all sensors are writeable internally with D-Bus.\"\nThe project as a whole idealizes that the dbus interface should match the user behavior wherever possible.  If the user isn't allowed to write a value, then it should've be writeable by dbus.  This prevents having to duplicate code across dbus/redfish/IPMI/whatever interface we dream up next."
        },
        {
            "timestamp": 1599541751,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > (5 comments)\n> > \n> > Good comments, thanks. The use case here is to tell the IPMI server to serve these marked sensors with read-write permission, instead of the default of read-only permission. I don't yet see a way to cleanly do this within the sensor model yet. D-Bus write permissions aren't the same, because all sensors are writeable internally with D-Bus.\n> \n> That's what I'm a little confused on.  IPMI has no read vs read-write concept of a \"permission\".  There's the SDR, but there's nothing in that that specifies if a sensor is read, or is read-write.\n> \n> \"D-Bus write permissions aren't the same, because all sensors are writeable internally with D-Bus.\"\n> The project as a whole idealizes that the dbus interface should match the user behavior wherever possible.  If the user isn't allowed to write a value, then it should've be writeable by dbus.  This prevents having to duplicate code across dbus/redfish/IPMI/whatever interface we dream up next.\n\nScratch that, I stand corrected, it is in the SDR.  I get why this is needed now, but phosphor-dbus-interfaces is the right place to start this conversation about a new interface."
        },
        {
            "timestamp": 1599541844,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1599584136,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1599596599,
            "reviewer": {
                "name": "Peter Lundgren",
                "email": "peterlundgren@google.com",
                "username": "peterlundgren"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1599606921,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(2 comments)\n\nThanks for looking at this. The setting is optional, it will default to false if not present. I'm adding it to PwmSensor first, because that's the most urgent for our need. Adding it to other sensors would be straightforward if desired."
        },
        {
            "timestamp": 1599611978,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1599618975,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1599622913,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1599627418,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1599628759,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1599629137,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)\n\nI need to think on this a little more (and probably bug James).  Not sure what the right approach is here."
        },
        {
            "timestamp": 1599630205,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(3 comments)\n\n> Patch Set 2:\n> \n> (2 comments)\n> \n> I need to think on this a little more (and probably bug James).  Not sure what the right approach is here.\n\nOK, cool, be good to know your thoughts."
        },
        {
            "timestamp": 1599648851,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1599648865,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599648872,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4452/"
        },
        {
            "timestamp": 1599648946,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4452/ : SUCCESS"
        },
        {
            "timestamp": 1599649359,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Topic set to need-36275"
        },
        {
            "timestamp": 1599650082,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 3:\n\nOK, I took all the comments into account.\n\nThe old \"ExtSettable\" is now called Mutable, which makes more sense, as it is to provide feature parity with the old ipmi::sensor::mutability parameter of the old hardcoded YAML files. Since it is a required, not optional, parameter in the Value interface, I am making it more general. All sensors will now include this parameter, defaulting to false. This seems cleaner than adding an individual special case in PwmSensor, although PwmSensor will still be the first implementation of it being set to something that is not false.\n\nAlso, made YAML docs in phosphor-dbus-interfaces, another change which is topic-linked to this change."
        },
        {
            "timestamp": 1599661882,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1599661998,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> OK, I took all the comments into account.\n> \n> The old \"ExtSettable\" is now called Mutable, which makes more sense, as it is to provide feature parity with the old ipmi::sensor::mutability parameter of the old hardcoded YAML files. Since it is a required, not optional, parameter in the Value interface, I am making it more general. All sensors will now include this parameter, defaulting to false. This seems cleaner than adding an individual special case in PwmSensor, although PwmSensor will still be the first implementation of it being set to something that is not false.\n> \n> Also, made YAML docs in phosphor-dbus-interfaces, another change which is topic-linked to this change.\n\nLooks like you are intending for this to be on all sensors.  I think I can get behind that (assuming James and Patrick can), but it means you'll need to put together a patch for phosphor-hwmon as well to add that interface.  I'm betting over there it'll always be false, so it should be a line or two of code."
        },
        {
            "timestamp": 1599717087,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 3:\n\n(3 comments)\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > OK, I took all the comments into account.\n> > \n> > The old \"ExtSettable\" is now called Mutable, which makes more sense, as it is to provide feature parity with the old ipmi::sensor::mutability parameter of the old hardcoded YAML files. Since it is a required, not optional, parameter in the Value interface, I am making it more general. All sensors will now include this parameter, defaulting to false. This seems cleaner than adding an individual special case in PwmSensor, although PwmSensor will still be the first implementation of it being set to something that is not false.\n> > \n> > Also, made YAML docs in phosphor-dbus-interfaces, another change which is topic-linked to this change.\n> \n> Looks like you are intending for this to be on all sensors.  I think I can get behind that (assuming James and Patrick can), but it means you'll need to put together a patch for phosphor-hwmon as well to add that interface.  I'm betting over there it'll always be false, so it should be a line or two of code.\n\nThanks. If it's changed to be a new interface, instead of another mandatory property of the existing Value interface, then that might make it not required to be on all sensors."
        },
        {
            "timestamp": 1599779821,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(5 comments)\n\nI suspect the API changes are going to modify this some, but I answered your questions as best I could."
        },
        {
            "timestamp": 1600058585,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1600060105,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 3:\n\n(5 comments)\n\n> Patch Set 3:\n> \n> (5 comments)\n> \n> I suspect the API changes are going to modify this some, but I answered your questions as best I could.\n\nOK, thanks for answering these! I will park this idea for a little, as I'm busy with other things, but will get back to it."
        },
        {
            "timestamp": 1600060105,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1600060114,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1620768582,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1620768596,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620768640,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17042/ : FAILURE"
        },
        {
            "timestamp": 1620769589,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1620769601,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620769857,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17045/ : FAILURE"
        },
        {
            "timestamp": 1620775715,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1620775726,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620775845,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/17063/ : SUCCESS"
        },
        {
            "timestamp": 1620775972,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 6:\n\nBrought up to date, cleaned up bit rot."
        },
        {
            "timestamp": 1620776124,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 6:\n\nAnother change that has a similar idea: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/42453"
        },
        {
            "timestamp": 1620972134,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 7: Patch Set 6 was rebased."
        },
        {
            "timestamp": 1620972164,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620972284,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/17258/ : SUCCESS"
        },
        {
            "timestamp": 1624377333,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Removed reviewer Patrick Venture."
        },
        {
            "timestamp": 1627636769,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Abandoned\n\nSuperceded by https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/45405"
        },
        {
            "timestamp": 1627646376,
            "reviewer": {
                "email": "rashmi.r.v@linux.intel.com",
                "username": "Rashmi-RV"
            },
            "message": "Patch Set 7:\n\n(2 comments)"
        },
        {
            "timestamp": 1627698567,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 7:\n\n(2 comments)"
        },
        {
            "timestamp": 1627710270,
            "reviewer": {
                "name": "Alex Qiu",
                "email": "xqiu@google.com",
                "username": "alex310110"
            },
            "message": "Removed reviewer Alex Qiu."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "b1d97fbd752870bd919322b410853f202e424e5f",
            "parents": [
                "838529b5400129e8a3a8007ca83102c7733ec01c"
            ],
            "ref": "refs/changes/75/36275/1",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599384676,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": -8
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 40,
            "sizeDeletions": 10
        },
        {
            "number": 2,
            "revision": "3abb40674b474d4f522f27696c4c372a3a597709",
            "parents": [
                "838529b5400129e8a3a8007ca83102c7733ec01c"
            ],
            "ref": "refs/changes/75/36275/2",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599387794,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done this way, this is going to require a change to phosphor-dbus-interfaces, but I suspect you don't actually need it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Hmm, interesting. Curious why it would need a change to that module also."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Because phosphor-dbus-interfaces is the projects documentation for DBus APIs.  Also, as written, I'm guessing it's not going to be accepted, as you'd have to implement it in all sensors (given that you've made it non-optional).  I suspect it needs to go into its own API."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Cool, thanks for telling me about phosphor-dbus-interfaces, didn't know about that one. I'm happy to add it to the YAML documentation there, it looks straightforward. Also, it's completely optional: if that parameter is missing, the assumption is that it's false (the sensor is read-only, not read-write, from IPMI's point of view)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If it's optional, you need to define it on its own interface that can be optionally included.  As written, it's required."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Wow, all properties are required? Is this enforced by D-Bus, or merely by documentation convention in the YAML? https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/Sensor/Value.interface.yaml\n\nHaving \"ExtSettable\" exist in some sensors, but not in other sensors, seemed just fine during my testing. No errors from D-Bus.\n\nIf there's no way to cleanly have an optional property, then I'm happy adding something to the Sensor.hpp base class that would always instantiate this property (defaulting to false, of course). Would this be acceptable?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep, all properties are required.  This is a convention of how a dbus interfaces works, the YAML is just implementing what dbus recommends.\n\nIn terms of \"enforcement\", some of the bindings enforce it (and have no way to pull out interface properties optionally) and some don't.\n\n\"Having \"ExtSettable\" exist in some sensors, but not in other sensors, seemed just fine during my testing. No errors from D-Bus.\"\nYep, because nobody is trying to use it, and ipmi uses one of the libraries that lets you decide on the \"the client has broken the dbus schema, what do you want to do\".\n\n\"If there's no way to cleanly have an optional property\"\nThere is, just declare a new interface with that property on it.  That's how we handle this in other places.  Your use case is similar to things like thresholds."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Hmm, interesting point, thanks. It's unfortunate that D-Bus schemas don't cleanly support optional parameters cleanly, but it looks like those are the cards we have been dealt.\n\nI think it's appropriate to have \"Mutable\" still be in the Value interface, since it's an important characteristic of the value, just like MinValue and MaxValue."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "They support optional parameters just fine, and we do it all the time, you just have to put it in its own interface.\n\n\"I think it's appropriate to have \"Mutable\" still be in the Value interface, since it's an important characteristic of the value, just like MinValue and MaxValue.\"\n\nDisagree that they're the same.  Min/Max Value parameters are in the Value interface because they're required for the implementation to function (intel-ipmi-oem needs them).  Your mutable property is not required on every sensor, so it needs to go into another interface.\n\nIt should be noted that if you wanted to put that in the Value interface, and found a good reason to do so, you would be required to update ALL sensors in the project to expose it.  I'm guessing you're not wanting to sign up to do that."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "The intel-ipmi-oem also needs the Mutable bit, as it's a mandatory part of each SDR entry. Just like the coefficients (as derived from MinValue and MaxValue bounds), the write-permission bit is something that needs to be filled in, for each SDR entry. So, logically, it belongs alongside MinValue and MaxValue, as parameters that influence the creation of the SDR. Although, until now, this bit has always just been hardcoded to false, so it wasn't a concern until now.\n\nI like the idea of putting it in another interface, \"xyz.openbmc_project.Sensor.Mutable\", that would have a single property, Mutable, boolean. Then, since it's a different interface, it would be optional, as evidently interfaces are optional but properties (within the interface) are not."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The intel-ipmi-oem also needs the Mutable bit, as it's a mandatory part of each SDR entry. Just like the coefficients (as derived from MinValue and MaxValue bounds), the write-permission bit is something that needs to be filled in, for each SDR entry. So, logically, it belongs alongside MinValue and MaxValue, as parameters that influence the creation of the SDR. Although, until now, this bit has always just been hardcoded to false, so it wasn't a concern until now.\n\nBeing in the SDR doesn't make it mandatory on DBus if there's a reasonable default.  Considering that this is the first sensor that would actually set that bit, and likely the only sensor that will need it, it seems like the the default should be off, with the optional interface able to set it to ON.\n\nAlso, that bit was added in a later version of the spec, so technically it's not \"required\" from a compatibility standpoint either.  I believe reserved bits are meant to be set to 0.\n\nIf you really want to make it mandatory, you can, but it's going to force you to make a lot of changes to multiple projects (all the sensor repos) and the last couple times we did that (with reading to double, or adding MinValue and MaxValue) it took a long time to get that breaking change through.  I'm trying to help you avoid that pain here.\n\n> \n> I like the idea of putting it in another interface, \"xyz.openbmc_project.Sensor.Mutable\", that would have a single property, Mutable, boolean. Then, since it's a different interface, it would be optional, as evidently interfaces are optional but properties (within the interface) are not.\n\n\nSo would that mean that MaxValue and MinValue are mutable too?  In terms of sensors, I think we know the meaning: reading is mutable, but in the context of other things and as a generic openbmc concept (which is what we're trying to get here) I think you need to specify which properties are mutable."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yes, other properties should be mutable. Not sure about MinValue and MaxValue, these are used to set the IPMI SDR coefficients, and these aren't changeable at runtime once they are set. However, the IPMI \"set sensor value\" command has many optional parameters, and things like thresholds are certainly settable or not. These would be good candidates to also receive Mutable flags."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why would anyone choose to set it to false?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "They wouldn't, but I needed some variable I could set to indicate presence of this choice, and bool is the simplest."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I get it now.  This is driving the SDR."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Cool, good. It also isn't tied only to IPMI, it's a general thing that could also inform Redfish permissions in the future, if desired."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think that Redfish has a read-only property that we normally define at runtime.  Normally it's declared in CSDL schema.  Technically in the sensor write case, we're breaking the redfish standard, but that's another story."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Interesting. I took a quick look at the Sensor schema in Redfish, and it might be something they've overlooked altogether? I couldn't find any reference to read-only or read-write properties of sensors, or a \"write to sensor value\" command.\n\nThe idea is not to tie it to IPMI, but rather, to be general enough that it would apply to whatever protocol would be used to serve sensors up to those outside the BMC."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "bmcweb doesn't implement the Sensor or SensorCollection schemas today.  They're relatively new.  We implement Thermal and Power schemas, which are similar.\n\nYeah, generic is fine, I'm just letting you know that redfish doesn't have a way to describe that that I'm aware of.\n\nIn terms of Redfish being used to WRITE sensor values, it's a fairly uncommon use case, although I believe Richard was looking into changing the redfish schema to that effect."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, thanks. It does seem bizarre, almost an oversight, that Redfish doesn't have the concept of an external user wanting to write, not just read, a sensor value."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I expected it would get added when the in-band redfish spec came out, but it hasn't seemed to."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Hmm, this does seem like an oversight, I should ask around. Would be a shame if the Redfish standard got locked in without supporting this feature, as it would be a step backward from IPMI."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Redfish is never \"locked in\".  It evolves and gets changed 2-3 times a year.  So long as changes are backward compatible (which going from read only to read/write on a parameter would be) they're generally acceptable, so long as there's a value use case."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, good. I think this is a good use case, to be able to have sensors be read-write as well as read-only (of course, they should still be read-only by default). It would help Redfish achieve feature parity with IPMI."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See comment in later files.  Why do 2 dbus requests instead of one?  Have IPMI try to call SetProperty, and if it fails, you know the sensor isn't writeable.  So far as I'm aware, there isn't a \"this sensor is writeable\" field in the SDR we need to fill."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "SetProperty should succeed for all sensors, since write commands aren't restricted over D-Bus. If you're local running on the BMC, you can change any sensor at will. We might not want this for all IPMI users, though. In the IPMI service we're using, all sensors default to read-only permission, so I needed a way to tell it to mark some of them as read-write permission, for sensors I want external users to be able to change.\n\nAs for \"this sensor is writeable\" field in the SDR, I checked the IPMI spec, and it's byte 11 bit 7 in the SDR, table 43-1 in the IPMI document."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "An example is here: https://github.com/openbmc/phosphor-host-ipmid/blob/a8be7dc839e1dbf561dd255a4ee1e7b6fb091c8e/sensorhandler.cpp#L959\nI could change the name of \"ExtSettable\" to \"Mutability\" or \"Mutable\" if desired, it would make more sense against the naming in the code here."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep, I gotcha now."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Um...... Sensor override is a thing, and makes this statement false.  Basically every sensor is externally settable."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "By \"externally\" I meant somebody not on the BMC, perhaps using IPMI to communicate with the BMC. I thought all the sensors were read-only by default, from the point of view of somebody outside the BMC. Inside the BMC, of course, every sensor can be easily written with D-Bus."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "This is also to help entity-manager achieve feature parity with the old YAML configuration files. YAML had a setting \"Mutability\" that would achieve this, but as of now, entity-manager does not, so this will help add it, in such a way that it's both readable by IPMI now and Redfish in the future."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "fair point."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm trying to understand the point of this.  Why do callers need to know if something is settable?  Can't they just try to set it, and if it returns that it's read only, they'll know.\n\nAlso, you've added an config property, but you haven't actually enforced its behavior anywhere, by making the Value property read-only."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Again, it's not about D-Bus permissions. All sensors remain writeable in D-Bus. This is only a hint to the external service (IPMI in this case, but it's not limited to IPMI) that they should serve the sensor to their external users, outside the BMC, with read-write permissions instead of read-only permissions."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Peter Lundgren",
                        "email": "peterlundgren@google.com",
                        "username": "peterlundgren"
                    },
                    "message": "Ed, would you prefer if this was IPMI specific (e.g. calling it IPMISettable)? Or should we keep it general purpose?\n\nLooks like you've come to an understanding of why we want this, but I'll restate it again just to be clear. We're looking for a way to configure which sensors should be advertised as settable in the IPMI SDR. We have a pretty hacky patch to add write support to intel-ipmi-oem/src/sensorcommands.cpp. This property would allow opting in to IPMI sensor writes."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I would keep it general-purpose as there's nothing here that specifically limits it to IPMI. I believe Redfish will have the same concerns."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I don't understand the statement of this being a hint to IPMI.\nWill it be enforced and who would be responsible to enforce this, i.e. block the write when it is not settable, which is default? Will IPMI do it? And redfish also has to do it independently?"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "The purpose of it is to achieve feature parity with the existing \"mutability\" parameter that can be set in the YAML files for static phosphor-host-ipmid configuration. https://github.com/openbmc/phosphor-host-ipmid/blob/master/scripts/sensor-example.yaml#L16\n\nThere's currently no parameter in entity-manager JSON files that can provide the equivalent, to my knowledge. I'm considering renaming \"ExtSettable\" to \"Mutable\".\n\nIt would be enforced by the IPMI server (or Redfish server), as per their respective protocols. If an external user tries to use IPMI to set a sensor that is read-only, then this action should be disallowed, and conversely, if the sensor is read-write, this action should be allowed. https://github.com/openbmc/phosphor-host-ipmid/blob/a8be7dc839e1dbf561dd255a4ee1e7b6fb091c8e/sensorhandler.cpp#L376"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Agreed, I'd like to keep this general purpose.  I'd like the \"blocking\" behavior to be enforced in the individual sensors, as there are APIs that operate directly on dbus, and they should obey this parameter too.\n\nWith that said, I think there's another track we need to go here: DBus has an \"access\" attribute that can declare a property read or read/write.  I suspect that's the mechanism we should be using here, not a separate property to declare the permissions.\n\nhttps://www.gnu.org/software/emacs/manual/html_node/dbus/Introspection.html\n\n\"A property element has no arg child element. It just has the attributes name, type and access, which are all mandatory. The access attribute allows the values \u2018readwrite\u2019, \u2018read\u2019, and \u2018write\u2019.\""
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I thought about that, but I don't want to enforce it at the D-Bus layer. As it is now, by default all sensor values on D-Bus are read-write, which can be handy for testing things by stuffing false values into the sensor readings. This is safe and secure, because it's only internally within the BMC. Conversely, by default all sensor values served over IPMI are read-only from the perspective of those outside the BMC. This is safe and secure, because it keeps a sensor value from being maliciously updated by something outside the BMC. So, there's two different layers here. I don't want to tie one layer to the other, because it can be very useful to have something read-only from the outside world but read-write when inside."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is making me start to wonder if we need to invent a \"Sensor Writer\" interface for testing rather than just using SetProperty, so we can differentiate between \"I was to set this for testing\" and \"I want to set this for real\"\n\n\"This is safe and secure, because it's only internally within the BMC.\"\nNot on most systems.  DBus is a public (outside the box) facing API through REST on most setups today.\n\n\"This is safe and secure, because it keeps a sensor value from being maliciously updated by something outside the BMC\"\nThis is the problem space that Special Mode Manager is indented to solve.  Sensors are only settable if in Manufacturing, or Test modes, which require some gymnastics to get into, thus proving physical presence.  With that said, I'm not an expert here, but as-written, dbus should be considered external for the time being."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Wow, did not know D-Bus was given an external interface so that outsiders could play with the bus. That seems rather insecure to me, it opens up a large new attack surface inside. Hopefully that isn't enabled by default?\n\nHaving \"Sensor Writer\" for testing, or \"Special Mode Manager\", sounds like good ideas for the future, but beyond the scope of this patch."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Eh, kinda insecure.  Yes, it's enabled by default, because prior to me writing bmcweb, that was the projects only user-facing API.  It requires root, so it's not any more insecure than it is without, as you could just as easily SSH in and do all the same stuff.\n\n\"Having \"Sensor Writer\" for testing, or \"Special Mode Manager\", sounds like good ideas for the future, but beyond the scope of this patch.\"\n\nWe need to make sure we haven't broken the sensor override semantics.  So long as we haven't done that, I'm fine with doing it this way."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yep, if somebody can SSH in, all bets are off, that's understood.\n\nWhat are the \"sensor override semantics\" that you speak of? Not sure what you mean."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Doing a SetProperty on the Value interface is what constitutes a \"sensor override\" today, and is used for testing pathological sensor cases that couldn't be created in practice (or would require destroying the platform to do so).  At this point, you've overloaded that definition to also include the golden path, which makes me wonder if we need to differentiate \"this is expected\" from \"we're in test mode\" in any case.  I know for the other sensors, the distinction is used to disable the scan loop, but this doesn't have a scan loop.\n\nOn the first sensor override, there's usually something logged to the system log, and depending on where you've injected this, I'm not sure if you'll get that log on the first IPMI set.  I don't recall the semantics there."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Not sure if we're talking about the same thing or not. As for sensor override, I thought it was always OK to send a D-Bus command to the sensor and change its value manually. It's really two different things: the D-Bus permissions internally, and the IPMI SDR permissions externally. I think it's good to maintain this separation, instead of trying to bleed one layer into another."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -6
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 8
        },
        {
            "number": 3,
            "revision": "dd7adf5586c277e107e43eebc01917a104d7bb51",
            "parents": [
                "f920e09ce4a05265b3d624aca2556579e05d2caf"
            ],
            "ref": "refs/changes/75/36275/3",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599648851,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sensor.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Mutability isn't a property of all sensors, so it doesn't really belong in this class.\n\nUnfortunately this means duplicating some of your code.  This class is already a mess an needs broken up into smaller pieces, lets no make it worse.\n\nAlso, I suspect the number of sensors that need to be made mutable is small, we can probably just do it in those cases (should be just external sensor and pwmsensor, right?)"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Makes sense. I can refactor the Mutable feature, so that it doesn't require such a large blast radius."
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 361,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Does this need to be configurable at all?  Aren't all fans by definition mutable?"
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 361,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yes, they should be. However, the IPMI SDR was still showing them as read-only, until I added this. I want to give external users the ability to also run the fans in manual mode, writing the PWM of their choice."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -6
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 55,
            "sizeDeletions": 27
        },
        {
            "number": 4,
            "revision": "7f94b7be065f0c1a8fedf965e37770d3343fe88e",
            "parents": [
                "5636d52baad683fbb51447a716d66cb06959e52f"
            ],
            "ref": "refs/changes/75/36275/4",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1620768582,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 60,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 28
        },
        {
            "number": 5,
            "revision": "2dcec37d7ec8fc5dc6c17825b29252f1eddc60fa",
            "parents": [
                "5636d52baad683fbb51447a716d66cb06959e52f"
            ],
            "ref": "refs/changes/75/36275/5",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1620769589,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 65,
                    "deletions": -4
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 101,
            "sizeDeletions": 31
        },
        {
            "number": 6,
            "revision": "1a9da909a2586542b3a7b6e709afa20f8126cf70",
            "parents": [
                "5636d52baad683fbb51447a716d66cb06959e52f"
            ],
            "ref": "refs/changes/75/36275/6",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1620775715,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 49,
            "sizeDeletions": 28
        },
        {
            "number": 7,
            "revision": "76dab94dcd40fe0d88340a1483d90166c1638b04",
            "parents": [
                "13b63f8f597d396db8b5bd182ac2e5814d599e2f"
            ],
            "ref": "refs/changes/75/36275/7",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1620972134,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 24,
                    "reviewer": {
                        "email": "rashmi.r.v@linux.intel.com",
                        "username": "Rashmi-RV"
                    },
                    "message": "How are we dealing with following conditions :\n1. If the values are set to errornoues values by mistake and never changed?\n2. If \"Mutable\" is set to TRUE by mistake and never changed?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 24,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "As for the Mutable parameter itself, it is boolean, it can only be true or false. Both values are valid. There can be no erroneous values here.\n\nIf a sensor has read-write permissions (Mutable is true), and the user sets the sensor value to a wild value that is out of range, that is a sensor-specific issue that the sensor implementation should deal with accordingly. As an example, in my implementation of PWM sensors, I clamp numeric values to (0.0, 100.0) range, and discard any writes that aren't numeric.\n\nI'm not sure how Mutable could be set to true by mistake. The value comes from configuration files (JSON in entity-manager, for example), and the Mutable parameter is read-only from an external user's point of view."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "email": "rashmi.r.v@linux.intel.com",
                        "username": "Rashmi-RV"
                    },
                    "message": "Tested?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "It's tested and working for me, and has been, for some time. I didn't put a \"Tested:\" line in the commit message, though, good catch.\n\nAlso, see https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/45405 for more recent discussion."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -1
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 49,
            "sizeDeletions": 28
        }
    ]
}