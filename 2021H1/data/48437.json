{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I7410feb0e17c5f6d555cd042f5e5b327de1910c5",
    "number": 48437,
    "subject": "cpuSensor:Check object validity in async callback",
    "owner": {
        "name": "Arun P M",
        "email": "arun.p.m@linux.intel.com",
        "username": "arun-pm"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/48437",
    "commitMessage": "cpuSensor:Check object validity in async callback\n\nSometimes the cpusensor crash was observed. The coredump was pointing\nto segmentation fault while executing callback function inside\nsetupRead().\nSimilar issue was observed in adcsensor.\nReference to the fix: 1afda6bbb6db0e266795af3229b962c32775b928\n\nThe timer cancel() in destructor cannot cancel the expired callback\nhandlers. In such cases if the callback handler is executed, the\nobject is deleted already.\n\nUse weak_ptr to check if the object is still valid before using these\nmember variables/functions.\nThe buffer used by async_read_util must guarantee that they remain\nvalid until the handler is called.\n\nTested: Stress tested by restarting the service. Service restart will\nforce re-creating the CPUSensor objects.\n`count=0; \\\n while true; \\\n do systemctl restart xyz.openbmc_project.cpusensor.service; \\\n count=$((count + 1)); \\\n echo $count; \\\n sleep 40; \\\n done `\n\nSigned-off-by: gokulsanker <gokul.sanker.v.g@intel.com>\nSigned-off-by: Arun P. Mohanan <arun.p.m@linux.intel.com>\nChange-Id: I7410feb0e17c5f6d555cd042f5e5b327de1910c5\n",
    "createdOn": 1635501347,
    "lastUpdated": 1638470528,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1635501347,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1635501361,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635501500,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1635501512,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29363/ : SUCCESS"
        },
        {
            "timestamp": 1635501517,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635501666,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29364/ : SUCCESS"
        },
        {
            "timestamp": 1635505318,
            "reviewer": {
                "email": "rashmi.r.v@linux.intel.com",
                "username": "Rashmi-RV"
            },
            "message": "Patch Set 2: Code-Review+1\n\nLgtm"
        },
        {
            "timestamp": 1635533112,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(6 comments)\n\nLooks good, just needs some minor cleanup."
        },
        {
            "timestamp": 1635533296,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1635551257,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1635785807,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1635804552,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Removed reviewer Andrew Jeffery."
        },
        {
            "timestamp": 1635837129,
            "reviewer": {
                "email": "JeffLin2@quantatw.com",
                "username": "JinFuLin"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1635854531,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1635854554,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635854596,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 3:\n\n(9 comments)"
        },
        {
            "timestamp": 1635854703,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29500/ : SUCCESS"
        },
        {
            "timestamp": 1635878952,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1635894001,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Removed reviewer Andrew Jeffery."
        },
        {
            "timestamp": 1635898569,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1635918774,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1635957990,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1636142778,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\nCan you please help to test this: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/48665  I think it solves the issue in a less invasive way."
        },
        {
            "timestamp": 1636350176,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> Can you please help to test this: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/48665  I think it solves the issue in a less invasive way.\n\nSure. I will update the results once I complete."
        },
        {
            "timestamp": 1637154445,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1637154458,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637154606,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30419/ : SUCCESS"
        },
        {
            "timestamp": 1637171315,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637314428,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637343075,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637350768,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637350895,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\nArun/Zhikui\n\nWould you mind rerunning your tests on current master (without this patch) to see if the seg faulting issue is resolved?  I'm open to the possibility that we still need the shared_from_this and weak_ptr stuff (although I don't see why in the below patch), but I think the inputBuf seg fault is resolved given the change in destructor ordering."
        },
        {
            "timestamp": 1637675659,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637687797,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637743937,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1637828418,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1637828436,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637828595,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30798/ : SUCCESS"
        },
        {
            "timestamp": 1637828769,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Uploaded patch set 6: Commit message was updated."
        },
        {
            "timestamp": 1638208652,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1638341287,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1638369511,
            "reviewer": {
                "name": "Gokul Sanker V G",
                "email": "gokul.sanker.v.g@intel.com",
                "username": "gokulsvg"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1638369526,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638369585,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/30981/ : FAILURE"
        },
        {
            "timestamp": 1638369784,
            "reviewer": {
                "name": "Gokul Sanker V G",
                "email": "gokul.sanker.v.g@intel.com",
                "username": "gokulsvg"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1638369796,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638369855,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/30982/ : FAILURE"
        },
        {
            "timestamp": 1638370055,
            "reviewer": {
                "name": "Gokul Sanker V G",
                "email": "gokul.sanker.v.g@intel.com",
                "username": "gokulsvg"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1638370066,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1638370186,
            "reviewer": {
                "name": "Suresh Vijayakumar",
                "email": "suresh.vijayakumar@intel.com",
                "username": "sureshvijayv1"
            },
            "message": "Patch Set 9: Code-Review+1\n\nLGTM"
        },
        {
            "timestamp": 1638370220,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30983/ : SUCCESS"
        },
        {
            "timestamp": 1638470202,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 9: Code-Review+1\n\nCode change in this patch lgtm. Other issue identified can be addressed separately."
        },
        {
            "timestamp": 1638470526,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9: Code-Review+2"
        },
        {
            "timestamp": 1638470528,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged by Ed Tanous"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "2762a10573d85d46c5d1ed34162db60ce9ed5d83",
            "parents": [
                "b782eec69267206863c07f9ea26b475be7f0f291"
            ],
            "ref": "refs/changes/37/48437/1",
            "uploader": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "createdOn": 1635501347,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 29,
                    "deletions": -14
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 20
        },
        {
            "number": 2,
            "revision": "e6243e33cf78eb5801a3b0cfa6bc54fef5745960",
            "parents": [
                "b782eec69267206863c07f9ea26b475be7f0f291"
            ],
            "ref": "refs/changes/37/48437/2",
            "uploader": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "createdOn": 1635501500,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I see the issue;  Move the declaration of readBuf to line 38, above inputDev, and leave it as-is.\n\nThe bug here is that inputDevice can hold a reference to readBuf, so readBuf MUST be declared first, such that it's destroyed after.  Once you've done that, the shared_ptr isn't required anymore."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FWIW, it looks like ADCSensor, HwMonTempSensor, and TachSensor have this bug as well;  I suspect we should test and fix those (but it can be in another patch if you like)."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": ">The bug here is that inputDevice can hold a reference to readBuf, so readBuf MUST be declared first, such that it's destroyed after.  Once you've done that, the shared_ptr isn't required anymore.\nThis make sense in theory. But I don't fully understand how the bug can manifest itself in practice here. \nWill inputDev destructor access the \"dangled\" readBuf reference when CPUSensor gets destructed, which I suppose will cause service to crash? If that is the case, why it does not happen more often including all the other services?\n\nAlso, this defect is a separate defect than async_read_util handler need to ensure CPUSensor is still valid. If CPUSensor is valid the readBuf should be valid, right?"
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Will inputDev destructor access the \"dangled\" readBuf reference when CPUSensor gets destructed, which I suppose will cause service to crash? If that is the case, why it does not happen more often including all the other services?\n\nYes, it will access the dangled constructor.  It probably doesn't happen in the other services because the way the stack is, readBuf isn't pointing at non-program owned memory, so accessing it doesn't cause any harm, even if it is undefined behavior.\n\n> \n> Also, this defect is a separate defect than async_read_util handler need to ensure CPUSensor is still valid. If CPUSensor is valid the readBuf should be valid, right?\n\nCorrect.  readBuf is part of CPUSensor, so if CPU sensor hasn't been destroyed, readBuf won't be destroyed.  The issue that I see is when CPUSensor is in the process of being destroyed, readbuf will be destroyed before inputDev, with inputDev still having a pointer (reference) to readBuf, which causes an issue."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Changing the order of declaration may solve the issue. But I myself was not able to reproduce this crash on demand. So I won't be able to confirm it. Similar issue was discussed in https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/31189/1/include/ADCSensor.hpp.\n\nBut the async_read_until says the caller should make sure the buffer is valid until the handler is getting called. https://www.boost.org/doc/libs/1_71_0/doc/html/boost_asio/reference/async_read_until/overload1.html\n\nConsidering that until the 'weakRef' is validated, we need the buffer to be valid. In that case I suppose we can't make use of a class variable directly."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Changing the order of declaration may solve the issue. But I myself was not able to reproduce this crash on demand. So I won't be able to confirm it. Similar issue was discussed in https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/31189/1/include/ADCSensor.hpp.\n> \n> But the async_read_until says the caller should make sure the buffer is valid until the handler is getting called. https://www.boost.org/doc/libs/1_71_0/doc/html/boost_asio/reference/async_read_until/overload1.html\n\nYep.  And if a read is in progress, the handler is called when the object is destroyed with operation_aborted.\n\n> \n> Considering that until the 'weakRef' is validated, we need the buffer to be valid. In that case I suppose we can't make use of a class variable directly.\n\nI'm not understanding why you can't use a class variable?  Class variables are destroyed in the reverse order from which they were created.  So long as readBuf is destroyed after inputDev, we've met the definition of what the boost docs require."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "My interpretation is that if CPUSensor is destroyed while async_read_until handler is already in the work queue (not because of cancel), then buffer become invalid before the handler is called."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "| I'm not understanding why you can't use a class variable? \nI meant same as Zhikui's comment. If CPUSensor is already destroyed while async_read_until handler is already in the work queue, then buffer become invalid before the handler is called."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> | I'm not understanding why you can't use a class variable? \n> I meant same as Zhikui's comment. If CPUSensor is already destroyed while async_read_until handler is already in the work queue, then buffer become invalid before the handler is called.\n\nThe error is when the CPUSensor is in the process of being destroyed.  readbuf has been destroyed, inputDev hasn't and is still running.  That doesn't mean we can't use a class variable, it just means we need to init/destroy them in the right order."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Why is this removed?"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Its moved outside constructor.\nPlease have a look at https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/48437/2/src/CPUSensorMain.cpp"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 144,
                    "reviewer": {
                        "email": "JeffLin2@quantatw.com",
                        "username": "JinFuLin"
                    },
                    "message": "Hi Arun P,\n\nI had tried to apply this patch and it seems that the reading value is \"nan\" and the property \"Available\" is false forever even if power status is on.\n\nDo you have facing the same issue in the test?\n\nAfter I add back this line, the sensor reading updated successfully and service alive."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 144,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "My bad. This line is really necessary for async_wait to work. I think I missed it while resolving merge conflict. I will update the patch set."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 121,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is going to malloc a buffer every loop, which is pretty inefficient, and I'm not sure why it's required.  Considering at CpuSensor::buffer is now covered by the weak_ptr like you've done on the line below, isn't that all that's needed?\n\nUpdate, I see the issue, see comment above."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 121,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Please find the comments above."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Declare your variables in the scope they're used."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "It's used at L156 as well."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please invert this check and have it return early to reduce the number of scopes."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 156,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Please move this before use line 161 (same as above)"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 156,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 241,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally we prefer *readBuf, but in this case, I suspect readBuf doesn't need to be a shared_ptr at all."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 241,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "*readBuf gives below error.\n\n| ../../../../../../workspace/sources/dbus-sensors/src/CPUSensor.cpp:244:41: error: no matching function for call to 'std::basic_istream<char>::basic_istream(std::__shared_ptr_access<boost::asio::basic_streambuf<>, __gnu_cxx::_S_atomic, false, false>::element_type&)'\n|   244 |     std::istream responseStream(*readBuf);"
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think this is needed here?  Or was there a change that necessitated this?"
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Yes. Without this change the setupRead is not working as expected.\n\nFor setupRead() to work, it needs a shared_ptr of the CPUSensor object. If we keep the setupRead() call inside constructor, before the shared_ptr gets created, it will invoke setupRead() and it fails."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -9
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 30,
            "sizeDeletions": 15
        },
        {
            "number": 3,
            "revision": "d1f41f33bb7f51543b5508c7213b57096ddc9b0c",
            "parents": [
                "3291b9c755458663b284d87fda8f580f7673ff76"
            ],
            "ref": "refs/changes/37/48437/3",
            "uploader": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "createdOn": 1635854531,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 30,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I was wrong about changing the threshold would cause sensors get destroyed and recreated. It is true for some sensors, but not cpusensor. Unfortunately, I could not find a good way to trick it to call destructor without code change.\nOne option is add a test timer in the main function to call createSensors() function."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 30,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Let me try it out."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -8
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 14
        },
        {
            "number": 4,
            "revision": "8473a46fa21d720929b57cb664f89753adc772d9",
            "parents": [
                "cb5af73f5ddf48c5f9455f41a39b44517089352f"
            ],
            "ref": "refs/changes/37/48437/4",
            "uploader": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "createdOn": 1637154445,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This doesn't need to be a shared_ptr."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Doing a final confirmation before I make the change.\nAs per boost(https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio/reference/async_read_until/overload1.html) the async_read_until buffer definition says as\n\n\"The dynamic buffer sequence into which the data will be read. Although the buffers object may be copied as necessary, ownership of the underlying memory blocks is retained by the caller, which must guarantee that they remain valid until the handler is called.\"\n\nAre we sure, even if the class(readBuf) is destructed before the handler is called, it will not create any issue, since we validate the weak_ptr to the class in the handler first.\n@Zhikui & @Ed to confirm."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Re-read the docs, to me, it implies the buffer is being accessed under the hood until delimiter or error is received, then handler gets called in this process. So I am not 100% sure that we can cancel the underlining usage before destruction. The destructor does cancel timer, but that does not cancel async_read_until in progress. Only when handler is called, we know the buffer ownership is back to the caller, i.e. sensor process.\nSo I think shared_ptr may still be needed here."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Re-read the docs, to me, it implies the buffer is being accessed under the hood until delimiter or error is received, then handler gets called in this process. So I am not 100% sure that we can cancel the underlining usage before destruction. The destructor does cancel timer, but that does not cancel async_read_until in progress. Only when handler is called, we know the buffer ownership is back to the caller, i.e. sensor process.\n> So I think shared_ptr may still be needed here.\n\nAny in progress reads are automatically canceled with an error code of operation_aborted when the boost::asio::posix::stream_descriptor is destroyed.  Given that, there's no way to have a read that's still occurring when readBuf is destroyed, because readBuf is now destroyed after inputDev.  \n\n>Are we sure, even if the class(readBuf) is destructed before the handler is called\n\nGiven the patch of mine that I just merged, there is no way that readBuf can be destroyed before inputDev, and because inputDev owns the handler, there's no way the handler can be called with an invalid inputBuf given c++ destructor ordering.\n\n>Re-read the docs, to me, it implies the buffer is being accessed under the hood until delimiter or error is received, then handler gets called in this process.\n\nIn this context, aborting, canceling, or destroying the object are all considered \"errors\" even if some are errors that are expected.\n\n\n\nFWIW, all of this code should be transitioned to use async_read.  The kernel guarantees that all of these descriptors will return a read in a single operation, so we should be using a fixed std::array buffer rather than a stream operator to be more efficient."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "> Any in progress reads are automatically canceled with an error code of \n> operation_aborted when the boost::asio::posix::stream_descriptor is \n> destroyed.  Given that, there's no way to have a read that's still occurring \n> when readBuf is destroyed, because readBuf is now destroyed after inputDev.  \n\nThis made me realize that we are handling the ec in a different way here. When inputDev gets destroyed along with CPUSensor object, As you mentioned async_read_until return with an ec. But here we are handling ec inside a CPUSensor class method.\n\nI suppose when inputDev is destructed it return ec as operation_canceled(CPUSensor.cpp L227) and not operation_aborted. Please correct me if I am wrong.\n\nIf that is the case, we are again updating the D-Bus property at L237 in CPUSensor.cpp. By the time sdbusplus updates the property, most probably the CPUSensor object will get destroyed. Also this is the exact place coredump was pointing to as an issue.\n \n> (gdb) frame 9\n> #9 0x00465154 in Sensor:: markFunctional (this=0xcb3168, isfunctional=> <optimized out>)\n> at ../../../../../../workspace/sources/dbus-sensors/include/sensor.hpp:371\n> warning: Source file is more recent than executable.\n> 371\t\toperationalInterface->set_property(\"Functional\", is Functional);"
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep, that whole block of code is wrong.\n\nhttps://github.com/openbmc/dbus-sensors/blob/77518b28db824e01af18351094680a99b1ba3cae/src/CPUSensor.cpp#L212\n\noperation_canceled is what occurs when the object is being destroyed.  I suspect that whole branch can be removed, as it's not going to do anything useful, and there are no calls to inputDev.cancel() in the code explicitly, so I'm not sure what the person that wrote that thought they were accomplishing."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Seems like that change is added by James to boost the fans when sensors are not accessible https://github.com/openbmc/dbus-sensors/commit/838529b5400129e8a3a8007ca83102c7733ec01c\n\nI think we need to go with this weak_ptr change to address current issue without breaking the functionality James added."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yeah, that patchset looks incorrect.  I'm betting it needs reverted."
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "@Arun, can we try without the shared_ptr for readBuf here? What @Ed said made sense because inputDev.cancel() is called before readBuf is destructed, we should be OK without shared_ptr. We still need the weak_ptr for self."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -8
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 14
        },
        {
            "number": 5,
            "revision": "e65c903f40e460e3d097e7addd9e539442b05ac9",
            "parents": [
                "00bd56d3a6176367b818d958e0177cab19a6e618"
            ],
            "ref": "refs/changes/37/48437/5",
            "uploader": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "createdOn": 1637828418,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -8
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 14
        },
        {
            "number": 6,
            "revision": "f6b4c5b5d5bd14fdd45fea150e23230f1fa88a12",
            "parents": [
                "00bd56d3a6176367b818d958e0177cab19a6e618"
            ],
            "ref": "refs/changes/37/48437/6",
            "uploader": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "createdOn": 1637828769,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Does this reproduce the crash without the change?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -8
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 14
        },
        {
            "number": 7,
            "revision": "d08d159f1065a207a11cbdd5b8cf656ce87b3ff0",
            "parents": [
                "daf6f56870c6386ecb1c43b0b9aaa4cc78e4d424"
            ],
            "ref": "refs/changes/37/48437/7",
            "uploader": {
                "name": "Gokul Sanker V G",
                "email": "gokul.sanker.v.g@intel.com",
                "username": "gokulsvg"
            },
            "createdOn": 1638369511,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -7
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 27,
            "sizeDeletions": 12
        },
        {
            "number": 8,
            "revision": "d9532cd936518a98bc60c11f107749b2ba20407b",
            "parents": [
                "daf6f56870c6386ecb1c43b0b9aaa4cc78e4d424"
            ],
            "ref": "refs/changes/37/48437/8",
            "uploader": {
                "name": "Gokul Sanker V G",
                "email": "gokul.sanker.v.g@intel.com",
                "username": "gokulsvg"
            },
            "createdOn": 1638369784,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -7
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 27,
            "sizeDeletions": 12
        },
        {
            "number": 9,
            "revision": "04d050669c95218230d9fb45385479df43fc1a0d",
            "parents": [
                "daf6f56870c6386ecb1c43b0b9aaa4cc78e4d424"
            ],
            "ref": "refs/changes/37/48437/9",
            "uploader": {
                "name": "Gokul Sanker V G",
                "email": "gokul.sanker.v.g@intel.com",
                "username": "gokulsvg"
            },
            "createdOn": 1638370055,
            "author": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                },
                {
                    "file": "include/CPUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": -6
                },
                {
                    "file": "src/CPUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 26,
            "sizeDeletions": 11
        }
    ]
}