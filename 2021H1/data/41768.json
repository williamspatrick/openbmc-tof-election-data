{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I8a7fb9e00513639c5ccd3becd50cfb779270634c",
    "number": 41768,
    "subject": "Adding \"OwningEntity\" and \"Version\" property to the BIOS attr registry",
    "owner": {
        "name": "Asmitha Karunanithi",
        "email": "asmitk01@in.ibm.com",
        "username": "asmithakarun"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/41768",
    "commitMessage": "Adding \"OwningEntity\" and \"Version\" property to the BIOS attr registry\n\nThese two properties indicate the name of the owning entity\nand version of the attr registry, which avoids systems publishing\ndifferent message registries with the same name and version.\n\nThis change is pushed w.r.t the discussions in the below commit:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/29670\n\nSigned-off-by: Asmitha Karunanithi <asmitk01@in.ibm.com>\nChange-Id: I8a7fb9e00513639c5ccd3becd50cfb779270634c\n",
    "createdOn": 1617254933,
    "lastUpdated": 1624262178,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1617254933,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1617254950,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1617255786,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14700/ : SUCCESS"
        },
        {
            "timestamp": 1617608908,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 2: Commit message was updated."
        },
        {
            "timestamp": 1617638790,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\nI'd really like to see the implementation of these before we review the interface itself.  This seems like something that has the potential to have exactly the same problem pointed out in the original commit, moving these to an interface doesn't change the properties of it.\n\nAlso, as a matter of design, this kind of goes the exact opposite way of the rest of the message registries we have, which are currently fixed files that are relatively easy to add to, and enforce the versioning rules of redfish.  Moving this to a dbus API seems like we're very likely to break those rules, which, is another reason I'd like to see an example implementation.\n\nOverall, I would much rather we take the current approach of a fixed data structure in the Redfish component, rather than push more redfish-specific stuff to dbus but I'm open to seeing if this is better."
        },
        {
            "timestamp": 1617693911,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1617707173,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 2:\n\nThere were two problems that led to push this commit:\n\nHow different message registries can be defined with specific name, version and owning entity. And currently in openbmc, there's no mechanism which differentiates  the message registries\n\nOne more question was, who owns this message registries - either the openbmc/(company).\nSince the dbus gives the registry values, the idea was to enhance the dbus itself to provide name, version and owning entity\n\n> Fixed registry files\n\nI have a question here as how actually these fixed files would be generated. Currently, there were machine specific json files having the attrs list, which the pldm reads and populates the base bios table.\nSo do you mean we must be having a mechanism on top of it, which actually creates machine-specific static files and then populate the base bios table?\nBut even then I am not getting how we will still provide the owning entity, version and name.\nCan you please share your thoughts here?"
        },
        {
            "timestamp": 1617820571,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1618221090,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1618857118,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1618996832,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1624262178,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Abandoned\n\nAbandonng this change as there are design concerns about the existing bios mgr implementation and also as there are other ways to achieve this unique bios registry name"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "88f7472cdb7dee9316d631dd079426420948a413",
            "parents": [
                "ae956ad9efd2be24c5439a4ef6498fb5c8383719"
            ],
            "ref": "refs/changes/68/41768/1",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1617254933,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 10,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "e68c6c0d114ef1afe61a91d40e7c94dcc5f2d28c",
            "parents": [
                "ae956ad9efd2be24c5439a4ef6498fb5c8383719"
            ],
            "ref": "refs/changes/68/41768/2",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1617608908,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
                    "line": 116,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there some documentation updates needed on how these are intended to be used?  Some unanswered questions I have:\n\n1. How does the dbus path interact with this?  Why can't the dbus path of the object be used to create unique entities?\n\n2. What is the expected format of these strings?  Can any comparison be done between two objects with different versions?\n\n3. What is an \"owning entity\"?\n\n4. What is a \"message registry\"?  Nothing else in this object uses this term, so I don't even know what it is a reference to.\n\nI'd like to see either a readme or a commit in docs to clarify these, in addition to any description updates that might be appropriate."
                },
                {
                    "file": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
                    "line": 116,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "> 1. How does the dbus path interact with this?  Why can't the dbus path of the object be used to create unique entities?\n\nThe dbus path is hardcoded here /xyz/openbmc_project/BiosConfig/Manager (https://gerrit.openbmc-project.xyz/c/openbmc/bios-settings-mgr/+/35563/)\n\nThe BIOS table would be different for different companies, in that case when redfish creates its own registry from this BIOS table. Here the confusion is what if two companies take the openbmc stack and build the BIOS conf manager -> how to generate a unique name for the BIOS registry.\n\nHence there should be way in the dbus object which should tell that who owns this registry - like IBM Intel Facebook, to differentiate each of them.\n\n\n> 2. What is the expected format of these strings?  Can any comparison be done between two objects with different versions\n\nThe format would look something like x.x.x\n\n\n> 3. What is an \"owning entity\"?\n\nDefines who is the owner of the BIOS table - eg., company name.\n\n\n> 4. What is a \"message registry\"?  Nothing else in this object uses this term, so I don't even know what it is a reference to.\n\nMeta data of the BIOS table is the BIOS message registry.\n\n\n\"Redfish Message Objects can be represented in different ways. In bmcweb, we have chosen to use Message Registries with Message Objects that are referenced using a MessageId and MessageArgs fields.\"\n(Ref: https://github.com/openbmc/docs/blob/master/architecture/redfish-logging-in-bmcweb.md#:~:text=the%20Redfish%20Specification.-,Message%20Registries,redfish%2Fv1%2FRegistries%22.)\n\nIn bmcweb, the bios's message registry is under \"redfish-core/include/registries/bios_registry.hpp\"\nBut as per the comments, it is said that two systems shouldnt publish the message registries with same name. Hence we came up with the owning entity and version as the parameters to differentiate each of them\nSo, with these parameters, specific message registries can be created."
                },
                {
                    "file": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
                    "line": 116,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> The BIOS table would be different for different companies, in that case when redfish creates its own registry from this BIOS table. Here the confusion is what if two companies take the openbmc stack and build the BIOS conf manager -> how to generate a unique name for the BIOS registry.\n\nI don't understand what this solves or how it could be accomplished.  You could have a system with two different BIOS vendors (consider a Blade-Center type system for example).  How does the BMC know which \"owning entity\" to use here?\n\nIf we need some kind of unique identifier, that is because there are multiple of them in a single system?  Why can't the dbus path be used to differentiate?\n\n> The format would look something like x.x.x\n\nI've gained no more insight from this response.  Please update the commit with your proposal.\n\nAll of the rest of your responses follow in this vein as well.  The purpose of my questions are that you do not have enough information in the commit for us to merge it.  These are questions that any other casual reader should have as well and they cannot be answered by simply pointing backwards to a Gerrit review."
                },
                {
                    "file": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
                    "line": 116,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Hi Patrick.\n\nCurrently, the redfish BIOS registry URI for a single system would be:\n\"/redfish/v1/Registries/BiosAttributeRegistry\"\n\n\n>  You could have a system with two different BIOS vendors (consider a Blade-Center type system for example).  How does the BMC know which \"owning entity\" to use here?\n\nConsidering this case (where there are multiple BIOS Vendors), we would be having equal number of Bios Attribute Registries.\n\nThe requirement is \"we should not be reporting two different BIOS message registries with the same name\".\n\nFor example, say we have two systems (facebook and IBM) having openbmc stack, with the current implementation, we would be displaying two registries with the same name \"BiosAttributeRegistry\"\n\nSo, in terms of Redfish responses, bios registries should have different names for each system.\n\nIn this case, as an initial thought, I thought of defining the \"owning entity\" (BIOS vendor) in the dbus object to differentiate each of the systems implementing BIOS message registries. Hence, we would be having a unique bios registry name in the redfish response, for example: \"/redfish/v1/Registries/<owning entity>_BiosAttributeRegistry\"\n\n\n>  Now as you suggested that why not use the unique Dbus object.\n\nI am hoping, you mean to say that for IBM system, there would be a unique dbus object name v/s for facebook, the D-bus object name would be unique.\nPlease correct me if i am getting it wrong here. Thanks."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 10,
            "sizeDeletions": 0
        }
    ]
}