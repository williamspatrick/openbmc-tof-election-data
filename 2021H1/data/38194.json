{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ic0d9217b2c0b2bfe6b7db88844b2e35463a10333",
    "number": 38194,
    "subject": "Changing the error response json as per Redfish schema",
    "owner": {
        "name": "Asmitha Karunanithi",
        "email": "asmitk01@in.ibm.com",
        "username": "asmithakarun"
    },
    "assignee": {
        "name": "Jason Bills",
        "email": "jason.m.bills@linux.intel.com",
        "username": "jmbills"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38194",
    "commitMessage": "Changing the error response json as per Redfish schema\n\nIn this commit, the error response json is made common for\nall sorts of errors and checked against the Redfish Error\nschema for its correctness:\n\n* Earlier there were two different error resp formats:\n\n1.\n{\n  \"DateTime@Message.ExtendedInfo\": [\n    {\n      \"@odata.type\": \"#Message.v1_0_0.Message\",\n      \"Message\": \"The value 2020-09-16T14:22:03+0530 for the property DateTime is of a different format than the property can accept.\",\n      \"MessageArgs\": [\n        \"2020-09-16T14:22:03+0530\",\n        \"DateTime\"\n      ],\n      \"MessageId\": \"Base.1.4.0.PropertyValueFormatError\",\n      \"Resolution\": \"Correct the value for the property in the request body and resubmit the request if the operation failed.\",\n      \"Severity\": \"Warning\"\n    }\n  ]\n}\n\n2.\n{\n  \"error\": {\n    \"@Message.ExtendedInfo\": [\n      {\n        \"@odata.type\": \"#Message.v1_0_0.Message\",\n        \"Message\": \"The request failed due to an internal service error.  The service is still operational.\",\n        \"MessageArgs\": [],\n        \"MessageId\": \"Base.1.4.0.InternalError\",\n        \"Resolution\": \"Resubmit the request.  If the problem persists, consider resetting the service.\",\n        \"Severity\": \"Critical\"\n      }\n    ],\n    \"code\": \"Base.1.4.0.InternalError\",\n    \"message\": \"The request failed due to an internal service error.  The service is still operational.\"\n  }\n}\n\n=================================================================================\nSection 9.6 of the Redfish specification (DSP0266_1.11.1) says,\n\"An extended error response, which is a single JSON object, defines the error\nresponses, with an error property, which contains the following properties:\n\n* code\n* message\n* @Message.ExtendedInfo\"\n=================================================================================\n\nIn this commit, we are generalising the response to a standard format (like below)\nwhich would be easier for the clients to parse.\n\nChanges here include:\n---------------------\n* Adding odata.type field in the response\n* error property is added to all sorts of errors\n\nTestedBy:\n--------\n\n1.\n{\n  \"@odata.type\": \"#RedfishError.v1_0_1.RedfishError\",\n  \"error\": {\n    \"DateTime@Message.ExtendedInfo\": [\n      {\n        \"@odata.type\": \"#Message.v1_1_1.Message\",\n        \"Message\": \"The value 2020-11-09T10:07:21+0530 for the property DateTime is of a different format than the property can accept.\",\n        \"MessageArgs\": [\n          \"2020-11-09T10:07:21+0530\",\n          \"DateTime\"\n        ],\n        \"MessageId\": \"Base.1.8.1.PropertyValueFormatError\",\n        \"MessageSeverity\": \"Warning\",\n        \"Resolution\": \"Correct the value for the property in the request body and resubmit the request if the operation failed.\"\n      }\n    ],\n    \"code\": \"Base.1.8.1.PropertyValueFormatError\",\n    \"message\": \"The value 2020-11-09T10:07:21+0530 for the property DateTime is of a different format than the property can accept.\"\n  }\n}\n\n2.\n{\n  \"@odata.type\": \"#RedfishError.v1_0_1.RedfishError\",\n  \"error\": {\n    \"@Message.ExtendedInfo\": [\n      {\n        \"@odata.type\": \"#Message.v1_1_1.Message\",\n        \"Message\": \"The request failed due to an internal service error.  The service is still operational.\",\n        \"MessageArgs\": [],\n        \"MessageId\": \"Base.1.8.1.InternalError\",\n        \"MessageSeverity\": \"Critical\",\n        \"Resolution\": \"Resubmit the request.  If the problem persists, consider resetting the service.\"\n      }\n    ],\n    \"code\": \"Base.1.8.1.InternalError\",\n    \"message\": \"The request failed due to an internal service error.  The service is still operational.\"\n  }\n}\n\nSigned-off-by: Asmitha Karunanithi <asmitk01@in.ibm.com>\nChange-Id: Ic0d9217b2c0b2bfe6b7db88844b2e35463a10333\n",
    "createdOn": 1605192813,
    "lastUpdated": 1639159653,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1605192813,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1605192827,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605192854,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/7806/ : FAILURE"
        },
        {
            "timestamp": 1605193081,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1605193092,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605193123,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/7807/ : FAILURE"
        },
        {
            "timestamp": 1605193399,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1605193412,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605194376,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1605194400,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7809/ : SUCCESS"
        },
        {
            "timestamp": 1605196379,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1605197462,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1605211446,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1605213373,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1605213388,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605214089,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)\n\nWhile what you have in your commit is an improvement from patch 1, you need to root these changes in the redfish specification.  I've laid out a couple sections that might help you create a better commit message, and update your patchset with the required information and handling."
        },
        {
            "timestamp": 1605214391,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7820/ : SUCCESS"
        },
        {
            "timestamp": 1605283979,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> (2 comments)\n> \n> While what you have in your commit is an improvement from patch 1, you need to root these changes in the redfish specification.  I've laid out a couple sections that might help you create a better commit message, and update your patchset with the required information and handling.\n\nTo further clarify.  I'd like to see a commit message description that looks similar to:\n\nSection X.Y.Z of the redfish specification says \"Quote\".  What exists today does not meet the specification.  Therefore, we are changing the way property errors are represented in X, Y, and Z ways.  Clients that previously used <propertyname@Message.ExtendedInfo> to determine errors in single properties should now use ...."
        },
        {
            "timestamp": 1605721212,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > (2 comments)\n> > \n> > While what you have in your commit is an improvement from patch 1, you need to root these changes in the redfish specification.  I've laid out a couple sections that might help you create a better commit message, and update your patchset with the required information and handling.\n> \n> To further clarify.  I'd like to see a commit message description that looks similar to:\n> \n> Section X.Y.Z of the redfish specification says \"Quote\".  What exists today does not meet the specification.  Therefore, we are changing the way property errors are represented in X, Y, and Z ways.  Clients that previously used <propertyname@Message.ExtendedInfo> to determine errors in single properties should now use ....\n\nSure I will."
        },
        {
            "timestamp": 1605723210,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1606112558,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 4:\n\nRelatedProperties is helpful for the clients to parse the property name which has hit the error"
        },
        {
            "timestamp": 1606117309,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1606117326,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606118073,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 6: Commit message was updated."
        },
        {
            "timestamp": 1606118307,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/8334/ : SUCCESS"
        },
        {
            "timestamp": 1606119213,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1606119231,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606119341,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1606119361,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606119364,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/8335/ : ABORTED"
        },
        {
            "timestamp": 1606119407,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 8:\n\nSorry for the previous patchset, which I had pushed unknowingly.\n\nThanks!"
        },
        {
            "timestamp": 1606120340,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/8336/ : SUCCESS"
        },
        {
            "timestamp": 1606125169,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 8: Code-Review+1"
        },
        {
            "timestamp": 1606149147,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Assignee added: Jason Bills <jason.m.bills@linux.intel.com>"
        },
        {
            "timestamp": 1606155907,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1606166257,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 8:\n\n(1 comment)\n\nI agree with Ed.  Thanks!"
        },
        {
            "timestamp": 1606209828,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1606209841,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1606209873,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606209918,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/8442/ : FAILURE"
        },
        {
            "timestamp": 1606210279,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1606210295,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606210716,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/8443/ : FAILURE"
        },
        {
            "timestamp": 1606210885,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1606213269,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 10:\n\n(2 comments)"
        },
        {
            "timestamp": 1606214324,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1606214340,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606216194,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/8452/ : SUCCESS"
        },
        {
            "timestamp": 1606230084,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(2 comments)\n\nOverall, I'm struggling to see how this is easier to parse than the existing.  Both implementations will have something like:\n\nfor key, value in j.items():\n    if key.ends_with(@Message.ExtendedInfo\"):\n        // Handle code.\n\nThis change is also likely to break clients, considering we're changing behavior, and I'm really hesitant to break that unless we've actually broken the spec here.  If it were just additive, that would be one thing, but as-is, it's completely moving a key that clients might be looking for.\n\nI also have suspicions that the per-key value in the errors field here isn't allowed.  Prior to this work, did you engage with Redfish, or any of the Redfish experts on your team (Gunnar comes to mind) to determine that this was the right course to go down."
        },
        {
            "timestamp": 1606323542,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1606323788,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1606323962,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 11:\n\n> Patch Set 11:\n> \n> (2 comments)\n> \n> Overall, I'm struggling to see how this is easier to parse than the existing.  Both implementations will have something like:\n> \n> for key, value in j.items():\n>     if key.ends_with(@Message.ExtendedInfo\"):\n>         // Handle code.\n> \n> This change is also likely to break clients, considering we're changing behavior, and I'm really hesitant to break that unless we've actually broken the spec here.  If it were just additive, that would be one thing, but as-is, it's completely moving a key that clients might be looking for.\n> \n> I also have suspicions that the per-key value in the errors field here isn't allowed.  Prior to this work, did you engage with Redfish, or any of the Redfish experts on your team (Gunnar comes to mind) to determine that this was the right course to go down.\n\nYes, initially my understanding was that the redfish error response will be a standard one and the clients have implemented to handle the same. Since there were different formats of the error resp, the thought (initially) was to make it standardized.\n\n> it's completely moving a key that clients might be looking for.\n\nAgree. \n@Gunnar, Could you please post in your views as well?"
        },
        {
            "timestamp": 1606324843,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1606325189,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1606325209,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1606326190,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/8587/ : SUCCESS"
        },
        {
            "timestamp": 1607346506,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 12: Code-Review+1"
        },
        {
            "timestamp": 1607357981,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12: Code-Review-1\n\nStill need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n\nIMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts."
        },
        {
            "timestamp": 1607531926,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12: Code-Review-1\n> \n> Still need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n> \n> IMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts.\n\nHi Ed,\n\nAs per the redfish spec(DSP0266_1.11.1) section 10.8.2 Extended information.\n\n=> 10.8.2.1 Extended object information\n\nTo specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo:  but in that case message object should have the \"RelatedProperties\" property in the message object \n\nExample:\n\n\"@Message.ExtendedInfo\": [\n {\n     \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n     \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n     =============================\n      \"RelatedProperties\": [\n        \"#/InterfaceEnabled\"\n      ],\n     ===========================\n     \"Severity\": \"Warning\",\n     \"MessageSeverity\": \"Warning\",\n     \"Resolution\": \"Remove the duplicate property from the request body and resubmit the   request if the operation faile\n}\n]\n\n=> 10.8.2.2 Extended property information\nServices may use @Message.ExtendedInfo , prepended with the name of the property\n\n\"PinOut@Message.ExtendedInfo\": [\n{\n    \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n    \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n    \"Severity\": \"Warning\",\n    \"MessageSeverity\": \"Warning\",\n    \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the reque\n}\n]\n\nWhat is missing in current implementation: Consistency\n\nIf I try to change the BMC time where time is not in correct format then I get the error Response in format(propertyName@message.ExtendedInfo)\n\nNow in other case where I am using the same Redfish with the correct the time format but if there is some Dbus error occurred then I get the error response in format(@message.ExtendedInfo)(Property name was not prepended)\n\nIn my opinion we should be consistent, any reason why we are not consistent? \n\nWe need to enhance the Message.ExtendedInfo with the new property \"RelatedProperties\" wherever we are using the format as @Message.ExtendedInfo(not prepending the property name)."
        },
        {
            "timestamp": 1607574630,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12: Code-Review-1\n> > \n> > Still need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n> > \n> > IMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts.\n> \n> Hi Ed,\n> \n> As per the redfish spec(DSP0266_1.11.1) section 10.8.2 Extended information.\n> \n> => 10.8.2.1 Extended object information\n> \n> To specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo:  but in that case message object should have the \"RelatedProperties\" property in the message object \n\nRelated properties was added to the spec recently;  If you want to implement it, I would not be opposed.\n\n> \n> Example:\n> \n> \"@Message.ExtendedInfo\": [\n>  {\n>      \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n>      \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n>      =============================\n>       \"RelatedProperties\": [\n>         \"#/InterfaceEnabled\"\n>       ],\n>      ===========================\n>      \"Severity\": \"Warning\",\n>      \"MessageSeverity\": \"Warning\",\n>      \"Resolution\": \"Remove the duplicate property from the request body and resubmit the   request if the operation faile\n> }\n> ]\n> \n> => 10.8.2.2 Extended property information\n> Services may use @Message.ExtendedInfo , prepended with the name of the property\n> \n> \"PinOut@Message.ExtendedInfo\": [\n> {\n>     \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n>     \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n>     \"Severity\": \"Warning\",\n>     \"MessageSeverity\": \"Warning\",\n>     \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the reque\n> }\n> ]\n> \n> What is missing in current implementation: Consistency\n> \n> If I try to change the BMC time where time is not in correct format then I get the error Response in format(propertyName@message.ExtendedInfo)\n> \n> Now in other case where I am using the same Redfish with the correct the time format but if there is some Dbus error occurred then I get the error response in format(@message.ExtendedInfo)(Property name was not prepended)\n> \n> In my opinion we should be consistent, any reason why we are not consistent? \n\nThe property name was not prepended in the internal error case because we don't associate  every single dbus set back to the original json object that created it.  The tracking information between redfish property -> dbus has always been a problem, so today there's no way to give that level of per-property data.  If you wanted to do this, you certainly could, but considering this is an internal error, and there's nothing a user can do about it, that seemed like a waste of effort.\n\nI would also point out that we're consistent in they're different scopes of error.  <property name>@Message.ExtendedInfo conveys that there was an error with a specific property.  @Message.ExtendedInfo conveys there was an error with the message as a whole.\n\n> \n> We need to enhance the Message.ExtendedInfo with the new property \"RelatedProperties\" wherever we are using the format as @Message.ExtendedInfo(not prepending the property name).\n\nNot prepending the property name would constitute a breaking change, which I would be against, especially considering that we're implementing to the spec today so far as I can tell.\n\nIf we were adding additional data, but leaving the old fields in-tact, that might be a different story, but as-is I don't see how I can support this."
        },
        {
            "timestamp": 1607675917,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12: Code-Review-1\n> > > \n> > > Still need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n> > > \n> > > IMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts.\n> > \n> > Hi Ed,\n> > \n> > As per the redfish spec(DSP0266_1.11.1) section 10.8.2 Extended information.\n> > \n> > => 10.8.2.1 Extended object information\n> > \n> > To specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo:  but in that case message object should have the \"RelatedProperties\" property in the message object \n> \n> Related properties was added to the spec recently;  If you want to implement it, I would not be opposed.\n> \n> > \n> > Example:\n> > \n> > \"@Message.ExtendedInfo\": [\n> >  {\n> >      \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n> >      \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n> >      =============================\n> >       \"RelatedProperties\": [\n> >         \"#/InterfaceEnabled\"\n> >       ],\n> >      ===========================\n> >      \"Severity\": \"Warning\",\n> >      \"MessageSeverity\": \"Warning\",\n> >      \"Resolution\": \"Remove the duplicate property from the request body and resubmit the   request if the operation faile\n> > }\n> > ]\n> > \n> > => 10.8.2.2 Extended property information\n> > Services may use @Message.ExtendedInfo , prepended with the name of the property\n> > \n> > \"PinOut@Message.ExtendedInfo\": [\n> > {\n> >     \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n> >     \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n> >     \"Severity\": \"Warning\",\n> >     \"MessageSeverity\": \"Warning\",\n> >     \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the reque\n> > }\n> > ]\n> > \n> > What is missing in current implementation: Consistency\n> > \n> > If I try to change the BMC time where time is not in correct format then I get the error Response in format(propertyName@message.ExtendedInfo)\n> > \n> > Now in other case where I am using the same Redfish with the correct the time format but if there is some Dbus error occurred then I get the error response in format(@message.ExtendedInfo)(Property name was not prepended)\n> > \n> > In my opinion we should be consistent, any reason why we are not consistent? \n> \n> The property name was not prepended in the internal error case because we don't associate  every single dbus set back to the original json object that created it.  The tracking information between redfish property -> dbus has always been a problem, so today there's no way to give that level of per-property data.  If you wanted to do this, you certainly could, but considering this is an internal error, and there's nothing a user can do about it, that seemed like a waste of effort.\n\nDoes that mean that every single DBus API can have different error response format, it could be \npropertyName@message.ExtendedInfo or @Message.ExtendedInfo as in the above case.\n\nSetting a BMC time would be having different error Response Message Format(propertyName@message.ExtendedInfo or @Message.ExtendedInfo).\n\n\n> \n> I would also point out that we're consistent in they're different scopes of error.  <property name>@Message.ExtendedInfo conveys that there was an error with a specific property.  @Message.ExtendedInfo conveys there was an error with the message as a whole.\n> \n> > \n> > We need to enhance the Message.ExtendedInfo with the new property \"RelatedProperties\" wherever we are using the format as @Message.ExtendedInfo(not prepending the property name).\n> \n> Not prepending the property name would constitute a breaking change, which I would be against, especially considering that we're implementing to the spec today so far as I can tell.\n> \nI am asking for the enhancement to add the RelatedProperties to tell the client for which property they got the Internal Error.This enhancement is for the cases where we are currently returning the error message in @Message.ExtendedInfo but not returning the property name in any sense.\n\n\n> If we were adding additional data, but leaving the old fields in-tact, that might be a different story, but as-is I don't see how I can support this."
        },
        {
            "timestamp": 1607738030,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12: Code-Review-1\n> > > > \n> > > > Still need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n> > > > \n> > > > IMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts.\n> > > \n> > > Hi Ed,\n> > > \n> > > As per the redfish spec(DSP0266_1.11.1) section 10.8.2 Extended information.\n> > > \n> > > => 10.8.2.1 Extended object information\n> > > \n> > > To specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo:  but in that case message object should have the \"RelatedProperties\" property in the message object \n> > \n> > Related properties was added to the spec recently;  If you want to implement it, I would not be opposed.\n> > \n> > > \n> > > Example:\n> > > \n> > > \"@Message.ExtendedInfo\": [\n> > >  {\n> > >      \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n> > >      \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n> > >      =============================\n> > >       \"RelatedProperties\": [\n> > >         \"#/InterfaceEnabled\"\n> > >       ],\n> > >      ===========================\n> > >      \"Severity\": \"Warning\",\n> > >      \"MessageSeverity\": \"Warning\",\n> > >      \"Resolution\": \"Remove the duplicate property from the request body and resubmit the   request if the operation faile\n> > > }\n> > > ]\n> > > \n> > > => 10.8.2.2 Extended property information\n> > > Services may use @Message.ExtendedInfo , prepended with the name of the property\n> > > \n> > > \"PinOut@Message.ExtendedInfo\": [\n> > > {\n> > >     \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n> > >     \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n> > >     \"Severity\": \"Warning\",\n> > >     \"MessageSeverity\": \"Warning\",\n> > >     \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the reque\n> > > }\n> > > ]\n> > > \n> > > What is missing in current implementation: Consistency\n> > > \n> > > If I try to change the BMC time where time is not in correct format then I get the error Response in format(propertyName@message.ExtendedInfo)\n> > > \n> > > Now in other case where I am using the same Redfish with the correct the time format but if there is some Dbus error occurred then I get the error response in format(@message.ExtendedInfo)(Property name was not prepended)\n> > > \n> > > In my opinion we should be consistent, any reason why we are not consistent? \n> > \n> > The property name was not prepended in the internal error case because we don't associate  every single dbus set back to the original json object that created it.  The tracking information between redfish property -> dbus has always been a problem, so today there's no way to give that level of per-property data.  If you wanted to do this, you certainly could, but considering this is an internal error, and there's nothing a user can do about it, that seemed like a waste of effort.\n> \n> Does that mean that every single DBus API can have different error response format, it could be \n> propertyName@message.ExtendedInfo or @Message.ExtendedInfo as in the above case.\n> \n> Setting a BMC time would be having different error Response Message Format(propertyName@message.ExtendedInfo or @Message.ExtendedInfo).\n\nI'm not really following the question, so I'll answer in the most generic way I can: We give the most specific error code we are able to.  Yes, if the dbus apis had more specific error codes, we could forward them on to the user if someone wanted to.\n\n> \n> \n> > \n> > I would also point out that we're consistent in they're different scopes of error.  <property name>@Message.ExtendedInfo conveys that there was an error with a specific property.  @Message.ExtendedInfo conveys there was an error with the message as a whole.\n> > \n> > > \n> > > We need to enhance the Message.ExtendedInfo with the new property \"RelatedProperties\" wherever we are using the format as @Message.ExtendedInfo(not prepending the property name).\n> > \n> > Not prepending the property name would constitute a breaking change, which I would be against, especially considering that we're implementing to the spec today so far as I can tell.\n> > \n> I am asking for the enhancement to add the RelatedProperties to tell the client for which property they got the Internal Error.\n\nSure, that would be fine, so long as it's in line with the spec (I haven't read up on this area in a long time).  I think it's a little redundant to having the property name in the key field, but sure, it certainly doesn't hurt.\n\n> This enhancement is for the cases where we are currently returning the error message in @Message.ExtendedInfo but not returning the property name in any sense.\n\nI'm not following this comment.  We're returning the property name in the key in the form of <PropertyName>@Message.ExtendedInfo, so when you say we're \"not returning the property name in any sense\" I'm confused what you mean.\n\n> \n> \n> > If we were adding additional data, but leaving the old fields in-tact, that might be a different story, but as-is I don't see how I can support this."
        },
        {
            "timestamp": 1610553728,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1611132751,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12: Code-Review-1\n> > > > > \n> > > > > Still need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n> > > > > \n> > > > > IMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts.\n> > > > \n> > > > Hi Ed,\n> > > > \n> > > > As per the redfish spec(DSP0266_1.11.1) section 10.8.2 Extended information.\n> > > > \n> > > > => 10.8.2.1 Extended object information\n> > > > \n> > > > To specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo:  but in that case message object should have the \"RelatedProperties\" property in the message object \n> > > \n> > > Related properties was added to the spec recently;  If you want to implement it, I would not be opposed.\n> > > \n> > > > \n> > > > Example:\n> > > > \n> > > > \"@Message.ExtendedInfo\": [\n> > > >  {\n> > > >      \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n> > > >      \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n> > > >      =============================\n> > > >       \"RelatedProperties\": [\n> > > >         \"#/InterfaceEnabled\"\n> > > >       ],\n> > > >      ===========================\n> > > >      \"Severity\": \"Warning\",\n> > > >      \"MessageSeverity\": \"Warning\",\n> > > >      \"Resolution\": \"Remove the duplicate property from the request body and resubmit the   request if the operation faile\n> > > > }\n> > > > ]\n> > > > \n> > > > => 10.8.2.2 Extended property information\n> > > > Services may use @Message.ExtendedInfo , prepended with the name of the property\n> > > > \n> > > > \"PinOut@Message.ExtendedInfo\": [\n> > > > {\n> > > >     \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n> > > >     \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n> > > >     \"Severity\": \"Warning\",\n> > > >     \"MessageSeverity\": \"Warning\",\n> > > >     \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the reque\n> > > > }\n> > > > ]\n> > > > \n> > > > What is missing in current implementation: Consistency\n> > > > \n> > > > If I try to change the BMC time where time is not in correct format then I get the error Response in format(propertyName@message.ExtendedInfo)\n> > > > \n> > > > Now in other case where I am using the same Redfish with the correct the time format but if there is some Dbus error occurred then I get the error response in format(@message.ExtendedInfo)(Property name was not prepended)\n> > > > \n> > > > In my opinion we should be consistent, any reason why we are not consistent? \n> > > \n> > > The property name was not prepended in the internal error case because we don't associate  every single dbus set back to the original json object that created it.  The tracking information between redfish property -> dbus has always been a problem, so today there's no way to give that level of per-property data.  If you wanted to do this, you certainly could, but considering this is an internal error, and there's nothing a user can do about it, that seemed like a waste of effort.\n> > \n> > Does that mean that every single DBus API can have different error response format, it could be \n> > propertyName@message.ExtendedInfo or @Message.ExtendedInfo as in the above case.\n> > \n> > Setting a BMC time would be having different error Response Message Format(propertyName@message.ExtendedInfo or @Message.ExtendedInfo).\n> \n> I'm not really following the question, so I'll answer in the most generic way I can: We give the most specific error code we are able to.  Yes, if the dbus apis had more specific error codes, we could forward them on to the user if someone wanted to.\n> \n> > \n> > \n> > > \n> > > I would also point out that we're consistent in they're different scopes of error.  <property name>@Message.ExtendedInfo conveys that there was an error with a specific property.  @Message.ExtendedInfo conveys there was an error with the message as a whole.\n> > > \n> > > > \n> > > > We need to enhance the Message.ExtendedInfo with the new property \"RelatedProperties\" wherever we are using the format as @Message.ExtendedInfo(not prepending the property name).\n> > > \n> > > Not prepending the property name would constitute a breaking change, which I would be against, especially considering that we're implementing to the spec today so far as I can tell.\n> > > \n> > I am asking for the enhancement to add the RelatedProperties to tell the client for which property they got the Internal Error.\n> \n> Sure, that would be fine, so long as it's in line with the spec (I haven't read up on this area in a long time).  I think it's a little redundant to having the property name in the key field, but sure, it certainly doesn't hurt.\n> \n> > This enhancement is for the cases where we are currently returning the error message in @Message.ExtendedInfo but not returning the property name in any sense.\n> \n> I'm not following this comment.  We're returning the property name in the key in the form of <PropertyName>@Message.ExtendedInfo, so when you say we're \"not returning the property name in any sense\" I'm confused what you mean.\n> \n> > \n> > \n> > > If we were adding additional data, but leaving the old fields in-tact, that might be a different story, but as-is I don't see how I can support this.\n\n\nI got it that we may end up have to support two different formats from the same API as the internal error is pretty generic for all the dbus errors.\n\nHowever we should make the changes in the error response as per section DSP0266 9.6Error responses where @Message.ExtendedInfo should come under error property.\n\nCurrently it does the same for the PropertyValueFormat and other errors but not for the internal error.\n\nFor the internal error message.extendedinfo is not inside the error property."
        },
        {
            "timestamp": 1611200888,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1611201733,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12:\n> > > > > \n> > > > > > Patch Set 12: Code-Review-1\n> > > > > > \n> > > > > > Still need answers to the outstanding questions of \"why is this better\", \"Is this worth breaking backward compatibility\", and \"are we currently breaking the redfish spec\".\n> > > > > > \n> > > > > > IMO, if we're not breaking the Redfish spec, I see no good reason to change this behavior, as it could have wide sweeping impacts.\n> > > > > \n> > > > > Hi Ed,\n> > > > > \n> > > > > As per the redfish spec(DSP0266_1.11.1) section 10.8.2 Extended information.\n> > > > > \n> > > > > => 10.8.2.1 Extended object information\n> > > > > \n> > > > > To specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo:  but in that case message object should have the \"RelatedProperties\" property in the message object \n> > > > \n> > > > Related properties was added to the spec recently;  If you want to implement it, I would not be opposed.\n> > > > \n> > > > > \n> > > > > Example:\n> > > > > \n> > > > > \"@Message.ExtendedInfo\": [\n> > > > >  {\n> > > > >      \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n> > > > >      \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n> > > > >      =============================\n> > > > >       \"RelatedProperties\": [\n> > > > >         \"#/InterfaceEnabled\"\n> > > > >       ],\n> > > > >      ===========================\n> > > > >      \"Severity\": \"Warning\",\n> > > > >      \"MessageSeverity\": \"Warning\",\n> > > > >      \"Resolution\": \"Remove the duplicate property from the request body and resubmit the   request if the operation faile\n> > > > > }\n> > > > > ]\n> > > > > \n> > > > > => 10.8.2.2 Extended property information\n> > > > > Services may use @Message.ExtendedInfo , prepended with the name of the property\n> > > > > \n> > > > > \"PinOut@Message.ExtendedInfo\": [\n> > > > > {\n> > > > >     \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n> > > > >     \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n> > > > >     \"Severity\": \"Warning\",\n> > > > >     \"MessageSeverity\": \"Warning\",\n> > > > >     \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the reque\n> > > > > }\n> > > > > ]\n> > > > > \n> > > > > What is missing in current implementation: Consistency\n> > > > > \n> > > > > If I try to change the BMC time where time is not in correct format then I get the error Response in format(propertyName@message.ExtendedInfo)\n> > > > > \n> > > > > Now in other case where I am using the same Redfish with the correct the time format but if there is some Dbus error occurred then I get the error response in format(@message.ExtendedInfo)(Property name was not prepended)\n> > > > > \n> > > > > In my opinion we should be consistent, any reason why we are not consistent? \n> > > > \n> > > > The property name was not prepended in the internal error case because we don't associate  every single dbus set back to the original json object that created it.  The tracking information between redfish property -> dbus has always been a problem, so today there's no way to give that level of per-property data.  If you wanted to do this, you certainly could, but considering this is an internal error, and there's nothing a user can do about it, that seemed like a waste of effort.\n> > > \n> > > Does that mean that every single DBus API can have different error response format, it could be \n> > > propertyName@message.ExtendedInfo or @Message.ExtendedInfo as in the above case.\n> > > \n> > > Setting a BMC time would be having different error Response Message Format(propertyName@message.ExtendedInfo or @Message.ExtendedInfo).\n> > \n> > I'm not really following the question, so I'll answer in the most generic way I can: We give the most specific error code we are able to.  Yes, if the dbus apis had more specific error codes, we could forward them on to the user if someone wanted to.\n> > \n> > > \n> > > \n> > > > \n> > > > I would also point out that we're consistent in they're different scopes of error.  <property name>@Message.ExtendedInfo conveys that there was an error with a specific property.  @Message.ExtendedInfo conveys there was an error with the message as a whole.\n> > > > \n> > > > > \n> > > > > We need to enhance the Message.ExtendedInfo with the new property \"RelatedProperties\" wherever we are using the format as @Message.ExtendedInfo(not prepending the property name).\n> > > > \n> > > > Not prepending the property name would constitute a breaking change, which I would be against, especially considering that we're implementing to the spec today so far as I can tell.\nEd, the property name is being prepended to those property-specific errors as it was earlier. \nOnly thing is, I am putting the extended info inside the error property,  irrespective of if it's a property-specific error or any general errors (Currently, this is done for general errors, I am doing the same for property-specific errors) \n> > > > \n> > > I am asking for the enhancement to add the RelatedProperties to tell the client for which property they got the Internal Error.\n> > \n> > Sure, that would be fine, so long as it's in line with the spec (I haven't read up on this area in a long time).  I think it's a little redundant to having the property name in the key field, but sure, it certainly doesn't hurt.\n> > \n> > > This enhancement is for the cases where we are currently returning the error message in @Message.ExtendedInfo but not returning the property name in any sense.\n> > \n> > I'm not following this comment.  We're returning the property name in the key in the form of <PropertyName>@Message.ExtendedInfo, so when you say we're \"not returning the property name in any sense\" I'm confused what you mean.\n> > \n> > > \n> > > \n> > > > If we were adding additional data, but leaving the old fields in-tact, that might be a different story, but as-is I don't see how I can support this.\n> \n> \n> I got it that we may end up have to support two different formats from the same API as the internal error is pretty generic for all the dbus errors.\n> \n> However we should make the changes in the error response as per section DSP0266 9.6Error responses where @Message.ExtendedInfo should come under error property.\n> \n> Currently it does the same for the PropertyValueFormat and other errors but not for the internal error.\n> \n> For the internal error message.extendedinfo is not inside the error property\n\nThink you mistyped it. It should be the opposite.\nFor general errors (like internal error) extended info is within the error property, but not for the property related errors."
        },
        {
            "timestamp": 1612188627,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\nEd, Any changes are needed on this commit? Seems the changes as per the redfish specification,"
        },
        {
            "timestamp": 1612200661,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> Ed, Any changes are needed on this commit? Seems the changes as per the redfish specification,\n\nThe primary concerns from previous comments have not been addressed, namely the break in functionality, and the lack of description for why this is needed."
        },
        {
            "timestamp": 1612288946,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > Ed, Any changes are needed on this commit? Seems the changes as per the redfish specification,\n> \n> The primary concerns from previous comments have not been addressed, namely the break in functionality, and the lack of description for why this is needed.\n\nHi Ed,\n\nThis is likely to break clients, but the primary thought was to adhere with the spec and have @Message.ExtendedInfo or <propName>@Message.ExtendedInfo under error field, code and message, so that the error response would be standard and will be the same irrespective of whether it is a property-specific error or a general error.\n\nAlso, this section \"10.8.2.2 Extended property information\" says services may use prepended ExtendedInfo but I am not finding if it is the redfish standardised error (the response without error, code, message fields).\n\nPlease correct me if my understanding is still wrong. Thanks!"
        },
        {
            "timestamp": 1612290703,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > Ed, Any changes are needed on this commit? Seems the changes as per the redfish specification,\n> > \n> > The primary concerns from previous comments have not been addressed, namely the break in functionality, and the lack of description for why this is needed.\n> \n> Hi Ed,\n> \n> This is likely to break clients,\n\nThis needs to be mentioned in your commit message front and center.\n\n> but the primary thought was to adhere with the spec\n\nWe've talked thought this I thought, but we can go through it again.  My understanding is that what we currently have adheres to the spec, even if there's multiple ways the specification says could've implemented the errors.  As a premise, can we agree on that, or do you believe the current code still doesn't obey the specification?\n\nAs another premise it sounds like you agree that this is likely to break clients, so that's a good thing too.\n\n> and have @Message.ExtendedInfo or <propName>@Message.ExtendedInfo under error field, code and message, so that the error response would be standard and will be the same irrespective of whether it is a property-specific error or a general error.\n\nBut... they're not the same, you've listed two types of keys.  Sure, they're all under the \"error\" key, which might be good, but if you're implementing a conforming redfish client, technically you should be looking at both places for error strings, so I'm not following why this would matter for anything but clients that only want to implement a portion of the specification, and not everything that's defined.\n\n> \n> Also, this section \"10.8.2.2 Extended property information\" says services may use prepended ExtendedInfo but I am not finding if it is the redfish standardised error (the response without error, code, message fields).\n\nI'm not following this question.\n\n> \n> Please correct me if my understanding is still wrong. Thanks!\n\n\nMy understanding of this commit:\n1. What we implement today is correct per the redfish spec.\n2. This change is likely to break clients.\n3. The only thing that would be effected by this commit are clients that only implemented a portion of the error handling specification in Redfish.  Clients that implemented all the error handling paths possible in the specification would not be affected by this change.\n4. The advantage of this method of error handling is that you avoid a second key lookup on the response json if you choose to implement a non-spec compliant client.  Spec compliant clients would have the same amount of code.\n\n\nUnder the above, I'm still not thinking this patch can land on master in its current form.  If we had a patch that had answers to all of these issues that didn't push the problem onto clients, we could certainly discuss, but as-is, I don't really see why the advantages of this specific patchset outweigh the disadvantages."
        },
        {
            "timestamp": 1612859415,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\n> We've talked thought this I thought, but we can go through it again.  My understanding is that what we currently have adheres to the spec, even if there's multiple ways the specification says could've implemented the errors.  As a premise, can we agree on that, or do you believe the current code still doesn't obey the specification? \n\n\nSorry to come back to the same point, Ed. Earlier you have pointed to sections in the spec showing extended property info. The only doubt I have here is whether or not to include the extended info under the \"error\" property for all the error responses.\n\n\n> 2. This change is likely to break clients.\n\n\nTrue for the clients who ain't handling all the error formats as per spec. But I hope the clients anyways must be implementing the error handling cases as per spec and in that case the clients wont be affected by this change.\n\n\n> I'm still not thinking this patch can land on master in its current form.  If we had a patch that had answers to all of these issues that didn't push the problem onto clients, we could certainly discuss\n\nSure. But am not completely getting what are the improvements on top of this PS that would likely to land on master.\nIf there's any suggestion, it would really be helpful if you share it here. Thanks in advance. \n\n\n> 3. The only thing that would be effected by this commit are clients that only implemented a portion of the error handling specification in Redfish.  Clients that implemented all the error handling paths possible in the specification would not be affected by this change.\n\n\nAgree. Just that, I was a bit unclear about my first question above.\n\nBut as you said,\n> Sure, they're all under the \"error\" key, which might be good\n\nthis PS is a step to improvise the current implementation. The thought was to standardize the error formats (i.e., throw all the errors in one format which is \"error\", \"code\" and \"message\")."
        },
        {
            "timestamp": 1613130071,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > Ed, Any changes are needed on this commit? Seems the changes as per the redfish specification,\n> > > \n> > > The primary concerns from previous comments have not been addressed, namely the break in functionality, and the lack of description for why this is needed.\n> > \n> > Hi Ed,\n> > \n> > This is likely to break clients,\n> \n> This needs to be mentioned in your commit message front and center.\n> \n> > but the primary thought was to adhere with the spec\n> \n> We've talked thought this I thought, but we can go through it again.  My understanding is that what we currently have adheres to the spec, even if there's multiple ways the specification says could've implemented the errors.  As a premise, can we agree on that, or do you believe the current code still doesn't obey the specification?\n> \n> As another premise it sounds like you agree that this is likely to break clients, so that's a good thing too.\n> \n> > and have @Message.ExtendedInfo or <propName>@Message.ExtendedInfo under error field, code and message, so that the error response would be standard and will be the same irrespective of whether it is a property-specific error or a general error.\n> \n> But... they're not the same, you've listed two types of keys.  Sure, they're all under the \"error\" key, which might be good, but if you're implementing a conforming redfish client, technically you should be looking at both places for error strings, so I'm not following why this would matter for anything but clients that only want to implement a portion of the specification, and not everything that's defined.\n> \n> > \n> > Also, this section \"10.8.2.2 Extended property information\" says services may use prepended ExtendedInfo but I am not finding if it is the redfish standardised error (the response without error, code, message fields).\n> \n> I'm not following this question.\n> \n> > \n> > Please correct me if my understanding is still wrong. Thanks!\n> \n> \n> My understanding of this commit:\n> 1. What we implement today is correct per the redfish spec.\n\nIMHO: What we have today it is not as per the redfish spec section 9.6Error responses.We are not following the spec.\n\n> 2. This change is likely to break clients.\n\nI agree but I would argue that we must follow the spec.\n\n\n> 3. The only thing that would be effected by this commit are clients that only implemented a portion of the error handling specification in Redfish.  Clients that implemented all the error handling paths possible in the specification would not be affected by this change.\n\nCan you clarify on the same with some examples? In any type of error - response must have the \"error\" property and the error property should contain the following properties(redfish spec section 9.6).\n\n1/ code - Defines aMessageIdfrom the message registry. See theMessageId format clausefor the format ofMessageId.\n\n2/ message Disp3lays a human-readable error message that corresponds to the message in the message registry.\n\n3/@Message.ExtendedInfoDisplays an array ofmessage objects. Describes one or more error messages.\n\nAll three must be encapsulated under error property which is not true in the current implementation where we send the property specific errors, Example given in the commit message.\n\n> 4. The advantage of this method of error handling is that you avoid a second key lookup on the response json if you choose to implement a non-spec compliant client.  Spec compliant clients would have the same amount of code.\n\nI really didn't get that you are listing the benefit if we don't follow the spec.Any new client which will be implemented should be redfish complaint.\n\n> \n> \n> Under the above, I'm still not thinking this patch can land on master in its current form.  If we had a patch that had answers to all of these issues that didn't push the problem onto clients, we could certainly discuss, but as-is, I don't really see why the advantages of this specific patchset outweigh the disadvantages."
        },
        {
            "timestamp": 1613152487,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > We've talked thought this I thought, but we can go through it again.  My understanding is that what we currently have adheres to the spec, even if there's multiple ways the specification says could've implemented the errors.  As a premise, can we agree on that, or do you believe the current code still doesn't obey the specification? \n> \n> \n> Sorry to come back to the same point, Ed. Earlier you have pointed to sections in the spec showing extended property info. The only doubt I have here is whether or not to include the extended info under the \"error\" property for all the error responses.\n\nYou still haven't really answered the question.\nDo you believe what we have meets the spec?\n\n> \n> \n> > 2. This change is likely to break clients.\n> \n> \n> True for the clients who ain't handling all the error formats as per spec. But I hope the clients anyways must be implementing the error handling cases as per spec and in that case the clients wont be affected by this change.\n\nEven if clients have handled all the cases, it can still be a significant change in behavior, for example, a ui might post the exact error code to a popup when typing in an invalid value.  Just because they've handled it doesn't mean we haven't changed behavior.\n\nBack to the original question:\nDo you think that what we have meets the Redfish specification?\nIf not, can you cite the specific section that we're breaking, and reconcile it with the section that I posted earlier that, to me, looks like what we have currently is within the spec?\n\n> \n> \n> > I'm still not thinking this patch can land on master in its current form.  If we had a patch that had answers to all of these issues that didn't push the problem onto clients, we could certainly discuss\n> \n> Sure. But am not completely getting what are the improvements on top of this PS that would likely to land on master.\n\nImprovements would likely come in the form of proving there could be no impact to clients, and heavily documenting that with relevant examples.  For example, if all of the DMTF Redfish tools, openbmc test automation, and the webui gave identical output when these errors occurred with and without this change, then that seems like it would be positive indications that this patchset would have no impact.\n\n> If there's any suggestion, it would really be helpful if you share it here. Thanks in advance. \n> \n> \n> > 3. The only thing that would be effected by this commit are clients that only implemented a portion of the error handling specification in Redfish.  Clients that implemented all the error handling paths possible in the specification would not be affected by this change.\n> \n> \n> Agree. Just that, I was a bit unclear about my first question above.\n\nSo, given that.  Does this kind of change seem worth it?\n\n> \n> But as you said,\n> > Sure, they're all under the \"error\" key, which might be good\n> \n> this PS is a step to improvise the current implementation. The thought was to standardize the error formats (i.e., throw all the errors in one format which is \"error\", \"code\" and \"message\").\n\nI haven't read the newest patchset yet.  We need to have an understanding of what this does, what we want the outputs to actually look like, and whether or not a change here is valuable before we proceed forward with code."
        },
        {
            "timestamp": 1613178499,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12:\n> > > > > \n> > > > > Ed, Any changes are needed on this commit? Seems the changes as per the redfish specification,\n> > > > \n> > > > The primary concerns from previous comments have not been addressed, namely the break in functionality, and the lack of description for why this is needed.\n> > > \n> > > Hi Ed,\n> > > \n> > > This is likely to break clients,\n> > \n> > This needs to be mentioned in your commit message front and center.\n> > \n> > > but the primary thought was to adhere with the spec\n> > \n> > We've talked thought this I thought, but we can go through it again.  My understanding is that what we currently have adheres to the spec, even if there's multiple ways the specification says could've implemented the errors.  As a premise, can we agree on that, or do you believe the current code still doesn't obey the specification?\n> > \n> > As another premise it sounds like you agree that this is likely to break clients, so that's a good thing too.\n> > \n> > > and have @Message.ExtendedInfo or <propName>@Message.ExtendedInfo under error field, code and message, so that the error response would be standard and will be the same irrespective of whether it is a property-specific error or a general error.\n> > \n> > But... they're not the same, you've listed two types of keys.  Sure, they're all under the \"error\" key, which might be good, but if you're implementing a conforming redfish client, technically you should be looking at both places for error strings, so I'm not following why this would matter for anything but clients that only want to implement a portion of the specification, and not everything that's defined.\n> > \n> > > \n> > > Also, this section \"10.8.2.2 Extended property information\" says services may use prepended ExtendedInfo but I am not finding if it is the redfish standardised error (the response without error, code, message fields).\n> > \n> > I'm not following this question.\n> > \n> > > \n> > > Please correct me if my understanding is still wrong. Thanks!\n> > \n> > \n> > My understanding of this commit:\n> > 1. What we implement today is correct per the redfish spec.\n> \n> IMHO: What we have today it is not as per the redfish spec section 9.6Error responses.We are not following the spec.\n> \n> > 2. This change is likely to break clients.\n> \n> I agree but I would argue that we must follow the spec.\n\nI still believe what we have today follows the spec.\n\n> \n> \n> > 3. The only thing that would be effected by this commit are clients that only implemented a portion of the error handling specification in Redfish.  Clients that implemented all the error handling paths possible in the specification would not be affected by this change.\n> \n> Can you clarify on the same with some examples? In any type of error - response must have the \"error\" property and the error property should contain the following properties(redfish spec section 9.6).\n> \n> 1/ code - Defines aMessageIdfrom the message registry. See theMessageId format clausefor the format ofMessageId.\n> \n> 2/ message Disp3lays a human-readable error message that corresponds to the message in the message registry.\n> \n> 3/@Message.ExtendedInfoDisplays an array ofmessage objects. Describes one or more error messages.\n> \n> All three must be encapsulated under error property which is not true in the current implementation where we send the property specific errors, Example given in the commit message.\n\nThis is a fair criticism of the new language in the spec, and how we handle bad params.  Considering that this is new language in the spec, I think the right path is to have both for some amount of time, but I could be convinced (with data) that the impact to OpenBMC is nothing if we make this change, and that it should go in as-is, but that would involve a significant amount of testing.  if you're willing to do it, that would certainly help this patch along.\n\nIt should be noted, this is something I need to look into better and understand the history.  We've rewritten Redfish error handling ~4 times already in bmcweb.  I'm hesitant to do it again, but if what we're doing is in fact incorrect, or has been made incorrect by a new version of the spec, then I'm happy to have the change, we just need to understand the impact, and minimize it as much as we can.\n\n> \n> > 4. The advantage of this method of error handling is that you avoid a second key lookup on the response json if you choose to implement a non-spec compliant client.  Spec compliant clients would have the same amount of code.\n> \n> I really didn't get that you are listing the benefit if we don't follow the spec.Any new client which will be implemented should be redfish complaint.\n\nThat's my point.  If you build a Redfish compliant client, this patchset doesn't change anything except about what specific error paths get triggered, therefore it's value is more questionable.\n\n> \n> > \n> > \n> > Under the above, I'm still not thinking this patch can land on master in its current form.  If we had a patch that had answers to all of these issues that didn't push the problem onto clients, we could certainly discuss, but as-is, I don't really see why the advantages of this specific patchset outweigh the disadvantages."
        },
        {
            "timestamp": 1613178539,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12: -Code-Review\n\nI've also copied Jason Bills, who I think looked at all this the last time we \"fixed\" this, so I'd like to get his opinion too if he's around."
        },
        {
            "timestamp": 1613779770,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 12: Code-Review-1\n\nSorry, I had to think back on this one.  I remember it being a little strange and had to get back into the spec to remember.  There are three forms of status reporting in Redfish responses:\n\n1) error responses (defined in section 9.6)\n2) extended object information (defined in section 10.8.2.1)\n3) extended property information (defined in section 10.8.2.2)\n\nThis code is intended to handle all three of these.\naddMessageToErrorJson() adds the message to an \"error\" object for 1.\naddMessageToJson() adds the message directly to the JSON object with the property name for 2 and 3.\n\nSo, this change removes our ability to return status types 2 and 3.  I don't know what situations would call for the different types and maybe we should change to type 1, but I think we should still support them all."
        },
        {
            "timestamp": 1613846288,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12:\n> > > \n> > > > Patch Set 12:\n> > > > \n> > > > > Patch Set 12:\n> > > > > \n> > > > > Ed, Any changes are needed on this commit? Seems the changes as per the redfish specification,\n> > > > \n> > > > The primary concerns from previous comments have not been addressed, namely the break in functionality, and the lack of description for why this is needed.\n> > > \n> > > Hi Ed,\n> > > \n> > > This is likely to break clients,\n> > \n> > This needs to be mentioned in your commit message front and center.\n> > \n> > > but the primary thought was to adhere with the spec\n> > \n> > We've talked thought this I thought, but we can go through it again.  My understanding is that what we currently have adheres to the spec, even if there's multiple ways the specification says could've implemented the errors.  As a premise, can we agree on that, or do you believe the current code still doesn't obey the specification?\n> > \n> > As another premise it sounds like you agree that this is likely to break clients, so that's a good thing too.\n> > \n> > > and have @Message.ExtendedInfo or <propName>@Message.ExtendedInfo under error field, code and message, so that the error response would be standard and will be the same irrespective of whether it is a property-specific error or a general error.\n> > \n> > But... they're not the same, you've listed two types of keys.  Sure, they're all under the \"error\" key, which might be good, but if you're implementing a conforming redfish client, technically you should be looking at both places for error strings, so I'm not following why this would matter for anything but clients that only want to implement a portion of the specification, and not everything that's defined.\n> > \n> > > \n> > > Also, this section \"10.8.2.2 Extended property information\" says services may use prepended ExtendedInfo but I am not finding if it is the redfish standardised error (the response without error, code, message fields).\n> > \n> > I'm not following this question.\n> > \n> > > \n> > > Please correct me if my understanding is still wrong. Thanks!\n> > \n> > \n> > My understanding of this commit:\n> > 1. What we implement today is correct per the redfish spec.\n> \n> IMHO: What we have today it is not as per the redfish spec section 9.6Error responses.We are not following the spec.\n\nSee both Jason and my responses.  Section 9.6 is not the only place Redfish defines possible error responses.  As a general rule we use all 3, this commit removes 2 of them.\n\n\n> \n> > 2. This change is likely to break clients.\n> \n> I agree but I would argue that we must follow the spec.\n\nSo we're back to \"we don't follow the spec\".  can you please comment on the 3 sections jason mentioned, and why we should ignore sections 2 and 3 of the spec?\n\n> \n> \n> > 3. The only thing that would be effected by this commit are clients that only implemented a portion of the error handling specification in Redfish.  Clients that implemented all the error handling paths possible in the specification would not be affected by this change.\n> \n> Can you clarify on the same with some examples? In any type of error - response must have the \"error\" property and the error property should contain the following properties(redfish spec section 9.6).\n> \n> 1/ code - Defines aMessageIdfrom the message registry. See theMessageId format clausefor the format ofMessageId.\n\nWe have this in all our error responses.\n\n> \n> 2/ message Disp3lays a human-readable error message that corresponds to the message in the message registry.\n\nWe have this in all our error responses.\n\n> \n> 3/@Message.ExtendedInfoDisplays an array ofmessage objects. Describes one or more error messages.\n\nThis one I'm not sure of, but was added in a newer version of the spec I believe.  I beleive we implement the version of the spec that we publish that we support.  This is probably the thing that needs investigation, and whether or not we should increase our spec version.\n\n> \n> All three must be encapsulated under error property which is not true in the current implementation where we send the property specific errors, Example given in the commit message.\n> \n> > 4. The advantage of this method of error handling is that you avoid a second key lookup on the response json if you choose to implement a non-spec compliant client.  Spec compliant clients would have the same amount of code.\n> \n> I really didn't get that you are listing the benefit if we don't follow the spec.Any new client which will be implemented should be redfish complaint.\n\nAgreed, and redfish has 3 error reporting mechanisms specified in 3 sections of the spec.  an implementation that doesn't implement all of them is not compliant.\n\n> \n> > \n> > \n> > Under the above, I'm still not thinking this patch can land on master in its current form.  If we had a patch that had answers to all of these issues that didn't push the problem onto clients, we could certainly discuss, but as-is, I don't really see why the advantages of this specific patchset outweigh the disadvantages."
        },
        {
            "timestamp": 1614176072,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12: Code-Review-1\n> \n> Sorry, I had to think back on this one.  I remember it being a little strange and had to get back into the spec to remember.  There are three forms of status reporting in Redfish responses:\n> \n> 1) error responses (defined in section 9.6)\n> 2) extended object information (defined in section 10.8.2.1)\n> 3) extended property information (defined in section 10.8.2.2)\n> \n> This code is intended to handle all three of these.\n> addMessageToErrorJson() adds the message to an \"error\" object for 1.\n> addMessageToJson() adds the message directly to the JSON object with the property name for 2 and 3.\n> \n> So, this change removes our ability to return status types 2 and 3.  I don't know what situations would call for the different types and maybe we should change to type 1, but I think we should still support them all.\n\nWhile we are sending the error Responses we have to use the 1) not the 2) and 3).\n\nI agree that if we are using the addMessageToJson other than sending the error responses we should not remove that."
        },
        {
            "timestamp": 1614191065,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(3 comments)\n\n> Patch Set 12:\n> \n> > Patch Set 12: Code-Review-1\n> > \n> > Sorry, I had to think back on this one.  I remember it being a little strange and had to get back into the spec to remember.  There are three forms of status reporting in Redfish responses:\n> > \n> > 1) error responses (defined in section 9.6)\n> > 2) extended object information (defined in section 10.8.2.1)\n> > 3) extended property information (defined in section 10.8.2.2)\n> > \n> > This code is intended to handle all three of these.\n> > addMessageToErrorJson() adds the message to an \"error\" object for 1.\n> > addMessageToJson() adds the message directly to the JSON object with the property name for 2 and 3.\n> > \n> > So, this change removes our ability to return status types 2 and 3.  I don't know what situations would call for the different types and maybe we should change to type 1, but I think we should still support them all.\n> \n> While we are sending the error Responses we have to use the 1) not the 2) and 3).\n\nThat's not what this patchset is doing.  It completely removes the ability to post messages 2 and 3.\n\n> \n> I agree that if we are using the addMessageToJson other than sending the error responses we should not remove that.\n\n+1"
        },
        {
            "timestamp": 1614596350,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\n(3 comments)"
        },
        {
            "timestamp": 1615280009,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> (3 comments)\n> \n> > Patch Set 12:\n> > \n> > > Patch Set 12: Code-Review-1\n> > > \n> > > Sorry, I had to think back on this one.  I remember it being a little strange and had to get back into the spec to remember.  There are three forms of status reporting in Redfish responses:\n> > > \n> > > 1) error responses (defined in section 9.6)\n> > > 2) extended object information (defined in section 10.8.2.1)\n> > > 3) extended property information (defined in section 10.8.2.2)\n> > > \n> > > This code is intended to handle all three of these.\n> > > addMessageToErrorJson() adds the message to an \"error\" object for 1.\n> > > addMessageToJson() adds the message directly to the JSON object with the property name for 2 and 3.\n> > > \n> > > So, this change removes our ability to return status types 2 and 3.  I don't know what situations would call for the different types and maybe we should change to type 1, but I think we should still support them all.\n> > \n> > While we are sending the error Responses we have to use the 1) not the 2) and 3).\n> \n> That's not what this patchset is doing.  It completely removes the ability to post messages 2 and 3.\n> \n> > \n> > I agree that if we are using the addMessageToJson other than sending the error responses we should not remove that.\n> \n> +1\n\nJason, Ed: What are the API where we are using the 10.8.2.1 and 10.8.2.2?\n\nAs per the spec if there is an error then we should follow 9.6 so I am confused other than error where we are using the 2) and 3)."
        },
        {
            "timestamp": 1617207663,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\nHi Ed, Jason.\n\nI looked through the bmcweb code, but could you please point out the partial success cases, if any.\n\nIf there are any partial success cases, this code can be extended by not removing the addMessageToJson method, and a few changes are required (where we call the error message method with a flag indicating failure/partial success)"
        },
        {
            "timestamp": 1617207681,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> Hi Ed, Jason.\n> \n> I looked through the bmcweb code, but could you please point out the partial success cases, if any.\n> \n> If there are any partial success cases, this code can be extended by not removing the addMessageToJson method, and a few changes are required (where we call the error message method with a flag indicating failure/partial success)\n\nYour thoughts, please?"
        },
        {
            "timestamp": 1619720221,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> > Patch Set 12:\n> > \n> > Hi Ed, Jason.\n> > \n> > I looked through the bmcweb code, but could you please point out the partial success cases, if any.\n> > \n> > If there are any partial success cases, this code can be extended by not removing the addMessageToJson method, and a few changes are required (where we call the error message method with a flag indicating failure/partial success)\n> \n> Your thoughts, please?\n\nWe discussed a little on discord, which I think got you the answers you needed about what's still needed on this patchset.  If you're still not clear, lets use that as a communication medium just to cut down the cycle time until we have a good understanding of what direction we want here."
        },
        {
            "timestamp": 1619755011,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\nSure Ed.\n\nI am trying to test the behavior of this patch with the webui-vue as the first step. I will post the observations, and doubts if any, in dicord.\n\nThanks."
        },
        {
            "timestamp": 1621509251,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\nI have tested this change with webui-vue. Have tested some of the possible bad paths and i saw nothing was broken due to this change.\nTested dumps creation, local user management, bmc network configuration, ssl certificate management, LDAP settings.\n\nI have also added Rahul from the test team as a reviewer. He have tested this change with the openbmc test automation (both good and bad paths) and confirmed that this change doesnt break anything and the errors were handled correctly.\n@Rahul, can you confirm it here?"
        },
        {
            "timestamp": 1621536758,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 12:\n> \n> I have tested this change with webui-vue. Have tested some of the possible bad paths and i saw nothing was broken due to this change.\n\nThat seems odd.  Gunnar, does webui-vue not use the error responses from Redfish?\n\n> Tested dumps creation, local user management, bmc network configuration, ssl certificate management, LDAP settings.\n> \n> I have also added Rahul from the test team as a reviewer. He have tested this change with the openbmc test automation (both good and bad paths) and confirmed that this change doesnt break anything and the errors were handled correctly.\n> @Rahul, can you confirm it here?\n\nStill waiting on DMTF official tooling (libredfish, redfishtool, ect)"
        },
        {
            "timestamp": 1621875236,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\nI have tested these changes with some bad path in redfish tool & libredfish and have put those outputs together in a gist file:\nredfish tool: https://gist.github.com/asmithakarun/603b46b13d4600b484521fb5f425d964\n\nlibredfish: https://gist.github.com/asmithakarun/e31c1fb890f8d88fd21d15dbd06b5942"
        },
        {
            "timestamp": 1621875426,
            "reviewer": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "message": "Patch Set 12:\n\n> If there are any partial success cases, this code can be extended by not removing the addMessageToJson method, and a few changes are required (where we call the error message method with a flag indicating failure/partial success)\n\nI saw in few cases of PATCH, there is just success/failure and not partial success\nBut still, for the partial cases, all the scenarios must be listed down and a way to handle them (probably like above) must be thought of."
        },
        {
            "timestamp": 1639159653,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Abandoned\n\nStill not updated with the testing asked for, and seems to have stalled.  If this is still being worked, feel free to reopen."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "325af6a361d633097dca64d305c1b1bd6e8fd949",
            "parents": [
                "9f8bfa7c6deb3808e3679d332479311dc4202819"
            ],
            "ref": "refs/changes/94/38194/1",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1605192813,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 86,
                    "deletions": -114
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 114
        },
        {
            "number": 2,
            "revision": "1963d862223111dfb3d9750c665ceff9bfc89ad3",
            "parents": [
                "9f8bfa7c6deb3808e3679d332479311dc4202819"
            ],
            "ref": "refs/changes/94/38194/2",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1605193081,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 88,
                    "deletions": -114
                }
            ],
            "sizeInsertions": 88,
            "sizeDeletions": 114
        },
        {
            "number": 3,
            "revision": "26a68799356cd83e9ea2a30720185d47f0b60af6",
            "parents": [
                "9f8bfa7c6deb3808e3679d332479311dc4202819"
            ],
            "ref": "refs/changes/94/38194/3",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1605193399,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "more details needed here:\n1. What did you change?  Be specific about field names, as well as their renamed values.\n2. How will this impact clients?\n3. Where does the redfish specification say the old way is disallowed?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Ack"
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Severity was deprecated. \nhttps://redfish.dmtf.org/schemas/v1/Message.v1_1_1.json\n\n\n                \"Severity\": {\n                    \"deprecated\": \"This property has been deprecated in favor of MessageSeverity, which ties the values to the enumerations defined for the Health property within Status.\",\n                    \"description\": \"The severity of the errors.\",\n                    \"longDescription\": \"This property shall contain the severity of the error, as defined in the Status section of the Redfish Specification.  Services can replace the value defined in the message registry with a value more applicable to the implementation.\",\n                    \"readonly\": true,\n                    \"type\": [\n                        \"string\",\n                        \"null\"\n                    ],\n                    \"versionDeprecated\": \"v1_1_0\""
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 89,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Sure, but that was deprecated in v1.1.0 and here, the odata type points to v1.0.0. Will update the odata type to the latest schema (with MessageSeverity)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 88,
                    "deletions": -114
                }
            ],
            "sizeInsertions": 88,
            "sizeDeletions": 114
        },
        {
            "number": 4,
            "revision": "b7f7fee9c542ce9c0db3118057ec74394300a449",
            "parents": [
                "3a17e02873fdf53898a2cfce894dcb36223d76d4"
            ],
            "ref": "refs/changes/94/38194/4",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1605213373,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Good.  This is helpful."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "To my understanding of the Redfish specification, both of these formats are allowed, and are used in various circumstances.  If we're not obeying the spec, that's certainly a discussion to be had, but as is, you've lost the property value from the ExtendedInfo section, which means that we can no longer match up which fields caused issues, so what you proposed is arguably worse than what we have now.\n\nI suspect the core of the issue here is that the management console didn't implement Redfish error handling properly, or to the specification.\n\nThe relevant sections you should be looking at are:\n8.4.3 modification error responses\n9.6 Error responses\n\n\nIt looks like in recent history, the \"RelatedProperties\" field has been added to convey which field caused the issue;  That would need to be included in your patch so we don't lose capability from what exists today."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 56,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "> To my understanding of the Redfish specification, both of these formats are allowed and are used in various circumstances.\nThe relevant sections you should be looking at are:\n8.4.3 modification error responses\n9.6 Error responses\n\nThanks for pointing out this, Ed. This helped me understand it better.\n\n> but as is, you've lost the property value from the ExtendedInfo section, which means that we can no longer match up which fields caused issues, so what you proposed is arguably worse than what we have now.\nI have a thought here. Since we are copying the \"Message\" field of \"@Message.ExtendedInfo\" to \"error\" property's \"message\", I hope we wouldn't miss out on the value format error message as well. The error looks like the below:\n\n{\n  \"@odata.type\": \"#RedfishError.v1_0_1.RedfishError\",\n  \"error\": {\n    \"code\": \"Base.1.8.1.PropertyValueFormatError\",\n    \"message\": \"The value 2020-11-09T10:07:21+0530 for the property DateTime is of a different format than the property can accept.\"\n  }\n}\n\nIn this case, do you think the RelatedProperties field here would be necessary?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Any answer I'd give would be based on quoting the Redfish spec.  You can look through it just as easily as I can."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 70,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 87,
                    "deletions": -113
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 113
        },
        {
            "number": 5,
            "revision": "f56a0dfaecd06fa1e023538697c8a559dc07e19e",
            "parents": [
                "3a17e02873fdf53898a2cfce894dcb36223d76d4"
            ],
            "ref": "refs/changes/94/38194/5",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606117309,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 87,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 87,
                    "deletions": -102
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 102
        },
        {
            "number": 6,
            "revision": "28019ceb0dab077544ea35a1b654a152a77a502f",
            "parents": [
                "3a17e02873fdf53898a2cfce894dcb36223d76d4"
            ],
            "ref": "refs/changes/94/38194/6",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606118073,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 97,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 87,
                    "deletions": -102
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 102
        },
        {
            "number": 7,
            "revision": "de549e6aa68202f94e540458764abe8c93d404f5",
            "parents": [
                "94bda602f00b181befa20a08550439b3c1d3b256"
            ],
            "ref": "refs/changes/94/38194/7",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606119213,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 98,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 87,
                    "deletions": -102
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 102
        },
        {
            "number": 8,
            "revision": "9ff9c2f83fca32b84339062631a3d96d0229696f",
            "parents": [
                "3a17e02873fdf53898a2cfce894dcb36223d76d4"
            ],
            "ref": "refs/changes/94/38194/8",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606119341,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we split this in another commit?  It seems very unrelated, and something that get merged pretty easily, so we can focus on the below as a smaller patchset."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Ack"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 65,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "according to 10.8.2.2\n\n\"Services may use @Message.ExtendedInfo , prepended with the name of the property to annotate an individual\nproperty in a JSON object with extended information:\"\n\nCan you please clarify if you saw that section, and whether or not this statement you made is still true?  The example from that section of Redfish does exactly what you say \"does not meet the specification\" so I'm struggling to see how we broke the spec here."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 65,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "I have missed this one.\n\nAdded it in my new patchset.\nSo the changes would be to add an \"error\" property for all sorts of error w.r.t the schema.\n\nIt also contains the extended info with the name of the property prepended to it (as it is in the current bmcweb).\n\nSo this way, nothing is lost w.r.t the current bmcweb error returns, but just added the above mentioned.\n\nNow, the error response will be in a common format and easy to parse."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 65,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I have missed this one.\n> \n> Added it in my new patchset.\n> So the changes would be to add an \"error\" property for all sorts of error w.r.t the schema.\n> \n> It also contains the extended info with the name of the property prepended to it (as it is in the current bmcweb).\n> \n> So this way, nothing is lost w.r.t the current bmcweb error returns, but just added the above mentioned.\n> \n> Now, the error response will be in a common format and easy to parse.\n\nSo, to be more clear, what exists in master today is in line with the specification?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 65,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Yes, added the odata type to it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Clients should implement the Redfish specification for handling errors, which, while maybe not the most clear, would require implementing all types of error returns."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 67,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Ack"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 72,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems like a reasonable change to make, and something that the redfish examples do."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 72,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Tested?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 95,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Yes.\n\ncurl -k -H \"X-Auth-Token:$bmc_token\" -X PATCH https://${bmc}:5443/redfish/v1/Managers/bmc -d '{\"DateTime\":\"2020-11-09T10:07:21+0530\"}'\n\n{\n  \"@odata.type\": \"#RedfishError.v1_0_1.RedfishError\",\n  \"error\": {\n    \"DateTime@Message.ExtendedInfo\": [\n      {\n        \"@odata.type\": \"#Message.v1_1_1.Message\",\n        \"Message\": \"The value 2020-11-09T10:07:21+0530 for the property DateTime is of a different format than the property can accept.\",\n        \"MessageArgs\": [\n          \"2020-11-09T10:07:21+0530\",\n          \"DateTime\"\n        ],\n        \"MessageId\": \"Base.1.8.1.PropertyValueFormatError\",\n        \"MessageSeverity\": \"Warning\",\n        \"Resolution\": \"Correct the value for the property in the request body and resubmit the request if the operation failed.\"\n      }\n    ],\n    \"code\": \"Base.1.8.1.PropertyValueFormatError\",\n    \"message\": \"The value 2020-11-09T10:07:21+0530 for the property DateTime is of a different format than the property can accept.\"\n  }\n\n\ncurl -k -H \"X-Auth-Token:$bmc_token\" -X PATCH https://${bmc}:5443/redfish/v1/Managers/bmc -d '{\"DateTime\":\"2020-11-09T10:07:21+00\"}'\n\n{\n  \"@odata.type\": \"#RedfishError.v1_0_1.RedfishError\",\n  \"error\": {\n    \"@Message.ExtendedInfo\": [\n      {\n        \"@odata.type\": \"#Message.v1_1_1.Message\",\n        \"Message\": \"The request failed due to an internal service error.  The service is still operational.\",\n        \"MessageArgs\": [],\n        \"MessageId\": \"Base.1.8.1.InternalError\",\n        \"MessageSeverity\": \"Critical\",\n        \"Resolution\": \"Resubmit the request.  If the problem persists, consider resetting the service.\"\n      }\n    ],\n    \"code\": \"Base.1.8.1.InternalError\",\n    \"message\": \"The request failed due to an internal service error.  The service is still operational.\"\n  }\n}"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You need to put a tested statement in your commit message."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 95,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Ack."
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 28,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Does this get set in the top-level object or in the error object?"
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 28,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "I hope this must be set here, in the error object."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 97,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 87,
                    "deletions": -102
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 102
        },
        {
            "number": 9,
            "revision": "ad8d32e0ace87bc09717d6d3f60e9fefcd4fe26d",
            "parents": [
                "3e082749f3301116de14ac61661a625897a75971"
            ],
            "ref": "refs/changes/94/38194/9",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606209841,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 90,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 32,
                    "deletions": -31
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 31
        },
        {
            "number": 10,
            "revision": "c110d2da1fc4e196293ccc1fb6c6786a4db508a5",
            "parents": [
                "3e082749f3301116de14ac61661a625897a75971"
            ],
            "ref": "refs/changes/94/38194/10",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606210279,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Sunitha Harish",
                        "email": "sunithaharish04@gmail.com",
                        "username": "sunharis"
                    },
                    "message": "This can be combined by defaulting the fieldName to \"\""
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 91,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -31
                }
            ],
            "sizeInsertions": 34,
            "sizeDeletions": 31
        },
        {
            "number": 11,
            "revision": "30830a68438bb47cb57a33bd975806208af3868c",
            "parents": [
                "3e082749f3301116de14ac61661a625897a75971"
            ],
            "ref": "refs/changes/94/38194/11",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606214324,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 91,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": -30
                }
            ],
            "sizeInsertions": 20,
            "sizeDeletions": 30
        },
        {
            "number": 12,
            "revision": "296c4437ca00bfc5e3dcff6a9bf7e8f48644fe53",
            "parents": [
                "ceb8ddc11b79e771cac1b8fbacd4e72e833de0e8"
            ],
            "ref": "refs/changes/94/38194/12",
            "uploader": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "createdOn": 1606325189,
            "author": {
                "name": "Asmitha Karunanithi",
                "email": "asmitk01@in.ibm.com",
                "username": "asmithakarun"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please also call out the other two sections, and mention why we are deleting code for handling of those conditions."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 58,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "Sure, but this is where i had a concern initially when i pushed the PS.\n\nWhether or not to include the object and property extended info inside \"error\" property."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Way more testing is needed here.  You've modified error handling for almost every error type.  You don't have to check each one by hand, but I would expect to at least test one example of each type of error, as well as the difference between single errors, and multiple errors (they call different code paths)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 68,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "I have created two gist files and in it, i have shared the o/p containing the errors (with and without this change).\n\nhttps://gist.github.com/asmithakarun/7ce03df868fe15675381620078bdabe3\n\nhttps://gist.github.com/asmithakarun/b31b31f11036c81746e66219c37f3a55"
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This wasn't mentioned in the commit message at all?"
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "line": 29,
                    "reviewer": {
                        "name": "Asmitha Karunanithi",
                        "email": "asmitk01@in.ibm.com",
                        "username": "asmithakarun"
                    },
                    "message": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38194/12//COMMIT_MSG#65"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/error_messages.cpp",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": -30
                }
            ],
            "sizeInsertions": 20,
            "sizeDeletions": 30
        }
    ]
}