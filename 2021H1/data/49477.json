{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Ib272ab08f5ba0d5f2e66cfbcc2fda4e6bf30934d",
    "number": 49477,
    "subject": "Update : EEPROM device type identification logic.",
    "owner": {
        "name": "Karthikeyan Pasupathi",
        "email": "pkarthikey@hcl.com",
        "username": "karthikeyan5523"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/49477",
    "commitMessage": "Update : EEPROM device type identification logic.\n\nUpdated the EEPROM device type 8 bit or 16 bit identification logic.\nThis logic is purely platform based. Initiating platform specific\nservice from EM and get the device byte type info and populate this\nbyte type info into dbus. Finally, FruDevice will read this info\nfrom dbus.\n\nSigned-off-by: Karthikeyan Pasupathi <pkarthikey@hcl.com>\nChange-Id: Ib272ab08f5ba0d5f2e66cfbcc2fda4e6bf30934d\n",
    "createdOn": 1638977427,
    "lastUpdated": 1640116283,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1638977427,
            "reviewer": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1638982106,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\nAdding EM maintainers."
        },
        {
            "timestamp": 1639562811,
            "reviewer": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1639762603,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1640097405,
            "reviewer": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1640116283,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "23d956c65254ac53beb217729d3bd47232cf47e6",
            "parents": [
                "b5cddbb2c96cca6ae055575fa6580f06b9a1a844"
            ],
            "ref": "refs/changes/77/49477/1",
            "uploader": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "createdOn": 1638977427,
            "author": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "type": "ADDED",
                    "insertions": 93,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 93,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "ab2952761d7bfc6099dd70cb29dea00242ee9040",
            "parents": [
                "b5cddbb2c96cca6ae055575fa6580f06b9a1a844"
            ],
            "ref": "refs/changes/77/49477/2",
            "uploader": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "createdOn": 1639562811,
            "author": {
                "name": "Karthikeyan Pasupathi",
                "email": "pkarthikey@hcl.com",
                "username": "karthikeyan5523"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I have no interest in supporting per-machine services in entity-manager.  If you need a per-machine service, write an entity-manager reactor, which can be be per-machine."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Karthikeyan Pasupathi",
                        "email": "pkarthikey@hcl.com",
                        "username": "karthikeyan5523"
                    },
                    "message": "If I understood your statement properly i could think of following design:\n\nJust creating a new reactor deamon in entity-manager, through this reactor deamon will read and parse the ncsi command and get the output as 8-bit or 16-bit. Then it will update the 8-bit or 16 bit device byte type in Dbus interfaces of FRU device and read from it.\n\nQuestion:Is it fine to have the deamon(detector EEPROM) in entity-manager?"
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> If I understood your statement properly i could think of following design:\n> \n> Just creating a new reactor deamon in entity-manager,\n\nIt would not belong in entity-manager.  Entity-manager is for common code.\n\n> through this reactor deamon will read and parse the ncsi command and get the output as 8-bit or 16-bit.\n\nAH, now I understand.  Let me make sure I have it right.\n\n1. BMC reads the NCSI ID of the NIC\n2. The NCSI id will determine if the NIC has a 16 bit or 8 bit eeprom\n\n\nThat makes more sense.  In that case, your flow would be:\n\n1. Update NCSId to expose an appropriate dbus API for determining the \"model\" or \"ID\" of the card.  You might need to invent a new interface here.\n2. Write an EM config file that uses that dbus API for its probe statement.\n3. In the EM config file, add a \"Size\" flag under the Type: \"EEPROM\" field.\n4. Update FruDevice to check EM configs, and lookup the size field appropriately if it's defined in an EM config.\n\n\nThe advantage of the above design is that there's no new platform-specific code, and it's reusing most of the infrastructure that exists already.\n\n> Then it will update the 8-bit or 16 bit device byte type in Dbus interfaces of FRU device and read from it.\n> \n> Question:Is it fine to have the deamon(detector EEPROM) in entity-manager?\n\nIn the above what I've written, there are no new daemons here.\n\nNCSID exists (although would need to be promoted out of the meta-google repo if more people are going to use it)\nhttps://github.com/openbmc/openbmc/blob/master/meta-google/recipes-google/ncsi/ncsid_git.bb\n\nThat would be the thing that exposes the NCSI device model number."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 65,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please avoid making this a script.  They are difficult to debug and maintain over time."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 65,
                    "reviewer": {
                        "name": "Karthikeyan Pasupathi",
                        "email": "pkarthikey@hcl.com",
                        "username": "karthikeyan5523"
                    },
                    "message": "Ack.Based on the first review comment input/suggestions this can be concluded."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not following this step.  If you don't know if the eeprom is 8 bit or 16 bit, how does this script suddenly bypass the \"detect 16 bit eeprom\" problem?  Won't this script have the same issue as the FruDevice code does?"
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 66,
                    "reviewer": {
                        "name": "Karthikeyan Pasupathi",
                        "email": "pkarthikey@hcl.com",
                        "username": "karthikeyan5523"
                    },
                    "message": "The script doesn't read the EEPROM directly, There are some other mechanism to find out whether this will have a 8-bit or 16-bit EEPROM. this will read by the NIC manufacturer information using nisi command, using this command ncsi-netlink --info -x 2 -p 0 -c 0  will get the output like this \n\nGet Info , PACKAGE :  0, IFINDEX :  2\nPackage has id : 0\nChannel Active : 0\nChannel Major Version : f1f1f000\nChannel Minor Version : 0\nChannel Version Str :mlx0.1\nChannel Link State : 2f\nActive Vlan ids\n\nbased on this information, we are getting 8 bit or 16 bit type using manufacturer information"
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Now I understand.  See my reply on the previous comment about how you could make this work in an entity-manager system."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 72,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "To repeat, if you want a platform-specific service, write and maintain a platform specific service.  Dbus is your extension point and interface there;  If you want to reuse code from FruDevice for it, abstract it to a library (a lot of that work has already been done).  I'm not interested in having a plugin system for FruDevice, which is intended to be self-contained."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 72,
                    "reviewer": {
                        "name": "Karthikeyan Pasupathi",
                        "email": "pkarthikey@hcl.com",
                        "username": "karthikeyan5523"
                    },
                    "message": "Ack.Based on the first review comment input/suggestions this can be concluded."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 76,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In this flow, you've basically described how this should work, you've just added a number of pieces that are extra and not needed.\n\n1. In the \"Type\": \"eeprom\" entry for a given device, include a parameter called \"size\" that can determine whether the eeprom is 16 bit or 8 bit.\n2. Determine how to detect the \"is 16 bit\" of a given device without pre-defined knowledge of said device, or attach the relevant information to the baseboard configuration for something like \"Eeprom hint\"\n3. Add the backward path to FruDevice such that FruDevice looks at the size parameter, and uses that to set the 16bitness of the part."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 76,
                    "reviewer": {
                        "name": "Karthikeyan Pasupathi",
                        "email": "pkarthikey@hcl.com",
                        "username": "karthikeyan5523"
                    },
                    "message": "We have a json file for baseboard FRU and we have a separate json file for each NIC card in entity-manager, if particular  NIC card has been detected then it will load the corresponding json config file and read the EEPROM information, EEPROM config can be detected at run time based on the loaded FRU NIC.\n\nwe have a NIC card slot, that will support Mellanox NIC card or Broadcom NIC card, Both are having different EEPROM configuration. we have to detect 8-bit or 16-bit EEPROM type before load the FRU NIC. This EEPROM byte detection is platform specific."
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "line": 76,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We have a json file for baseboard FRU and we have a separate json file for each NIC card in entity-manager, if particular  NIC card has been detected then it will load the corresponding json config file and read the EEPROM information, EEPROM config can be detected at run time based on the loaded FRU NIC.\n\nYep, you got it.\n\n> \n> we have a NIC card slot, that will support Mellanox NIC card or Broadcom NIC card, Both are having different EEPROM configuration. we have to detect 8-bit or 16-bit EEPROM type before load the FRU NIC.\n\nSlight change in wording: You have to detect the MODEL of the card.  From there entity-manager can generally configure the size of the eeprom, which doesn't need to be platform specific.\n\n> This EEPROM byte detection is platform specific.\n\nIMO, based on what you've written, I don't think it is.  If I put a 16 bit eeprom mellonox card into any system, I'd like it to parse correctly, and using NCSI seems like a nice generic way to do that model detection."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "designs/EEPROM-byte-type-identification.md",
                    "type": "ADDED",
                    "insertions": 101,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 101,
            "sizeDeletions": 0
        }
    ]
}