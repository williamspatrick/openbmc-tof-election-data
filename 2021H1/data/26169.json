{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Ia486a57f5dee2ce56da206a7a8497521ddb74061",
    "number": 26169,
    "subject": "docs: Describe OpenBMC secure boot design with AST2600",
    "owner": {
        "name": "Chris Engel",
        "email": "cjengel@us.ibm.com",
        "username": "cjengel"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/26169",
    "commitMessage": "docs: Describe OpenBMC secure boot design with AST2600\n\nThis document describes a possible design of OpenBMC secure boot\nmaking use of the AST2600 HW secure boot feature and U-Boot\nverified boot\n\nSigned-off-by: Chris Engel <cjengel@us.ibm.com>\nChange-Id: Ia486a57f5dee2ce56da206a7a8497521ddb74061\n",
    "createdOn": 1571247049,
    "lastUpdated": 1629251812,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1571247049,
            "reviewer": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1573142724,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\nWhy security/ instead of the usual designs/ ?"
        },
        {
            "timestamp": 1573144996,
            "reviewer": {
                "name": "Joseph Reynolds",
                "email": "joseph-reynolds@charter.net",
                "username": "joseph-reynolds"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nThe design seems like it is high level, and needs to be more concrete.  I suggested adding a workflow as a way to understand what steps I would actually take to use the secure boot feature.\nAlthough this is for a security feature, I vote to put this in the design folder."
        },
        {
            "timestamp": 1574055120,
            "reviewer": {
                "name": "Joel Stanley",
                "email": "joel@jms.id.au",
                "username": "shenki"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(3 comments)\n\nThis is a great start. I suggest me merge this and keep it updated as the work progresses."
        },
        {
            "timestamp": 1575408201,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1: Code-Review+1\n> \n> (3 comments)\n> \n> This is a great start. I suggest me merge this and keep it updated as the work progresses.\n\nSorry should have responded to this earlier.  I (or Brad, the other docs maintainer) have not been merging \"work in progress designs\". This review has comments that need to be addressed. \nThe reason why I have not merged \"work in progress\" designs, from https://github.com/openbmc/docs/blob/master/CONTRIBUTING.md#pace-of-review, \n\nPart of the nature of open source is attrition - contributors can come and go easily - so maintainers tend not to put stock in promises such as \"I will add unit tests in a later patch\" or \"I will be implementing this proposal by the end of next month.\""
        },
        {
            "timestamp": 1575500899,
            "reviewer": {
                "name": "Alexander Tereschenko",
                "email": "aleksandr.v.tereschenko@intel.com",
                "username": "alext-w"
            },
            "message": "Patch Set 1:\n\n(10 comments)\n\nI think it's a good idea to have such a document, see more specific comments inline."
        },
        {
            "timestamp": 1575663780,
            "reviewer": {
                "name": "Daniil Egranov",
                "email": "daniil.egranov@arm.com",
                "username": "daniileg"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1575891301,
            "reviewer": {
                "name": "Alexander Tereschenko",
                "email": "aleksandr.v.tereschenko@intel.com",
                "username": "alext-w"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1575912011,
            "reviewer": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1575912207,
            "reviewer": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1575922704,
            "reviewer": {
                "name": "Daniil Egranov",
                "email": "daniil.egranov@arm.com",
                "username": "daniileg"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1576534126,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1577987693,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1578021280,
            "reviewer": {
                "name": "Joseph Reynolds",
                "email": "joseph-reynolds@charter.net",
                "username": "joseph-reynolds"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1578415058,
            "reviewer": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1585540313,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1590531792,
            "reviewer": {
                "name": "Joseph Reynolds",
                "email": "joseph-reynolds@charter.net",
                "username": "joseph-reynolds"
            },
            "message": "Patch Set 2:\n\nHow does the BMC admin interact with the TPM?  See Redfish pub DSP2046 > ComputerSystem schema > TrustedModules property.  Is the BMC represented as a ComputerSystem?\nWould we need to GET the following BMC TPM properties?\n- The BMC TPM security jumper status, if present.\n- Results of signature validations: U-boot signature, image signature, etc.\n- Results of or interpretations from TPM measurements."
        },
        {
            "timestamp": 1590648284,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1592318726,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601498282,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "zhdaniel@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\nIt is great that community is looking into enable security boot feature also. \nMy inline comments talking about what is the main benefit and main blocker \nto enable AST2600 secure boot."
        },
        {
            "timestamp": 1604420566,
            "reviewer": {
                "name": "Manikandan Elumalai",
                "email": "manikandan.hcl.ers.epl@gmail.com",
                "username": "manikandan-e"
            },
            "message": "Patch Set 2:\n\nHi Chris, \n I understand that, Facebook implemented the secure boot with AST2500 SoC. Is this design proposal docs supports AST2500 as well. Thanks."
        },
        {
            "timestamp": 1612483591,
            "reviewer": {
                "email": "zkxz@hotmail.com",
                "username": "zkxz"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1612536274,
            "reviewer": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1614666921,
            "reviewer": {
                "name": "Joel Stanley",
                "email": "joel@jms.id.au",
                "username": "shenki"
            },
            "message": "Patch Set 2: Code-Review+1\n\nCan we please merge this and future iteration can be submitted in the form of patches to this document?"
        },
        {
            "timestamp": 1614688618,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2: Code-Review+1\n> \n> Can we please merge this and future iteration can be submitted in the form of patches to this document?\n\nWe\u2019ve been waiting over a year for a new patch set as promised by the author. If I merge this I have no confidence that the design will ever be agreed to at this point. It seems like it is not a priority for the original author. Joel, is this something you or someone else can take over?"
        },
        {
            "timestamp": 1614705508,
            "reviewer": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1614790698,
            "reviewer": {
                "name": "Joseph Reynolds",
                "email": "joseph-reynolds@charter.net",
                "username": "joseph-reynolds"
            },
            "message": "Patch Set 3:\n\n(1 comment)\n\nI understand the intent was for this design to have a long lead-time to gather comments.  I believe there is definitely community interest in getting this working soon (before YE2021), and I hope we can restart discussion here."
        },
        {
            "timestamp": 1614927952,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "zhdaniel@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 3: Code-Review-1\n\n> Patch Set 3:\n> \n> (1 comment)\n> \n> I understand the intent was for this design to have a long lead-time to gather comments.  I believe there is definitely community interest in getting this working soon (before YE2021), and I hope we can restart discussion here.\n\nTo this design I have 3 concerns:\n1. It dependents on specific h/w AST2600.\n2. And the h/w has limitation to support secure and scalable ownership transfer\n3. The h/w itself impose a hard limitation to the SPL size (64K) \n\nThe early discussion about ownership transfer, and physical jumper. \nThe TPM2.0 Arch spec chapter 40 \"General purpose I/O\"\n```\nA TPM may have one or more I/O pins that inputs or outputs a logic state. TPM2_NV_Read and TPM2_NV_Write may be used to access the value of GPIO using normal access controls.\nA platform-specific specification defines the mapping of NV Indices to individual General Purpose I/O (GPIO). Whether the TPM reserves any NV storage for the indicated GPIO is platform specific.\n```\n\nWe can use TPM to control the GPIO as this jumper, which controls the write protection of SPL partition. \n\nEssentially this give us a straight forward and h/w neutral solution."
        },
        {
            "timestamp": 1615172844,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "zhdaniel@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 3: -Code-Review\n\n> Patch Set 3: Code-Review-1\n> \n> > Patch Set 3:\n> > \n> > (1 comment)\n> > \n> > I understand the intent was for this design to have a long lead-time to gather comments.  I believe there is definitely community interest in getting this working soon (before YE2021), and I hope we can restart discussion here.\n> \n> To this design I have 3 concerns:\n> 1. It dependents on specific h/w AST2600.\n\nSorry, I take back my first concern, because this is a design specifically for OpenBMC use AST2600. \n\n> 2. And the h/w has limitation to support secure and scalable ownership transfer\n> 3. The h/w itself impose a hard limitation to the SPL size (64K) \n> \n> The early discussion about ownership transfer, and physical jumper. \n> The TPM2.0 Arch spec chapter 40 \"General purpose I/O\"\n> ```\n> A TPM may have one or more I/O pins that inputs or outputs a logic state. TPM2_NV_Read and TPM2_NV_Write may be used to access the value of GPIO using normal access controls.\n> A platform-specific specification defines the mapping of NV Indices to individual General Purpose I/O (GPIO). Whether the TPM reserves any NV storage for the indicated GPIO is platform specific.\n> ```\n> \n> We can use TPM to control the GPIO as this jumper, which controls the write protection of SPL partition. \n> \n> Essentially this give us a straight forward and h/w neutral solution."
        },
        {
            "timestamp": 1629251812,
            "reviewer": {
                "name": "Troy Lee",
                "email": "troy_lee@aspeedtech.com",
                "username": "LeeTroy"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "13fc95de4d1619f7256a7409c138072842213d9d",
            "parents": [
                "f75a11159b2e46ffc40763b566a0ddfc2828f5f0"
            ],
            "ref": "refs/changes/69/26169/1",
            "uploader": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "createdOn": 1571247049,
            "author": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 1,
                    "reviewer": {
                        "name": "Joel Stanley",
                        "email": "joel@jms.id.au",
                        "username": "shenki"
                    },
                    "message": "You're the expert, lets settle on the language. We've been calling it Secure and Trusted Boot so far, would you prefer Verified and Trusted boot?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 1,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "We usually use the term secure boot however U-boot uses verified boot that is why I had both.  My preference would be Secure and Trusted Boot"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 5,
                    "reviewer": {
                        "name": "Joel Stanley",
                        "email": "joel@jms.id.au",
                        "username": "shenki"
                    },
                    "message": "You can be the assignee. I can be a coauthor. My IRC nick is shenki."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 79,
                    "reviewer": {
                        "name": "Daniil Egranov",
                        "email": "daniil.egranov@arm.com",
                        "username": "daniileg"
                    },
                    "message": "Is this BMC dedicated TPM?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 79,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "Yes the BMC will have it's own dedicated TPM which is not tied to the host TPM"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 79,
                    "reviewer": {
                        "name": "Daniil Egranov",
                        "email": "daniil.egranov@arm.com",
                        "username": "daniileg"
                    },
                    "message": "Two TPM chips on the single board may not work for everyone. Should we think about possibility of using the host TPM for both BMC and CPU/SoC?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 80,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "This opens up a potential TOCTOU-like situation - usually you'd want your previous boot stage to measure the next one, to make sure this \"self-reporting\" isn't prone to manipulation (e.g. there may be a bug in the U-Boot, that would allow an attacker to take control over loaded code and then make it report whatever the \"right\" value is). That would require ROM support however."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 80,
                    "reviewer": {
                        "name": "Daniil Egranov",
                        "email": "daniil.egranov@arm.com",
                        "username": "daniileg"
                    },
                    "message": "At this boot stage, it can be a valid approach. The U-Boot SPL is loaded by the ROM firmware which is intended to be as small as possible. Any bugs in the ROM firmware may lead to re-spin the actual silicon and it's quite expensive. Adding the TPM driver to the ROM firmware is possible but may not be desirable. It is also possible that the ROM firmware measures the U-Boot SPL image and passes the measurement to the U-Boot SPL but the U-Boot SPL code still can manipulate with it. I guess we can trust U-Boot SPL as it's been already verified by ROM firmware."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 80,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "> <...> I guess we can trust U-Boot SPL as it's been already verified by ROM firmware.\n\nWell, ideally we shouldn't, as there may be ways to compromise it (if there are bugs as I mentioned in my previous comment). But I agree the ROM limitations may prevent this from happening. Do we have any communicaton or IO interfaces (except naturally flash) that SPL opens up or services? If there's no option of ROM measurements, we could limit those to the bare minimum and harden those that left, to have better assurance.\n\nAnd yes, I agree passing the value measured by ROM is no better than just self-measurement, so not worth it. Unless we devise some scheme with keyed MAC, for which only ROM and the measurement consumer would have the key, but that would rather be unrealistically complex."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 80,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "Ideally we would go with the path of having the ROM measure the SPL into the TPM as mentioned above.  The current AST2600 ROM doesn't support that but it is definitely something we would like to investigate in the future.  My feeling is that this current design does have limitation from a security standpoint if there was a way to compromise the self-measurement but if there are less severe vulnerabilities to the SPL (which has been validated by the ROM) for example a compromise to the verification of U-Boot but no ability to compromise the self-measurement you would be able to detect you are running this vulnerable level of SPL."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 82,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "I'm not 100% sure, but I think 2600 may not have the SPL-level Verified Boot enabled, have you by chance checked that?\n\nI'd also suggest to explicitly mention that the use of \"signed configuration\" (as opposed to \"signed image\") way of configuring the Verified Boot is to be used, to prevent image swapping attacks."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "Probably a Device Tree binary could be added here as well?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "I'm not familiar with all the components that make up a full OpenBMC image.  I'm assuming by this statement that the dev tree is static and not built up via U-boot ?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Daniil Egranov",
                        "email": "daniil.egranov@arm.com",
                        "username": "daniileg"
                    },
                    "message": "Will the BMC platform chain of trust be based on public key stored in OTP and public key(s) in EEProm will be signed by the private part of the OTP public key?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "That wasn't part of the design but is a very interesting idea.  With the current design there is a break in the key chain here.  A compromised EEProm key can only be detected through attestation of the TPM.  One issue with your idea is the fact that in our development flows we always have to main sets of keys (production and development).  The AST2600 allows for production and development (low security) keys but since the keys are in OTP memory they can't be changed.  At some point during our development process we will have to disable the development key in OTP memory at which point we can only use production signed SPL images.  However this point is way too soon in our development cycle such that we can't run the entire U-Boot/Linux stack with production keys.  My plan is that we will start running with production signed SPL with the remainder of the stack development signed.  So the BMC will have only production keys enabled in OTP and then development keys in the EEProm.  So to enable that with your idea of signed keys in EEPRom I would have to sign the well known development keys with the production OTP key.  As soon as that happens you essentially break the chain as anyone could put these keys into EEProm and flash development signed U-boot.  Which takes you back to verification of the keys through attestation."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Daniil Egranov",
                        "email": "daniil.egranov@arm.com",
                        "username": "daniileg"
                    },
                    "message": "If you still have control on the U-Boot SPL code during the late development stage, you may have a SPL development mode that bypasses the signature check error for EEProm development public keys (and may warn you about bad key signatures) but this bypass will be removed from the SPL code for the production build. In this case you need to properly sign EEProm production public keys only."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 97,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "If implemented literally, this would lead to TOCTOU-like situation with the jumper measurement time vs the \"use value for the decision\" time and the attacker could try to use that to force the GPIO value just at the right time to disable Verified boot without admin's knowledge. I'd suggest to spell this out in more detail (decision time vs TPM extension time) to avoid this."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 99,
                    "reviewer": {
                        "name": "Daniil Egranov",
                        "email": "daniil.egranov@arm.com",
                        "username": "daniileg"
                    },
                    "message": "What will happen if verification fails at any of the boot steps above?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Joseph Reynolds",
                        "email": "joseph-reynolds@charter.net",
                        "username": "joseph-reynolds"
                    },
                    "message": "It seems like the design should have workflows for how to provision and configure the BMC.  Something like:\n1. Create key pair.\n2. Burn public key into the BMC OTP memory.  (Using what tools?)\n3. Set secure jumper.\n4. Sign firmware image with private key.\n5. Load signed firmware.\n6. Reboot the BMC."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Joel Stanley",
                        "email": "joel@jms.id.au",
                        "username": "shenki"
                    },
                    "message": "I think the design document captures the software that will be involved, and how it works to provide secure boot.\n\nWhat you're describing is a way to provision the machine in manufacturing, which is useful, but it is not part of this design document."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 105,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "There could be some external, platform-level RoT entity securing the BMC FW, like Google's Titan, Apple's T2, Microsoft's Cerberus or Intel's PFR, to name a few. I think it would be too much to describe the interaction with such entities in this document (I think it should focus on using AST2600+U-Boot's Verified Boot as it is right now), but I think it's worth mentioning as an alternative."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 105,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "Added a snippet on Google Titan which we have looked at for various use cases."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 115,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "I think this needs some elaboration in this design document as it's currently unclear how those development and production keys would co-exist (if that's what is being suggested here) and what logic will be used to boot using dev vs. prod."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 120,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "I'd suggest to add a \"swapped image\" attack test (if you agree with adding the \"signed configuration\" as the recommended way to configure U-Boot), where a properly signed, but different than the one listed in the FIT config, image is used."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 123,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "Is this an existing feature? I don't think U-Boot's Verified Boot has anything like that, does it?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 124,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "I'd suggest to add:\n\n> \"and values extended to the TPM registers must be different from the normal secure boot with this jumper set to 'enable security'\"\n\nto make sure this is tested and the admin can distinguish those situations and act accordingly."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 125,
                    "reviewer": {
                        "name": "Alexander Tereschenko",
                        "email": "aleksandr.v.tereschenko@intel.com",
                        "username": "alext-w"
                    },
                    "message": "\"Kernel/initrd (initramfs)/Device Tree\" would be more explicit, to make sure all three main components are tested."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "type": "ADDED",
                    "insertions": 125,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 125,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "d409431c61139d401f77d51988bda4f211970dd2",
            "parents": [
                "f75a11159b2e46ffc40763b566a0ddfc2828f5f0"
            ],
            "ref": "refs/changes/69/26169/2",
            "uploader": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "createdOn": 1575912207,
            "author": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 3,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Can you please add your email address here too (i.e. `Chris Engel <...@us.ibm.com>`)? That way people reading the document can easily get in touch with you if necessary without digging into the git history."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 40,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "This URL fails to open, please use a \"permanent link\" here."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 40,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I suspect it might be this:\n\nhttps://github.com/facebook/openbmc/tree/de9cd6421c7bfde56c2d0a1ff6a9d0fb628492ee/tests2/experimental/vboot_tests"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Joseph Reynolds",
                        "email": "joseph-reynolds@charter.net",
                        "username": "joseph-reynolds"
                    },
                    "message": "Consider adding a reference to the Secure Boot section of\nhttps://www.opencompute.org/documents/csis-firmware-security-best-practices-position-paper-version-1-0-pdf"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm slightly concerned that we're signing the SPL directly from the OTP.  I don't have the AST2600 datasheet handy to be able to know what capabilities are available in hardware.\n\nI recently worked on another project using the Marvell Armada 3700.  The way secure boot works there is that there was an additional indirection from the OTP to SPL.  OTP key -> SW keychain key -> SPL key.  It also had ability to put in up to 4 OTP keys and to later on expire them in the field (invalidate the valid bit).\n\nThere are a few reasons for this:\n\n1. Having a few OTP slots allows you to expire hardware keys.  A single key does not give you any mechanism if your key has been leaked or cracked.\n\n2. There is some concern that the more times you use a key to sign the less secure that key becomes.  Having the indirection gives you a higher order of signings you can do.\n\nDoes the AST2600 give us any mechanism for an indirection like this?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "The AST2600 supports 8 keys with the ability to retire keys.  The HW itself doesn't provide a layer of indirection like you referred to.  If you wanted that you would have to architect that with a thin layer of FW that is loaded by the AST2600 and verified with OTP keys and which in turn then loads the SPL with a new set of keys."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Troy Lee",
                        "email": "troy_lee@aspeedtech.com",
                        "username": "LeeTroy"
                    },
                    "message": "No, AST2600 doesn\u2019t support this feature, even with a thin layer in firmware. But AST2600 has 8 keys with key retirement."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Are you sure AST2600 supports a TPM over SPI?  We're finding out that the AST2500 doesn't really because it is a half-duplex SPI master and the TCG spec requires full-duplex."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I have some patches that will hopefully be public soon that enable interaction with spi-tpm chips using a half-duplex master, but it violates a small aspect of the TCG spec.  It seems that at least one part vendor's parts do not care.\n\nI'll follow up when those are public and also will be striking up a conversation upstream with how to deal with half-duplex masters, since there are about 3 options (and I only implemented one of them)."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "Thanks for this information.  Unfortunately due to other priorities we haven't been able to attempt communicating to the TPM.  I will see what I can find out about this on my end as well."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 90,
                    "reviewer": {
                        "email": "zkxz@hotmail.com",
                        "username": "zkxz"
                    },
                    "message": "A simple GPIO jumper makes it very easy to do a physical attack, and no way to log the operation. Any use cases for the jumper? can we use the owner transfer procedure to cover them instead?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 90,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "I agree that having a jumper creates physical attack issues so that needs to be considered if you decide to use this option.  Can you give more details on the ownership transfer procedure you are referring to as an alternative?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 90,
                    "reviewer": {
                        "name": "Joseph Reynolds",
                        "email": "joseph-reynolds@charter.net",
                        "username": "joseph-reynolds"
                    },
                    "message": "Kun, do you mean a device ownership transfer protocol like shown in the \"Ownership and Control of Firmware in Open Compute Project Devices\" paper, currently linked from the OCP wiki here: https://www.opencompute.org/wiki/Security\nand available here: http://files.opencompute.org/oc/public.php?service=files&t=f4171bae8c7a32f05b0401378ee08483&download\n\nIf so, the infrastructure needed to implement that protocol is not available on the current BMC hardware.  So we consider using a physical security jumper to be able to boot the BMC."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not understanding how this is \"key transition support\".  Doesn't the SPL always get verified against OTP keys?"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Chris Engel",
                        "email": "cjengel@us.ibm.com",
                        "username": "cjengel"
                    },
                    "message": "Yes, there is no way to transition the keys used to verified the SPL other than through expiring the limited set of 8 keys that the AST2600 has support for.  This key transition is for the remainder of the stack above the SPL.  I will update the document to clarify"
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "zhdaniel@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "Yes, recently facebook is looking into combine facebook verified boot \nwith AST2600 security boot feature. The main benefit we get via integrate\nverified-boot with AST2600 security boot is we can upgrade the SPL, \ninstead of like now, the SPL is locked down in Flash.(We write protect the\nFlash contain the SPL). \n\nOur initial design is almost the same as you proposed, except:\n> U-Boot SPL loads second layer public key from EEProm\nIn our design the second layer public key is built in SPL dtb, which \nwill get verified by the ROM with keys in OTP.  \n\nTwo main concerns mainly related to AST2600 h/w:\n1. No real \"key transition\". As you mentioned, the keys used to verify SPL\n   cannot change, because it is in OTP.\n2. AST2600 SRAM limits the SPL size to 63KB, this limits what can be \nimplemented in the SPL for a CRoT. Currently our SPL size is around 100KB\nwhich implements the 3 main CRoT function (verification, measurement and \nrollback protection ) besides the common boot loader function."
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Troy Lee",
                        "email": "troy_lee@aspeedtech.com",
                        "username": "LeeTroy"
                    },
                    "message": "With AST2600-A2/A3 silicon, secure boot could support up to 88KB."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "type": "ADDED",
                    "insertions": 154,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 154,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "65f25e50c71295ffd00793645b1b3f27c09c5eb5",
            "parents": [
                "bac8940ea96db6928748089e2b7e9d65fa659120"
            ],
            "ref": "refs/changes/69/26169/3",
            "uploader": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "createdOn": 1614705508,
            "author": {
                "name": "Chris Engel",
                "email": "cjengel@us.ibm.com",
                "username": "cjengel"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "security/OpenBMCSecureBoot.md",
                    "type": "ADDED",
                    "insertions": 162,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 162,
            "sizeDeletions": 0
        }
    ]
}