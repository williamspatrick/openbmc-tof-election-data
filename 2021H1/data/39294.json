{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "Ibc9ad978c1567bb2e7116e00d84e43b4ae22e664",
    "number": 39294,
    "subject": "dbus-sensors: PwmSensor math types cleanup",
    "owner": {
        "name": "Josh Lehan",
        "email": "krellan@google.com",
        "username": "Krellan"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/39294",
    "commitMessage": "dbus-sensors: PwmSensor math types cleanup\n\nCleaned up types during math to avoid precision loss.\nInteger pwmMax and associated constants now double.\nAvoid floating-point comparison, convert to int first.\nCorrected rounding from float to int.\nProperty setter now ignores floating-point NaN.\n\nRounding done more consistently and correctly now. In some edge\ncases, the fan PWM setting will be different from what it was\nbefore, because rounding is now proper instead of truncating.\n\nTested: Swept fans from 0.0 to 100.0 percent, stepping by 0.1 each\ntime, to exercise all values between 0 and 255. Behavior now seems\nmore correct to me. Also set NaN, and it was properly ignored.\nAlso tested on the uint64_t interface, swept from 0 to 255,\neach value mapped cleanly to equivalent floating-point value.\n\nNot tested on \"PSU\" fans. These are a special case, as the integers\nin the underlying file range from 0 to 100, not 0 to 255. The\noriginal logic to handle these remains unchanged, however.\n\nSigned-off-by: Josh Lehan <krellan@google.com>\nChange-Id: Ibc9ad978c1567bb2e7116e00d84e43b4ae22e664\n",
    "createdOn": 1609415958,
    "lastUpdated": 1610349245,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1609415958,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1609415968,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1609415980,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1609416048,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10384/ : SUCCESS"
        },
        {
            "timestamp": 1609476196,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1609476207,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1609476294,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10388/ : SUCCESS"
        },
        {
            "timestamp": 1609476731,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1609476899,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\nAdding the ability for PwmSensor to ignore NaN values written to it. Also cleaning up some other math usage that I noticed, in the floating-point interface."
        },
        {
            "timestamp": 1609479454,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(8 comments)"
        },
        {
            "timestamp": 1609501373,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(8 comments)"
        },
        {
            "timestamp": 1609522096,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1609525832,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1609526121,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1609881118,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1610112588,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1610112601,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610112922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10675/ : FAILURE"
        },
        {
            "timestamp": 1610113795,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1610113806,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610113892,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10676/ : SUCCESS"
        },
        {
            "timestamp": 1610115148,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 5: Commit message was updated."
        },
        {
            "timestamp": 1610115163,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 5:\n\n(9 comments)"
        },
        {
            "timestamp": 1610130262,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1610146130,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)\n\nOne somewhat nitpicky comment left, then this looks good to go."
        },
        {
            "timestamp": 1610294011,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1610294029,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1610294033,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1610294110,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10699/ : SUCCESS"
        },
        {
            "timestamp": 1610349241,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1610349245,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged by Ed Tanous"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "a8aa0c860ccb3732018f6c82c7b33ba8d5bb114a",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/94/39294/1",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1609415958,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 57,
            "sizeDeletions": 20
        },
        {
            "number": 2,
            "revision": "a0870768629f5b2c32893bd1690af5b670aeabed",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/94/39294/2",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1609476196,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This looks like you tried to line wrap this by hand?  Can you try to rewrap this in your editor to make it look more reasonable?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yep, I did. How long should lines be, in commit messages? Also, the first line is a special case, compared to subsequent lines, right?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53#:~:text=Wrap%20it%20to%2072%20characters,git%20merge%20and%20git%20revert.\n\nIf you use vim, it will wrap lines automatically for you."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Nice, thanks. 72 characters for every line? I thought the first line was a special case and should be slightly less long? Upon further search, I found this: https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting\nRegardless, these arbitrary line length limitations bring back memories of old BBS description files...."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep, first line is generally 50, but that's considerably less important for readability."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, wrapped the second paragraph. The first paragraph was intended to be more of a sequence of bullet points, instead of prose, so it should not be wrapped, as it becomes harder to read that way. Put a period at the end of each line, to make it clearer, though."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering we're modifying both, can you please test this as well?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, I will. Question: why do we have two parallel interfaces for fan speed control, when in other sensors, we have chosen to migrate away from uint64_t in favor of double? Is fan speed a special case?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> OK, I will. Question: why do we have two parallel interfaces for fan speed control, when in other sensors, we have chosen to migrate away from uint64_t in favor of double? Is fan speed a special case?\n\nFan speed is a special case, as there's an \"official\" interface (the sensor interface) and the original interface (the uint64 interface).  When we created the sensor, it was easier just to leave both, as it simplifies the lookup procedure for them.\n\nWe could certainly move it to double, but the motivating example for sensors was IPMI, where we needed to build the SDR with multiple sub-int ranges, and people historically sucked at building it correctly."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks for the background. As for building the IPMI SDR with arbitrary sub-integer ranges, happily, I made this: https://github.com/openbmc/intel-ipmi-oem/commit/17e21c20148c8c250b902e4807f3b9a7a81af0b3"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep, that looks like a significant improvement for sensors."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 22,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, will test both, and revise commit message accordingly."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm assuming you tested on a fan instance, and not a PSU instance, but you should mention that in your commit message."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Good point. Yes, I did, tested on fan instance only. I'm curious why the string \"PSU\" makes it a special case, scaling the underlying system file from 0 to 100 instead of 0 to 255?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Good point. Yes, I did, tested on fan instance only. I'm curious why the string \"PSU\" makes it a special case, scaling the underlying system file from 0 to 100 instead of 0 to 255?\n\nPower supply fan drivers are ranged differently for whatever reason.  Setting that to 100 allows us to coerce them to a 0-100 range."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks, makes sense. I made sure to keep the original logic intact, so it can select 0-100 or 0-255 for the underlying file integer content range, same as before."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yup, it looks like it's trivial, just worth mentioning in the commit message."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks for the background. Will also add this to the commit message."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I suspect we shouldn't be ignoring this silently?  Was there a specific reason for not returning -1?  Accepting the write \"silently\" arguably breaks dbus properties rules."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Good point, I can return -1 instead. Is -1 what should be returned when user tries to write a value and we're not accepting it for whatever reason, but it's not considered a fatal error? Will the sdbusplus library be annoyed if we return -1 when it is expecting a return of 1? Also, below, the original code throws a std::runtime_error exception, which to me seems overkill. Do we really want users to be able to crash out the daemon by writing out-of-range values to it over D-Bus?"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Revised to return -1 upon error, so caller knows that there has been an error. Took a note for the future, about whether or not to throw exception if out of range."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Any specific reason this is uint32 and not int?"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yes, there is. This variable is passed into setValue() below, and it saves having to do yet another static_cast to it. I could make these int if wanted, but it wouldn't really buy anything."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Leaving this as uint32_t, unless any objection."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is going to change behavior a little.  Previously we effectively did floor on this value.  I'm not sure it matters much here, but worth pointing out in the commit message as being different."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I thought about floor, but the below integer code used std::round and it seemed like a good idea to be symmetrical with it. Also, there's a problem if proper rounding is not used: the round trip of int-float-int will result in a different int number, in some situations, leading to an endless loop of needless changes, as it bounces back and forth between two nearby int numbers! I found this in my testing, before changing it to use rounding instead of truncation."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, put a note in the commit message, to mention that rounding behavior is different, so observed integer PWM might be different in some edge cases."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 93,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: it is little misleading the variable name is currFloat and type is double"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 93,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I meant \"Float\" as in floating-point, not the literal type \"float\". But, I could see how this would be misleading. Renamed it to \"Scaled\"."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 126,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, can we roll this out into at least one intermediate variable to improve the readability.  The old one was arguably too much to be doing on one line already, this just a little bit worse."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 126,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, will do. As you can see by other lines, I'm a big fan of spreading out complicated expressions into separate intermediate variables."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 126,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Split it up, and also split up the similar-looking math that's done in the getter function."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 135,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can this just be replaced with uint64_t = lround(...)?\n\nLooks like it should, and would be simpler, but I haven't tried it."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 135,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "lround() is \"long int\" which may or may not be uint64_t, depending on your platform. std::round also looks more C++ than lround() which looks more C."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 135,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Split this up, but left the call to std::round() unchanged, for symmetry with the other rounding functions that are used elsewhere in this code."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 20
        },
        {
            "number": 3,
            "revision": "38d278e3c64a71a7cedba00c7139b92b741bf3ea",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/94/39294/3",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1610112588,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 20
        },
        {
            "number": 4,
            "revision": "6b047ba69e32f81f0da5d4b4edc47e450738d031",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/94/39294/4",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1610113795,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 20
        },
        {
            "number": 5,
            "revision": "2fc2be49c077a288d217ea1949d2a7587996c09b",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/94/39294/5",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1610115148,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: this can be moved inside line 101 or even combined with line 102"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  Declare variables (and calculate them) in the scopes where they're used."
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, can move it in."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 20
        },
        {
            "number": 6,
            "revision": "6e6ac0f850e94c4729456c41ba53f5a84437e59b",
            "parents": [
                "6736d4b2a77cec00a8919f26035176c8b8025a4d"
            ],
            "ref": "refs/changes/94/39294/6",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1610294011,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/PwmSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -19
                }
            ],
            "sizeInsertions": 37,
            "sizeDeletions": 20
        }
    ]
}