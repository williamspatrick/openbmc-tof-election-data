{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ic2a9e572099490f8810e03ab08336518f5672690",
    "number": 36865,
    "subject": "Remove IBM console events from Redfish",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/36865",
    "commitMessage": "Remove IBM console events from Redfish\n\nThe /ibm/v1 console is a different tree than Redfish, and as such,\nshould not be sending non-redfish resource events out.  This is very\nlikely to break redfish clients on the other end.  If the management\nconsole wants an event-like entity, it needs to come up with its own\nEventService-like resource, considering it is a separate tree.\n\nSignificant related discussion occurred here:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/36368\n\nSigned-off-by: Ed Tanous <ed@tanous.net>\nChange-Id: Ic2a9e572099490f8810e03ab08336518f5672690\n",
    "createdOn": 1601305402,
    "lastUpdated": 1617174470,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1601305402,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1601305416,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601305422,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5292/"
        },
        {
            "timestamp": 1601305427,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased."
        },
        {
            "timestamp": 1601305437,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601305438,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/5292/ : ABORTED"
        },
        {
            "timestamp": 1601305442,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5293/"
        },
        {
            "timestamp": 1601305753,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5293/ : SUCCESS"
        },
        {
            "timestamp": 1601308760,
            "reviewer": {
                "name": "Bruce Mitchell",
                "email": "bruce.mitchell@linux.vnet.ibm.com",
                "username": "BMC-Bruce"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1601310289,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 2:\n\nHi Ed,\nAs i was mentioning in my other commists, we are working on the OEM privilege based design to not report the /ibm/v1 resource events to the other redfish clients. Thus i don't see a reason to revert the changes which are already reviewed & merged to the project. \n\nIt also has been a practice in the openbmc development to use the compiler flags for the features which are specific to companies. The file include/ibm/management_console_rest.hpp is compiled only for IBM. And thus the /ibm/v1 resources. I don't think any other company will use this compiler flag for building their BMC images.\n\nThe current event reporting on the /ibm/v1 will only affect the IBM BMC's clients. And this was already discussed and agreed internally by our team. When we push the new design, we will only work on the necessary code reverts."
        },
        {
            "timestamp": 1601310298,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 2: Code-Review-1"
        },
        {
            "timestamp": 1601312281,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> Hi Ed,\n> As i was mentioning in my other commists, we are working on the OEM privilege based design to not report the /ibm/v1 resource events to the other redfish clients.\n\nPresumably outside of Redfish to avoid these cross-protocol problems in the future?  Great!  Can't wait to see the result of that.  Note, if you're planning on building an OEM Redfish privilege, I think that needs some more discussion, as that sets a standard for custom, company-specific privileges that I suspect needs discussed in greater detail, as it's likely to cause architecture issues.\n\n> Thus i don't see a reason to revert the changes which are already reviewed & merged to the project. \n\nThe patches are incorrect, added recently, and likely to break clients.  That seems like the normal justification for a revert, no?\n\n> \n> It also has been a practice in the openbmc development to use the compiler flags for the features which are specific to companies.\n\nWith respect, IBM_MANAGEMENT_CONSOLE is the first and only company-specific feature flag.  Saying it's been \"a practice\" is a stretch.\n\n> The file include/ibm/management_console_rest.hpp is compiled only for IBM. And thus the /ibm/v1 resources. I don't think any other company will use this compiler flag for building their BMC images.\n\nSo, it's ok to break redfish on IBM platforms then?  That doesn't make sense to me.  Setting the precedence that anyone is allowed to break the redfish spec by putting their code behind a feature flag seems wrong, and would limit the re-usability of a lot of code.  Sorry, I'm not going to be in support of breaking the spec in any case, regardless of what feature flags its behind.\n\n> \n> The current event reporting on the /ibm/v1 will only affect the IBM BMC's clients.\n\nIBMs redfish clients.  Redfish is a specification.\n\n> And this was already discussed and agreed internally by our team. When we push the new design, we will only work on the necessary code reverts.\n\nGlad your team is in agreement, now lets get this discussed in the open.\n\n\nAs is, I don't believe I see justification for this patchset to stop here.  It's fixing a bug.  If you have a new design being worked, this revert should not impact you, and is clearing the way for your new design to be merged more cleanly."
        },
        {
            "timestamp": 1601366839,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 2:\n\n> > Patch Set 2:\n > >\n > > Hi Ed,\n > > As i was mentioning in my other commists, we are working on the\n > OEM privilege based design to not report the /ibm/v1 resource\n > events to the other redfish clients.\n > \n > Presumably outside of Redfish to avoid these cross-protocol\n > problems in the future?  Great!  Can't wait to see the result of\n > that.  Note, if you're planning on building an OEM Redfish\n > privilege, I think that needs some more discussion, as that sets a\n > standard for custom, company-specific privileges that I suspect\n > needs discussed in greater detail, as it's likely to cause\n > architecture issues.\n > \n > > Thus i don't see a reason to revert the changes which are already\n > reviewed & merged to the project.\n > \n > The patches are incorrect, added recently, and likely to break\n > clients.  That seems like the normal justification for a revert,\n > no?\n > \n > >\n > > It also has been a practice in the openbmc development to use the\n > compiler flags for the features which are specific to companies.\n > \n > With respect, IBM_MANAGEMENT_CONSOLE is the first and only\n > company-specific feature flag.  Saying it's been \"a practice\" is a\n > stretch.\n > \n > > The file include/ibm/management_console_rest.hpp is compiled only\n > for IBM. And thus the /ibm/v1 resources. I don't think any other\n > company will use this compiler flag for building their BMC images.\n > \n > So, it's ok to break redfish on IBM platforms then?  That doesn't\n > make sense to me.  Setting the precedence that anyone is allowed to\n > break the redfish spec by putting their code behind a feature flag\n > seems wrong, and would limit the re-usability of a lot of code. \n > Sorry, I'm not going to be in support of breaking the spec in any\n > case, regardless of what feature flags its behind.\n > \n > >\n > > The current event reporting on the /ibm/v1 will only affect the\n > IBM BMC's clients.\n > \n > IBMs redfish clients.  Redfish is a specification.\n > \n > > And this was already discussed and agreed internally by our team.\n > When we push the new design, we will only work on the necessary\n > code reverts.\n > \n > Glad your team is in agreement, now lets get this discussed in the\n > open.\n > \n > \n > As is, I don't believe I see justification for this patchset to\n > stop here.  It's fixing a bug.  If you have a new design being\n > worked, this revert should not impact you, and is clearing the way\n > for your new design to be merged more cleanly.\n\nEd, There are examples of feature specific compilation flags in the bmcweb. They were not named by the company name though, but they give the flexibility to control including the specific features as per the requirements of the product which the companies are building. So its not wrong to have the compiler flag - BMCWEB_ENABLE_IBM_MANAGEMENT_CONSOLE. But agree that the mixing of the REST and Redfish should get a redesign.\n\nThere are two ways to correct the current implementation of the events on /ibm/v1 resources.\n\n1. Implement new Redfish OEM privilege for the IBM management console and send the event based on the privilege. With this, the /ibm/v1 will send the events to the OEM privileged Redfish client. \n2. Move the /ibm/v1 resources as Redfish OEM resources, and that should allow sending the events on those OEM resources to the Redfish clients.\n\nEd, Which approach you would vote for ? If you have any other options which can be adopted to handle this case, please suggest."
        },
        {
            "timestamp": 1601370313,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2:\n> > \n> > Hi Ed,\n> > As i was mentioning in my other commists, we are working on the OEM privilege based design to not report the /ibm/v1 resource events to the other redfish clients.\n> \n> Presumably outside of Redfish to avoid these cross-protocol problems in the future?  Great!  Can't wait to see the result of that.  Note, if you're planning on building an OEM Redfish privilege, I think that needs some more discussion, as that sets a standard for custom, company-specific privileges that I suspect needs discussed in greater detail, as it's likely to cause architecture issues.\n> \n> > Thus i don't see a reason to revert the changes which are already reviewed & merged to the project. \n> \n> The patches are incorrect, added recently, and likely to break clients.  That seems like the normal justification for a revert, no?\n> \n> > \n> > It also has been a practice in the openbmc development to use the compiler flags for the features which are specific to companies.\n> \n> With respect, IBM_MANAGEMENT_CONSOLE is the first and only company-specific feature flag.  Saying it's been \"a practice\" is a stretch.\n> \n> > The file include/ibm/management_console_rest.hpp is compiled only for IBM. And thus the /ibm/v1 resources. I don't think any other company will use this compiler flag for building their BMC images.\n> \n> So, it's ok to break redfish on IBM platforms then?  That doesn't make sense to me.  Setting the precedence that anyone is allowed to break the redfish spec by putting their code behind a feature flag seems wrong, and would limit the re-usability of a lot of code.  Sorry, I'm not going to be in support of breaking the spec in any case, regardless of what feature flags its behind.\n> \n> > \n> > The current event reporting on the /ibm/v1 will only affect the IBM BMC's clients.\n> \n> IBMs redfish clients.  Redfish is a specification.\n> \n> > And this was already discussed and agreed internally by our team. When we push the new design, we will only work on the necessary code reverts.\n> \n> Glad your team is in agreement, now lets get this discussed in the open.\n> \n> \n> As is, I don't believe I see justification for this patchset to stop here.  It's fixing a bug.  If you have a new design being worked, this revert should not impact you, and is clearing the way for your new design to be merged more cleanly.\n\nEd, I think we wanted to use the Redfish infra as much as possible but seems we are hiiting the  road block here. I may have two proposals here\n1) Instead of /ibm/v1 === Use OEM Resources and use all the features of Redfish.\n2) Tie up the events sending code with priviliges, \n    a) OEM specfic endpoints having special privilige.\n    b) User having that special privilege can get the events.\nEven In both proposal I like the 1st one..What is your opinion?\neg: https://redfish.dmtf.org/redfish/mockups/v1/960 , IBM can have its own lock service, config files here."
        },
        {
            "timestamp": 1601403731,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 3: Patch Set 2 was rebased."
        },
        {
            "timestamp": 1601403746,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601403752,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5380/"
        },
        {
            "timestamp": 1601404087,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5380/ : SUCCESS"
        },
        {
            "timestamp": 1601404896,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1601404919,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601404929,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5395/"
        },
        {
            "timestamp": 1601405393,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5395/ : SUCCESS"
        },
        {
            "timestamp": 1601407322,
            "reviewer": {
                "name": "Bruce Mitchell",
                "email": "bruce.mitchell@linux.vnet.ibm.com",
                "username": "BMC-Bruce"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1601412225,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 2:\n> \n> > > Patch Set 2:\n>  > >\n>  > > Hi Ed,\n>  > > As i was mentioning in my other commists, we are working on the\n>  > OEM privilege based design to not report the /ibm/v1 resource\n>  > events to the other redfish clients.\n>  > \n>  > Presumably outside of Redfish to avoid these cross-protocol\n>  > problems in the future?  Great!  Can't wait to see the result of\n>  > that.  Note, if you're planning on building an OEM Redfish\n>  > privilege, I think that needs some more discussion, as that sets a\n>  > standard for custom, company-specific privileges that I suspect\n>  > needs discussed in greater detail, as it's likely to cause\n>  > architecture issues.\n>  > \n>  > > Thus i don't see a reason to revert the changes which are already\n>  > reviewed & merged to the project.\n>  > \n>  > The patches are incorrect, added recently, and likely to break\n>  > clients.  That seems like the normal justification for a revert,\n>  > no?\n>  > \n>  > >\n>  > > It also has been a practice in the openbmc development to use the\n>  > compiler flags for the features which are specific to companies.\n>  > \n>  > With respect, IBM_MANAGEMENT_CONSOLE is the first and only\n>  > company-specific feature flag.  Saying it's been \"a practice\" is a\n>  > stretch.\n>  > \n>  > > The file include/ibm/management_console_rest.hpp is compiled only\n>  > for IBM. And thus the /ibm/v1 resources. I don't think any other\n>  > company will use this compiler flag for building their BMC images.\n>  > \n>  > So, it's ok to break redfish on IBM platforms then?  That doesn't\n>  > make sense to me.  Setting the precedence that anyone is allowed to\n>  > break the redfish spec by putting their code behind a feature flag\n>  > seems wrong, and would limit the re-usability of a lot of code. \n>  > Sorry, I'm not going to be in support of breaking the spec in any\n>  > case, regardless of what feature flags its behind.\n>  > \n>  > >\n>  > > The current event reporting on the /ibm/v1 will only affect the\n>  > IBM BMC's clients.\n>  > \n>  > IBMs redfish clients.  Redfish is a specification.\n>  > \n>  > > And this was already discussed and agreed internally by our team.\n>  > When we push the new design, we will only work on the necessary\n>  > code reverts.\n>  > \n>  > Glad your team is in agreement, now lets get this discussed in the\n>  > open.\n>  > \n>  > \n>  > As is, I don't believe I see justification for this patchset to\n>  > stop here.  It's fixing a bug.  If you have a new design being\n>  > worked, this revert should not impact you, and is clearing the way\n>  > for your new design to be merged more cleanly.\n> \n> Ed, There are examples of feature specific compilation flags in the bmcweb. They were not named by the company name though, but they give the flexibility to control including the specific features as per the requirements of the product which the companies are building. So its not wrong to have the compiler flag - BMCWEB_ENABLE_IBM_MANAGEMENT_CONSOLE. But agree that the mixing of the REST and Redfish should get a redesign.\n\nGreat!  Glad that we've got some common ground here.\n\n> \n> There are two ways to correct the current implementation of the events on /ibm/v1 resources.\n> \n> 1. Implement new Redfish OEM privilege for the IBM management console and send the event based on the privilege. With this, the /ibm/v1 will send the events to the OEM privileged Redfish client. \n> 2. Move the /ibm/v1 resources as Redfish OEM resources, and that should allow sending the events on those OEM resources to the Redfish clients.\n> \n> Ed, Which approach you would vote for ? If you have any other options which can be adopted to handle this case, please suggest.\n\nWhen we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.  That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n\nThe Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n\nIn my mind the viable options are:\n1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n\n\nOverall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1601441091,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 2:\n> > \n> > > > Patch Set 2:\n> >  > >\n> >  > > Hi Ed,\n> >  > > As i was mentioning in my other commists, we are working on the\n> >  > OEM privilege based design to not report the /ibm/v1 resource\n> >  > events to the other redfish clients.\n> >  > \n> >  > Presumably outside of Redfish to avoid these cross-protocol\n> >  > problems in the future?  Great!  Can't wait to see the result of\n> >  > that.  Note, if you're planning on building an OEM Redfish\n> >  > privilege, I think that needs some more discussion, as that sets a\n> >  > standard for custom, company-specific privileges that I suspect\n> >  > needs discussed in greater detail, as it's likely to cause\n> >  > architecture issues.\n> >  > \n> >  > > Thus i don't see a reason to revert the changes which are already\n> >  > reviewed & merged to the project.\n> >  > \n> >  > The patches are incorrect, added recently, and likely to break\n> >  > clients.  That seems like the normal justification for a revert,\n> >  > no?\n> >  > \n> >  > >\n> >  > > It also has been a practice in the openbmc development to use the\n> >  > compiler flags for the features which are specific to companies.\n> >  > \n> >  > With respect, IBM_MANAGEMENT_CONSOLE is the first and only\n> >  > company-specific feature flag.  Saying it's been \"a practice\" is a\n> >  > stretch.\n> >  > \n> >  > > The file include/ibm/management_console_rest.hpp is compiled only\n> >  > for IBM. And thus the /ibm/v1 resources. I don't think any other\n> >  > company will use this compiler flag for building their BMC images.\n> >  > \n> >  > So, it's ok to break redfish on IBM platforms then?  That doesn't\n> >  > make sense to me.  Setting the precedence that anyone is allowed to\n> >  > break the redfish spec by putting their code behind a feature flag\n> >  > seems wrong, and would limit the re-usability of a lot of code. \n> >  > Sorry, I'm not going to be in support of breaking the spec in any\n> >  > case, regardless of what feature flags its behind.\n> >  > \n> >  > >\n> >  > > The current event reporting on the /ibm/v1 will only affect the\n> >  > IBM BMC's clients.\n> >  > \n> >  > IBMs redfish clients.  Redfish is a specification.\n> >  > \n> >  > > And this was already discussed and agreed internally by our team.\n> >  > When we push the new design, we will only work on the necessary\n> >  > code reverts.\n> >  > \n> >  > Glad your team is in agreement, now lets get this discussed in the\n> >  > open.\n> >  > \n> >  > \n> >  > As is, I don't believe I see justification for this patchset to\n> >  > stop here.  It's fixing a bug.  If you have a new design being\n> >  > worked, this revert should not impact you, and is clearing the way\n> >  > for your new design to be merged more cleanly.\n> > \n> > Ed, There are examples of feature specific compilation flags in the bmcweb. They were not named by the company name though, but they give the flexibility to control including the specific features as per the requirements of the product which the companies are building. So its not wrong to have the compiler flag - BMCWEB_ENABLE_IBM_MANAGEMENT_CONSOLE. But agree that the mixing of the REST and Redfish should get a redesign.\n> \n> Great!  Glad that we've got some common ground here.\n> \n> > \n> > There are two ways to correct the current implementation of the events on /ibm/v1 resources.\n> > \n> > 1. Implement new Redfish OEM privilege for the IBM management console and send the event based on the privilege. With this, the /ibm/v1 will send the events to the OEM privileged Redfish client. \n> > 2. Move the /ibm/v1 resources as Redfish OEM resources, and that should allow sending the events on those OEM resources to the Redfish clients.\n> > \n> > Ed, Which approach you would vote for ? If you have any other options which can be adopted to handle this case, please suggest.\n> \n> When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n\nEd, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\nI am hoping having OEM resources under bmcweb should not be a concern.\n=> It is not breaking the resfish spec.\n=> Easier to use the existing infra\n=> Easy to port /ibm/v1 resources to OEM Resources\n  \n  That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> \n> The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> \n> In my mind the viable options are:\n> 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> \n> \n> Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1601479091,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > \n> > When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n> \n> Ed, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\n\nThat is always a difficult tradeoff between standards compliance and development speed.\n\n\n> I am hoping having OEM resources under bmcweb should not be a concern.\n> => It is not breaking the resfish spec.\n> => Easier to use the existing infra\n> => Easy to port /ibm/v1 resources to OEM Resources\n\nBe careful with statements like this.  I suspect your lock resources will need revised if you're going to put your things in a true hypermedia API.  You'll need to write CSDL and jsonschema and run the Redfish validator on every commit, as well as follow conventions of the redfish specification and reuse existing resources where availble.  These things are non-trivial, but if you want to do them, I'd be in support.\n\n>   \n>   That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> > \n> > The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> > \n> > In my mind the viable options are:\n> > 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> > 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> > \n> > \n> > Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1601519865,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > \n> > > When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n> > \n> > Ed, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\n> \n> That is always a difficult tradeoff between standards compliance and development speed.\n> \n> \n> > I am hoping having OEM resources under bmcweb should not be a concern.\n> > => It is not breaking the resfish spec.\n> > => Easier to use the existing infra\n> > => Easy to port /ibm/v1 resources to OEM Resources\n> \n> Be careful with statements like this.  I suspect your lock resources will need revised if you're going to put your things in a true hypermedia API.  You'll need to write CSDL and jsonschema and run the Redfish validator on every commit, as well as follow conventions of the redfish specification and reuse existing resources where available.  These things are non-trivial, but if you want to do them, I'd be in support.\n\nYou mentioned lock resources need to be revised, What is that mean? Can you throw more lights here? I was expecting that at service root we would be having lock service having some actions.\n\nI understand that we need to write the CSDL and Json schema, running a redfish validator with every commit, it is a norm in bmcweb now.\n\n> >   \n> >   That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> > > \n> > > The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> > > \n> > > In my mind the viable options are:\n> > > 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> > > 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> > > \n> > > \n> > > Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1601523888,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > \n> > > > When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n> > > \n> > > Ed, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\n> > \n> > That is always a difficult tradeoff between standards compliance and development speed.\n> > \n> > \n> > > I am hoping having OEM resources under bmcweb should not be a concern.\n> > > => It is not breaking the resfish spec.\n> > > => Easier to use the existing infra\n> > > => Easy to port /ibm/v1 resources to OEM Resources\n> > \n> > Be careful with statements like this.  I suspect your lock resources will need revised if you're going to put your things in a true hypermedia API.  You'll need to write CSDL and jsonschema and run the Redfish validator on every commit, as well as follow conventions of the redfish specification and reuse existing resources where available.  These things are non-trivial, but if you want to do them, I'd be in support.\n> \n> You mentioned lock resources need to be revised, What is that mean? Can you throw more lights here? I was expecting that at service root we would be having lock service having some actions.\n\n1. Redfish is a restful, hypermedia api.  Restful hypermedia apis have ACID compliance, and support multiple users.  Acquiring arbitrary mutexes or semaphores in one place doesn't follow that.\n2. Service root is definitely not the place for a lock API.  Service root is available pre-login.\n\nI will fully admit, I haven't given this a lot of thought of how you would move that API to redfish.  I'll look and see if I can give a better suggestion if this is really the path you want to go down.\n\n> \n> I understand that we need to write the CSDL and Json schema, running a redfish validator with every commit, it is a norm in bmcweb now.\n> \n> > >   \n> > >   That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> > > > \n> > > > The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> > > > \n> > > > In my mind the viable options are:\n> > > > 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> > > > 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> > > > \n> > > > \n> > > > Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1601537450,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > > Patch Set 4:\n> > > > > \n> > > > > \n> > > > > When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n> > > > \n> > > > Ed, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\n> > > \n> > > That is always a difficult tradeoff between standards compliance and development speed.\n> > > \n> > > \n> > > > I am hoping having OEM resources under bmcweb should not be a concern.\n> > > > => It is not breaking the resfish spec.\n> > > > => Easier to use the existing infra\n> > > > => Easy to port /ibm/v1 resources to OEM Resources\n> > > \n> > > Be careful with statements like this.  I suspect your lock resources will need revised if you're going to put your things in a true hypermedia API.  You'll need to write CSDL and jsonschema and run the Redfish validator on every commit, as well as follow conventions of the redfish specification and reuse existing resources where available.  These things are non-trivial, but if you want to do them, I'd be in support.\n> > \n> > You mentioned lock resources need to be revised, What is that mean? Can you throw more lights here? I was expecting that at service root we would be having lock service having some actions.\n> \n> 1. Redfish is a restful, hypermedia api.  Restful hypermedia apis have ACID compliance, and support multiple users.  Acquiring arbitrary mutexes or semaphores in one place doesn't follow that.\nI think you haven't taken a look here, we are not acquiring any mutexes, semaphores anything.\nWe get the info which we store it on the bmc and run some processing logic on that info.\n\n> 2. Service root is definitely not the place for a lock API.  Service root is available pre-login.\n\nOn a service root there would be a link for the lock service(not the API) as it is there for other services and further that service have the lock API, these API will be accessed only once user gets authenticated.\n\n> \n> I will fully admit, I haven't given this a lot of thought of how you would move that API to redfish.  I'll look and see if I can give a better suggestion if this is really the path you want to go down.\n> \n> > \n> > I understand that we need to write the CSDL and Json schema, running a redfish validator with every commit, it is a norm in bmcweb now.\n> > \n> > > >   \n> > > >   That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> > > > > \n> > > > > The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> > > > > \n> > > > > In my mind the viable options are:\n> > > > > 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> > > > > 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> > > > > \n> > > > > \n> > > > > Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1601576436,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > > Patch Set 4:\n> > > > > \n> > > > > > Patch Set 4:\n> > > > > > \n> > > > > > \n> > > > > > When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n> > > > > \n> > > > > Ed, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\n> > > > \n> > > > That is always a difficult tradeoff between standards compliance and development speed.\n> > > > \n> > > > \n> > > > > I am hoping having OEM resources under bmcweb should not be a concern.\n> > > > > => It is not breaking the resfish spec.\n> > > > > => Easier to use the existing infra\n> > > > > => Easy to port /ibm/v1 resources to OEM Resources\n> > > > \n> > > > Be careful with statements like this.  I suspect your lock resources will need revised if you're going to put your things in a true hypermedia API.  You'll need to write CSDL and jsonschema and run the Redfish validator on every commit, as well as follow conventions of the redfish specification and reuse existing resources where available.  These things are non-trivial, but if you want to do them, I'd be in support.\n> > > \n> > > You mentioned lock resources need to be revised, What is that mean? Can you throw more lights here? I was expecting that at service root we would be having lock service having some actions.\n> > \n> > 1. Redfish is a restful, hypermedia api.  Restful hypermedia apis have ACID compliance, and support multiple users.  Acquiring arbitrary mutexes or semaphores in one place doesn't follow that.\n> I think you haven't taken a look here, we are not acquiring any mutexes, semaphores anything.\n> We get the info which we store it on the bmc and run some processing logic on that info.\n> \n> > 2. Service root is definitely not the place for a lock API.  Service root is available pre-login.\n> \n> On a service root there would be a link for the lock service(not the API) as it is there for other services and further that service have the lock API, these API will be accessed only once user gets authenticated.\n\nGotcha.  I think that would work.  You have some odd timeout requirements that are tough to model, but that is probably a problem for whomever writes the patchset to do the move.\n\n> \n> > \n> > I will fully admit, I haven't given this a lot of thought of how you would move that API to redfish.  I'll look and see if I can give a better suggestion if this is really the path you want to go down.\n> > \n> > > \n> > > I understand that we need to write the CSDL and Json schema, running a redfish validator with every commit, it is a norm in bmcweb now.\n> > > \n> > > > >   \n> > > > >   That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> > > > > > \n> > > > > > The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> > > > > > \n> > > > > > In my mind the viable options are:\n> > > > > > 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> > > > > > 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> > > > > > \n> > > > > > \n> > > > > > Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do."
        },
        {
            "timestamp": 1605898673,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > > Patch Set 4:\n> > > > > \n> > > > > > Patch Set 4:\n> > > > > > \n> > > > > > > Patch Set 4:\n> > > > > > > \n> > > > > > > \n> > > > > > > When we discussed this a year ago, IBM didn't really have an interest in doing the things that are required of Redfish OEM implementations in using existing schemas where they exist, and upstreaming/discussing new schemas with DMTF.\n> > > > > > \n> > > > > > Ed, I agree around a year back when we discussed we came up with ibm/v1 but that is being hard to absorb by our clients if we come up with different session service, event service etc for /ibm/v1.\n> > > > > \n> > > > > That is always a difficult tradeoff between standards compliance and development speed.\n> > > > > \n> > > > > \n> > > > > > I am hoping having OEM resources under bmcweb should not be a concern.\n> > > > > > => It is not breaking the resfish spec.\n> > > > > > => Easier to use the existing infra\n> > > > > > => Easy to port /ibm/v1 resources to OEM Resources\n> > > > > \n> > > > > Be careful with statements like this.  I suspect your lock resources will need revised if you're going to put your things in a true hypermedia API.  You'll need to write CSDL and jsonschema and run the Redfish validator on every commit, as well as follow conventions of the redfish specification and reuse existing resources where available.  These things are non-trivial, but if you want to do them, I'd be in support.\n> > > > \n> > > > You mentioned lock resources need to be revised, What is that mean? Can you throw more lights here? I was expecting that at service root we would be having lock service having some actions.\n> > > \n> > > 1. Redfish is a restful, hypermedia api.  Restful hypermedia apis have ACID compliance, and support multiple users.  Acquiring arbitrary mutexes or semaphores in one place doesn't follow that.\n> > I think you haven't taken a look here, we are not acquiring any mutexes, semaphores anything.\n> > We get the info which we store it on the bmc and run some processing logic on that info.\n> > \n> > > 2. Service root is definitely not the place for a lock API.  Service root is available pre-login.\n> > \n> > On a service root there would be a link for the lock service(not the API) as it is there for other services and further that service have the lock API, these API will be accessed only once user gets authenticated.\n> \n> Gotcha.  I think that would work.  You have some odd timeout requirements that are tough to model, but that is probably a problem for whomever writes the patchset to do the move.\n> \n> > \n> > > \n> > > I will fully admit, I haven't given this a lot of thought of how you would move that API to redfish.  I'll look and see if I can give a better suggestion if this is really the path you want to go down.\n> > > \n> > > > \n> > > > I understand that we need to write the CSDL and Json schema, running a redfish validator with every commit, it is a norm in bmcweb now.\n> > > > \n> > > > > >   \n> > > > > >   That's completely fine to do, and for what you're building might be the right thing to do.  If you want to move fast, and implement whatever you want, /ibm/v1 is a great track to go.  The problem is when we're changing the meaning and intent of /redfish/v1 resources because it's convenient for the /ibm/v1 tree.  I don't see that as being maintainable in the long run to have different subsystems cross calling dependencies.  If you need some of the features of Redfish, without the specification, and don't want to duplicate code, we should refactor some of the backends into a generic code (kinda like we've done within Redfish) we can can host the /redfish/v1 and the /ibm/v1 versions of each.  so you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n> > > > > > > \n> > > > > > > The Redfish OEM privileges thing I don't think solves it, as users don't have the ability to change their Privileges at runtime, so IBM would have to be the default, and we'd still have a non-compliant /redfish/v1/EventService implementation.  With that said, maybe you had something more clever in mind?\n> > > > > > > \n> > > > > > > In my mind the viable options are:\n> > > > > > > 1. Implement /ibm/v1, without crossing dependencies with redfish.  This means that /ibm/v1 needs its own login routine (so you can acquire and free your locks) and an equivalent of EventService (so you can event /ibm/v1 resource changes).  The backends for these could share as much code as makes sense with redfish, but would be distinct to the user as an IBM specific resource.  This would give you guys complete control of the API, as it sounded like you wanted that, given the older interface you're trying to design around.  Things like naming conventions, namespacing, property deprecation, and session behavior would be completely up to you to define.\n> > > > > > > 2. Implement OEM properties in /redfish/v1.  This would mean that things like Lock resources would probably need to be avoided, because of how the hypermedia APIs are designed, and you would be required to write CSDL and openapis for all your resources, as well as avoid making modifications to the fixed Redfish resources, like message registry.  It should be noted, the CSDL today isn't set up to be adding/removing individual properties, so you'd need to namespace them and probably version them, which is well defined in redfish.  Considering Redfish has a lot of hypervisor schemas already, when you went to upstream, you'd likely get asked why you chose to avoid the well specified resources, which might be hard to explain.\n> > > > > > > \n> > > > > > > \n> > > > > > > Overall, I can't make the call for you guys, and I'm fine with either option.  If I were in your shoes, I'd go with 1, because you're not throwing away any existing work/compatibility with your other implementation, but that's not really up to me, I'm here to support whatever you want to do.\n\nAny more input needed on this patch before I go ahead and finalize/merge it?"
        },
        {
            "timestamp": 1606115052,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 4:\n\n> > Patch Set 4:\n > >\n > > > Patch Set 4:\n > > >\n > > > > Patch Set 4:\n > > > >\n > > > > > Patch Set 4:\n > > > > >\n > > > > > > Patch Set 4:\n > > > > > >\n > > > > > > > Patch Set 4:\n > > > > > > >\n > > > > > > > > Patch Set 4:\n > > > > > > > >\n > > > > > > > >\n > > > > > > > > When we discussed this a year ago, IBM didn't really\n > have an interest in doing the things that are required of Redfish\n > OEM implementations in using existing schemas where they exist, and\n > upstreaming/discussing new schemas with DMTF.\n > > > > > > >\n > > > > > > > Ed, I agree around a year back when we discussed we\n > came up with ibm/v1 but that is being hard to absorb by our clients\n > if we come up with different session service, event service etc for\n > /ibm/v1.\n > > > > > >\n > > > > > > That is always a difficult tradeoff between standards\n > compliance and development speed.\n > > > > > >\n > > > > > >\n > > > > > > > I am hoping having OEM resources under bmcweb should\n > not be a concern.\n > > > > > > > => It is not breaking the resfish spec.\n > > > > > > > => Easier to use the existing infra\n > > > > > > > => Easy to port /ibm/v1 resources to OEM Resources\n > > > > > >\n > > > > > > Be careful with statements like this.  I suspect your\n > lock resources will need revised if you're going to put your things\n > in a true hypermedia API.  You'll need to write CSDL and jsonschema\n > and run the Redfish validator on every commit, as well as follow\n > conventions of the redfish specification and reuse existing\n > resources where available.  These things are non-trivial, but if\n > you want to do them, I'd be in support.\n > > > > >\n > > > > > You mentioned lock resources need to be revised, What is\n > that mean? Can you throw more lights here? I was expecting that at\n > service root we would be having lock service having some actions.\n > > > >\n > > > > 1. Redfish is a restful, hypermedia api.  Restful hypermedia\n > apis have ACID compliance, and support multiple users.  Acquiring\n > arbitrary mutexes or semaphores in one place doesn't follow that.\n > > > I think you haven't taken a look here, we are not acquiring any\n > mutexes, semaphores anything.\n > > > We get the info which we store it on the bmc and run some\n > processing logic on that info.\n > > >\n > > > > 2. Service root is definitely not the place for a lock API. \n > Service root is available pre-login.\n > > >\n > > > On a service root there would be a link for the lock\n > service(not the API) as it is there for other services and further\n > that service have the lock API, these API will be accessed only\n > once user gets authenticated.\n > >\n > > Gotcha.  I think that would work.  You have some odd timeout\n > requirements that are tough to model, but that is probably a\n > problem for whomever writes the patchset to do the move.\n > >\n > > >\n > > > >\n > > > > I will fully admit, I haven't given this a lot of thought of\n > how you would move that API to redfish.  I'll look and see if I can\n > give a better suggestion if this is really the path you want to go\n > down.\n > > > >\n > > > > >\n > > > > > I understand that we need to write the CSDL and Json\n > schema, running a redfish validator with every commit, it is a norm\n > in bmcweb now.\n > > > > >\n > > > > > > >\n > > > > > > >   That's completely fine to do, and for what you're\n > building might be the right thing to do.  If you want to move fast,\n > and implement whatever you want, /ibm/v1 is a great track to go. \n > The problem is when we're changing the meaning and intent of\n > /redfish/v1 resources because it's convenient for the /ibm/v1 tree.\n >  I don't see that as being maintainable in the long run to have\n > different subsystems cross calling dependencies.  If you need some\n > of the features of Redfish, without the specification, and don't\n > want to duplicate code, we should refactor some of the backends\n > into a generic code (kinda like we've done within Redfish) we can\n > can host the /redfish/v1 and the /ibm/v1 versions of each.  so\n > you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n > > > > > > > >\n > > > > > > > > The Redfish OEM privileges thing I don't think solves\n > it, as users don't have the ability to change their Privileges at\n > runtime, so IBM would have to be the default, and we'd still have a\n > non-compliant /redfish/v1/EventService implementation.  With that\n > said, maybe you had something more clever in mind?\n > > > > > > > >\n > > > > > > > > In my mind the viable options are:\n > > > > > > > > 1. Implement /ibm/v1, without crossing dependencies\n > with redfish.  This means that /ibm/v1 needs its own login routine\n > (so you can acquire and free your locks) and an equivalent of\n > EventService (so you can event /ibm/v1 resource changes).  The\n > backends for these could share as much code as makes sense with\n > redfish, but would be distinct to the user as an IBM specific\n > resource.  This would give you guys complete control of the API, as\n > it sounded like you wanted that, given the older interface you're\n > trying to design around.  Things like naming conventions,\n > namespacing, property deprecation, and session behavior would be\n > completely up to you to define.\n > > > > > > > > 2. Implement OEM properties in /redfish/v1.  This\n > would mean that things like Lock resources would probably need to\n > be avoided, because of how the hypermedia APIs are designed, and\n > you would be required to write CSDL and openapis for all your\n > resources, as well as avoid making modifications to the fixed\n > Redfish resources, like message registry.  It should be noted, the\n > CSDL today isn't set up to be adding/removing individual\n > properties, so you'd need to namespace them and probably version\n > them, which is well defined in redfish.  Considering Redfish has a\n > lot of hypervisor schemas already, when you went to upstream, you'd\n > likely get asked why you chose to avoid the well specified\n > resources, which might be hard to explain.\n > > > > > > > >\n > > > > > > > >\n > > > > > > > > Overall, I can't make the call for you guys, and I'm\n > fine with either option.  If I were in your shoes, I'd go with 1,\n > because you're not throwing away any existing work/compatibility\n > with your other implementation, but that's not really up to me, I'm\n > here to support whatever you want to do.\n > \n > Any more input needed on this patch before I go ahead and\n > finalize/merge it?\n\nHi Ed, I would prefer holding this until we make the changes to get the oem schemas for the locks and configfiles. We are working on the same. Removing this now will break the existing functionality of IBM management console interface with BMC."
        },
        {
            "timestamp": 1606233753,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > > Patch Set 4:\n>  > >\n>  > > > Patch Set 4:\n>  > > >\n>  > > > > Patch Set 4:\n>  > > > >\n>  > > > > > Patch Set 4:\n>  > > > > >\n>  > > > > > > Patch Set 4:\n>  > > > > > >\n>  > > > > > > > Patch Set 4:\n>  > > > > > > >\n>  > > > > > > > > Patch Set 4:\n>  > > > > > > > >\n>  > > > > > > > >\n>  > > > > > > > > When we discussed this a year ago, IBM didn't really\n>  > have an interest in doing the things that are required of Redfish\n>  > OEM implementations in using existing schemas where they exist, and\n>  > upstreaming/discussing new schemas with DMTF.\n>  > > > > > > >\n>  > > > > > > > Ed, I agree around a year back when we discussed we\n>  > came up with ibm/v1 but that is being hard to absorb by our clients\n>  > if we come up with different session service, event service etc for\n>  > /ibm/v1.\n>  > > > > > >\n>  > > > > > > That is always a difficult tradeoff between standards\n>  > compliance and development speed.\n>  > > > > > >\n>  > > > > > >\n>  > > > > > > > I am hoping having OEM resources under bmcweb should\n>  > not be a concern.\n>  > > > > > > > => It is not breaking the resfish spec.\n>  > > > > > > > => Easier to use the existing infra\n>  > > > > > > > => Easy to port /ibm/v1 resources to OEM Resources\n>  > > > > > >\n>  > > > > > > Be careful with statements like this.  I suspect your\n>  > lock resources will need revised if you're going to put your things\n>  > in a true hypermedia API.  You'll need to write CSDL and jsonschema\n>  > and run the Redfish validator on every commit, as well as follow\n>  > conventions of the redfish specification and reuse existing\n>  > resources where available.  These things are non-trivial, but if\n>  > you want to do them, I'd be in support.\n>  > > > > >\n>  > > > > > You mentioned lock resources need to be revised, What is\n>  > that mean? Can you throw more lights here? I was expecting that at\n>  > service root we would be having lock service having some actions.\n>  > > > >\n>  > > > > 1. Redfish is a restful, hypermedia api.  Restful hypermedia\n>  > apis have ACID compliance, and support multiple users.  Acquiring\n>  > arbitrary mutexes or semaphores in one place doesn't follow that.\n>  > > > I think you haven't taken a look here, we are not acquiring any\n>  > mutexes, semaphores anything.\n>  > > > We get the info which we store it on the bmc and run some\n>  > processing logic on that info.\n>  > > >\n>  > > > > 2. Service root is definitely not the place for a lock API. \n>  > Service root is available pre-login.\n>  > > >\n>  > > > On a service root there would be a link for the lock\n>  > service(not the API) as it is there for other services and further\n>  > that service have the lock API, these API will be accessed only\n>  > once user gets authenticated.\n>  > >\n>  > > Gotcha.  I think that would work.  You have some odd timeout\n>  > requirements that are tough to model, but that is probably a\n>  > problem for whomever writes the patchset to do the move.\n>  > >\n>  > > >\n>  > > > >\n>  > > > > I will fully admit, I haven't given this a lot of thought of\n>  > how you would move that API to redfish.  I'll look and see if I can\n>  > give a better suggestion if this is really the path you want to go\n>  > down.\n>  > > > >\n>  > > > > >\n>  > > > > > I understand that we need to write the CSDL and Json\n>  > schema, running a redfish validator with every commit, it is a norm\n>  > in bmcweb now.\n>  > > > > >\n>  > > > > > > >\n>  > > > > > > >   That's completely fine to do, and for what you're\n>  > building might be the right thing to do.  If you want to move fast,\n>  > and implement whatever you want, /ibm/v1 is a great track to go. \n>  > The problem is when we're changing the meaning and intent of\n>  > /redfish/v1 resources because it's convenient for the /ibm/v1 tree.\n>  >  I don't see that as being maintainable in the long run to have\n>  > different subsystems cross calling dependencies.  If you need some\n>  > of the features of Redfish, without the specification, and don't\n>  > want to duplicate code, we should refactor some of the backends\n>  > into a generic code (kinda like we've done within Redfish) we can\n>  > can host the /redfish/v1 and the /ibm/v1 versions of each.  so\n>  > you'd have a /ibm/v1/ SessionService|EventService|WhateverService.\n>  > > > > > > > >\n>  > > > > > > > > The Redfish OEM privileges thing I don't think solves\n>  > it, as users don't have the ability to change their Privileges at\n>  > runtime, so IBM would have to be the default, and we'd still have a\n>  > non-compliant /redfish/v1/EventService implementation.  With that\n>  > said, maybe you had something more clever in mind?\n>  > > > > > > > >\n>  > > > > > > > > In my mind the viable options are:\n>  > > > > > > > > 1. Implement /ibm/v1, without crossing dependencies\n>  > with redfish.  This means that /ibm/v1 needs its own login routine\n>  > (so you can acquire and free your locks) and an equivalent of\n>  > EventService (so you can event /ibm/v1 resource changes).  The\n>  > backends for these could share as much code as makes sense with\n>  > redfish, but would be distinct to the user as an IBM specific\n>  > resource.  This would give you guys complete control of the API, as\n>  > it sounded like you wanted that, given the older interface you're\n>  > trying to design around.  Things like naming conventions,\n>  > namespacing, property deprecation, and session behavior would be\n>  > completely up to you to define.\n>  > > > > > > > > 2. Implement OEM properties in /redfish/v1.  This\n>  > would mean that things like Lock resources would probably need to\n>  > be avoided, because of how the hypermedia APIs are designed, and\n>  > you would be required to write CSDL and openapis for all your\n>  > resources, as well as avoid making modifications to the fixed\n>  > Redfish resources, like message registry.  It should be noted, the\n>  > CSDL today isn't set up to be adding/removing individual\n>  > properties, so you'd need to namespace them and probably version\n>  > them, which is well defined in redfish.  Considering Redfish has a\n>  > lot of hypervisor schemas already, when you went to upstream, you'd\n>  > likely get asked why you chose to avoid the well specified\n>  > resources, which might be hard to explain.\n>  > > > > > > > >\n>  > > > > > > > >\n>  > > > > > > > > Overall, I can't make the call for you guys, and I'm\n>  > fine with either option.  If I were in your shoes, I'd go with 1,\n>  > because you're not throwing away any existing work/compatibility\n>  > with your other implementation, but that's not really up to me, I'm\n>  > here to support whatever you want to do.\n>  > \n>  > Any more input needed on this patch before I go ahead and\n>  > finalize/merge it?\n> \n> Hi Ed, I would prefer holding this until we make the changes to get the oem schemas for the locks and configfiles. We are working on the same. Removing this now will break the existing functionality of IBM management console interface with BMC.\n\nThis patchset has been up for a month and a half, and I don't see any OEM schemas even in review yet;  Is there a timeline on your OEM schemas getting at least pushed to gerrit?"
        },
        {
            "timestamp": 1606297020,
            "reviewer": {
                "name": "Sunitha Harish",
                "email": "sunithaharish04@gmail.com",
                "username": "sunharis"
            },
            "message": "Patch Set 4:\n\nhttps://gerrit.openbmc-project.xyz/#/c/openbmc/bmcweb/+/38377/ is being worked upon to implement the IBM Oem schemas. This commit is pushed a week ago and the work is still in progress"
        },
        {
            "timestamp": 1617174470,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Removed reviewer ManojKiran Eda."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "9179d4a2054094c45ec98a8dd9a95f028fcd4bd4",
            "parents": [
                "ee02fdae3cfb2fc7b4c827de9bf31d8551b3c7d1"
            ],
            "ref": "refs/changes/65/36865/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1601305402,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "include/ibm/management_console_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -7
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -13
                },
                {
                    "file": "redfish-core/lib/event_service.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -5
                }
            ],
            "sizeInsertions": 0,
            "sizeDeletions": 25
        },
        {
            "number": 2,
            "revision": "46323fe2d6a4a473eca4d5cfb4e07d88c3644ecb",
            "parents": [
                "453929ede77a0129a658227fc18dd73dc47dec31"
            ],
            "ref": "refs/changes/65/36865/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1601305427,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "include/ibm/management_console_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -7
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -13
                },
                {
                    "file": "redfish-core/lib/event_service.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -5
                }
            ],
            "sizeInsertions": 0,
            "sizeDeletions": 25
        },
        {
            "number": 3,
            "revision": "1fa593b81c1762a80f90824b9586b0b0acc95b86",
            "parents": [
                "cb8143a66574164480ef0a38e22a272d0d2ed598"
            ],
            "ref": "refs/changes/65/36865/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1601403731,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "include/ibm/management_console_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -7
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -13
                },
                {
                    "file": "redfish-core/lib/event_service.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -5
                }
            ],
            "sizeInsertions": 0,
            "sizeDeletions": 25
        },
        {
            "number": 4,
            "revision": "8c8b9326a3739d12a852c1da5ba77d5c8e242863",
            "parents": [
                "a2b14cd0fd11d7dfb0fdba0794de545bbfac9643"
            ],
            "ref": "refs/changes/65/36865/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1601404896,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "include/ibm/management_console_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -7
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -13
                },
                {
                    "file": "redfish-core/lib/event_service.hpp",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -5
                }
            ],
            "sizeInsertions": 0,
            "sizeDeletions": 25
        }
    ]
}