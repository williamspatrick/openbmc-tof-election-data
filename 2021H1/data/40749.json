{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "Ia28e41fad5031656cef4d766c59baa948ea781e5",
    "number": 40749,
    "subject": "Standardize the asio helper methods",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/40749",
    "commitMessage": "Standardize the asio helper methods\n\nAs a general rule, std::networking/asio methods take a single callback\nhandler.  This is done intentionally, as it allows objects that cannot\nbe taken by reference to be taken directly by move.\n\nThe latest helper methods for properties seems to have taken a\njavascript style approach, with \"onSuccess\" and \"onError\" handlers.\nThis works fine in js, where everything is reference counted, but\ndoesn't work in all cases in c++.\n\nAs an strawman.\n\nstd::unique_ptr<Thing> myThing;\nsetProperty(......\n           [myThing{std::move(myThing)}](std::error_code){\n               ... Use MyThing\n           },\n           [myThing{std::move(myThing)}](){\n                ... Use mything\n           });\n\nThe above code doesn't work, as you can't move out of myThing twice.\nSure, you could make myThing a shared_ptr, but that's wasteful, and\ndefeats c++es policy of \"you don't pay for what you don't use\".\n\nThis commit changes the new handlers to use more standard prototypes\nthat accept a single callback, and return error codes on failure.\n\nI was able to find only one usage of these methods in the codebase,\ninside telemetry, with a single getProperty call.  For that method, I\nhave left the old version of this method present, and marked it with the\nc++17 [[deprecated]] flag, along with a note on what to do instead.\nThis is to avoid a hard binding between this patchset and\nhttps://gerrit.openbmc-project.xyz/c/openbmc/telemetry/+/40878\nwhich should allow them to be merged in whatever order we like.\n\nSigned-off-by: Ed Tanous <edtanous@google.com>\nChange-Id: Ia28e41fad5031656cef4d766c59baa948ea781e5\n",
    "createdOn": 1613784355,
    "lastUpdated": 1614875551,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1613784355,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1613784376,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613784635,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12729/ : FAILURE"
        },
        {
            "timestamp": 1613785160,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1613785181,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613785443,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12730/ : FAILURE"
        },
        {
            "timestamp": 1613845587,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1613845598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613845753,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 4: Commit message was updated."
        },
        {
            "timestamp": 1613845852,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12739/ : FAILURE"
        },
        {
            "timestamp": 1613848836,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1613848848,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1613849555,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12741/ : SUCCESS"
        },
        {
            "timestamp": 1614042410,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1614045431,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(3 comments)\n\nIt should be noted, I found one place in the codebase where these are used that needed fixed, in telemetry.  If maintainers are ok with this, I'll get that patchset up as well."
        },
        {
            "timestamp": 1614048073,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1614048086,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614048124,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(3 comments)\n\n> Patch Set 5:\n> \n> (3 comments)\n> \n> It should be noted, I found one place in the codebase where these are used that needed fixed, in telemetry.  If maintainers are ok with this, I'll get that patchset up as well.\n\nNevermind"
        },
        {
            "timestamp": 1614048333,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12835/ : FAILURE"
        },
        {
            "timestamp": 1614050655,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1614051013,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1614096337,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1614096359,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614096602,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12883/ : FAILURE"
        },
        {
            "timestamp": 1614096876,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8: Patch Set 7 was rebased"
        },
        {
            "timestamp": 1614096894,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614097519,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12885/ : SUCCESS"
        },
        {
            "timestamp": 1614117920,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1614154451,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 8: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1614154679,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1614154920,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1614155034,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 8: -Code-Review"
        },
        {
            "timestamp": 1614155204,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1614156010,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1614184568,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1614185463,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1614185475,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614185723,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12987/ : FAILURE"
        },
        {
            "timestamp": 1614185796,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1614187549,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1614187570,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614187838,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/12988/ : FAILURE"
        },
        {
            "timestamp": 1614188076,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1614188095,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614188710,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/12989/ : SUCCESS"
        },
        {
            "timestamp": 1614248040,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 11:\n\n(3 comments)"
        },
        {
            "timestamp": 1614266983,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(3 comments)"
        },
        {
            "timestamp": 1614275651,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1614278208,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1614278228,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1614278265,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1614278852,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/13060/ : SUCCESS"
        },
        {
            "timestamp": 1614330152,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 12:\n\n(3 comments)"
        },
        {
            "timestamp": 1614358219,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(3 comments)"
        },
        {
            "timestamp": 1614492753,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1614593840,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1614594398,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1614606132,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1614616037,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1614672727,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1614702988,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13: Commit message was updated."
        },
        {
            "timestamp": 1614761585,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1614761590,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 13: Code-Review+1"
        },
        {
            "timestamp": 1614872257,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n@Patrick, friendly ping."
        },
        {
            "timestamp": 1614875546,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 13: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1614875551,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "46daba242e7db5b25658ed2e107d4c24e35648fa",
            "parents": [
                "32ffb03dc854ba61747849246805ea7597e97130"
            ],
            "ref": "refs/changes/49/40749/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1613784355,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": -32
                }
            ],
            "sizeInsertions": 17,
            "sizeDeletions": 32
        },
        {
            "number": 2,
            "revision": "018c1100ce17eca814dd8381f451c6e57301ac2f",
            "parents": [
                "32ffb03dc854ba61747849246805ea7597e97130"
            ],
            "ref": "refs/changes/49/40749/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1613785160,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": -34
                }
            ],
            "sizeInsertions": 19,
            "sizeDeletions": 34
        },
        {
            "number": 3,
            "revision": "17d54bd004c3b7e414b0023331dc5e9c89997a7b",
            "parents": [
                "32ffb03dc854ba61747849246805ea7597e97130"
            ],
            "ref": "refs/changes/49/40749/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1613845587,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -8
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sdbusplus/message/native_types.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 94,
            "sizeDeletions": 81
        },
        {
            "number": 4,
            "revision": "0d996b74dad9bcd7fd54c355bf3a8bd3fd388caf",
            "parents": [
                "32ffb03dc854ba61747849246805ea7597e97130"
            ],
            "ref": "refs/changes/49/40749/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1613845753,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -8
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sdbusplus/message/native_types.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 94,
            "sizeDeletions": 81
        },
        {
            "number": 5,
            "revision": "57c9683e8710808deb816831f4e95ec6741e8029",
            "parents": [
                "32ffb03dc854ba61747849246805ea7597e97130"
            ],
            "ref": "refs/changes/49/40749/5",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1613848836,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "logSystemErrorCode is a function which produces lambda. It was verified that binary side is smaller if you pass lambda created by function rather than copy paste. Also it made sense when it was parameter to getAllProperties.\n\nNow you need to either logSystemErrorCode()(ec) inline logSystemErrorCode here."
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "or change logSystemErrorCode to be standard function instead of function creating lambda:\n\nlogSystemErrorCode(ec)"
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "That's a great catch.  I've changed logSystemErrorCode to be a normal function instead of returning a lambda.  This cleans up the error handling path here quite a bit, and simplifies it.  Thanks!\n\nYour comment about binary size is well received, although it should be noted that for the examples, these two pieces off code generate exactly the same same binary, which has the same binary size as the old code."
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Sure, I just wanted to explain the reason behind it. It made sense when it was complete handler, but after your change logSystemErrorCode(ec) seems better.\n\nPrevious and current solution should produce same binary size (at least in theory). Difference would be visible if you decide to manually inline logSystemErrorCode."
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep.  I believe this is fixed in the newest patchset;  If you'd like more changes here, please let me know."
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 233,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Have you run this examples? If everything is ok you should be able to run it, ctrl+c after few seconds (depending on how fast your system is) fatal error count should be equal to 0.\n\nThis examples also work like tests."
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 233,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The examples don't run on my desktop because of permissions issues on my flavor of debian, but the unit tests do pass, which has coverage of this."
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "line": 233,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Yes, but I believe that after making a change we should also check if affected examples are working. There is no point in having example code that contains implementation errors, for example wrong usage of getAllProperties."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Couldn't this just be replaced with std::forward(handler)?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This isn't a method, it's a lambda capture, so my understanding is that std::forward isn't applicable here, because we aren't calling a method, we're calling an inline constructor, similar to the form\n\nint x = std::move(y);\n\nYou would never write this inline:\nint x = std::forward(y);\n\nas it wouldn't compile (I think).\n\nSaid another way, you can't have perfect forwarding if the value isn't being forwarded, but is immediately being used.\n\nI'm mostly sure on the above, but I've never been super clear on the differences between std::forward and std::move.  I could be proven wrong, but if I remember right, this move is how the ASIO internals do it (through various macros and boost::bind) and I like to assume those guys understand this stuff better than I do."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nevermind.  Latest patchset implements this.  I'm still not sure the advantage in this case, but I can get behind std::forward being better in theory, and it does compile and work, which is not what I expected."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "It's not clear with all the diff colorations, but I was commenting on the whole lambda - I think this could just be bus.async_method_call(std::forward(handler), service,...) because the lambda doesn't do anything extra now.\n\nBut either way, the rule I learned from Scott Meyer is to use std::forward on universal references (which handler is). Since handler could theoretically be an lvalue reference to a closure object, we should use std::forward to preserve that type. (Although passing lvalue closures seems to be less common in practice in our code.)"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> It's not clear with all the diff colorations, but I was commenting on the whole lambda - I think this could just be bus.async_method_call(std::forward(handler), service,...) because the lambda doesn't do anything extra now.\n\nOH, I understand now.  That's a really good point.  Will fix.\n\n> \n> But either way, the rule I learned from Scott Meyer is to use std::forward on universal references (which handler is). Since handler could theoretically be an lvalue reference to a closure object, we should use std::forward to preserve that type. (Although passing lvalue closures seems to be less common in practice in our code.)\n\nOk, that makes sense to me.  Patrick also hoped on discord with me for a second, and the change makes sense.  I'm logging off for the night, but I'll get it fixed in the morning."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "This may not work in all cases. async_method_call requires to pass proper types. This is not that important but you should know that there is small difference.\n\nWhen you do it like this you are allowed to do:\n[](auto ec, vector<...>) {}\n\nWhen you do plain forward you are forced to take ec as boost::system::error_code"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This may not work in all cases. async_method_call requires to pass proper types. This is not that important but you should know that there is small difference.\n> \n> When you do it like this you are allowed to do:\n> [](auto ec, vector<...>) {}\n\nIs this a real use case?  Can you point at code that does this?  Taking a callable parameter by auto seems problematic from a code reading comprehension standpoint.  I know if code got checked in that did this, I would ask for the type to be called out explicitly.\n\n> \n> When you do plain forward you are forced to take ec as boost::system::error_code\n\nYou're taking it as boost::system::error_code in both cases, in the former case you're just allowed to use auto, which obfuscates the type.\n\nTo my understanding, std::networking apis don't allow using auto for the error code return type, as handlers must meet the Handler concepts defined by the standard.  I'd like to follow that model for consistency between async calls.\n\nEventually I'd really like these to have their own defined concepts for handler type, with static asserts for when handler types don't work, but that's for another patchset."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "I don't know if it is used. I am just saying that you are changing previous  behavior. Previously it was allowed to pass auto now you are taking that possibility. All I wanted by this comment was to make sure you are aware of the difference.\n\nIt will be up to sdbusplus maintainers to decide.\n\nNow about what you wrote, I disagree that using auto may be harder to read.\n\n[](boost::system::error_code ec) {\n  if (ec) {\n    return;\n   }\n}\n\n[](auto errorCode) {\n  if (errorCode) {\n    return;\n   }\n}\n\nBoth cases look the same, user will decide what they want, why force them?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I don't know if it is used. I am just saying that you are changing previous  behavior. Previously it was allowed to pass auto now you are taking that possibility. All I wanted by this comment was to make sure you are aware of the difference.\n\nI do appreciate you pointing it out;  I was not aware at the time, but I am now.  I think this behavior is more in line with the title of this patchset, which is attempting to make these look more like asio handlers.\n\n> \n> It will be up to sdbusplus maintainers to decide.\n\nOf course, happy to make whatever changes Patrick wants, but IMO this should stay as it is.\n\n> \n> Now about what you wrote, I disagree that using auto may be harder to read.\n> \n> [](boost::system::error_code ec) {\n>   if (ec) {\n>     return;\n>    }\n> }\n> \n> [](auto errorCode) {\n>   if (errorCode) {\n>     return;\n>    }\n> }\n> \n> Both cases look the same, user will decide what they want, why force them?\n\nWithout looking at the docs or relying on the name, what methods are allowed on errorCode?\n\nI could just as easily write\n[](auto ret)\n\nand it would be very difficult to determine the type of ret without looking at other examples, relying on an IDE, or reverse engineering sdbusplus.  If the type is called out explicitly, I can find the docs page on boost::system::error_code immediately."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "To know what kind of lambda is expected to be passed here you still need to read the docs or look at the examples because signature takes Handler, it doesn't seem like anything is changing here. It is true that when you find example you have the type, with auto you have to look inside this function to see that boost::system::error_code is passed to your handler and that's something common, you read the code as is if you need details you go and take a look how is the function defined/implemented.\n\nI was looking for something in the internet which aligns with my knowledge about auto, this way may be more convincing.\n\nhttps://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/\n\nYou can start reading from:\n\"3. What are some popular concerns about using auto to declare variables? Are they valid? Discuss.\"\n\nJust to make it clear. I'm fine with having boost::system::error_code explicit I just disagree that using auto instead is bad. We can go for boost::system::error_code if this is coding standard that was agreed for example."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> To know what kind of lambda is expected to be passed here you still need to read the docs or look at the examples because signature takes Handler, it doesn't seem like anything is changing here.\n\nOnly if you're writing new code, with no known examples.  If you're following an example, you know exactly what the type is without ever having to open the getAllProperties implementation.\n\nIn the case of setProperty, you'd have to open two levels of code to determine the return type.\n\n> It is true that when you find example you have the type, with auto you have to look inside this function to see that boost::system::error_code is passed to your handler and that's something common, you read the code as is if you need details you go and take a look how is the function defined/implemented.\n> \n> I was looking for something in the internet which aligns with my knowledge about auto, this way may be more convincing.\n> \n> https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/\n\n\nI've read this article many times.  Some things to realize about it:\n1. Herb sutter, while great, does not speak for the entirety of the C++ committee or community.\n2. There are plenty of other response articles talking about that advice being harmful in a lot of ways.\n3. Lambda argument deduction by auto was added in c++14, so that article takes no opinion that can be directly applied to this code.  That article (with the exception of the title) is almost entirely focused on inline variable declarations, and makes no mention of taking arguments by auto.  It does mention templates for this kind of thing, but I think every callback handler becoming a template would be a mess, and I don't think that's what herb was getting at with his example.\n\n> \n> You can start reading from:\n> \"3. What are some popular concerns about using auto to declare variables? Are they valid? Discuss.\"\n> \n> Just to make it clear. I'm fine with having boost::system::error_code explicit I just disagree that using auto instead is bad. We can go for boost::system::error_code if this is coding standard that was agreed for example.\n\nSo in the context of this patchset, it sounds like we're good to go.  Thanks for your review."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "> I've read this article many times.  Some things to realize about it:\n> 1. Herb sutter, while great, does not speak for the entirety of the C++ committee or community.\n> 2. There are plenty of other response articles talking about that advice being harmful in a lot of ways.\n\nDo you have any link about what is C++ committee and community saying about auto as argument in lambda?\nDo you have any link to article which says that I should not use auto?\nOr could you just explain benefits of it?\n\nFor example:\n\"In the case of setProperty, you'd have to open two levels of code to determine the return type.\"\nSure it is true, but it doesn't convince me to write code against specific implementation instead code against interface. Maybe you are right, but I would appreciate If you could give some arguments why I should believe what you are saying.\n\nType of ec never had real meaning for me. All I needed was I can do if (ec) and if (ec == boost::system::errc::success) this was all in existing code I didn't have to look in details of sdbusplus to know that. I would be grateful if you could explain in more details why I should not use auto as parameter in lambda. Or why should I write code against concrete implementation instead of interfaces.\n\n\"So in the context of this patchset, it sounds like we're good to go.  Thanks for your review.\"\nYes, if this is about changes in patchset we're good. Still it would be nice if you could give share you knowledge about this topic or share link to articles/c++ committee/community where I can find anwers."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "In general, I have a strong preference for AAA style, but this code for the most part isn\u2019t and I haven\u2019t put a lot of eyeball time on the ASIO code in general since it was written during the time I was away from the project.  So, keep it how ever you desire for the time being.\n\nSpeaking generally, I find some of the arguments regarding [bad] readability / documentation of AAA style mostly bogus and this context to me is strong evidence.\n\n1. Handler is a template with no static asserts to ensure it follows any particular constraints anyhow.  (C++20 has Concepts which could be added to the templates as constraints to ensure certain requirements are met and are more appropriate than type-checking of lambdas).\n\n2. None of this code even uses \u2018ec\u2019/\u2018ret\u2019 but it is redirected from \u2018async_method_call\u2019 to \u2018handler\u2019.  It provides no meaningful documentation because I still have to look at \u2018async_method_call\u2019s documentation to know if you got it right, other than assuming you have it right by nature of it compiling.  To me, as a reviewer / user, this really provides me no additional information that I wouldn\u2019t have to look at these other functions to understand anyhow, so it is just noise to me.\n\nHerb is certainly not the only advocate of AAA in the C++ community even though he is probably the most famous name.  The C++ Core Guidelines also encourage AAA-style at ES.11 (though Herb started them, he is not the only contributor and no longer the maintainer): http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-auto .\n\nA few other interesting articles:\nhttps://www.fluentcpp.com/2018/09/28/auto-stick-changing-style/\nhttps://www.fluentcpp.com/2020/12/04/auto-for-types-but-not-for-concepts/"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> In general, I have a strong preference for AAA style, but this code for the most part isn\u2019t and I haven\u2019t put a lot of eyeball time on the ASIO code in general since it was written during the time I was away from the project.  So, keep it how ever you desire for the time being.\n\nMy preference would be for keeping it the way it is, under the (possibly false) assumption that the std::networking guys know something I don't.\n\n> \n> Speaking generally, I find some of the arguments regarding [bad] readability / documentation of AAA style mostly bogus and this context to me is strong evidence.\n> \n> 1. Handler is a template with no static asserts to ensure it follows any particular constraints anyhow.  (C++20 has Concepts which could be added to the templates as constraints to ensure certain requirements are met and are more appropriate than type-checking of lambdas).\n\nTechnically all asio handlers are supposed to have an associated class template (basically a concept without the syntax) with something like \"is_get_handler\" and a static assert.  I intentionally didn't do this here, because I figured it be better to jump straight to concepts, and the other handler-as-arguments don't do this already.  I plan to add this to all the asio handlers in a future patchset.\n\n> \n> 2. None of this code even uses \u2018ec\u2019/\u2018ret\u2019 but it is redirected from \u2018async_method_call\u2019 to \u2018handler\u2019.  It provides no meaningful documentation because I still have to look at \u2018async_method_call\u2019s documentation to know if you got it right, other than assuming you have it right by nature of it compiling.  To me, as a reviewer / user, this really provides me no additional information that I wouldn\u2019t have to look at these other functions to understand anyhow, so it is just noise to me.\n\nThe first patchset didn't have this problem, and could be verified directly from the extra lambda forward.  With that said, I see your point on this specific handler. It's not great without static asserts.\n\n> \n> Herb is certainly not the only advocate of AAA in the C++ community even though he is probably the most famous name.  The C++ Core Guidelines also encourage AAA-style at ES.11 (though Herb started them, he is not the only contributor and no longer the maintainer): http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-auto .\n> \n> A few other interesting articles:\n> https://www.fluentcpp.com/2018/09/28/auto-stick-changing-style/\n> https://www.fluentcpp.com/2020/12/04/auto-for-types-but-not-for-concepts/\n\nI hadn't read the second one yet."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "@Patrick thank you for the links.\n\nThere is no material about auto being used as parameter in lambda. There was only one recommended usage of it, when you want to create lambda which handles more than one type (and you can't use concept)."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "std::forward instead?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See above."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "just a note: you need pay for creating this type, it may be just int, but it may be tuple of string, ...\n\nIt is probably lighter than creating shared_ptr"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You only need to pay for construction in the failing case, which seems ok to me.\n\ntuple<std::string, std::string> construction doesn't call malloc, and if I remember right std::string zero initializes, so in terms of code, it's the same as declaring\n\nstd::array<uint8_t, 24+24> {0};\nWhich should be cheaper than constructing a shared_ptr, which will call into malloc a couple times to allocate the tracking struct as well as the object being constructed.  This gets constructed on stack, initialized with zeros.\n\nThe other option I considered was declaring a variable of type T at the top of this function, and using std::move(value) to put the result into it, that way all code paths returned the same variable.  That seems worse, as it forces a move in the golden path, which we'd like to optimize for, and forces the object to be move constructable."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Just a note with make shared there should be one memory allocation. But yes shared pointer is slow, mostly because it's thread safe, if we cut that part out it should be only a bit slower than raw pointers (you still have to increment/decrement reference counter)."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Just a note with make shared there should be one memory allocation.  But yes shared pointer is slow, mostly because it's thread safe, if we cut that part out it should be only a bit slower than raw pointers (you still have to increment/decrement reference counter).\n\nI'm not sure what you mean by \"cut that part out\".  Are you talking about changing the shared_ptr implementation?  That seems difficult to do, and this is likely cheaper still.\n\nEven if you required shared_ptr in your lambda callbacks, you're imposing requirements on the things that can be passed to the callbacks, which this patchset is trying to avoid.\n\nIf you have a concrete change that you'd like to see on this line, I'm happy to make it;  I've given the two thoughts I had here when writing this, and I've picked what I think is the best option."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "> I'm not sure what you mean by \"cut that part out\".  Are you talking about changing the shared_ptr implementation?  That seems difficult to do, and this is likely cheaper still.\n\nI didn't mean to change shared_ptr, I just wanted to point out that two allocations can be avoided using make_shared and even if we do that the reason shared_ptr is slower is mostly because it is thread safe."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "So, this is fine as-is then?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Yes."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Sure now it is consistent. But why do you want to move error checking part to user code? Instead having it in single place now you need to put if (ec) in every invocation of this helper."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "How about creating two overloads, one which takes single handler with two parameters and one with two handler one parameter in each?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\"But why do you want to move error checking part to user code? \"\n\nI'm not following.  Error checking will be in user code regardless, this code just makes it a branch instead of a secondary object.  Yes, I would like users to handle their errors explicitly, and without constructing an extra object just to store in the failing case.\n\n\n\"How about creating two overloads,\"\n\nI thought about creating two overloads temporarily, so this change could be rolled out, then the old one deleted, but looking through the codebase, I found one usage of these new methods (in telemetry that I sent the patchset out for) so it seemed easier to just jump directly to the new API.\n\nLong term, I'd rather we don't have two overloads of this for consistency with std::networking."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For the one usage of getProperty that I could find in the codebase I've added the extra overload and marked it as deprecated.  This should avoid the hard binding between these two patchsets when they get merged.\n\nI wasn't able to find usages of the other methods, so they should be easy to move forward directly."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "How about other users of sdbusplus? This project can be used by anything, it doesn't have to be related to openBmc. It would be nice to give other projects (if any) some warning before breaking change is introduced.\n\nWhat about other helpers methods? If there is someone who is using them and that code is not public this is going to be a breaking change without a warning.\n\nI am just raising my concerns, maintainers will decide."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> How about other users of sdbusplus?  This project can be used by anything, it doesn't have to be related to openBmc. It would be nice to give other projects (if any) some warning before breaking change is introduced.\n\nWe didn't give warning when the original breaking change that moved this to two handlers was introduced, and we've made several other behavior breaking changes in the past without warning or deprecation.  Considering OpenBMC is the heaviest user of this, this method is new, and so far as I'm aware there's only one usage of any of this in openbmc, it seems unlikely that any other projects have picked it up.\n\nWith that said, I'm happy to do what Patrick wants here.\n\n> \n> What about other helpers methods? If there is someone who is using them and that code is not public this is going to be a breaking change without a warning.\n\nI can't make guesses about code that I can't see and isn't open source.  If other open source users pop up, I'm happy to go push patches to fix their code too.  If we talk about downstream fork compatibility, technically any of these projects could've patched this method, and any change here would be breaking.  I can't reason about code that I can't see.\n\n> \n> I am just raising my concerns, maintainers will decide.\n\nYep, I'm happy to do anything that Patrick asks for, IMO I think what's currently in the patchset is the right path."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "> We didn't give warning when the original breaking change that moved this to two handlers was introduced\n\nThese functions were first introduced exactly as they are - there was no breaking change."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The commit I was thinking of was 807419d33ba89a20d63d209f9ef5770c37069e4b\n\nWe moved the async_get from the asio style, to this new dual callback style;  With that said, I was mistaken, this was done in an example, so it's not really an interface breaking change, just changing the examples a bit, so you're right.\n\nWith that said, we've changed behavior of other method calls before in ABI breaking ways (changing mapbox::variant to std::variant, ect), and so far as I can tell, nobody (with the one exception) uses these methods yet, so my point still stands, I think we can safely make this change without having to carry two versions of this in the long run.\n\nIf there's code that does use this that I haven't pushed a patch to, feel free to point me at it and i'll get more patches pushed to fix it."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 65,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "just forward handler?"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 65,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See above."
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 65,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -8
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": -34
                }
            ],
            "sizeInsertions": 89,
            "sizeDeletions": 76
        },
        {
            "number": 6,
            "revision": "4ff61716889b216a67d8d3546957c934cdea2a1a",
            "parents": [
                "32ffb03dc854ba61747849246805ea7597e97130"
            ],
            "ref": "refs/changes/49/40749/6",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614048073,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -8
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -33
                }
            ],
            "sizeInsertions": 88,
            "sizeDeletions": 75
        },
        {
            "number": 7,
            "revision": "53d4034590235b1b772d0a3a28d667be09c9cf9e",
            "parents": [
                "b039f3476c38c42ceb0569034a4efb9a1b27ca15"
            ],
            "ref": "refs/changes/49/40749/7",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614096337,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -8
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": -40
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 82
        },
        {
            "number": 8,
            "revision": "b52f18707b3ccdf183e70b5a493126195b19ebf6",
            "parents": [
                "4b646236df12b52205d2098ef985280190b358a7"
            ],
            "ref": "refs/changes/49/40749/8",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614096876,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -8
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": -40
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 82
        },
        {
            "number": 9,
            "revision": "3f1bebd240e03d0f9300dc536cacd3953c2a6ad6",
            "parents": [
                "4b646236df12b52205d2098ef985280190b358a7"
            ],
            "ref": "refs/changes/49/40749/9",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614185463,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": -11
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -23
                }
            ],
            "sizeInsertions": 105,
            "sizeDeletions": 68
        },
        {
            "number": 10,
            "revision": "e45c9acec630f03642285a7ba8af2b9a03c5278f",
            "parents": [
                "4b646236df12b52205d2098ef985280190b358a7"
            ],
            "ref": "refs/changes/49/40749/10",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614187549,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -13
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -24
                }
            ],
            "sizeInsertions": 107,
            "sizeDeletions": 71
        },
        {
            "number": 11,
            "revision": "8dbe86e7581c0b1568cd61426d54c89b35ea024c",
            "parents": [
                "4b646236df12b52205d2098ef985280190b358a7"
            ],
            "ref": "refs/changes/49/40749/11",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614188076,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 91,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "This can also be reduced to bus.async_method_call(std::forward<Handler>(handler), service...)"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 91,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -13
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 45,
                    "deletions": -35
                }
            ],
            "sizeInsertions": 118,
            "sizeDeletions": 82
        },
        {
            "number": 12,
            "revision": "759951831a868d7f83f94db653e44d9b30886977",
            "parents": [
                "4b646236df12b52205d2098ef985280190b358a7"
            ],
            "ref": "refs/changes/49/40749/12",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614278208,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "This piece of code could be simplified to something like:\n\n T* value = nullptr;\n if (!ec)\n {\n     value = std::get_if<T>(&ret);\n     if (!value)\n     {\n        ec = boost::system::errc::make_error_code(\n                        boost::system::errc::invalid_argument);\n     }\n }\n handler(ec, value ? *value : {});"
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This seems to be a difference of opinion on style and I don't think either is particularly better or worse.  Going to merge as is."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -13
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 45,
                    "deletions": -37
                }
            ],
            "sizeInsertions": 118,
            "sizeDeletions": 84
        },
        {
            "number": 13,
            "revision": "95874d930f0bcc8390cd47ab3bb1e5e46db45278",
            "parents": [
                "4b646236df12b52205d2098ef985280190b358a7"
            ],
            "ref": "refs/changes/49/40749/13",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614702988,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -13
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -34
                },
                {
                    "file": "include/sdbusplus/asio/property.hpp",
                    "type": "MODIFIED",
                    "insertions": 45,
                    "deletions": -37
                }
            ],
            "sizeInsertions": 118,
            "sizeDeletions": 84
        }
    ]
}