{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I123d8ab8bcd88a0b63ff131f6b98548951989755",
    "number": 47474,
    "subject": "WIP: Redfish: Query parameters: Only",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/47474",
    "commitMessage": "WIP: Redfish: Query parameters: Only\n\nAdd the query parameter \"only\" for redfish.\nThe specification is based on DSP0266_1.8.0.\n\nThis commit is inspired by the commit that carries the same title, but\nis largely unique, namely, in that it adds the core feature to be able\nto recall handle with a new Response object, and make sure the result\ngets to the connection.  It does this by swapping the handlers and\nimplementing move semantics on the Response object.  It definitely needs\nbroken up into a few smaller patches, but it does pass the below tests\nwithout any aparent seg faults or ownership issues.\n\nIt implements a number of cleanups that deserve their own patches, and\nwill be split up accordingly, but for the moment, I think this is a good\nstart to getting filter and expand support in the future.\n\nTested:\nValidator passes\n~$ curl -i -k -H \"X-Auth-Token: $token\" -X GET \"https://${bmc}/redfish/v1/Systems\"\n\n~$ curl -i -k -H \"X-Auth-Token: $token\" -X GET \"https://${bmc}/redfish/v1/Systems?only\"\n\nChange-Id: I123d8ab8bcd88a0b63ff131f6b98548951989755\n",
    "createdOn": 1633391704,
    "lastUpdated": 1634797709,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1633391704,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1633391714,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633392172,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/27429/ : FAILURE"
        },
        {
            "timestamp": 1633392262,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1633392275,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633392355,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/27431/ : FAILURE"
        },
        {
            "timestamp": 1633485801,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Patch Set 2 was rebased"
        },
        {
            "timestamp": 1633485806,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Patch Set 3 was rebased"
        },
        {
            "timestamp": 1633485810,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633485819,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633485819,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/27536/ : ABORTED"
        },
        {
            "timestamp": 1633486154,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/27537/ : FAILURE"
        },
        {
            "timestamp": 1633486212,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1633576169,
            "reviewer": {
                "name": "George Liu",
                "email": "liuxiwei@inspur.com",
                "username": "lxwinspur"
            },
            "message": "Patch Set 4:\n\nI am a bit confused, is it different from this patch(https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38952)?"
        },
        {
            "timestamp": 1633618754,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\n> Patch Set 4:\n> \n> I am a bit confused, is it different from this patch(https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38952)?\n\nIt is explained in the commit message."
        },
        {
            "timestamp": 1633769590,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\nThe logic is ok, but it looks a bit complicated."
        },
        {
            "timestamp": 1633796662,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1633803096,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> (1 comment)\n> \n> The logic is ok, but it looks a bit complicated.\n\nAgreed, if you have any ideas for how to simplify it, I'd love to know, but doing multiple requests and tracking lifetimes/completions is somewhat inherently complex."
        },
        {
            "timestamp": 1633914566,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > (1 comment)\n> > \n> > The logic is ok, but it looks a bit complicated.\n> \n> Agreed, if you have any ideas for how to simplify it, I'd love to know, but doing multiple requests and tracking lifetimes/completions is somewhat inherently complex.\n\nIn my opinion, your plan and my previous plan are both feasible, and you can choose either.\nHave you considered how to do \"Query Param: expand\"? This is a more complex function. I think this solution should be achievable with yours, but it needs to be verified. Hope you have thought of it."
        },
        {
            "timestamp": 1634283748,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\nHi Ed,\nCan we add several variables about Query Params in Response? I hope that when doing multiple requests, some variables can be passed from the first request to the second request, which is helpful for me to do \"expand\"."
        },
        {
            "timestamp": 1634412078,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\n> Patch Set 4:\n> \n> (1 comment)\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > (1 comment)\n> > > \n> > > The logic is ok, but it looks a bit complicated.\n> > \n> > Agreed, if you have any ideas for how to simplify it, I'd love to know, but doing multiple requests and tracking lifetimes/completions is somewhat inherently complex.\n> \n> In my opinion, your plan and my previous plan are both feasible, and you can choose either.\n> Have you considered how to do \"Query Param: expand\"?\n> This is a more complex function. I think this solution should be achievable with yours, but it needs to be verified. Hope you have thought of it.\n\n\nI've thought about it some.  I imagined each call to handle() would attach their own object to the chain, then the \"inject\" their code into the final tree where needed.  When new handlers are called, they would be called with expand = n -1, with a check against zero to stop propogating.  Where it gets weird is on auto expand references.  That's going to need some thoughts, because I believe expand is required to take that into account, but in code, we don't have the idea of a \"resource\" that's different than a route, so that needs some abstraction added.  Luckily we only implement a couple auto expand references today, so that should be relatively easy to get done."
        },
        {
            "timestamp": 1634412260,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> Hi Ed,\n> Can we add several variables about Query Params in Response?\n\nConsidering that Resonse is a representation of a generic HTTP object, and is not supposed to have any knowledge of Redfish, the query params would need to be generic.  What were you thinking we would add?\n\n> I hope that when doing multiple requests, some variables can be passed from the first request to the second request, which is helpful for me to do \"expand\".\n\nMy thinking there is that we can use the Query struct just like I've done here, and capture that in the completion handler when we inject it.  One design I considered and I'd like your input on is whether we should store a list of completion handlers, instead of just a single one, and whether that would simplify the code.  It arguably makes some code harder to write, so I want to play around with it a bit to see if we can simplify the interface, but I think in the end it might be good."
        },
        {
            "timestamp": 1634517597,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n(1 comment)\n\n> Patch Set 4:\n> \n> (1 comment)\n> \n> > Patch Set 4:\n> > \n> > (1 comment)\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > (1 comment)\n> > > > \n> > > > The logic is ok, but it looks a bit complicated.\n> > > \n> > > Agreed, if you have any ideas for how to simplify it, I'd love to know, but doing multiple requests and tracking lifetimes/completions is somewhat inherently complex.\n> > \n> > In my opinion, your plan and my previous plan are both feasible, and you can choose either.\n> > Have you considered how to do \"Query Param: expand\"?\n> > This is a more complex function. I think this solution should be achievable with yours, but it needs to be verified. Hope you have thought of it.\n> \n> \n> I've thought about it some.  I imagined each call to handle() would attach their own object to the chain, then the \"inject\" their code into the final tree where needed.  When new handlers are called, they would be called with expand = n -1, with a check against zero to stop propogating.  Where it gets weird is on auto expand references.  That's going to need some thoughts, because I believe expand is required to take that into account, but in code, we don't have the idea of a \"resource\" that's different than a route, so that needs some abstraction added.  Luckily we only implement a couple auto expand references today, so that should be relatively easy to get done.\n\nI think your idea is a bit similar to what I did in Redfish: Query parameters: expand\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/42908"
        },
        {
            "timestamp": 1634520345,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > Hi Ed,\n> > Can we add several variables about Query Params in Response?\n> \n> Considering that Resonse is a representation of a generic HTTP object, and is not supposed to have any knowledge of Redfish, the query params would need to be generic.  What were you thinking we would add?\n> \n> > I hope that when doing multiple requests, some variables can be passed from the first request to the second request, which is helpful for me to do \"expand\".\n> \n> My thinking there is that we can use the Query struct just like I've done here, and capture that in the completion handler when we inject it.  One design I considered and I'd like your input on is whether we should store a list of completion handlers, instead of just a single one, and whether that would simplify the code.  It arguably makes some code harder to write, so I want to play around with it a bit to see if we can simplify the interface, but I think in the end it might be good.\n\nYes, I also want to use the Query struct. But capture that in the completion handler cannot let it pass to the next request.\nIn expand, I need some variables to record the results of parsing parameters and the progress of expansion. Just like line 396 to 400 of the file query_param.hpp in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/42908"
        },
        {
            "timestamp": 1634525780,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > Hi Ed,\n> > > Can we add several variables about Query Params in Response?\n> > \n> > Considering that Resonse is a representation of a generic HTTP object, and is not supposed to have any knowledge of Redfish, the query params would need to be generic.  What were you thinking we would add?\n> > \n> > > I hope that when doing multiple requests, some variables can be passed from the first request to the second request, which is helpful for me to do \"expand\".\n> > \n> > My thinking there is that we can use the Query struct just like I've done here, and capture that in the completion handler when we inject it.  One design I considered and I'd like your input on is whether we should store a list of completion handlers, instead of just a single one, and whether that would simplify the code.  It arguably makes some code harder to write, so I want to play around with it a bit to see if we can simplify the interface, but I think in the end it might be good.\n> \n> Yes, I also want to use the Query struct. But capture that in the completion handler cannot let it pass to the next request.\n> In expand, I need some variables to record the results of parsing parameters and the progress of expansion. Just like line 396 to 400 of the file query_param.hpp in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/42908\n\nIf I look at that code, you have the following variables captured:\n    App& app;\n    crow::Response& res;\n    std::optional<crow::Request> newReq;\n    bool isParsed = false;\n    bool isOnly = false;\n    bool isExpand = false;\n    uint64_t expandLevel;\n    const uint64_t maxLevel = 2;\n    std::string expandType;\n    std::vector<std::string> pendingUrlVec;\n    nlohmann::json jsonValue;\n\n\nThat seems considerably more than I would've expected, but lets go through them one by one.\n\nWith this change, the original Response payload is no longer needed, so I suspect that's not needed anymore.\n\nI'm not really sure why you would need to keep around the original request object?  That seems like something we should be creating new objects for, not reusing old, as the \"new\" sub requests are different objects.\n\n\"isParsed\" is no longer needed, as query params are parsed in the first step and can error out immediately.\n\nIsOnly/IsExpand exist in the Query struct still.\n\n\"expandLevel\" I think would still be needed, and would decrease by 1 with every new resource (not every request.\n\n\"maxLevel\" is a const that should probably not be a member variable at all and should be constexpr at a higher scope.\n\nexpandType needs some more thought than it gets in that patch.  I suspect that needs to be part of the parse tree for the filter/expand operation.\n\npendingUrlVec in that implementation looks like it has a race condition if you executed more than one response at a time.\n\nand jsonValue should be used from Response.\n\n\nTo reiterate, considering all of those values are Redfish specific, they shouldn't exist in the generic Response/Request objects"
        },
        {
            "timestamp": 1634536676,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > Hi Ed,\n> > > > Can we add several variables about Query Params in Response?\n> > > \n> > > Considering that Resonse is a representation of a generic HTTP object, and is not supposed to have any knowledge of Redfish, the query params would need to be generic.  What were you thinking we would add?\n> > > \n> > > > I hope that when doing multiple requests, some variables can be passed from the first request to the second request, which is helpful for me to do \"expand\".\n> > > \n> > > My thinking there is that we can use the Query struct just like I've done here, and capture that in the completion handler when we inject it.  One design I considered and I'd like your input on is whether we should store a list of completion handlers, instead of just a single one, and whether that would simplify the code.  It arguably makes some code harder to write, so I want to play around with it a bit to see if we can simplify the interface, but I think in the end it might be good.\n> > \n> > Yes, I also want to use the Query struct. But capture that in the completion handler cannot let it pass to the next request.\n> > In expand, I need some variables to record the results of parsing parameters and the progress of expansion. Just like line 396 to 400 of the file query_param.hpp in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/42908\n> \n> If I look at that code, you have the following variables captured:\n>     App& app;\n>     crow::Response& res;\n>     std::optional<crow::Request> newReq;\n>     bool isParsed = false;\n>     bool isOnly = false;\n>     bool isExpand = false;\n>     uint64_t expandLevel;\n>     const uint64_t maxLevel = 2;\n>     std::string expandType;\n>     std::vector<std::string> pendingUrlVec;\n>     nlohmann::json jsonValue;\n> \n> \n> That seems considerably more than I would've expected, but lets go through them one by one.\n> \n> With this change, the original Response payload is no longer needed, so I suspect that's not needed anymore.\n> \n> I'm not really sure why you would need to keep around the original request object?  That seems like something we should be creating new objects for, not reusing old, as the \"new\" sub requests are different objects.\n> \n> \"isParsed\" is no longer needed, as query params are parsed in the first step and can error out immediately.\n> \n> IsOnly/IsExpand exist in the Query struct still.\n> \n> \"expandLevel\" I think would still be needed, and would decrease by 1 with every new resource (not every request.\n> \n> \"maxLevel\" is a const that should probably not be a member variable at all and should be constexpr at a higher scope.\n> \n> expandType needs some more thought than it gets in that patch.  I suspect that needs to be part of the parse tree for the filter/expand operation.\n> \n> pendingUrlVec in that implementation looks like it has a race condition if you executed more than one response at a time.\n> \n> and jsonValue should be used from Response.\n> \n> \n> To reiterate, considering all of those values are Redfish specific, they shouldn't exist in the generic Response/Request objects\n\nYou are right. I just need \"IsOnly/IsExpand\",\"expandLevel\",\"expandType\" and \"pendingUrlVec\", as i mentioned \"from line 396 to 400\".\nBut I don't understand how you want to pass them to the next request.Just capturing in the completion handler will not work."
        },
        {
            "timestamp": 1634565271,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > > Patch Set 4:\n> > > > > \n> > > > > Hi Ed,\n> > > > > Can we add several variables about Query Params in Response?\n> > > > \n> > > > Considering that Resonse is a representation of a generic HTTP object, and is not supposed to have any knowledge of Redfish, the query params would need to be generic.  What were you thinking we would add?\n> > > > \n> > > > > I hope that when doing multiple requests, some variables can be passed from the first request to the second request, which is helpful for me to do \"expand\".\n> > > > \n> > > > My thinking there is that we can use the Query struct just like I've done here, and capture that in the completion handler when we inject it.  One design I considered and I'd like your input on is whether we should store a list of completion handlers, instead of just a single one, and whether that would simplify the code.  It arguably makes some code harder to write, so I want to play around with it a bit to see if we can simplify the interface, but I think in the end it might be good.\n> > > \n> > > Yes, I also want to use the Query struct. But capture that in the completion handler cannot let it pass to the next request.\n> > > In expand, I need some variables to record the results of parsing parameters and the progress of expansion. Just like line 396 to 400 of the file query_param.hpp in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/42908\n> > \n> > If I look at that code, you have the following variables captured:\n> >     App& app;\n> >     crow::Response& res;\n> >     std::optional<crow::Request> newReq;\n> >     bool isParsed = false;\n> >     bool isOnly = false;\n> >     bool isExpand = false;\n> >     uint64_t expandLevel;\n> >     const uint64_t maxLevel = 2;\n> >     std::string expandType;\n> >     std::vector<std::string> pendingUrlVec;\n> >     nlohmann::json jsonValue;\n> > \n> > \n> > That seems considerably more than I would've expected, but lets go through them one by one.\n> > \n> > With this change, the original Response payload is no longer needed, so I suspect that's not needed anymore.\n> > \n> > I'm not really sure why you would need to keep around the original request object?  That seems like something we should be creating new objects for, not reusing old, as the \"new\" sub requests are different objects.\n> > \n> > \"isParsed\" is no longer needed, as query params are parsed in the first step and can error out immediately.\n> > \n> > IsOnly/IsExpand exist in the Query struct still.\n> > \n> > \"expandLevel\" I think would still be needed, and would decrease by 1 with every new resource (not every request.\n> > \n> > \"maxLevel\" is a const that should probably not be a member variable at all and should be constexpr at a higher scope.\n> > \n> > expandType needs some more thought than it gets in that patch.  I suspect that needs to be part of the parse tree for the filter/expand operation.\n> > \n> > pendingUrlVec in that implementation looks like it has a race condition if you executed more than one response at a time.\n> > \n> > and jsonValue should be used from Response.\n> > \n> > \n> > To reiterate, considering all of those values are Redfish specific, they shouldn't exist in the generic Response/Request objects\n> \n> You are right. I just need \"IsOnly/IsExpand\",\"expandLevel\",\"expandType\" and \"pendingUrlVec\", as i mentioned \"from line 396 to 400\".\n> But I don't understand how you want to pass them to the next request.Just capturing in the completion handler will not work.\n\nWhy wont capturing them in the completion handler work?"
        },
        {
            "timestamp": 1634605361,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1634610843,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1634611300,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(6 comments)\n\nTo anyone that is watching this patchset thinking \"this is complicated, I don't think I can help\" you're right on the first part, wrong on the second.  A bunch of this patch is actually cleanups to make Response objects uncopyable and have appropriate lifetimes that needs separated out into different patches and tested.  If you're interested in seeing $only merge, but don't feel up to trying to understand the object ownership model with shared_ptr<AsyncResp>, there are a number of small things that you can still do to help and separate out into cleanup patches to get this moving faster."
        },
        {
            "timestamp": 1634719905,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1634729325,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1634770642,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1634770658,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1634771009,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/28674/ : FAILURE"
        },
        {
            "timestamp": 1634797574,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1634797709,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1766915d49f050ff4feca71cadd0de2036abca6f",
            "parents": [
                "1a80863c438a912bb55cd80e553633e4399a287e"
            ],
            "ref": "refs/changes/74/47474/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1633391704,
            "author": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -21
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -15
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -10
                },
                {
                    "file": "include/async_resolve.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -40
                },
                {
                    "file": "include/async_resp.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -12
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "type": "ADDED",
                    "insertions": 139,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -4
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 312,
            "sizeDeletions": 121
        },
        {
            "number": 2,
            "revision": "9d8cea899b6528b91a24c946284a3822267587f4",
            "parents": [
                "5062d5df4a038f57bcd367f232b4e187b29376c2"
            ],
            "ref": "refs/changes/74/47474/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1633392262,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -21
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -15
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -10
                },
                {
                    "file": "include/async_resp.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -12
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "type": "ADDED",
                    "insertions": 139,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -4
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 255,
            "sizeDeletions": 81
        },
        {
            "number": 3,
            "revision": "7a9b6ec0655bf6866340edbc8b1fccb9ca1aa103",
            "parents": [
                "1a80863c438a912bb55cd80e553633e4399a287e"
            ],
            "ref": "refs/changes/74/47474/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1633485801,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -21
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -15
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -10
                },
                {
                    "file": "include/async_resp.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -12
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "type": "ADDED",
                    "insertions": 139,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -4
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 255,
            "sizeDeletions": 81
        },
        {
            "number": 4,
            "revision": "d6070725bcb702cb5819269c4e80e91e45e1dc6b",
            "parents": [
                "18f569aa751241a44976f636a865999c00d4a1ad"
            ],
            "ref": "refs/changes/74/47474/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1633485806,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Signoff ?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 323,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This needs a separate patch."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Changing the completion handlers to now accept Res as an argument needs its own patch."
                },
                {
                    "file": "http/http_connection.hpp",
                    "line": 354,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "> Changing the completion handlers to now accept Res as an argument needs its own patch.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/48002"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This extra logging probably needs removed?  Or maybe another patch."
                },
                {
                    "file": "http/websocket.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If anyone is interested in helping.  This change, moving the openHandler back to only supporting websocket disconnects and not 404s, needs broken out into its own change."
                },
                {
                    "file": "http/websocket.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "> If anyone is interested in helping.  This change, moving the openHandler back to only supporting websocket disconnects and not 404s, needs broken out into its own change.\n\nI commit it in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/48033"
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "line": 22,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "CompleteHandler captured the Query, but this Query is a new data, not from the previous request."
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't quite understand that statement.  Query is for the \"current\" request being aggreated in processAllparams.  When we support depth, a new Query struct will need to be created to store the next level down."
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "line": 85,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "Session will be used here.\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/47474/4/http/routing.hpp#1184"
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I can't follow your link (it just links to \"if ((rules[ruleIndex]->getMethods() \" in routing.hpp.)\n\nBut yes, I would expect session to be used and understood later in the code, which is why this is a TODO.  The code here is potentially a privilege bypass if the next route down has higher privileges than the previous.  Hence why this is a TODO.  If you have any ideas on how to write the code such that it's not a privilege bypass, I'm happy to hear about it, but it's a problem that I haven't solved in this patchset yet."
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "line": 85,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "I don't know how the permissions of different routes are determined, but Query Params is only used in the Get method. I think there should be no difference in the permissions of Get, so this is fine."
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "line": 85,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The GET method permissions can easily be different between routes.  Please do more research into how PrivilegeRegistry is defined.  It defines permissions per resource."
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "line": 85,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "Ack"
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "line": 2976,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "this needs its own patch."
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "line": 2976,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "> this needs its own patch.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/47998"
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "line": 2452,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We need to figure out when we removed the support for passing in the App object into response handlers, and add it back in a different patch."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -21
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -15
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -10
                },
                {
                    "file": "include/async_resp.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -12
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "type": "ADDED",
                    "insertions": 139,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -4
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 255,
            "sizeDeletions": 81
        },
        {
            "number": 5,
            "revision": "80c9771f61be41df5960319f218ab10e62682cba",
            "parents": [
                "d8e3c29a3b8626ed8072be4547a2bbcf7321c757"
            ],
            "ref": "refs/changes/74/47474/5",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1634770642,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/nbd_proxy.hpp",
                    "line": 260,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "There will be no error when compiling, because this file is not added to compile. But I think it is better to delete it. \nI have done it."
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "line": 305,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "Same as above"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "http/http_connection.hpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -21
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -15
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -10
                },
                {
                    "file": "include/async_resp.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -12
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -3
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/include/query.hpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/query_param.hpp",
                    "type": "ADDED",
                    "insertions": 139,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -4
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 254,
            "sizeDeletions": 81
        }
    ]
}