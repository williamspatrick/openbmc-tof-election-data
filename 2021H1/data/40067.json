{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I0a27ffb0090c4613e296af33d11e2e2657957167",
    "number": 40067,
    "subject": "http: utility: Add base64encode",
    "owner": {
        "name": "Adriana Kobylak",
        "email": "anoo@linux.ibm.com",
        "username": "anoo1"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/40067",
    "commitMessage": "http: utility: Add base64encode\n\nAdd the base64encode() function to be used to encode binary data\nto offload out of the BMC. Based on crow/utility.h, reworked for\nreadability.\n\nTested: Added unit test cases. Also verified data encoded with this\n        function was the same as the original binary when using\n        a decoder.\n\nChange-Id: I0a27ffb0090c4613e296af33d11e2e2657957167\nSigned-off-by: Adriana Kobylak <anoo@us.ibm.com>\n",
    "createdOn": 1611783768,
    "lastUpdated": 1612371832,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1611783768,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1611783794,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611784896,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11478/ : SUCCESS"
        },
        {
            "timestamp": 1611785614,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1611936242,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1611936269,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611936478,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1611936710,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/11619/ : FAILURE"
        },
        {
            "timestamp": 1611936990,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\nStrange, i didn't hit this warning/error when i ran CI locally.\n\n../http/utility.hpp:423:25: error: either cast from 'int' to 'size_t' (aka 'unsigned long') is ineffective, or there is loss of precision before the conversion [bugprone-misplaced-widening-cast,-warnings-as-errors]\n            *it++ = key[static_cast<size_t>(((data[i + 0] & 0x03) << 4) +\n                        ^"
        },
        {
            "timestamp": 1611946852,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1611946870,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611947894,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11631/ : SUCCESS"
        },
        {
            "timestamp": 1611948774,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 2:\n> \n> Strange, i didn't hit this warning/error when i ran CI locally.\n> \n> ../http/utility.hpp:423:25: error: either cast from 'int' to 'size_t' (aka 'unsigned long') is ineffective, or there is loss of precision before the conversion [bugprone-misplaced-widening-cast,-warnings-as-errors]\n>             *it++ = key[static_cast<size_t>(((data[i + 0] & 0x03) << 4) +\n>                         ^\n\nLocally you're building as 32 bit (probably) and the build server is building as 64 bit, hence this error."
        },
        {
            "timestamp": 1612028317,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(6 comments)"
        },
        {
            "timestamp": 1612205057,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1612205073,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612205524,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 4:\n\n(6 comments)"
        },
        {
            "timestamp": 1612206073,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11727/ : SUCCESS"
        },
        {
            "timestamp": 1612206243,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1612206466,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1612283585,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1612283598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612283699,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1612284592,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11804/ : SUCCESS"
        },
        {
            "timestamp": 1612311788,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1612369220,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1612369233,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1612369470,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1612370232,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11853/ : SUCCESS"
        },
        {
            "timestamp": 1612371828,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1612371832,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged by Ed Tanous"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "14b9a60b900ac449f16a956156d098f7921b786f",
            "parents": [
                "349a2ac3921e17ff0e2bce47ba6698112d586e67"
            ],
            "ref": "refs/changes/67/40067/1",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1611783768,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/utility.hpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "static isn't needed here."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 408,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering we have c++17 now, can we change this to be a std::string_view to be more clear.\n\nTechnically std::span<uint8_t> would be even more correct, but we haven't turned on c++ 20 yet."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 408,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Good point. Changed to string_view but left 'size' because the string .size()/.length() don't get the accurate size of the data because it's not really a string (yet), but binary data."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 410,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Having this as a param isn't really safe, as you're indexing into an array of unknown size at runtime.\n\nIn the past, this was only here for handling url safe base64, which I don't think anyone intends to do, and if they do, is a problem for another patchset.\n\nSo for now, please just inline it as a const std::array<char>"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 410,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Agree."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 422,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "is there any way to make this logic more clear?  as is, it's a bunch of hardcoded values, and anyone trying to read it just has their eyes hurt.\n\nI realize this isn't your fault, but this is kind of the reason we deleted it in the first place.  if we can get even incrementally better than what we had before, I'll be happy.\n\nSome ideas for cleaning this up;\n\nSeparate the postfix increments to their own line, so it++ and data++ line up more often, and it's clear we're incrementing both."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 422,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Agree. I reworked it to make it more readable."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "6ad7ce969d2af0d8fe8596f627a073643ede8c61",
            "parents": [
                "349a2ac3921e17ff0e2bce47ba6698112d586e67"
            ],
            "ref": "refs/changes/67/40067/2",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1611936242,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 44,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 44,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "e47bdeaf20706d764ebb249f34b4295955af746d",
            "parents": [
                "349a2ac3921e17ff0e2bce47ba6698112d586e67"
            ],
            "ref": "refs/changes/67/40067/3",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1611946852,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The redfish validator has nothing to do with this function."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Removed."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "why is size a separate param?  string view contains the size, we should use that."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is something that it would be great to get a couple minor unit tests for."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Agree. Added test cases."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Removed. I was passing char* to the function, which truncated the size when it'd found a 00 (null terminator)."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 409,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I would've expected this to be 64.... hence base64 encoding;  Any idea why it's not?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 409,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "I didn't find anything explicit, but I assume it's because it's a char array, it needs to be null terminated, so the size would be string + 1 if it's not. The compile error with 64 is:\n\n ../git/http/utility.hpp:410:9: error: initializer-string for 'std::__array_traits<char, 64>::_Type' {aka 'char [64]'} is too long [-fpermissive]\n|   410 |         \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"};\n|       |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 409,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I didn't find anything explicit, but I assume it's because it's a char array, it needs to be null terminated, so the size would be string + 1 if it's not. The compile error with 64 is:\n> \n>  ../git/http/utility.hpp:410:9: error: initializer-string for 'std::__array_traits<char, 64>::_Type' {aka 'char [64]'} is too long [-fpermissive]\n> |   410 |         \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"};\n> |       |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAH, that makes sense.  I suspect we just need to initialize it without using a char array literal, and instead use individual char literals.\n\nSomething like\n\n'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n\nSimilar to how we init the array on line 453"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 409,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Ah yes."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 419,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "i + 0?  Can't that just be i?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 419,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Leftover from the exercise of moving from postfix to index."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 423,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "extra parens (this happens in a bunch of places, please fix all of them.)"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 423,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Oops, leftovers from fixing the static_cast calls to work on 32/64 bit."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 44,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 44,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "69c66cf309f1c4c122c16fe7bc3e33da32c53bb4",
            "parents": [
                "349a2ac3921e17ff0e2bce47ba6698112d586e67"
            ],
            "ref": "refs/changes/67/40067/4",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1612205057,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/utility.hpp",
                    "line": 425,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit: can we turn these kinds of lookups into a temporary variable (something like size_t keyIndex).  That way, we're doing a lot less in a single line, which seems like a good thing."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 425,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Sure, makes sense."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 45,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 68,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "27a4468a72e006715c8fc975dacb7e1b9da010f0",
            "parents": [
                "6a9f85f9050e2c0f38148e295d7e25f56d05c6de"
            ],
            "ref": "refs/changes/67/40067/5",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1612283585,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just calling encode and decode isn't a great unit test for encode.  It might be a good one for testing that we can round trip through the protocol, but if both implementations are wrong, this doesn't really test for that.  We should be calling encode, and asserting against known good values in at least one test.\n\n\nExamples of similar asserts from the bouncy castle unit tests:\n\n   BASE64(\"\") = \"\"\n   BASE64(\"f\") = \"Zg==\"\n   BASE64(\"fo\") = \"Zm8=\"\n   BASE64(\"foo\") = \"Zm9v\"\n   BASE64(\"foob\") = \"Zm9vYg==\"\n   BASE64(\"fooba\") = \"Zm9vYmE=\"\n   BASE64(\"foobar\") = \"Zm9vYmFy\"\n\n\nI believe these would cover all cases in the base64 encoder."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Agree, added test to check against known values, and left the encoded/decoded round trip test for completeness."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not really following what this test is testing that the last test didn't test.  The last 4 lines are identical, so it seems like it's only really testing that you can construct a std::string from an istringstream, which isn't something we should really test, that's more for libc++ unit tests."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Done. Agree, it was indeed the same, but just a different way for constructing the string to mimic a file read, removed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 58,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 81,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "d830ff5aa48b2c39aac411162873239b235b0858",
            "parents": [
                "6a9f85f9050e2c0f38148e295d7e25f56d05c6de"
            ],
            "ref": "refs/changes/67/40067/6",
            "uploader": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "createdOn": 1612369220,
            "author": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 58,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 98,
            "sizeDeletions": 0
        }
    ]
}