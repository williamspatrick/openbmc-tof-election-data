{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "I577de2e10e4d5ccae6337c763b848ea4cf2121dd",
    "number": 49012,
    "subject": "slot: explicitly transfer pointer",
    "owner": {
        "name": "Patrick Williams",
        "email": "patrick@stwcx.xyz",
        "username": "williamspatrick"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/49012",
    "commitMessage": "slot: explicitly transfer pointer\n\nThe slot class is intended to be an RAII wrapper around the C-style\n`sd_bus_slot*`.  As part of the constructor it gets the pointer it is\nassuming ownership for.\n\nThe previous constructor took the `sd_bus_slot*` by value so it was\npossible that the caller still kept the slot rather than fully\ntransferring ownership.  Switch the constructor to an r-value reference\nso that the caller's pointer can be erased as part of the ownership\ntransfer.\n\nAlso, add an assignment operator to simplify the syntax when a slot is\nfirst initialized with `nullptr` and then later given ownership of a\nnewly constructed slot.\n\nWhile this is an incompatible constructor change, it is not expected to\naffect any current users.  The only example of referencing a\n`slot::slot` I could see in the current OpenBMC org calls the\nconstructor with a `nullptr`, which will seamlessly call the new r-value\nvariant.\n\nSigned-off-by: Patrick Williams <patrick@stwcx.xyz>\nChange-Id: I577de2e10e4d5ccae6337c763b848ea4cf2121dd\n",
    "createdOn": 1637356824,
    "lastUpdated": 1637667307,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1637356824,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1637356835,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637357499,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30601/ : SUCCESS"
        },
        {
            "timestamp": 1637579126,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1637586990,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1637587100,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1637607552,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1: Code-Review+2"
        },
        {
            "timestamp": 1637667307,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "a7ac313ce959bd1493b7fa5f80f4ba0cc445d687",
            "parents": [
                "ce90da1d9665a3a284e492008db113b8d4d34df2"
            ],
            "ref": "refs/changes/12/49012/1",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1637356824,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sdbusplus/message.hpp",
                    "line": 431,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Add a .get() method to the slot_t?"
                },
                {
                    "file": "include/sdbusplus/message.hpp",
                    "line": 431,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm going to add a `slot_friend` pattern like I did in bus so that we limit the scope of being able to call `slot.get()`."
                },
                {
                    "file": "include/sdbusplus/message.hpp",
                    "line": 431,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Oh.  I guess you have no idea what I'm talking about because I still have that commit locally.  Anyhow, will improve this in a follow-up."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/bus/match.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -6
                },
                {
                    "file": "include/sdbusplus/message.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -4
                },
                {
                    "file": "include/sdbusplus/server/interface.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sdbusplus/server/manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/slot.hpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": -4
                },
                {
                    "file": "src/server/interface.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 40,
            "sizeDeletions": 19
        }
    ]
}