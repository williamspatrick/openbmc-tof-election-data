{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "topic": "sensors_unit",
    "id": "I9d9c29ac1d0541ac87fef4ac957a94bfde002a88",
    "number": 36579,
    "subject": "add 'Unit' property for sensors",
    "owner": {
        "name": "Igor Kononenko",
        "email": "i.kononenko@yadro.com",
        "username": "ikmsk10"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36579",
    "commitMessage": "add 'Unit' property for sensors\n\nThe `xyz.openbmc_project.Sensor.Value` interface has 'Unit' property to\nrepresent sensor neasurement units. By held discussion [link #1] was\nagreed that the \"dbus-sensors\" should expose 'Unit' property into dbus.\n\nSuggested implementation not based on phosphor-dbus-interfaces library,\nnonetheless, still uses a related interface. To provide for all\nconsumers the expected value of target properties, has been hardcoded to\neach enum 'Unit' value.\n\nLinks:\n1.https://lists.ozlabs.org/pipermail/openbmc/2020-September/023128.html\n\nTested: getting target values by retrieving \"Unit\" property of the\nsensors on the YADRO VEGMAN sample:\n\nADCSensor:\n```\n$:~# busctl call xyz...ADCSensor /xyz.../voltage/P12V_AUX \\\norg...Properties Get ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Volts\";\n  };\n};\n```\n\nCPUSensor:\n```\n$:~#  busctl call xyz...CPUSensor \\\n/xyz.../power/Average_Power_Average_CPU0 org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Watts\";\n  };\n};\n\n$:~#  busctl call xyz...CPUSensor \\\n/xyz.../temperature/Die_CPU0 org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.DegreesC\";\n  };\n};\n```\n\nFanSensor:\n```\n$:~#  busctl call xyz...FanSensor \\\n/xyz.../fan_pwm/CPU0_FAN_PWM org...Properties\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Percent\";\n  };\n};\n\n$:~# busctl call xyz...FanSensor \\\n/xyz.../fan_tach/CPU0_FAN org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.RPMS\";\n  };\n};\n\n```\n\nHwmonTempSensor\n```\n$:~# busctl call xyz...HwmonTempSensor \\\n/xyz.../temperature/BMC_Temp org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.DegreesC\";\n  };\n};\n```\n\nIpmbSensor\n```\n$:~# busctl call xyz...IpmbSensor \\\n/xyz.../temperature/CPU1_VR_P1V8 org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.DegreesC\";\n  };\n};\n\n$:~# busctl call xyz...IpmbSensor \\\n/xyz.../utilization/Host_Cpu_Utilization org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Percent\";\n  };\n};\n```\n\nPSUSensor\n```\n$:~# busctl call xyz...PSUSensor \\\n/xyz.../current/PSU3_Input_Current org...Properties\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Amperes\";\n  };\n};\n\n$:~# busctl call xyz...PSUSensor \\\n/xyz.../fan_pwm/Pwm_PSU3_Fan_1 org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Percent\";\n  };\n};\n\n$:~# busctl call xyz...PSUSensor \\\n/xyz.../fan_tach/PSU3_Fan_Speed_1 org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.RPMS\";\n  };\n};\n\n$:~# busctl call xyz...PSUSensor \\\n/xyz.../power/PSU3_Input_Power org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Watts\";\n  };\n};\n\n$:~# busctl call xyz...PSUSensor \\\n/xyz.../temperature/PSU3_Temperature org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.DegreesC\";\n  };\n};\n\n$:~# busctl  call xyz...PSUSensor \\\n/xyz.../voltage/PSU3_Input_Voltage org...Properties \\\nGet ss \"...Value\" \"Unit\"\n\n{\n  Var{\n  \"...Value.Unit.Volts\";\n  };\n};\n```\n\nNot tested:\n* NVMeSensor\n* MCUTempSensor\n* IntrusionSensor\n* IpmbSensor:Power\n* IpmbSensor:Current\n* IpmbSensor:ADC\n\nSigned-off-by: Igor Kononenko <i.kononenko@yadro.com>\nSigned-off-by: Andrei Kartashev <a.kartashev@yadro.com>\nChange-Id: I9d9c29ac1d0541ac87fef4ac957a94bfde002a88\n",
    "createdOn": 1600352006,
    "lastUpdated": 1625680239,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1600352006,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1600352020,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1600352027,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4878/"
        },
        {
            "timestamp": 1600352042,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4878/ : FAILURE"
        },
        {
            "timestamp": 1600352060,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Topic set to sensors_unit"
        },
        {
            "timestamp": 1600352151,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 1:\n\nHello, I'd ask to do a code review"
        },
        {
            "timestamp": 1600457028,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1600463903,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1600516322,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1600528354,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1600708338,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1600734552,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1600734723,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1600734739,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1600734746,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4995/"
        },
        {
            "timestamp": 1600734838,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1600734889,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1600735061,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4995/ : FAILURE"
        },
        {
            "timestamp": 1600735260,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1600735274,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1600735281,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4996/"
        },
        {
            "timestamp": 1600735367,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4996/ : SUCCESS"
        },
        {
            "timestamp": 1600735931,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 4: Commit message was updated."
        },
        {
            "timestamp": 1600756694,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1600777186,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600790877,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600794193,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600794361,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600795477,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600876405,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1600878320,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1600888140,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600973646,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1601258588,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1601264858,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1601505288,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1601505300,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601505308,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5535/"
        },
        {
            "timestamp": 1601505393,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/5535/ : FAILURE"
        },
        {
            "timestamp": 1601508309,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1601508321,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601508328,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5544/"
        },
        {
            "timestamp": 1601508404,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5544/ : SUCCESS"
        },
        {
            "timestamp": 1601508523,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1601530558,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 6:\n\n(4 comments)"
        },
        {
            "timestamp": 1601546037,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1601548450,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1601548463,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601548471,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5569/"
        },
        {
            "timestamp": 1601548496,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 7:\n\n(4 comments)"
        },
        {
            "timestamp": 1601548579,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5569/ : SUCCESS"
        },
        {
            "timestamp": 1601548638,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1601548648,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601548656,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5570/"
        },
        {
            "timestamp": 1601548729,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5570/ : SUCCESS"
        },
        {
            "timestamp": 1601919466,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1601919515,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1602129221,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1602129234,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1602129241,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5937/"
        },
        {
            "timestamp": 1602129256,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/5937/ : FAILURE"
        },
        {
            "timestamp": 1602129288,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 9:\n\n(3 comments)"
        },
        {
            "timestamp": 1602129426,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1602129439,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1602129446,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5938/"
        },
        {
            "timestamp": 1602129515,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5938/ : SUCCESS"
        },
        {
            "timestamp": 1602130088,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(5 comments)"
        },
        {
            "timestamp": 1602139354,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 10:\n\n(5 comments)"
        },
        {
            "timestamp": 1602174535,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(4 comments)"
        },
        {
            "timestamp": 1602187940,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 10:\n\n(2 comments)"
        },
        {
            "timestamp": 1602188217,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1602532323,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1602549570,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1602594026,
            "reviewer": {
                "name": "Zbigniew Kurzynski",
                "email": "zbigniew.kurzynski@intel.com",
                "username": "zkurzyns"
            },
            "message": "Patch Set 10:\n\nAre there any sensors that reports their values with metric units, like miliWatts, microJules etc? \nIf there are any then how this change address them?"
        },
        {
            "timestamp": 1602594221,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 10:\n\n> Patch Set 10:\n> \n> Are there any sensors that reports their values with metric units, like miliWatts, microJules etc? \n> If there are any then how this change address them?\n\nAll units we have specified are Metric. Hopefully everything in this repository is already following that. \n\nThe metric units are always in the base metric value (such as Watts) but the value type is a double, so values like milliwatts  can be expressed."
        },
        {
            "timestamp": 1602595255,
            "reviewer": {
                "name": "Zbigniew Kurzynski",
                "email": "zbigniew.kurzynski@intel.com",
                "username": "zkurzyns"
            },
            "message": "Patch Set 10:\n\n> Patch Set 10:\n> \n> > Patch Set 10:\n> > \n> > Are there any sensors that reports their values with metric units, like miliWatts, microJules etc? \n> > If there are any then how this change address them?\n> \n> All units we have specified are Metric. Hopefully everything in this repository is already following that. \n> \n> The metric units are always in the base metric value (such as Watts) but the value type is a double, so values like milliwatts  can be expressed.\n\nSo if I would like to add a new sensor reading from a new hwmon file that holds value as miliWatts, then my sensor should scale these values to Watts to stay in compliance with the rest dbus sensors and this code change, right?"
        },
        {
            "timestamp": 1602623190,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n> Patch Set 10:\n> \n> > Patch Set 10:\n> > \n> > > Patch Set 10:\n> > > \n> > > Are there any sensors that reports their values with metric units, like miliWatts, microJules etc? \n\nI'm assuming you meant scientific units (units less than or greater than 1), not necessarily metric.  No, today everything is double float precision, and I'm not aware of anything that reads in \"milli\" or \"micro\" anything at the dbus level, nor would I recommend anyone add any.\n\n> > > If there are any then how this change address them?\n> > \n> > All units we have specified are Metric. Hopefully everything in this repository is already following that. \n\n+1.  With the exception of CFM, everything else is metric, and everything (including CFM) is 1s units based.\n\n> > \n> > The metric units are always in the base metric value (such as Watts) but the value type is a double, so values like milliwatts  can be expressed.\n> \n> So if I would like to add a new sensor reading from a new hwmon file that holds value as miliWatts, then my sensor should scale these values to Watts to stay in compliance with the rest dbus sensors and this code change, right?\n\nCorrect.  Lots of sensors do this today (hwmon temp sensor, psu sensor, ect).  I'd recommend looking at one of those for examples."
        },
        {
            "timestamp": 1602655853,
            "reviewer": {
                "name": "Zbigniew Kurzynski",
                "email": "zbigniew.kurzynski@intel.com",
                "username": "zkurzyns"
            },
            "message": "Patch Set 10:\n\n> Patch Set 10:\n> \n> > Patch Set 10:\n> > \n> > > Patch Set 10:\n> > > \n> > > > Patch Set 10:\n> > > > \n> > > > Are there any sensors that reports their values with metric units, like miliWatts, microJules etc? \n> \n> I'm assuming you meant scientific units (units less than or greater than 1), not necessarily metric.  No, today everything is double float precision, and I'm not aware of anything that reads in \"milli\" or \"micro\" anything at the dbus level, nor would I recommend anyone add any.\n> \n> > > > If there are any then how this change address them?\n> > > \n> > > All units we have specified are Metric. Hopefully everything in this repository is already following that. \n> \n> +1.  With the exception of CFM, everything else is metric, and everything (including CFM) is 1s units based.\n> \n> > > \n> > > The metric units are always in the base metric value (such as Watts) but the value type is a double, so values like milliwatts  can be expressed.\n> > \n> > So if I would like to add a new sensor reading from a new hwmon file that holds value as miliWatts, then my sensor should scale these values to Watts to stay in compliance with the rest dbus sensors and this code change, right?\n> \n> Correct.  Lots of sensors do this today (hwmon temp sensor, psu sensor, ect).  I'd recommend looking at one of those for examples.\n\nThank you for comprehensive response, now it is clear to me and these changes seems to go into right direction."
        },
        {
            "timestamp": 1602656272,
            "reviewer": {
                "name": "Zbigniew Kurzynski",
                "email": "zbigniew.kurzynski@intel.com",
                "username": "zkurzyns"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1602658140,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 10:\n\n> +1.  With the exception of CFM, everything else is metric, and everything (including CFM) is 1s units based.\n\nnit: RPM and CFM are 1m-based units, not 1s, isn't it?"
        },
        {
            "timestamp": 1612594980,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\nis this patchset still being worked?"
        },
        {
            "timestamp": 1612646111,
            "reviewer": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "message": "Patch Set 10:\n\n> Patch Set 10:\n> \n> is this patchset still being worked?\n\nEd,\nI apologize for the lack of activity for a long time. \nI had many critical internal tasks. I will try to publish a patch resolving the problem as soon as possible."
        },
        {
            "timestamp": 1614003250,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 10:\n\nI've now added CFM."
        },
        {
            "timestamp": 1616632607,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 10:\n\nIf it's of interest, I've tested this patch on my in-progress e3c246d4i port and found it useful (it obviates the need for a morally-equivalent but uglier patch I've been carrying locally for a while).  Any chance of this getting polished off & merged?"
        },
        {
            "timestamp": 1616714781,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n> Patch Set 10:\n> \n> If it's of interest, I've tested this patch on my in-progress e3c246d4i port and found it useful (it obviates the need for a morally-equivalent but uglier patch I've been carrying locally for a while).  Any chance of this getting polished off & merged?\n\nIt's just waiting for someone to do the work.  Feel free to take it on if it's something useful to you.  I have no objections to this as a feature, just needs comments addressed and tested."
        },
        {
            "timestamp": 1616800713,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1616800729,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616800794,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/14444/ : FAILURE"
        },
        {
            "timestamp": 1616800968,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 11:\n\n> Patch Set 10:\n> \n> > Patch Set 10:\n> > \n> > If it's of interest, I've tested this patch on my in-progress e3c246d4i port and found it useful (it obviates the need for a morally-equivalent but uglier patch I've been carrying locally for a while).  Any chance of this getting polished off & merged?\n> \n> It's just waiting for someone to do the work.  Feel free to take it on if it's something useful to you.  I have no objections to this as a feature, just needs comments addressed and tested.\n\nI rebase the changeset and bit refactor it according actual codebase. However I didn't carefully read comments so probably there are still things to do."
        },
        {
            "timestamp": 1616801063,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1616801077,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1616801301,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/14445/ : SUCCESS"
        },
        {
            "timestamp": 1616964552,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n> Patch Set 11:\n> \n> > Patch Set 10:\n> > \n> > > Patch Set 10:\n> > > \n> > > If it's of interest, I've tested this patch on my in-progress e3c246d4i port and found it useful (it obviates the need for a morally-equivalent but uglier patch I've been carrying locally for a while).  Any chance of this getting polished off & merged?\n> > \n> > It's just waiting for someone to do the work.  Feel free to take it on if it's something useful to you.  I have no objections to this as a feature, just needs comments addressed and tested.\n> \n> I rebase the changeset and bit refactor it according actual codebase. However I didn't carefully read comments so probably there are still things to do.\n\nI'm somewhat ignoring this patch at the moment.  Whomever decides to take it on, please leave a comment or ping me on discord when you're ready for me to review it again."
        },
        {
            "timestamp": 1625679970,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Abandoned\n\nDoesn't seem to be being worked anymore.  If anyone is still working on this, feel free to reopen."
        },
        {
            "timestamp": 1625680239,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 12:\n\nFor future reference, I believe this was obviated by https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/42567"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1fdaa226573e5c405383fd31d6990b13cddae557",
            "parents": [
                "484b9b37530a52f10a606abff23b345a4ec6ab2a"
            ],
            "ref": "refs/changes/79/36579/1",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1600352006,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If we're going to impose this new dependency, we should really be consistent.  We expose a number of APIs in dbus-sensors that aren't pulled from phosphor-dbus-interfaces.  For better or worse, that insulates dbus-sensors somewhat from breaking API changes that have happened on sensors in the past.\n\nIf we're going to go this route (which I'm not convinced is the right way) I'd rather we be consistent about it, and use phosphor-dbus-interfaces for all our interfaces, not just this new one.\n\nUnfortunately, that would be a lot of work, and would involve reworking a lot of phosphor-dbus-interfaces to be more IO aware, which I'm guessing you don't want to do.\n\nSo in this case, I'm going to recommend doing what we've done in similar cases, by simply adding the direct string values as the \"unit\" and passing that value around (as either a std::string or a const char*).  That drops the dependency on phosphor-dbus-interfaces again, and would simplify dbus-sensors as a whole."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Ed,\nIf I understood correctly, you're tolking about using the hardcoding const stings, like\n\n``` \nconstexpr char * volts = \"xyz.openbmc_project.Sensor.Value.Unit.Volts\";\n```\n\nOk, I'm ready suggest a new patch set with following the recommendations for redressing the shortcomings identified, if there is no anybody objection. \n\nThanks."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "I prefer we use phosphor-dbus-interfaces everywhere we can: that is how it suppose to work, isn't it?\nBut if this is lit of refactoring, this should be separate patchset."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Igor, yes.  In this case, I suspect they might be inlined into each sensor, but I haven't actually tried it, so I'm not sure how it ends up.\n\nAndrei,\n\nToday, dbus-sensors doesn't use phosphor-dbus-interfaces.  It was found to be a hindrance on development, and overall didn't provide the abstractions that dbus-sensors needed.  With that said, if you think it should, I'm happy to have that discussion, especially if you're willing to put up the patchsets to move all of our APIs over to phosphor-dbus-interfaces, but that would very likely be outside the scope of this patch.  As is, having a single enum is not worth the dependency IMO."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "I'm with Ed on this one, I'd prefer just to hardcode the string. Something like prefix = \"xyz.openbmc_project.Sensor.Value.Unit.\" then you can just register \"Volts\" or something would make it pretty simple."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Ok, I'm was finish changing patch's ideology into hardcoded sensors value metrics.\nI must say, to be noticed at point, that using in dbus-sensors the interface \"xyz.openbmc_project.Sensor.Value\" still stay unhonest and continue gets bungles, because, for example, along with the present suggested patch coming changes that adds capability of CFMSensor to use \"xyz.openbmc_project.Sensor.Value.Unit.CFM\" unit metric. But phosphor-dbus-interface not provide this enum-value yet.\n\nIn future, we may well have setbacks if the phosphor-dbus-interface will be changed and in dbus-sensors this be unnoticed. This will be surprise for each dbus-consumers who'd want to request Unit-property from a sensor, right?"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ed, may I know what was the problem pushed you to not use phosphor-dbus-interfaces from the beginning?"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "If there are problems with phosphor-dbus-interfaces we should make Patrick aware - I think he is keen to put the time into it to get them resolved so we can move past this never-ending conversation about dbus frameworks."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Igor,\nBecause you took it to a level above Units;  If you want to use phosphor-dbus-interfaces in dbus-sensors, I'd probably be ok with that, and it seems like the right thing long term, but implementing a single property using it seems like we're half relying on phosphor-dbus-interface, and I'd rather not pull in the dependency for a single property.  If we're going to make the move over, I'd like to see it done in a more coordinated manner.\n\n\nBrad,\nWe can certainly talk about it.  Off the top of my head from what I remember from a couple years back.\n1. Doesn't support async models, or delaying the return of a method call/property while another action completes.\n2. Doesn't support optional not-known-at-compile-time interfaces without generating every possible combination of interfaces in templates.\n3. Generated code is quite complex to read and debug\n4. The dbus \"object\" structures rely on inheritance and overridden functions, which are foreign to many embedded programmers.\n5. Doesn't support handling multiple responses in parallel.\n6. Relies on python with specific modules to function, making it much harder to build code out of the yocto tree for projects that have utility outside of OpenBMC\n7. Can change interfaces and enums \"silently\" without a review in the relevant daemon to add support for a new parameter.  (ex. a uint32 to int64 could cause an overflow, and needs re-reviewed).\n8. No mechanism for supporting optional enum states (ie, platform A supports PowerCycle, Platform B does not).\n9. Usage of exceptions in non-exceptional cases make code review, and writing correct code very difficult.  An option for return codes would be a significant improvement.\n10. Separates the implementation from the interface in a way that fewer people review the implementation."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Thanks for the list Ed.  Would you mind if I copy/pasted it in a note to the list?  It probably doesn't make sense to have the discussion here."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sure.  If you want, I can type up an email with more details and links on each (might take me a day or two).  Up to you if you just want to get the discussion started."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> Sure.  If you want, I can type up an email with more details and links on each (might take me a day or two).\n\nThis would be great Ed, thank you.  I'm in no rush, so whenever you get around to it is fine."
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "line": 164,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Don't like this kind of stubs. I prefer you to put CFM from the beginning and just wait until corresponding commit to phopsphor-dbus-interface is merged."
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "line": 164,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 193,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 81,
            "sizeDeletions": 17
        },
        {
            "number": 2,
            "revision": "10c267e778126d59c8ea973e65b201bb5fb072df",
            "parents": [
                "484b9b37530a52f10a606abff23b345a4ec6ab2a"
            ],
            "ref": "refs/changes/79/36579/2",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1600734723,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 196,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 17
        },
        {
            "number": 3,
            "revision": "9f481415d3fab82da26a1da7e25cdae70dfee8ec",
            "parents": [
                "484b9b37530a52f10a606abff23b345a4ec6ab2a"
            ],
            "ref": "refs/changes/79/36579/3",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1600735260,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 196,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 17
        },
        {
            "number": 4,
            "revision": "237a14885e53e31e9800e1684e5521f3d5577084",
            "parents": [
                "484b9b37530a52f10a606abff23b345a4ec6ab2a"
            ],
            "ref": "refs/changes/79/36579/4",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1600735931,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "include/sensor.hpp",
                    "line": 49,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "suggest to use convertForMessage or convertModesToString function from the D-bus interfaces. Atleast in that way, these values defined in the phosphor-dbus-interfaces will be getting used directly."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 49,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't.  One enum is not worth the dependency on phosphor-dbus-interfaces.\n\nI'm happy to have the \"why doesn't dbus-sensors use phosphor-dbus-interfaces\" discussion, but not as part of this patch."
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Are all ipmb sensors temperature sensors? I see different subtypes, like current, power, voltage for example(line 174)"
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Yes, Ipmb provides different sensors types. Below, will be redefining `sensor->sensorUnit`, but by defailt will be using `Sensor::Unit::DegreesC`. This behavir comming from ideology that when sensors type are defines then in else-cases will be using\n```\nelse\n{\nsensor->subType = IpmbSubType::temp;\n... \n}\n```\n(line 507)"
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "line": 72,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Ack. Sorry, I missed those changes below"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 834,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: If this can be combined into sensorTable, it will be easier to maintain when new type needs to be added"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 834,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Yep, I got it. I'll combined unit-metrics with it sensors here.\nThanks."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 834,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "Pwm is not volts.. should be percent"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "My bad, I'll fix this"
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "line": 61,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 191,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -1
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 17
        },
        {
            "number": 5,
            "revision": "300e51245cd0f9fa37a2e5d919e87e7f8ff69cd8",
            "parents": [
                "dbfd4667b2a53493bb6889a02a74e445ce3a50e9"
            ],
            "ref": "refs/changes/79/36579/5",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1601505288,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -8
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 70,
            "sizeDeletions": 24
        },
        {
            "number": 6,
            "revision": "d7863c1e22a2f8a9746a9244853cf9d644ec05d6",
            "parents": [
                "dbfd4667b2a53493bb6889a02a74e445ce3a50e9"
            ],
            "ref": "refs/changes/79/36579/6",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1601508309,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "I'd say \"add 'Unit' property for sensors\""
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "remove 'be'"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Keep it simple:\nall 'Unit' values are hardcoded\n)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Sorry, but what? It's better to not set interface at all then to set wrong value without any FIXME warnings."
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "I'll just keep here \"CFM\" metric unit. The transition to the m^3/s or L/s should be a separate change."
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "line": 169,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -10
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 73,
            "sizeDeletions": 26
        },
        {
            "number": 7,
            "revision": "33709c947cd6eca1416309cb9e07c781ce248ca7",
            "parents": [
                "dbfd4667b2a53493bb6889a02a74e445ce3a50e9"
            ],
            "ref": "refs/changes/79/36579/7",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1601548450,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -10
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 26
        },
        {
            "number": 8,
            "revision": "145e43f0c9921c46df20049e0e0cbffc8c4913ab",
            "parents": [
                "dbfd4667b2a53493bb6889a02a74e445ce3a50e9"
            ],
            "ref": "refs/changes/79/36579/8",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1601548638,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "string view is normally passed by value as its considered small"
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "by value"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "by value"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -10
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 26
        },
        {
            "number": 9,
            "revision": "f518bcd53a45cb5aa684cd411f713e7a315289d7",
            "parents": [
                "dbfd4667b2a53493bb6889a02a74e445ce3a50e9"
            ],
            "ref": "refs/changes/79/36579/9",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1602129221,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -10
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 26
        },
        {
            "number": 10,
            "revision": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
            "parents": [
                "dbfd4667b2a53493bb6889a02a74e445ce3a50e9"
            ],
            "ref": "refs/changes/79/36579/10",
            "uploader": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "createdOn": 1602129426,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "const please."
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Are you sure that const object of string_view is necessary? I'd say when using reference to object the `const` is welcome. The std::string_view already allows only reading operation the string value. May I ask to check again to be sure, thanks"
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I guess that's a good point.  Sure, fine as-is."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please check out COMMON_ERRORS.md  This is one of them."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Sure, I got it, thanks"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't like that on some sensors we're constructing with one type, then changing it in the constructor.  Overall, I'd really like it if dbus-sensors used composition, not inheritance, but I'm guessing you don't want to do that kind of rework.\n\nI wonder if it would make sense to move the unit into the \"setInitialProperties\" method, so implementations can select it at will, and we're not adjusting it mid-construction."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "I'm not sure that changing of sensorUnit property at construct object stage is only one problem. Let's look to initializing `interfacePath` by type or adjust thresholds, even in CPUSensor case. I'm think that change of sesnorUnit is small of many evils, because by natural of self, this is must be the CPU sensor, but with a large of wish a can't name it so. Follow of saing, on the half way to construct CPU object we having change sensorUnit by incoming type which change a purpose of the entire object. \n\nSummary, I'm sure that described changes are part of the not-well design OOP. \nNote: I am ready to do work in this direction, if we can define an entrypoint for that."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I'm not sure that changing of sensorUnit property at construct object stage is only one problem. Let's look to initializing `interfacePath` by type or adjust thresholds, even in CPUSensor case. I'm think that change of sesnorUnit is small of many evils, because by natural of self, this is must be the CPU sensor, but with a large of wish a can't name it so. Follow of saing, on the half way to construct CPU object we having change sensorUnit by incoming type which change a purpose of the entire object. \n> \n> Summary, I'm sure that described changes are part of the not-well design OOP. \n> Note: I am ready to do work in this direction, if we can define an entrypoint for that.\n\nThe other thought I had: what if we removed it from the Sensor constructor, and just made it a protected member that's set during the derived constructor.  Then:\n1. The Sensor constructor gets smaller (it's already too big).\n2. We're being consistent in every sensor about where we set units.\n3. We don't have to do a major refactor.\n\n\nWhat do you think?"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "I'm not sure that is possible without a big rework. And here is some of reason:\nSome parts of code change behavior and purpose of the sensor(I mean the sensor as class), e.g. IPMB, PSU, CPU. To keep the contract for the particular sensor, after the object was constructed also changes the sensorType, sensorSubType(side note, indirectly defines the sensor value meaning , also as for \"Unit') properties. That is meaning that to use it as protected, we will need to define abstractions extended from the basic Sensor class. This requires some work.\nFor this patch I'd suggest to keep defining \"Unit\" property as-is. \n\nI'll keep bellow some code reference to show of described points\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36579/10/src/IpmbSensor.cpp#486"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Saying \"we will need to define abstractions extended from the basic Sensor class\", I does mean something like:\n\n* `abstract sensor -> IpmbSensor-> IpmbPowerSensor`\n* `abstract sensor -> IpmbSensor-> IpmbCurrentSensor`\n*  etc"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Part of the problem is that sensors (services) are grouped (categorized) by how it is read (data source) in a sense: ADC reads from ADC registers, Hwmon Sysfs, IPMB bus etc. But sensor can also be sub-classed into what it measures (unit fits in here): temp, voltage, power, fan speed etc.  I agree refactor Sensors to use composition can make the code cleaner. But it is not going to be a small change. Maybe we can take steps that direction by first abstract out \"SensorData\", which has value, unit and measure (temp, power, current, voltage etc) and make Sensor has-a SensorData."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What I mean is remove that from the constructor of Sensor, then have a public member variable that must be set during the constructor.  It doesn't significantly change your patch, just adds a couple lines, and makes the construction of sensors more regular.  If you're still not sure what I mean, I can branch from your patch and show you.\n\nI really would rather we don't have an inheritance model with sensors at all.  \"Sensor\" as a class is meant to encapsulate the dbus portions of sensors, but was extended to do more and more over time.  Long term, I think we need to walk that back a little.\n\nWith that said, I did put together a patch that moves a sensor from inheritance to composition, which I think cleans up the code some, and explicitly documents which portions are a \"Sensor\" and which portions are not.  I'd appreciate your thoughts if you got a chance to look at it.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/37313"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Zbigniew Kurzynski",
                        "email": "zbigniew.kurzynski@intel.com",
                        "username": "zkurzyns"
                    },
                    "message": "Look at this change https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/37255.\nI am adding here a support for a new CPU sensor and decided to remove these  `if type` from the constructor to the main file (similar to PSUSensor). \nConstructor is now type independent and units could be added to the SensorProperties structure then."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please just inline these to improve the clarity."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "I was thinking that using aliases by \"using\" directive adds more clearly a meaning of a declaring type. But, ok, I'll change to inline std::string_view, if your wish, Thanks"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As a general rule, it obfuscates the actual type, and provides negligible safety.  IMO you're better off letting your variable name describe your type."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please make this a proper struct.  Tuple is not necessary here."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "What is bad to use the tuple in this case. Should I implement real struct or can use a std::pair? I'm not end-understand this remark"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Tuple is generally used when you need do do some template-level introspection on your data type, or want to use some of its base features to reduce code, like std::equals overloads.  Same thing (to a much lesser extent) with std::pair.  Because of the nature of tuple, it also means that the code gets peppered with:\n\nstd::get<0>(mySensor);\ncalls in a lot of places.  0 is a magic number, and needs looked up when reading the code to find the type.\n\nIf this were a struct, it would be\n\nstruct SensorMetadata{\n    std::string type;\n    std::string unit;\n}\n\nWhich means the code that uses it calls:\n\nmySensor.type;\nWhich is much more clear than the std::get equivalent."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Igor Kononenko",
                        "email": "i.kononenko@yadro.com",
                        "username": "ikmsk10"
                    },
                    "message": "Yes, I'm not like these idioma too\n> std::get<0>(mySensor);\nBut with `Using SensortType = std::string_view` we take the way to explicitly retrieve target value from std::tuple, like \n```\nusing SensorType = std::string;\nusing SensorUnit = std::string_view;\n...\nstd::get<SensorType>(...);\nstd::get<SensorUnit>(...);\n```\nOk, I\u2019ll change it to the native cpp struct definition. Thanks for clarification of kind using std::tuple!"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -10
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 75,
            "sizeDeletions": 26
        },
        {
            "number": 11,
            "revision": "1ba70bb804d684d36be9ea044b215ef82968ba5f",
            "parents": [
                "373225765ec76e358d11b2ee58488a72fc6c446e"
            ],
            "ref": "refs/changes/79/36579/11",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1616800713,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "include/SensorPaths.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -10
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -9
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -9
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/SensorPaths.cpp",
                    "type": "MODIFIED",
                    "insertions": 62,
                    "deletions": -9
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 156,
            "sizeDeletions": 55
        },
        {
            "number": 12,
            "revision": "865ef2a4ccb6054f7a2e58400ce85d85c9c01e7a",
            "parents": [
                "373225765ec76e358d11b2ee58488a72fc6c446e"
            ],
            "ref": "refs/changes/79/36579/12",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1616801063,
            "author": {
                "name": "Igor Kononenko",
                "email": "i.kononenko@yadro.com",
                "username": "ikmsk10"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 192,
                    "deletions": 0
                },
                {
                    "file": "include/ExternalSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -3
                },
                {
                    "file": "include/SensorPaths.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/ExternalSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -10
                },
                {
                    "file": "src/ExternalSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -9
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -9
                },
                {
                    "file": "src/PwmSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/SensorPaths.cpp",
                    "type": "MODIFIED",
                    "insertions": 62,
                    "deletions": -9
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 158,
            "sizeDeletions": 57
        }
    ]
}