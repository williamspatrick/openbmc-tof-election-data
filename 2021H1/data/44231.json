{
    "project": "openbmc/phosphor-host-ipmid",
    "branch": "master",
    "topic": "bootOverride",
    "id": "Iecfc75c734a34f63b0485f859ce87f06566bd749",
    "number": 44231,
    "subject": "Support new boot override setting design",
    "owner": {
        "name": "Konstantin Aladyshev",
        "email": "aladyshev22@gmail.com",
        "username": "Kostr"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/44231",
    "commitMessage": "Support new boot override setting design\n\nAdd support for the new boot override setting design that was\npushed in this commit:\n\"phosphor-settings-manager: redesign boot setting override feature\"\n(https://gerrit.openbmc-project.xyz/c/openbmc/openbmc/+/44226)\nThe new design not only simplifies boot override settings handling,\nbut also adds support for the invalidation of \"boot flags valid\"\nbit.\n\nSigned-off-by: Konstantin Aladyshev <aladyshev22@gmail.com>\nChange-Id: Iecfc75c734a34f63b0485f859ce87f06566bd749\nSigned-off-by: Konstantin Aladyshev <aladyshev22@gmail.com>\n",
    "createdOn": 1624025045,
    "lastUpdated": 1627576045,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1624025045,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1624025057,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624025849,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20126/ : SUCCESS"
        },
        {
            "timestamp": 1624290085,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 2: Commit message was updated."
        },
        {
            "timestamp": 1624291343,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\nHello!\nPlease review this change that is a part of a redesign of a boot source override feature:\nhttps://gerrit.openbmc-project.xyz/q/topic:%22bootOverride%22\n\nAll the problems with the last realization was discussed in a mailing list letter:\nhttps://lists.ozlabs.org/pipermail/openbmc/2021-May/026533.html"
        },
        {
            "timestamp": 1626847097,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(2 comments)\n\nOverall this simplifies the boot option settings, so it is good.\n\nBut some comments need to be resolved, especially it should not change the previous logic of getting service, it should *only* change the logic related to boot option settings."
        },
        {
            "timestamp": 1626857491,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1626908455,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1626944129,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1627335911,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1627472724,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1627472740,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1627472922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23066/ : SUCCESS"
        },
        {
            "timestamp": 1627473351,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 3:\n\n(2 comments)\n\nI've used `getService` yielding method to get the service name. \nAs this have complicated the code, I've decided to create functions around all `getDbusProperty` calls as it was done for the `setDbusProperty` calls.\nAlso I've created getter/setter functions for the one_time enable property and for the overall boot override enabled property.\nI think it have simplified main `ipmiChassisGetSysBootOptions` and `ipmiChassisSetSysBootOptions` functions and made them more clear"
        },
        {
            "timestamp": 1627516140,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)\n\nOverall, I don't think this change has complicated the code. The change was very easy to read and understand."
        },
        {
            "timestamp": 1627537416,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1627545233,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1627545255,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1627545432,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23142/ : SUCCESS"
        },
        {
            "timestamp": 1627546029,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1627571550,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 4: Code-Review+2"
        },
        {
            "timestamp": 1627571556,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Change has been successfully rebased and submitted as 69e8e84d53f838ca774564c0f248e637397d501c by Vernon Mauery"
        },
        {
            "timestamp": 1627576045,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Created a revert of this change as I84149fe1f5913fc78e3cc1a129da8285d7fe6111"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "acfad678814e4efd40a4ed92fe99f143d3d24ee6",
            "parents": [
                "7fd91fa260a4c56448b46ae2735a0dd84e78225e"
            ],
            "ref": "refs/changes/31/44231/1",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1624025045,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "chassishandler.cpp",
                    "type": "MODIFIED",
                    "insertions": 84,
                    "deletions": -102
                }
            ],
            "sizeInsertions": 84,
            "sizeDeletions": 102
        },
        {
            "number": 2,
            "revision": "01a1860a0e464f0ea8ab93504d7ea4e15ac2efce",
            "parents": [
                "7fd91fa260a4c56448b46ae2735a0dd84e78225e"
            ],
            "ref": "refs/changes/31/44231/2",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1624290085,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "chassishandler.cpp",
                    "line": 1635,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Do not hard code the service name, get the service name as before.\nAlso apply to all other places."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1635,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "To be honest I was glad that I could get rig of all this `settings::boot::setting` code. It was always somewhat cryptic to me.\nWhy do you think it is necessary?\nAlso I don't believe that it would work now, as now there are only one BootSource/BootMode/BootType object on a Dbus.\nAnd the settings code checks for 2 objects:\nhttps://github.com/openbmc/phosphor-host-ipmid/blob/master/settings.cpp#L104\n```\nstd::tuple<Path, OneTimeEnabled> setting(const Objects& objects,\n                                         const Interface& iface)\n{\n    constexpr auto bootObjCount = 2;\n\n    const std::vector<Path>& paths = objects.map.at(iface);\n    auto count = paths.size();\n    if (count != bootObjCount)\n    {\n        log<level::ERR>(\"Exactly two objects expected\",\n                        entry(\"INTERFACE=%s\", iface.c_str()),\n                        entry(\"COUNT=%d\", count));\n        elog<InternalFailure>();\n    }\n```"
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1635,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "At the very least the handler should look up the service so that other services can offer the interface too. The call to the mapper is abstracted here by the settings::boot::setting stuff (which I agree is annoying, but only because it is not used in other places), but the idea is that the interface is fixed, but the provider can be replaced."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1635,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1680,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I do not think you should change this logic. The previous code already handles the case by try-catch on getting the service."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1680,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "The `ipmi::setDbusProperty(ctx,` do not throw. As for the getting the service name, please check discussion above"
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1680,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "the yielding variant does not throw, but it does return an error, which should be handled."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1680,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "In this particular case BootType interface is optional.\nIt can be present on the BMCs for the systems based on x86 arch CPUs, and absent on the BMCs for the systems based on POWER arch CPUs.\nSo it is not possible to say if the error was caused by the absent interface (which is intendend by design) or by some other reason.\nTherefore we've ignored exception before this patch and don't handle error with this patch.\n\nSimilar functions for the mandatory interfaces (BootMode/BootSource) handle error case."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1680,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "chassishandler.cpp",
                    "type": "MODIFIED",
                    "insertions": 84,
                    "deletions": -102
                }
            ],
            "sizeInsertions": 84,
            "sizeDeletions": 102
        },
        {
            "number": 3,
            "revision": "bde9df61ada21317bbf26fb872597a4608759847",
            "parents": [
                "d6d567a57192443a3607834f1fd0b2dac069d704"
            ],
            "ref": "refs/changes/31/44231/3",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1627472724,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "chassishandler.cpp",
                    "line": 1642,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I do not think you need to use this function here, instead, use\n\n std::string getService(sdbusplus::bus::bus& bus, const std::string& intf, const std::string& path)\n\nto make a sync call to get the service.\n\nBecause the previous code was using the sync calls, it's a bit weird to use async calls here."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1645,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The same as above, use the sync version."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 1645,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Why? The ctx (context pointer) is already here in every function. So it is even easier to use the async versions. I didn't add it in this patch, it was already here before that.\nMoreover I were even asked to do it when I've first implemented boot type handle (\"chassishandler: Add support for boot type flag (Legacy/EFI)\" https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40900) and I did that in a \"chassishandler: Refactor get/set boot parameters code\" (https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/41413).\nAlso I was asked to use yielding calls in my separate commit \"sensorhandler: Don't fail on absent Threshold.Warning interface\" (https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/43136)\nSo I've got an understanding that yielding versions are preferred to use. I guess it is because they do not throw, but return an error code. Because of that we can get rid of all the try/catch statements."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 2153,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "return ipmi::response(rc);\n\nThis way, the function can return more than just unspecified (like timout or something)."
                },
                {
                    "file": "chassishandler.cpp",
                    "line": 2153,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done. Also I've spotted a few places where function return codes weren't checked and have added necessary checks for them as well."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "chassishandler.cpp",
                    "type": "MODIFIED",
                    "insertions": 276,
                    "deletions": -133
                }
            ],
            "sizeInsertions": 276,
            "sizeDeletions": 133
        },
        {
            "number": 4,
            "revision": "8f2bdf7ed55151e4a66abfa88eb0c92af60739eb",
            "parents": [
                "d6d567a57192443a3607834f1fd0b2dac069d704"
            ],
            "ref": "refs/changes/31/44231/4",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1627545233,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "chassishandler.cpp",
                    "type": "MODIFIED",
                    "insertions": 288,
                    "deletions": -137
                }
            ],
            "sizeInsertions": 288,
            "sizeDeletions": 137
        },
        {
            "number": 5,
            "revision": "69e8e84d53f838ca774564c0f248e637397d501c",
            "parents": [
                "ac20852a152142ea8d7ed4c646ff46ab493ea247"
            ],
            "ref": "refs/changes/31/44231/5",
            "uploader": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "createdOn": 1627571556,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "chassishandler.cpp",
                    "type": "MODIFIED",
                    "insertions": 288,
                    "deletions": -137
                }
            ],
            "sizeInsertions": 288,
            "sizeDeletions": 137
        }
    ]
}