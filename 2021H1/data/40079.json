{
    "project": "openbmc/libmctp",
    "branch": "master",
    "topic": "constructed",
    "id": "I00d563cd91f718e695ed28d2b9978fc38566c4ae",
    "number": 40079,
    "subject": "core: Validate binding MTU before allowing transmission",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@aj.id.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/libmctp/+/40079",
    "commitMessage": "core: Validate binding MTU before allowing transmission\n\nDon't accept MTU values like 0, which will cause the packetisation loop\nto fail in unacceptable ways (OOM).\n\nSigned-off-by: Andrew Jeffery <andrew@aj.id.au>\nChange-Id: I00d563cd91f718e695ed28d2b9978fc38566c4ae\n",
    "createdOn": 1611817165,
    "lastUpdated": 1611894177,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1611817165,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1611817192,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611817352,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11495/ : SUCCESS"
        },
        {
            "timestamp": 1611879521,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(1 comment)\n\nI'm fine with this as-is, just one comment though."
        },
        {
            "timestamp": 1611880250,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611880592,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611883941,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611884360,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611884956,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1611890488,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1611890504,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611890591,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11562/ : SUCCESS"
        },
        {
            "timestamp": 1611892272,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 2: Code-Review+2"
        },
        {
            "timestamp": 1611894177,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Change has been successfully merged by Andrew Jeffery"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "33cb5181ace7f1d0b0b797b162e3f96926b87381",
            "parents": [
                "209f80a383e72290c844d2a88fdd5a3d05874bea"
            ],
            "ref": "refs/changes/79/40079/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1611817165,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "core.c",
                    "line": 618,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Might be a contender for mctp_prerr(). Is there anything useful we can do here, perhaps changing binding state? I can see this resulting in floods of messages."
                },
                {
                    "file": "core.c",
                    "line": 618,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Good point. I guess we could do this?\n\n mctp_binding_set_tx_enable(bus->binding, false);"
                },
                {
                    "file": "core.c",
                    "line": 618,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "That's a little inconsistent with the existing control flow - the bindings themselves are usually responsible for setting tx state, and there wouldn't be a mechanism for them to re-enable it.\n\nThis would only be triggered by a bug in the binding, right? (having tx enabled with an invalid MTU). We could even assert()..."
                },
                {
                    "file": "core.c",
                    "line": 618,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> That's a little inconsistent with the existing control flow - the bindings themselves are usually responsible for setting tx state, and there wouldn't be a mechanism for them to re-enable it.\n\nRight, but how exactly *would* they recover from it? They'd need to fix the MTU, and it's not obvious to me *how* the binding should determine this needs to happen, other than it should never happen in the first place.\n\n> This would only be triggered by a bug in the binding, right? (having tx enabled with an invalid MTU). We could even assert()...\n\nWell, is asserting wise for bindings which can negotiate the value at runtime? I guess what's still going for assert() is that if the binding managed to negotiate a value below the BTU then it's still a bug in the binding, but asserting here still makes me a little nervous."
                },
                {
                    "file": "core.c",
                    "line": 618,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Yep, I think that's a valid concern. Maybe set_tx_enabled() could log, and refuse to enable if < MCTP_BTU, and then we assert here (given that this assert should no longer be reachable). Would that work?"
                },
                {
                    "file": "core.c",
                    "line": 618,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yeah, that sounds like it should work. Let me put something together."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 5,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "1fa707e2daf950368900ba08815f305007d8de08",
            "parents": [
                "c61501cc9242a1f5fabc5051b7d5ad532126c04c"
            ],
            "ref": "refs/changes/79/40079/2",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1611890488,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 15,
            "sizeDeletions": 1
        }
    ]
}