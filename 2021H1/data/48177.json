{
    "project": "openbmc/openbmc-build-scripts",
    "branch": "master",
    "id": "If2f03aab86db953187a5ca8f3828263582d56712",
    "number": 48177,
    "subject": "eslint: Ignore the meson-* & subprojects folder in the workspace",
    "owner": {
        "name": "ManojKiran Eda",
        "email": "manojkiran.eda@gmail.com",
        "username": "manojkiraneda"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/openbmc-build-scripts/+/48177",
    "commitMessage": "eslint: Ignore the meson-* & subprojects folder in the workspace\n\nModify eslint configuration to ignore the meson-* folder (ignores\nthe meson build log files - that fails(below) the json validation\ntest). This helps users to re-use the build directory while running the\nlocal CI.\n\nAlso ignoring the meson subprojects folder as , we dont want eslint to be checking\nfor errors that are not part of openbmc.\n\nFixes :\n/home/zshelle/sandbox/bmc1/openpower-hw-diags/build/meson-logs/testlog-ubasan.json\n  2:2  error  End of file expected  json/*\n/home/zshelle/sandbox/bmc1/openpower-hw-diags/build/meson-logs/testlog-valgrind.json\n  2:2  error  End of file expected  json/*\n/home/zshelle/sandbox/bmc1/openpower-hw-diags/build/meson-logs/testlog.json\n  2:2  error  End of file expected  json/*\n\u2716 3 problems (3 errors, 0 warnings)\n\nSigned-off-by: Manojkiran Eda <manojkiran.eda@gmail.com>\nChange-Id: If2f03aab86db953187a5ca8f3828263582d56712\n",
    "createdOn": 1635172461,
    "lastUpdated": 1639578234,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1635172461,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1635172479,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635172489,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/399/"
        },
        {
            "timestamp": 1635173398,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/399/ : SUCCESS"
        },
        {
            "timestamp": 1635175811,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1: Code-Review+1\n\nAs noted in some offline discussion, this will only help with meson builds, but meson is used by the majority of openbmc projects, and I believe in most cases it's only meson projects generating json file as a part of it's build process."
        },
        {
            "timestamp": 1635199671,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(1 comment)\n\n> I believe in most cases it's only meson projects generating json file as a part of it's build process.\n\nWell, shouldn't generated json files be just as lint-worthy as non-generated json files?  I'm not sure I agree with the premise of this commit if that's why we've done it."
        },
        {
            "timestamp": 1635277345,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1: Code-Review-1\n> \n> (1 comment)\n> \n> > I believe in most cases it's only meson projects generating json file as a part of it's build process.\n> \n> Well, shouldn't generated json files be just as lint-worthy as non-generated json files?  I'm not sure I agree with the premise of this commit if that's why we've done it.\n\nI don't necessarily disagree but this seems like a bit of an arduous task to put on the committer. They have to go work with meson (or maybe googltest?) to fix the json test output? The goal of OpenBMC CI is to find OpenBMC bugs, not necessarily issues in other projects. My concern is that the easy answer will be to just revert the json validation which I don't want. A lot of developers make use of this script outside of CI so we're going to have more and more people hit this issue."
        },
        {
            "timestamp": 1635277964,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1: Code-Review-1\n> > \n> > (1 comment)\n> > \n> > > I believe in most cases it's only meson projects generating json file as a part of it's build process.\n> > \n> > Well, shouldn't generated json files be just as lint-worthy as non-generated json files?  I'm not sure I agree with the premise of this commit if that's why we've done it.\n> \n> I don't necessarily disagree but this seems like a bit of an arduous task to put on the committer. They have to go work with meson (or maybe googltest?) to fix the json test output? The goal of OpenBMC CI is to find OpenBMC bugs, not necessarily issues in other projects. My concern is that the easy answer will be to just revert the json validation which I don't want. A lot of developers make use of this script outside of CI so we're going to have more and more people hit this issue.\n\nI think I missed something in the commit message.  The issue is specifically about generated json created by meson.  We need to be more particular about filtering on those then (ie. meson-logs subdirectory).  We _do_ watch to lint json files generated by our own programs because those often end up installed on the BMC."
        },
        {
            "timestamp": 1635278064,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1: Code-Review-1\n> > > \n> > > (1 comment)\n> > > \n> > > > I believe in most cases it's only meson projects generating json file as a part of it's build process.\n> > > \n> > > Well, shouldn't generated json files be just as lint-worthy as non-generated json files?  I'm not sure I agree with the premise of this commit if that's why we've done it.\n> > \n> > I don't necessarily disagree but this seems like a bit of an arduous task to put on the committer. They have to go work with meson (or maybe googltest?) to fix the json test output? The goal of OpenBMC CI is to find OpenBMC bugs, not necessarily issues in other projects. My concern is that the easy answer will be to just revert the json validation which I don't want. A lot of developers make use of this script outside of CI so we're going to have more and more people hit this issue.\n> \n> I think I missed something in the commit message.  The issue is specifically about generated json created by meson.  We need to be more particular about filtering on those then (ie. meson-logs subdirectory).  We _do_ watch to lint json files generated by our own programs because those often end up installed on the BMC.\n\nLooking at another repository there are also .json files created by meson in `meson-info` and there is the `compile_commands.json` in the root."
        },
        {
            "timestamp": 1635280779,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1635797447,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1636202020,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1636202056,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1636202066,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/412/"
        },
        {
            "timestamp": 1636202077,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/412/ : FAILURE"
        },
        {
            "timestamp": 1636202111,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1636202126,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1636202136,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/413/"
        },
        {
            "timestamp": 1636202138,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/413/ : FAILURE"
        },
        {
            "timestamp": 1636202379,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1636202390,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1636202401,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/414/"
        },
        {
            "timestamp": 1636202758,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1636202815,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/414/ : SUCCESS"
        },
        {
            "timestamp": 1636493417,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1636550698,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1636688307,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1636688330,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1636688337,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/415/"
        },
        {
            "timestamp": 1636688397,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\nI have also added pattern to ignore the json files in the subprojects folder."
        },
        {
            "timestamp": 1636689158,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/415/ : SUCCESS"
        },
        {
            "timestamp": 1636742161,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1636854589,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1636919284,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1636951908,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1638789144,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1638798594,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1639474977,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\nPing"
        },
        {
            "timestamp": 1639518873,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)\n\nOverall, I don't like that we're just hardcoding in specific paths, but at the end of the day, this is Andrews call if he wants to maintain it."
        },
        {
            "timestamp": 1639541787,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1639572089,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1639578226,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 5: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1639578234,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Change has been successfully rebased and submitted as 213cf83c17bf74f824942bd8b4b3598f3be1f881 by Andrew Geissler"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "aecdf6e5004b84f4ca1435e01f92f1f68a4edcac",
            "parents": [
                "d5ce1a237beb601f267839ae24792453bf81cd30"
            ],
            "ref": "refs/changes/77/48177/1",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1635172461,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "scripts/format-code.sh",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Does this handle any 'buildfoo' subdirectories, like 'builddir'?  That is often a documented pattern in meson and our default .gitignore for meson ignores any build* subdirectory."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 33,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "I had this same question.  You shouldn't have to choose between using this script and naming your build directories in any particular way."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we just do what we do on line 70, and generate an explicit list with git ls-files | grep \"\\.json$\" and send that to eslint directly?\n\nWe do a similar thing on line 126 with clang-format."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 33,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> Can we just do what we do on line 70, and generate an explicit list with git ls-files | grep \"\\.json$\" and send that to eslint directly?\n> \n> We do a similar thing on line 126 with clang-format.\n\neslint also has a pattern checker, if we just give .json as input it will automatically find the files with .json under a certain source directory and apply linting logic on them\n\nBut even with that , we need some extra logic to find and ignore the meson generated files, and i also feel having such kind of logic is hard and error prone.\n\n> Does this handle any 'buildfoo' subdirectories, like 'builddir'?  That is often a documented pattern in meson and our default .gitignore for meson ignores any build* subdirectory.\n\nI have modified the logic to check of **/meson-*/*.json -> this should find the json files under any directory and ignore them.\n\nAnd also rather than passing the glob pattern via command line , i moved that to the eslint-global config file."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "scripts/format-code.sh",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "scripts/unit-test.py",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 2,
            "sizeDeletions": 1
        },
        {
            "number": 2,
            "revision": "f2d90f621e71c8f73865dfdd75d6ce8dfe18b0ce",
            "parents": [
                "7d1b2a1dc4c0eafbd42a4102eca44e292ec0909a"
            ],
            "ref": "refs/changes/77/48177/2",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1636202020,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "config/eslint-global-config.json",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "scripts/format-code.sh",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 6,
            "sizeDeletions": 1
        },
        {
            "number": 3,
            "revision": "d1804a0c54521d226180a956f17818daab05ff8f",
            "parents": [
                "7d1b2a1dc4c0eafbd42a4102eca44e292ec0909a"
            ],
            "ref": "refs/changes/77/48177/3",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1636202111,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "config/eslint-global-config.json",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                },
                {
                    "file": "scripts/format-code.sh",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -139
                }
            ],
            "sizeInsertions": 6,
            "sizeDeletions": 140
        },
        {
            "number": 4,
            "revision": "810abd20ca5438ac6b45283445dffb00a38efffb",
            "parents": [
                "7d1b2a1dc4c0eafbd42a4102eca44e292ec0909a"
            ],
            "ref": "refs/changes/77/48177/4",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1636202379,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "config/eslint-global-config.json",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 6,
            "sizeDeletions": 1
        },
        {
            "number": 5,
            "revision": "d4a7fc1c8f29366f72ae0aea47b026658c491d43",
            "parents": [
                "7d1b2a1dc4c0eafbd42a4102eca44e292ec0909a"
            ],
            "ref": "refs/changes/77/48177/5",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1636688307,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why are we hardcoding these?  Shouldn't we be relying on the git ignore files?"
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "This is not \"hardcoding\", this is a config file that tell's eslint to ignore a glob pattern much like writing a glob pattern in the .gitignore file.\n\n\nI have already told this to wak in the discord, but let me tell this again we cannot rely on gitignore . There are json files in various repos in BMC that are purposefully written to be malformed for the unit testing purpose.Those files are present in the .eslintignore file.These files should not be linted but they should not be present in ignore list of git,\n\nSo, the ideal solution would be to append both of them into a single file and then consume that. But as discussed in the discord, just for the sake of google-misc(which has code in subprojects folder) i will not be doing that."
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This is not \"hardcoding\", this is a config file that tell's eslint to ignore a glob pattern much like writing a glob pattern in the .gitignore file.\n\nI say hardcoding, because if say, I changed the name of the subprojects folder to say, \"external\", the CI would now break again.  We should not be relying on naming conventions in CI.\n\n> \n> \n> I have already told this to wak in the discord, but let me tell this again we cannot rely on gitignore . There are json files in various repos in BMC that are purposefully written to be malformed for the unit testing purpose.Those files are present in the .eslintignore file.These files should not be linted but they should not be present in ignore list of git,\n\nI'm not sure why one precludes the other?  Using git ls-files doesn't prevent someone from ignoring certain files additionally with .eslintignore?\n\n> \n> So, the ideal solution would be to append both of them into a single file and then consume that. But as discussed in the discord, just for the sake of google-misc(which has code in subprojects folder) i will not be doing that.\n\nSo, given that current builds are broken for some repos, and you're not wanting to make changes, what are you proposing to unbreak the build?  I'm not quite following how you'd like to see this go forward, but I'm happy to take your direction here."
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> > This is not \"hardcoding\", this is a config file that tell's eslint to ignore a glob pattern much like writing a glob pattern in the .gitignore file.\n> \n> I say hardcoding, because if say, I changed the name of the subprojects folder to say, \"external\", the CI would now break again.  We should not be relying on naming conventions in CI.\n\nThere are two things here :\n1. subprojects folder name & placement of that folder(should be always in the root) can never be changed, if it changes the whole meson subprojects infrastructure and the tooling that consume that would eventually fail, in that case we have bigger problems than json validation.\n2. There should be someone telling even the git to ignore the subprojects folder, in this case .gitignore file has the hardcoding. if the subproject folder name changes i dont think git ls-files e.t.c would help in that situation.\n\n> \n> > \n> > \n> > I have already told this to wak in the discord, but let me tell this again we cannot rely on gitignore . There are json files in various repos in BMC that are purposefully written to be malformed for the unit testing purpose.Those files are present in the .eslintignore file.These files should not be linted but they should not be present in ignore list of git,\n> \n> I'm not sure why one precludes the other?  Using git ls-files doesn't prevent someone from ignoring certain files additionally with .eslintignore?\n> \n> > \n> > So, the ideal solution would be to append both of them into a single file and then consume that. But as discussed in the discord, just for the sake of google-misc(which has code in subprojects folder) i will not be doing that.\n> \n> So, given that current builds are broken for some repos, and you're not wanting to make changes, what are you proposing to unbreak the build?  I'm not quite following how you'd like to see this go forward, but I'm happy to take your direction here.\nApologies, i did not mean that i dont want to make changes, In the current state, this commit already fixes the issues that are caused due to the build folder and the subprojects folder.\n\nBased on the comments from Patrick and you, rather than using the eslint native pattern checker for json files, i tried testing my changes using the $(git ls-files | grep '\\.json$') and trigerring the eslint for each file from the pattern, but i see that it is slower than the eslint pattern checker that checks the directory in one shot. And also i would need a better logic to come up with a way to run it on all the files rather than breaking at a single failure(which eslint is doing it for free), so that we can see errors from all the json files in just one run.\n\nCan we get this commit merged first(to avoid people fixing things in their repos), and then investigate on coming up with a better logic later."
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> i see that it is slower than the eslint pattern checker that checks the directory in one shot.\n\nwho cares if it's slightly slower?   I can't imagine it's a big change in overall timing, and compared to things like the build, is negligible.\n\n> i would need a better logic to come up with a way to run it on all the files rather than breaking at a single failure(which eslint is doing it for free), so that we can see errors from all the json files in just one run.\n\nWhy does this matter?  At the end of the day we're running a check that users should've ideally already run, given that we already require testing.  I think this is a nice to have, not a requirement.\n\n> investigate on coming up with a better logic later.\n\nHow much later?  Is this work that you plan on doing?  This commit has been sitting for several weeks and I don't see any new logic in code review, maybe I missed it?"
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "Honestly, I am not totally convinced that git ls-files would be worth doing given the fact that we need to write extra logic(which eslint is doing for free) & as the current patch already solves the issues. Will leave it to Andrew to take decide, given that he already gave a +1, i think he is okay with this.\n\n> How much later?  Is this work that you plan on doing? \nI cannot really commit a time, I will get to it when ever i get time, but yes I am always willing to do the work if it helps the community."
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Let's get this merged.  This is actively causing issues for people trying to use the CI tools locally.   While the proposed solution isn't great for the `google-misc` repository it is no worse than before we had es-lint and it is significantly better for all the other repositories.  \n\nThe lesson learned here is that in the future we should not accept any linters that are not based around `git ls-files`."
                },
                {
                    "file": "config/eslint-global-config.json",
                    "line": 10,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Yep, I think it's time to just get this one in for the greater good."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "config/eslint-global-config.json",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 9,
            "sizeDeletions": 1
        },
        {
            "number": 6,
            "revision": "213cf83c17bf74f824942bd8b4b3598f3be1f881",
            "parents": [
                "51224161441d2bf97da8de0acad7532166cfc72a"
            ],
            "ref": "refs/changes/77/48177/6",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "createdOn": 1639578234,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "config/eslint-global-config.json",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 9,
            "sizeDeletions": 1
        }
    ]
}