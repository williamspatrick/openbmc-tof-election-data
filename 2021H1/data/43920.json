{
    "project": "openbmc/phosphor-net-ipmid",
    "branch": "master",
    "id": "Iaa20cb9df9b2224bb81e3be5808cab9202e6dbf4",
    "number": 43920,
    "subject": "Enforce encryption/authentication on in-session RMCP+ messages",
    "owner": {
        "name": "Vernon Mauery",
        "email": "vernon.mauery@linux.intel.com",
        "username": "vmauery"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-net-ipmid/+/43920",
    "commitMessage": "Enforce encryption/authentication on in-session RMCP+ messages\n\nIn-session RMCP+ messages must have the encryption set to match the\nnegotiated encryption setting that was set at session creation time.\n\nTested: Attempt to send an unencrypted payload with a valid session ID.\n\nChange-Id: Iaa20cb9df9b2224bb81e3be5808cab9202e6dbf4\nSigned-off-by: Vernon Mauery <vernon.mauery@linux.intel.com>\n",
    "createdOn": 1623257528,
    "lastUpdated": 1624902339,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1623257528,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1623257541,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623257571,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Set private"
        },
        {
            "timestamp": 1623257767,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/19164/ : SUCCESS"
        },
        {
            "timestamp": 1623266203,
            "reviewer": {
                "name": "Anton D. Kachalov",
                "email": "rnouse@google.com",
                "username": "ya-mouse"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1623267137,
            "reviewer": {
                "name": "Anton D. Kachalov",
                "email": "rnouse@google.com",
                "username": "ya-mouse"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1623270276,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1623270287,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1623270425,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 2: Ok-To-Test+1"
        },
        {
            "timestamp": 1623270666,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/19188/ : SUCCESS"
        },
        {
            "timestamp": 1623274693,
            "reviewer": {
                "name": "Suryakanth Sekar",
                "email": "suryakanth.sekar@linux.intel.com",
                "username": "htnakayrus"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1623309193,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1623321103,
            "reviewer": {
                "name": "Anton D. Kachalov",
                "email": "rnouse@google.com",
                "username": "ya-mouse"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1623322793,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1623324266,
            "reviewer": {
                "name": "Anton D. Kachalov",
                "email": "rnouse@google.com",
                "username": "ya-mouse"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\nTo be on safe side, we still need to:\n\n1. Do not either set privilege property or enable session for the channel in rakp12 unless successful authentication.\n2. Check session state in the incoming packets (e.g. drop commands for closed sessions)."
        },
        {
            "timestamp": 1623360884,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\n> Patch Set 2:\n> \n> (1 comment)\n> \n> To be on safe side, we still need to:\n> \n> 1. Do not either set privilege property or enable session for the channel in rakp12 unless successful authentication.\n> 2. Check session state in the incoming packets (e.g. drop commands for closed sessions).\n\nI am not sure what you mean for 1. for 2, yes, that should be an extra check. I will add that to the queue."
        },
        {
            "timestamp": 1623364737,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1623386881,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1623386950,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 3:\n\n> Patch Set 2:\n> \n> (1 comment)\n> \n> > Patch Set 2:\n> > \n> > (1 comment)\n> > \n> > To be on safe side, we still need to:\n> > \n> > 1. Do not either set privilege property or enable session for the channel in rakp12 unless successful authentication.\n> > 2. Check session state in the incoming packets (e.g. drop commands for closed sessions).\n> \n> I am not sure what you mean for 1. for 2, yes, that should be an extra check. I will add that to the queue.\n\n@Anton Do you want to explain Case 1?"
        },
        {
            "timestamp": 1623402250,
            "reviewer": {
                "name": "Anton D. Kachalov",
                "email": "rnouse@google.com",
                "username": "ya-mouse"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> > Patch Set 2:\n> > \n> > (1 comment)\n> > \n> > > Patch Set 2:\n> > > \n> > > (1 comment)\n> > > \n> > > To be on safe side, we still need to:\n> > > \n> > > 1. Do not either set privilege property or enable session for the channel in rakp12 unless successful authentication.\n> > > 2. Check session state in the incoming packets (e.g. drop commands for closed sessions).\n> > \n> > I am not sure what you mean for 1. for 2, yes, that should be an extra check. I will add that to the queue.\n> \n> @Anton Do you want to explain Case 1?\n\nWhen executing RAKP1 command (with wrong password, but correct username), the following properties are changed:\n\n> Type=signal  Endian=l  Flags=1  Version=1 Cookie=76  Timestamp=\"Fri 2021-06-11 08:55:24.983110 UTC\"\n  Sender=:1.78  Path=/xyz/openbmc_project/ipmi/session/eth0/2bb03d5a_1  Interface=org.freedesktop.DBus.Properties  Member=PropertiesChanged\n  UniqueName=:1.78\n  MESSAGE \"sa{sv}as\" {\n          STRING \"xyz.openbmc_project.Ipmi.SessionInfo\";\n          ARRAY \"{sv}\" {\n                  DICT_ENTRY \"sv\" {\n                          STRING \"CurrentPrivilege\";\n                          VARIANT \"y\" {\n                                  BYTE 2;\n                          };\n                  };\n          };\n          ARRAY \"s\" {\n          };\n  };\n\n\n> Type=signal  Endian=l  Flags=1  Version=1 Cookie=77  Timestamp=\"Fri 2021-06-11 08:55:25.004128 UTC\"\n  Sender=:1.78  Path=/xyz/openbmc_project/ipmi/session/eth0/2bb03d5a_1  Interface=org.freedesktop.DBus.Properties  Member=PropertiesChanged\n  UniqueName=:1.78\n  MESSAGE \"sa{sv}as\" {\n          STRING \"xyz.openbmc_project.Ipmi.SessionInfo\";\n          ARRAY \"{sv}\" {\n                  DICT_ENTRY \"sv\" {\n                          STRING \"ChannelNum\";\n                          VARIANT \"y\" {\n                                  BYTE 1;\n                          };\n                  };\n          };\n          ARRAY \"s\" {\n          };\n  };\n\n> Type=signal  Endian=l  Flags=1  Version=1 Cookie=78  Timestamp=\"Fri 2021-06-11 08:55:25.006363 UTC\"\n  Sender=:1.78  Path=/xyz/openbmc_project/ipmi/session/eth0/2bb03d5a_1  Interface=org.freedesktop.DBus.Properties  Member=PropertiesChanged\n  UniqueName=:1.78\n  MESSAGE \"sa{sv}as\" {\n          STRING \"xyz.openbmc_project.Ipmi.SessionInfo\";\n          ARRAY \"{sv}\" {\n                  DICT_ENTRY \"sv\" {\n                          STRING \"UserID\";\n                          VARIANT \"y\" {\n                                  BYTE 1;\n                          };\n                  };\n          };\n          ARRAY \"s\" {\n          };\n  };\n\nTo be on safe side, we shouldn't do that prior successful authentication."
        },
        {
            "timestamp": 1623431979,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 3:\n\n> When executing RAKP1 command (with wrong password, but correct username), the following properties are changed:\n> \n> > Type=signal  Endian=l  Flags=1  Version=1 Cookie=76  Timestamp=\"Fri 2021-06-11 08:55:24.983110 UTC\"\n>   Sender=:1.78  Path=/xyz/openbmc_project/ipmi/session/eth0/2bb03d5a_1  Interface=org.freedesktop.DBus.Properties  Member=PropertiesChanged\n>   UniqueName=:1.78\n>   MESSAGE \"sa{sv}as\" {\n>           STRING \"xyz.openbmc_project.Ipmi.SessionInfo\";\n>           ARRAY \"{sv}\" {\n>                   DICT_ENTRY \"sv\" {\n>                           STRING \"CurrentPrivilege\";\n>                           VARIANT \"y\" {\n> \n> To be on safe side, we shouldn't do that prior successful authentication.\n\nThe trick here is that the password doesn't get passed as part of RAKP1. This is just a limitation of the RMCP+ session creation (which is an absolute nightmare). We leak the hmac with the password as the key as part of RAKP2 using a weak hash. The authentication doesn't actually happen until the user sends back their own hmac with the password as part of RAKP3.\n\nWith the checking in place to only allow active sessions to execute IPMI payloads, this is not a concern."
        },
        {
            "timestamp": 1623495624,
            "reviewer": {
                "name": "Anton D. Kachalov",
                "email": "rnouse@google.com",
                "username": "ya-mouse"
            },
            "message": "Patch Set 3: Code-Review+1\n\n> Patch Set 3:\n> \n> > When executing RAKP1 command (with wrong password, but correct username), the following properties are changed:\n> > \n> > > Type=signal  Endian=l  Flags=1  Version=1 Cookie=76  Timestamp=\"Fri 2021-06-11 08:55:24.983110 UTC\"\n> >   Sender=:1.78  Path=/xyz/openbmc_project/ipmi/session/eth0/2bb03d5a_1  Interface=org.freedesktop.DBus.Properties  Member=PropertiesChanged\n> >   UniqueName=:1.78\n> >   MESSAGE \"sa{sv}as\" {\n> >           STRING \"xyz.openbmc_project.Ipmi.SessionInfo\";\n> >           ARRAY \"{sv}\" {\n> >                   DICT_ENTRY \"sv\" {\n> >                           STRING \"CurrentPrivilege\";\n> >                           VARIANT \"y\" {\n> > \n> > To be on safe side, we shouldn't do that prior successful authentication.\n> \n> The trick here is that the password doesn't get passed as part of RAKP1. This is just a limitation of the RMCP+ session creation (which is an absolute nightmare). We leak the hmac with the password as the key as part of RAKP2 using a weak hash. The authentication doesn't actually happen until the user sends back their own hmac with the password as part of RAKP3.\n> \n> With the checking in place to only allow active sessions to execute IPMI payloads, this is not a concern.\n\nYeah, that's right :) Was confused with the password retrieval and pam authentication."
        },
        {
            "timestamp": 1623684686,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 3: Ok-To-Test+1"
        },
        {
            "timestamp": 1623684922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/19625/ : SUCCESS"
        },
        {
            "timestamp": 1623755776,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 3: Code-Review+2"
        },
        {
            "timestamp": 1624902339,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Change has been successfully merged by Vernon Mauery"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "c6fe5c51da52ca0149b15e8cd84eae75a0182590",
            "parents": [
                "dd1f34a7f042bdc3926cf9315b6d7320df23ffb2"
            ],
            "ref": "refs/changes/20/43920/1",
            "uploader": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "createdOn": 1623257528,
            "author": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "message_parsers.cpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Anton D. Kachalov",
                        "email": "rnouse@google.com",
                        "username": "ya-mouse"
                    },
                    "message": "Why do we ignore endianness of the server side when retrieving session ID?"
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "we don't ignore it. That is what the endian::from_ipmi() does. This line was just moved up to line 181 so we could use it to look up the session."
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 206,
                    "reviewer": {
                        "name": "Anton D. Kachalov",
                        "email": "rnouse@google.com",
                        "username": "ya-mouse"
                    },
                    "message": "Can we make the if-statement more readable? Introduce a helper vars like \"isEncrypted\" and \"isAuthenticated\" or do separate checks for not encrypted and unauthenticated messages."
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 206,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "message_parsers.cpp",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 20,
            "sizeDeletions": 3
        },
        {
            "number": 2,
            "revision": "3f4aded713b1f87cdc05d539ed1919a18e0563fb",
            "parents": [
                "dd1f34a7f042bdc3926cf9315b6d7320df23ffb2"
            ],
            "ref": "refs/changes/20/43920/2",
            "uploader": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "createdOn": 1623270287,
            "author": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "message_parsers.cpp",
                    "line": 205,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Do we need this check, since only cipher suite 17 is only supported now?\n\n    if (sessionID != session::sessionZero &&\n        (!message->isPacketEncrypted || !message->isPacketAuthenticated))\n    {\n        throw std::runtime_error(\"unencrypted or unauthenticated message\");\n    }"
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 205,
                    "reviewer": {
                        "name": "Anton D. Kachalov",
                        "email": "rnouse@google.com",
                        "username": "ya-mouse"
                    },
                    "message": "Isn't cipher suits are enabled in the config?\nThe netipmid implementation supports several auth algos. E.g. SHA1 is still supported, but disabled in configuration.\nI tho, we should be more verbose and do not assume in the code that other cipher suites are unsupported even weak ones as long as we completely drop the support."
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 205,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "https://github.com/openbmc/phosphor-net-ipmid/blob/master/auth_algo.hpp#L110\nhttps://github.com/openbmc/phosphor-net-ipmid/blob/master/integrity_algo.hpp#L96\n\nOnly algos for C17. Anyways OpenBMC doesn't support sessions without either."
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 205,
                    "reviewer": {
                        "name": "Anton D. Kachalov",
                        "email": "rnouse@google.com",
                        "username": "ya-mouse"
                    },
                    "message": "Yeah. And we still support SHA1 in startSession() as authAlgo that looks like a dead code then."
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 205,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "This check looks funny, but it will make even more sense once I can finish my work on RMCP+DTLS. In that case, the session uses no integrity or encryption because it is done at the transport layer. But either way, this does make sure that a non-encrypted or non-authenticated message doesn't try to slip by in a RMCP+ session that does use them."
                },
                {
                    "file": "message_parsers.cpp",
                    "line": 205,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "> but it will make even more sense once I can finish my work on RMCP+DTLS. In that case, the session uses no integrity or encryption because it is done at the transport layer. \n\nSure, looking forward to that :-)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "message_parsers.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 23,
            "sizeDeletions": 3
        },
        {
            "number": 3,
            "revision": "1ab1c6bd6808e9d3d1a5cace45a3f513da7a811e",
            "parents": [
                "a71b1bae7abfc7ffb8601a3b5b1fbedcaf6cdc92"
            ],
            "ref": "refs/changes/20/43920/3",
            "uploader": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "createdOn": 1623364737,
            "author": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "message_parsers.cpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 23,
            "sizeDeletions": 3
        }
    ]
}