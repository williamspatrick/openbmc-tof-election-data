{
    "project": "openbmc/webui-vue",
    "branch": "master",
    "id": "Ie669d07801cbd46f32cc36c46ef848d5be9d1df7",
    "number": 34980,
    "subject": "Allow for custom chassis id",
    "owner": {
        "name": "Adam Stankiewicz",
        "email": "sheerun@sher.pl",
        "username": "sheerun"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/webui-vue/+/34980",
    "commitMessage": "Allow for custom chassis id\n\nI'd like to add support for non-openbmc custom resource names (for example Chassis is named `System.Embedded.1` in my iDRAC8 redfish API). Here I'm presenting one solution and I'd love to hear a feedback if this approach would suit you, and if not, what would you suggest?\n\nI think few things need to be ensured:\n- If multiple modules on the same page (e.g. overview) need the same resource id / info, we should only fetch it once (in this PR I use temporary caching on API level to achieve this, REST is perfect for this)\n- We should only fetch as many resource names as necessary (for example if on given screen we need to only access chassis info, we don't need to fetch names of managers etc.). This PR achieves it by fetching resource id in action that uses this resource id, instead of in GlobalStore.\n\nThe caching behavior can be improved in the future so chassis id is not re-fetched if page is refreshed.\n\nIf you like this approach I can submit PR for other modules\n\nChange-Id: Ie669d07801cbd46f32cc36c46ef848d5be9d1df7\nSigned-off-by: Adam Stankiewicz <sheerun@sher.pl>\n",
    "createdOn": 1595441544,
    "lastUpdated": 1617826530,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1595441544,
            "reviewer": {
                "name": "Adam Stankiewicz",
                "email": "sheerun@sher.pl",
                "username": "sheerun"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1595441557,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1595472898,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1: Ok-To-Test+1"
        },
        {
            "timestamp": 1595472908,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/1782/"
        },
        {
            "timestamp": 1595472973,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/1782/ : SUCCESS"
        },
        {
            "timestamp": 1595889909,
            "reviewer": {
                "name": "Yoshie Muranaka",
                "email": "yoshiemuranaka@gmail.com",
                "username": "yoshiemuranaka"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1595890046,
            "reviewer": {
                "name": "Yoshie Muranaka",
                "email": "yoshiemuranaka@gmail.com",
                "username": "yoshiemuranaka"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1595907116,
            "reviewer": {
                "name": "Adam Stankiewicz",
                "email": "sheerun@sher.pl",
                "username": "sheerun"
            },
            "message": "Patch Set 1:\n\n(3 comments)\n\n> Patch Set 1:\n> \n> (3 comments)"
        },
        {
            "timestamp": 1596149763,
            "reviewer": {
                "name": "Yoshie Muranaka",
                "email": "yoshiemuranaka@gmail.com",
                "username": "yoshiemuranaka"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1596149980,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1596151122,
            "reviewer": {
                "name": "Yoshie Muranaka",
                "email": "yoshiemuranaka@gmail.com",
                "username": "yoshiemuranaka"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1596152275,
            "reviewer": {
                "name": "Yoshie Muranaka",
                "email": "yoshiemuranaka@gmail.com",
                "username": "yoshiemuranaka"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1596177879,
            "reviewer": {
                "name": "Adam Stankiewicz",
                "email": "sheerun@sher.pl",
                "username": "sheerun"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1596205771,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1601321318,
            "reviewer": {
                "name": "Derick Montague",
                "email": "derick.montague@ibm.com",
                "username": "derick-montague"
            },
            "message": "Removed reviewer Derick Montague."
        },
        {
            "timestamp": 1604502657,
            "reviewer": {
                "name": "Dixsie Wolmers",
                "email": "dixsiew@gmail.com",
                "username": "dixsie"
            },
            "message": "Removed reviewer Dixsie Wolmers."
        },
        {
            "timestamp": 1617224764,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Removed reviewer Ed Tanous."
        },
        {
            "timestamp": 1617826530,
            "reviewer": {
                "name": "Bruce Mitchell",
                "email": "bruce.mitchell@linux.vnet.ibm.com",
                "username": "BMC-Bruce"
            },
            "message": "Removed reviewer Bruce Mitchell."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "79a865591ab1909dc5b16e136183192d1096ab63",
            "parents": [
                "8d29eb4947a15b008dd825cb3abda6f462fdc201"
            ],
            "ref": "refs/changes/80/34980/1",
            "uploader": {
                "name": "Adam Stankiewicz",
                "email": "sheerun@sher.pl",
                "username": "sheerun"
            },
            "createdOn": 1595441544,
            "author": {
                "name": "Adam Stankiewicz",
                "email": "sheerun@sher.pl",
                "username": "sheerun"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Can you do this without https://gerrit.openbmc-project.xyz/c/openbmc/webui-vue/+/34981 ? `Use standard auth method for redfish`"
                },
                {
                    "file": "src/router/index.js",
                    "line": 218,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "Do we need to clear and enable cache with each navigation change? It would be nice to access the cache across pages that access the same endpoints (happens on a few pages)"
                },
                {
                    "file": "src/router/index.js",
                    "line": 218,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "Hmm, or I wonder if that would cause some stale data. Also not sure if there is a better way to implement this together with the Vuex store. I'll need to do some research. any thoughts?"
                },
                {
                    "file": "src/router/index.js",
                    "line": 218,
                    "reviewer": {
                        "name": "Adam Stankiewicz",
                        "email": "sheerun@sher.pl",
                        "username": "sheerun"
                    },
                    "message": "As you say it could cause stale data. Any improvements in caching mechanism need to be thought through and this PR just introduces starting point with 100% safe behavior. I introduced cache only to prevent fetching chassisId multiple times on one page if multiple views are requesting it. I would prefer to not address or discuss cross-request caching in this PR."
                },
                {
                    "file": "src/router/index.js",
                    "line": 218,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "Actually, now that I think of it, not sure this will work well with certain pages. We sometimes make multiple requests to the same endpoint while on the same page\u2013we've discussed whether or not this is the best pattern but in certain cases it is easier to make a new GET request (for example) after a POST to make a new object (we do this on local user management). \nFor this commit, if you can save that initial chassis id you wouldn't need the second request anyways"
                },
                {
                    "file": "src/store/api.js",
                    "line": 21,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "should we clear cache when getting a 403 vs on every navigation change?"
                },
                {
                    "file": "src/store/api.js",
                    "line": 21,
                    "reviewer": {
                        "name": "Adam Stankiewicz",
                        "email": "sheerun@sher.pl",
                        "username": "sheerun"
                    },
                    "message": "I think it should happen for now on every navigation change which is safest bet and any changes in this should be deeply though through and addressed in separate PRs. It can cause issues especially if data is updated either by current or some other user."
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 25,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "We have implemented a similar pattern of fetching dynamic chassis ids. Can we try something similar here? \nhttps://github.com/openbmc/webui-vue/blob/master/src/store/modules/Health/ChassisStore.js#L41-L50"
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 25,
                    "reviewer": {
                        "name": "Adam Stankiewicz",
                        "email": "sheerun@sher.pl",
                        "username": "sheerun"
                    },
                    "message": "This PR fixes very concrete bug that regards hardcored resource id in redfish request. Changing requests to handle multiple resources instead of one is very different beast and I think it's better if it's not addressed here because my indention is to change hardcored resource id in tenths of places, each one requiring separate consideration if I were to start implementing support of multiple resources per view, instead of one."
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 25,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "Sorry, I should have been more specific. I meant can you follow the Promise chaining pattern instead of the try/catch error handling? It's a just a stylistic preference for consistency."
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 27,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "I would recommend storing the initially fetched chassis id in this store state so you don't have to make another request (line 44)"
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 27,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "We have multiple Chassis ids. :/"
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 27,
                    "reviewer": {
                        "name": "Yoshie Muranaka",
                        "email": "yoshiemuranaka@gmail.com",
                        "username": "yoshiemuranaka"
                    },
                    "message": "We're currently hardcoding the first item in the chassis collection\u2013are you saying that could change? (not be the first value)?"
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 27,
                    "reviewer": {
                        "name": "Adam Stankiewicz",
                        "email": "sheerun@sher.pl",
                        "username": "sheerun"
                    },
                    "message": "> I would recommend storing the initially fetched chassis id in this store state so you don't have to make another request (line 44)\n\nI think is one of many cases where caching could cause bugs, and special handling needs to be implemented. Current behavior of caching per-request doesn't change any assumptions so it's safest way to go. Adding anything to the store is logic change which I woudn't like to make here."
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "line": 27,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "So it works because chassis is first\n curl -k https://${bmc}/redfish/v1/Chassis/\n{\n  \"@odata.id\": \"/redfish/v1/Chassis\",\n  \"@odata.type\": \"#ChassisCollection.ChassisCollection\",\n  \"Members\": [\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/chassis\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/motherboard\"\n    }\n  ],"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/router/index.js",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "src/store/api.js",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -1
                },
                {
                    "file": "src/store/modules/Control/PowerControlStore.js",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 61,
            "sizeDeletions": 28
        }
    ]
}