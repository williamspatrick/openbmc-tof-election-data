{
    "project": "openbmc/libpldm",
    "branch": "main",
    "topic": "msgbuf-conversion",
    "id": "I7e727cbd26c43aae2815ababe0e6ca4c8e629766",
    "number": 61974,
    "subject": "Introduce a small msgbuf abstraction",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@codeconstruct.com.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libpldm/+/61974",
    "hashtags": [],
    "createdOn": 1679998574,
    "lastUpdated": 1688613404,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1679998574,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1679998606,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1679998606,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1679998664,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Topic set to pldm_msgbuf"
        },
        {
            "timestamp": 1679998772,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/63209/ : FAILURE"
        },
        {
            "timestamp": 1679999036,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1679999061,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1679999061,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1679999404,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/63211/ : SUCCESS"
        },
        {
            "timestamp": 1680078597,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1680163390,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2:\n\n(14 comments)"
        },
        {
            "timestamp": 1680221942,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(16 comments)"
        },
        {
            "timestamp": 1680242553,
            "reviewer": {
                "name": "Gilbert Chen",
                "email": "gilbert.0225@gmail.com",
                "username": "gilbert225"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1680281690,
            "reviewer": {
                "name": "Arun Lal K M",
                "email": "arun.lal@intel.com",
                "username": "arunlalkm-intel"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1680485707,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1680510177,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1680511619,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1680566125,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1680566164,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1680566164,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1680566310,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/63599/ : FAILURE"
        },
        {
            "timestamp": 1680566624,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1680566650,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1680566650,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1680566907,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/63601/ : SUCCESS"
        },
        {
            "timestamp": 1680568293,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(13 comments)"
        },
        {
            "timestamp": 1680661163,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1680662681,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1680662705,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1680662705,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1680662998,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/63683/ : SUCCESS"
        },
        {
            "timestamp": 1680663702,
            "reviewer": {
                "name": "Thu Nguyen",
                "email": "thu@os.amperecomputing.com",
                "username": "ThuBaNguyen"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1680761170,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1680761231,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1680761231,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1680761458,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/63817/ : FAILURE"
        },
        {
            "timestamp": 1680763707,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1680763746,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1680763746,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1680763891,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/63819/ : FAILURE"
        },
        {
            "timestamp": 1680764925,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 8.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1680764966,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1680764966,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1680765257,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/63821/ : SUCCESS"
        },
        {
            "timestamp": 1680765941,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 8: Code-Review+1"
        },
        {
            "timestamp": 1680766871,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 8:\n\n(11 comments)"
        },
        {
            "timestamp": 1680769615,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 8:\n\n(8 comments)"
        },
        {
            "timestamp": 1680772837,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 8:\n\n(3 comments)"
        },
        {
            "timestamp": 1680777927,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1681209440,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 8:\n\n(5 comments)"
        },
        {
            "timestamp": 1681209685,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 9.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1681209714,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1681209714,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1681209962,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/63983/ : SUCCESS"
        },
        {
            "timestamp": 1681231017,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 9: Code-Review+1"
        },
        {
            "timestamp": 1681248680,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 9: Code-Review+2"
        },
        {
            "timestamp": 1681248771,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1681248872,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Change has been successfully rebased and submitted as c63f63a2d9d7d25b21b76a1a6098ee1a3176be7e"
        },
        {
            "timestamp": 1688613398,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Topic pldm_msgbuf removed"
        },
        {
            "timestamp": 1688613404,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Topic set to msgbuf-conversion"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "9a9f9b1f6137fbc93516eef6647ff3642c6d880f",
            "parents": [
                "0970e332b46a3096267e15686c0972404205ae96"
            ],
            "ref": "refs/changes/74/61974/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1679998574,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 280,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "type": "ADDED",
                    "insertions": 66,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 358,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "4af754544aeff980e554eeb1032ef2a9f1683872",
            "parents": [
                "0970e332b46a3096267e15686c0972404205ae96"
            ],
            "ref": "refs/changes/74/61974/2",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1679999036,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Arun Lal K M",
                        "email": "arun.lal@intel.com",
                        "username": "arunlalkm-intel"
                    },
                    "message": "Tested section?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Thanks for the reviews. It seems maybe the documentation doesn't entirely communicate how the API is effectively used. I've tried to address that in my replies, but maybe we should figure out how to communicate that in the documentation as well."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 18,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Comments for struct/variables."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 18,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This is an internal struct, doxygen for that seems a bit over the top? I'm all for documenting public structs properly but this isn't one of them. This header file is not part of the set installed by the build system. Further, if the `pldm_msgbuf` abstraction wasn't header-only, the struct would go in the `.c` file. The only code that should manipulate its members are the `pldm_msgbuf_*` functions."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 18,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 19,
                    "reviewer": {
                        "name": "Arun Lal K M",
                        "email": "arun.lal@intel.com",
                        "username": "arunlalkm-intel"
                    },
                    "message": "Throughout the file tab is used. Use space for intonation."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 19,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "First, check the formatting of other C files in the project :)\n\nSecond, as-is the patch passes the formatting requirements enforced in CI, as the `.clang-format` says:\n\n```\n2 10:56:19 andrew@fedora:~/src/openbmc/libpldm (msgbuf) $ cat .clang-format\nBasedOnStyle: LLVM\nIndentWidth: 8\nUseTab: Always\nBreakBeforeBraces: Linux\nAllowShortIfStatementsOnASingleLine: false\nIndentCaseLabels: false\n```\n\nhttps://github.com/openbmc/libpldm/blob/0970e332b46a3096267e15686c0972404205ae96/.clang-format\n\nThird, the project documents the use of Linux kernel style for C code:\n\nhttps://github.com/openbmc/docs/blob/master/CONTRIBUTING.md#c"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 19,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 26,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "ctx is [out] parameter, \n\nI prefer [in] parameters followed by [out]."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 26,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I think the consistency in parameter placement in the API is more important. `ctx` is effectively the `this` pointer of the API. The convention is to pass that first, e.g. python's `self`: https://docs.python.org/3/tutorial/classes.html#method-objects"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 26,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 27,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "minSize"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 27,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 27,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 36,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "init"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 36,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I disagree with that. Initialising it to some unused value prevents us from finding genuine read-before-assignment bugs with e.g. valgrind."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 36,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Note that g++ warns on this via `-Werror=maybe-uninitialized`, but this may not be true for gcc."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 36,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 51,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "first condition is always `true`. if (end).\n\n`end < (uint8_t *)buf` - Is this for overflow?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 51,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "> first condition is always true. if (end).\n\nNo? What's the value of `UINTPTR_MAX + 1`?\n\n> `end < (uint8_t *)buf` - Is this for overflow?\n\nYep"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 51,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 62,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "nit: @brief"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 62,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 62,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 67,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "To be specific,\n\n`or a negative value if an` to `-1 if an`"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "No, that's not how this works. The value can be arbitrarily negative, depending on how much the extractor accesses would have overflowed the buffer."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 72,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Should there be check for `if(!ctx)` ?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 72,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Probably, let me consider it again."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 72,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 76,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Need to clarify that no memory is freed."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 76,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why is that implied? All \"destroy\" indicates to me is that it's not valid to use the object again after the function returns."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 76,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "We are destroying the buffer here. In that case, do we really need this check? I am not sure if this case can happen, but what if caller is trying to destroy a `pldm_msgbuf` which is having invalid length. In that case `ctx->curser` becomes `NULL` but caller will not get PLDM_SUCCESS as return code. It might be confusing for the caller."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "+1"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "> do we really need this check?\n\nYes. Because the result tells us whether any of the `pldm_msgbuf_extract()` calls would have caused an out-of-bounds access. Out-of-bounds accesses are prevented by the implementations underlying `pldm_msgbuf_extract()`. These implementations are provided in the code following.\n\n> In that case ctx->curser becomes NULL but caller will not get PLDM_SUCCESS as return code. It might be confusing for the caller.\n\nThe return value is not an indication of the success or failure to invalidate the object, it's an indication of whether any out-of-bounds accesses were attempted during the use of the object. I've documented this in @return.\n\nExample idiomatic use looks like this:\n\n``` \nint decode_my_msg(const uint8_t *msgdata, size_t msglen, struct my_msg *msg)\n{\n\tint rc;\n\tstruct pldm_msgbuf buf;\n        \n\trc = pldm_msgbuf_init(buf, sizeof(*msg), msgdata, msglen);\n\tif (rc) {\n\t\treturn rc;\n\t}\n\n\tpldm_msgbuf_extract(buf, &msg->foo);\n\tpldm_msgbuf_extract(buf, &msg->bar);\n\tpldm_msgbuf_extract(buf, &msg->baz);\n\tpldm_msgbuf_extract(buf, &msg->quux);\n\t\n\treturn pldm_msgbuf_destroy(buf);\n}\n```\n\nBy taking the approach of detecting and preventing overflow in the extractors, recording the existence of the problem, and then reporting the problem through the return value of `pldm_msgbuf_destroy()`, we can avoid code that would look like this:\n\n\n``` \nint decode_my_msg(const uint8_t *msgdata, size_t msglen, struct my_msg *msg)\n{\n\tstruct pldm_msgbuf _buf, *buf = &_buf;\n\tint rc;\n        \n\trc = pldm_msgbuf_init(buf, sizeof(*msg), msgdata, msglen);\n\tif (rc) {\n\t\treturn rc;\n\t}\n\n\trc = pldm_msgbuf_extract(buf, &msg->foo);\n\tif (rc < 0)\n\t\treturn rc;\n\n\trc = pldm_msgbuf_extract(buf, &msg->bar);\n\tif (rc < 0)\n\t\treturn rc;\n\n\trc = pldm_msgbuf_extract(buf, &msg->baz);\n\tif (rc < 0)\n\t\treturn rc;\n\t\t\n\trc = pldm_msgbuf_extract(buf, &msg->quux);\n\tif (rc < 0)\n\t\treturn rc;\n\n\tpldm_msgbuf_destroy(buf);\n\t\n\treturn 0;\n}\n```\n\nThis is called out in the `@return` documentation.\n\nFurther, the way that the overflow is recorded allows us to easily debug the problem after the fact. The magnitude of the negative value in ctx->remaining represents the magnitude of the overflow. This allows us to pinpoint the member where it went wrong.\n\nBetween the documentation for `pldm_msgbuf_validate()` and `pldm_msgbuf_destroy()` I think this behaviour is reasonably documented. Given there's clearly some misunderstand here, what can I do to improve it?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Gilbert Chen",
                        "email": "gilbert.0225@gmail.com",
                        "username": "gilbert225"
                    },
                    "message": "Is the minus operator before PLDM_ERROR_INVALID_LENGTH needed?\nINVALID_LENGTH is defined in PLDM_BASE_CODE in table 5 of DSP0240_1.1.0 and other APIs in libpldm does not negative the PLDM_BASE_CODE for the return code."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Yeah okay, let me sort this out."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "In that case return data of pldm_msgbuf_extract_* are un-used.\n\nAlso,Is it safe to allow out-of-bound access like that?\nBasically, in the final API, we are copying out-of-bound data and returning an error code. But still the caller can read the data which we copied. Also, I believe static analyzer tools will be catching these as issues."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": ">Also,Is it safe to allow out-of-bound access like that?\nBasically, in the final API, we are copying out-of-bound data and returning an error code. But still the caller can read the data which we copied. Also, I believe static analyzer tools will be catching these as issues.\n\nI overlooked. I see the length check is preventing out-of-bound access before memcpy like you mentioned but still the return data is unused. \n\nI think the return error code is creating the confusion. Basic thought goes like \"check for return value when a function returns something.\"\ud83d\ude1c"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Sure. However, while often we can batch the test it via `pldm_msgbuf_destroy()`, sometimes further data is dependent on the current extraction succeeding. For instance, PLDM often uses a tag field to specify a type for subsequent variably-sized data. We need to know that we successfully extracted the tag value before we do a data-dependent branch on the tag value, otherwise we're off in undefined behaviour land. I've updated the subsequent change from Gilbert along these lines. As an example:\n\nhttps://gerrit.openbmc.org/c/openbmc/libpldm/+/59033/19/src/platform.c#1321"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 93,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 109,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "if (!ctx || !dst)"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 109,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 109,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 135,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "nit: Good to follow consistency in null checking style, by combining multiple null checks into one (similar to L152) and avoid multiple if statements."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 135,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 135,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 274,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "This look like C++ templates for C :-) Nice!"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 274,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Sometimes C can have nice things too, even if the implementation is kinda terrible."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 274,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "line": 7,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "`__attribute__((always_inline))` why explicit here, but not for src/msgbuf.h?"
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "line": 7,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "We could drop `__attribute__((always_inline))` from this one.\n\nRegarding the instance below (I'll caveat this with it's entirely internal, so what we do doesn't matter too much, but) the reason for `always_inline` was to make sure the compiler had visibility of the same switch condition being used across multiple calls, and thus could hoist the branch for the condition over all the accessors."
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "line": 7,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "line": 15,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Handle error return codes?"
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "line": 15,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I should probably just make it void instead. But see the previous discussion about idiomatic use of `pldm_msgbuf_extract()` on the definition of `pldm_msgbuf_destroy()`."
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "line": 15,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 287,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "type": "ADDED",
                    "insertions": 68,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 367,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "553e4c4368a843e1fa7fa1fcd46befa37626ca62",
            "parents": [
                "0970e332b46a3096267e15686c0972404205ae96"
            ],
            "ref": "refs/changes/74/61974/3",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1680566125,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 285,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "type": "ADDED",
                    "insertions": 75,
                    "deletions": 0
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 280,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 144,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 805,
            "sizeDeletions": 1
        },
        {
            "number": 4,
            "revision": "23bea8a2cebda56b80935ab06e9a3f6e50ef220a",
            "parents": [
                "0970e332b46a3096267e15686c0972404205ae96"
            ],
            "ref": "refs/changes/74/61974/4",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1680566624,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 285,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "type": "ADDED",
                    "insertions": 75,
                    "deletions": 0
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 280,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 144,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 805,
            "sizeDeletions": 1
        },
        {
            "number": 5,
            "revision": "a5726dd3113598a4dde9e9beaa1ca59ed09e263c",
            "parents": [
                "0970e332b46a3096267e15686c0972404205ae96"
            ],
            "ref": "refs/changes/74/61974/5",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1680662681,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Thu Nguyen",
                        "email": "thu@os.amperecomputing.com",
                        "username": "ThuBaNguyen"
                    },
                    "message": "This patch is good to me."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 286,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "type": "ADDED",
                    "insertions": 76,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 280,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 144,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 835,
            "sizeDeletions": 2
        },
        {
            "number": 6,
            "revision": "c7643626c23f281f731e9ad8bc93df2c9924adde",
            "parents": [
                "5ee8a94e4fc95bd6945ac5176072af1eb7dfb1d2"
            ],
            "ref": "refs/changes/74/61974/6",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1680761170,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "meson.build",
                    "line": 19,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Why `src` is added to the include directory?"
                },
                {
                    "file": "meson.build",
                    "line": 19,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "the msgbuf abstraction is entirely internal to the library. it should never be exposed to the user, so its headers live under `src/` and not under `include/`. More info here:\n\nhttps://github.com/openbmc/docs/blob/master/anti-patterns.md#placing-internal-headers-in-a-parallel-subtree"
                },
                {
                    "file": "meson.build",
                    "line": 19,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 48,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Why do we need the condition to check if end != NULL, end is initialised in the previous step."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 48,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "because the value of end is the result of an addition that can overflow"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 48,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 286,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf/platform.h",
                    "type": "ADDED",
                    "insertions": 76,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 280,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 144,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 835,
            "sizeDeletions": 2
        },
        {
            "number": 7,
            "revision": "43cb04b188e53f59b364141b659e5d42279a3d63",
            "parents": [
                "5ee8a94e4fc95bd6945ac5176072af1eb7dfb1d2"
            ],
            "ref": "refs/changes/74/61974/7",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1680763707,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 287,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 306,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 151,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 794,
            "sizeDeletions": 2
        },
        {
            "number": 8,
            "revision": "14d82731b3afefd1ce713ae1f5e282080e35d1ec",
            "parents": [
                "5ee8a94e4fc95bd6945ac5176072af1eb7dfb1d2"
            ],
            "ref": "refs/changes/74/61974/8",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1680764925,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "thanks for the comments. I'll clean up the issues and push again"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 32,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "nit: PLDM_ERROR_INVALID_DATA if input is an invalid ctx or buf"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 32,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 32,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 84,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "nit: PLDM_ERROR_INVALID_DATA if input a invalid ctx"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 84,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 84,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "!ctx->cursor?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "no one should be messing with the internals of ctx. the only cause of this would be use after destroy if ctx is not null. I don't think it's a problem that's likely?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "I was comparing with the checks in pldm_msgbuf_extract_uint16/pldm_msgbuf_extract_int16/...\n\nhttps://gerrit.openbmc.org/c/openbmc/libpldm/+/61974/8/src/msgbuf.h#151"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "ah, good point. I think I'll delete the check from the extractor functions too"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I've changed my mind and will make it consistent as you suggest. Adding the check will avoid the optimiser doing DCE on branches protecting against the NULL case on the basis that a read access has already occurred prior to the NULL check. The optimiser can elide the NULL checks where it can prove that a write hasn't occurred to ctx->cursor, so we'll still wind up with reasonable code."
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 120,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "assert(ctx->remaining >= 0);?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 120,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 120,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "!ctx->cursor?"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "as above"
                },
                {
                    "file": "src/msgbuf.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Changed my mind as above, fixed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 287,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 317,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 151,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 805,
            "sizeDeletions": 2
        },
        {
            "number": 9,
            "revision": "136ec7367a0c903c00e2df9a7e9bb83d9ba78882",
            "parents": [
                "5ee8a94e4fc95bd6945ac5176072af1eb7dfb1d2"
            ],
            "ref": "refs/changes/74/61974/9",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1681209685,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "On the basis that Thu and Arun had +1'ed earlier revisions with only minor differences I will submit this now that Tom has also given it +1."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 291,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 317,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 151,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 809,
            "sizeDeletions": 2
        },
        {
            "number": 10,
            "revision": "c63f63a2d9d7d25b21b76a1a6098ee1a3176be7e",
            "parents": [
                "2a38ab51843a095f70cc62ac3b83f24f909c60ae"
            ],
            "ref": "refs/changes/74/61974/10",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "createdOn": 1681248872,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                },
                {
                    "file": "src/msgbuf.h",
                    "type": "ADDED",
                    "insertions": 291,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf.cpp",
                    "type": "ADDED",
                    "insertions": 317,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                },
                {
                    "file": "tests/msgbuf_generic.c",
                    "type": "ADDED",
                    "insertions": 151,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 809,
            "sizeDeletions": 2
        }
    ]
}