{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I35ee9b92d163ce56815a5bd9cce5296ba1a44eef",
    "number": 67477,
    "subject": "mutual-tls: Add support for Meta certificates",
    "owner": {
        "name": "Marco Kawajiri",
        "email": "kawajiri@meta.com",
        "username": "kawmarco"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/67477",
    "hashtags": [],
    "createdOn": 1698784924,
    "lastUpdated": 1703012226,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1698784924,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1698784987,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1698784987,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1698785046,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/75642/ : FAILURE"
        },
        {
            "timestamp": 1698785363,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1698785457,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 2: New patch set was added with same tree, parent tree, and commit message as Patch Set 1.\n\nCopied Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1698785515,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1698785583,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1698785583,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1698786595,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/75644/ : FAILURE"
        },
        {
            "timestamp": 1698786998,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(10 comments)"
        },
        {
            "timestamp": 1698787009,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1698787126,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1698787212,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1698787212,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1698788173,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/75647/ : FAILURE"
        },
        {
            "timestamp": 1698788978,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 4:\n\n(8 comments)"
        },
        {
            "timestamp": 1698789518,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(7 comments)"
        },
        {
            "timestamp": 1698789587,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1698789625,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1698846773,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 4:\n\n(5 comments)"
        },
        {
            "timestamp": 1701314338,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701314381,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701314381,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1701314749,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 5:\n\n(7 comments)"
        },
        {
            "timestamp": 1701315481,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76645/ : SUCCESS"
        },
        {
            "timestamp": 1701355893,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1701367611,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(11 comments)"
        },
        {
            "timestamp": 1701367854,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1701372464,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1701375911,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701375975,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701375975,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1701376338,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(6 comments)"
        },
        {
            "timestamp": 1701377295,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1701377303,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/76686/ : FAILURE"
        },
        {
            "timestamp": 1701377360,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701377360,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1701377539,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 8: New patch set was added with same tree, parent tree, and commit message as Patch Set 7."
        },
        {
            "timestamp": 1701377588,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701377588,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1701377590,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/76687/ : ABORTED"
        },
        {
            "timestamp": 1701377667,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1701377724,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 9.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701377737,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1701377774,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701377775,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1701377776,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8:\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/76688/ : ABORTED"
        },
        {
            "timestamp": 1701378896,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76689/ : SUCCESS"
        },
        {
            "timestamp": 1701800901,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 9:\n\n(6 comments)"
        },
        {
            "timestamp": 1701800922,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 10.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701801002,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701801003,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1701802000,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(5 comments)"
        },
        {
            "timestamp": 1701802101,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701802295,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701802364,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76821/ : SUCCESS"
        },
        {
            "timestamp": 1701802443,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701803153,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701806577,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701806963,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701811427,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701811438,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1701821194,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1701962081,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Uploaded patch set 11.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701962142,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701962142,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1701962796,
            "reviewer": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "message": "Patch Set 11:\n\n(2 comments)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1701963227,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76903/ : SUCCESS"
        },
        {
            "timestamp": 1701968113,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11: Code-Review+1"
        },
        {
            "timestamp": 1701981955,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12: Patch Set 11 was rebased\n\nCopied Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1701982064,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1701982064,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: -Ok-To-Test"
        },
        {
            "timestamp": 1701982120,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/76931/ : FAILURE"
        },
        {
            "timestamp": 1702055458,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13: Patch Set 12 was rebased\n\nCopied Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702055477,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13: Code-Review+2"
        },
        {
            "timestamp": 1702055537,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702055537,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: -Ok-To-Test"
        },
        {
            "timestamp": 1702056638,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/76985/ : SUCCESS"
        },
        {
            "timestamp": 1702076379,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as 0e373b53f81fc1720050571755ecfcdc6dd9ba9b"
        },
        {
            "timestamp": 1702076389,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        },
        {
            "timestamp": 1703012226,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "cadbbc3929ec9dc682ffc315a00f75e390d27978",
            "parents": [
                "27b0cf90f6cba207837f5c263a45c6ea5651975b"
            ],
            "ref": "refs/changes/77/67477/1",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1698784924,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Hey everyone, these are some changes in bmcweb needed to support Meta's internal TLS client certificates. These are guarded by a meson option and meant to be used in Meta's internal builds.\n\nThis was discussed in #redfish-and-bmcweb around August, apologies for taking so long to submit changes (still getting used to gerrit). Any feedback is extremely appreciated."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 51,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 183,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "bbab2384040a74a0f72579d6940066085ed54f00",
            "parents": [
                "27b0cf90f6cba207837f5c263a45c6ea5651975b"
            ],
            "ref": "refs/changes/77/67477/2",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1698785457,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 51,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 183,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
            "parents": [
                "27b0cf90f6cba207837f5c263a45c6ea5651975b"
            ],
            "ref": "refs/changes/77/67477/3",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1698785515,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "There's lots of CI failures here.  Please take a look and correct them."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Glad to see progress here.  Let me know if you need any help."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For new code, please use the if constexpr approach web've been doing in bmcweb_config.h\n\nalso, optionally including headers is something we no longer do due to build breakages.  Happy to discuss if you think our approach is wrong or could be improved holistically, just not in the context of new code."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Will have a go at this, let me check bmcweb_config.h"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In TLS, is this something we even need to be checking for?  Meta doesn't use this, but does anyone?  I suspect this can just be removed for all things, or at the very least made a generic option, non meta specific."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Good point, let me try making this a generic option."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Also, lets check to see if the Redfish spec specifies this explicitly."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Implemented as a -Dmutual-tls-enforce-key-agreement-bit option (default enabled)"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Did we discuss with redfish about what the correct check for this is?  I suspect it doesn't need to be an option, and we just were overly pessimistic before."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "We did not, what'd be the best channel to reach out to them?\n\nFor what is worth, I did not find anything supporting the usage of the key agreement bit in redfish docs, but it seems we're enforcing this bit since the original [design proposal](https://github.com/openbmc/docs/commit/38b2c1a2f44f1e5625657de9a16fd940a0af0e9e#diff-c6088da881d672cf38ae970eed8e476f00ad1a10bc5520d059680b56cde5447aR211) and [code](https://gerrit.openbmc.org/c/openbmc/bmcweb/+/23588), I can try reaching out to the original author as well to get more details.\n\nGiven the flag preserves the original behaviour by default, I can create a new change removing the enforcement and shift this discussion there, what do you think?"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We did not, what'd be the best channel to reach out to them?\n> \n\nRedfish forum or DMTF github.\n\n\n> For what is worth, I did not find anything supporting the usage of the key agreement bit in redfish docs, but it seems we're enforcing this bit since the original [design proposal](https://github.com/openbmc/docs/commit/38b2c1a2f44f1e5625657de9a16fd940a0af0e9e#diff-c6088da881d672cf38ae970eed8e476f00ad1a10bc5520d059680b56cde5447aR211) and [code](https://gerrit.openbmc.org/c/openbmc/bmcweb/+/23588), I can try reaching out to the original author as well to get more details.\n\n\nKeep in mind, the original commit predates mutual TLS being supported in the standard, and given some of the bugs I've seen, I'm not convinced it gets a lot of usage.\n\nI'm also happy to accept an argument that comes from an SSL/TLS standard for this not to be enforced, I'm just very worried about a \"choose your own adventure\" to security.  Either:\n\nA. The standards say that this bit should be enforced, and we shouldn't let people choose to not enforce it outside of an \"insecure\" option.\n\nB. (more likely the case) The original authors didn't understand the spec correctly, were overly restrictive, and we don't need to enforce this bit in any cases.\n\nLets see if we can gets some background to backup B.\n\n> \n> Given the flag preserves the original behaviour by default, I can create a new change removing the enforcement and shift this discussion there, what do you think?\n\nyep, I commented before that separating out the two changes would've been better, because they're fundamentally different."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm reading through the TLS1.2 RFC, and all of this stuff has to do with what type of key exchange you do.\n\nSection 7.4.2 of RFC5246 says\n```\n      DHE_RSA            RSA public key; the certificate MUST allow the\n      ECDHE_RSA          key to be used for signing (the\n                         digitalSignature bit MUST be set if the key\n                         usage extension is present) with the signature\n                         scheme and hash algorithm that will be employed\n                         in the server key exchange message.\n.....\n      DH_DSS             Diffie-Hellman public key; the keyAgreement bit\n      DH_RSA             MUST be set if the key usage extension is\n                         present.\n```\n\nhttps://www.rfc-editor.org/rfc/rfc5246#section-7.4.6\n\nSo what I suspect is that meta doesn't support DH_DSS or DH_RSA key exchange, so the intermediate unsets that bit because it doesn't want it to be used.  I suspect most certificate authorities aren't that advanced that they've gotten rid of all uses of the old algorithms.\n\nIf I look at the openssl code for this, it's checking KU_DIGITAL_SIGNATURE OR KU_KEY_AGREEMENT, not AND:\n\nhttps://github.com/openssl/openssl/blob/de8e0851a1c0d22533801f081781a9f0be56c2c2/crypto/x509/v3_purp.c#L720\n\nI suspect that's what we need to do here.  Just change the check to an or, remove the option value, and this can merge.\n\n\nIdeally we'd just be calling check_purpose_ssl_client and not inventing our own code, but that's a refactor for another time."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Actually, the openssl routines were pretty simple (the hardest part was writing a unit test).\n\nCould you check out:\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/68102\n\nAnd see if it solves your problem?"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Resolved, new check is compatible with Meta client certs"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 165,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You're now running BOTH sets of user parsing code, without a check to see if one succeeded.  I suspect we just need to make this flip between one set of logic and another."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 165,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "My impression is that lines 147:159 are more to sanitise the Subject string returned by `X509_NAME_get_text_by_NID()` (i.e. just to ensure it's a sane C++ string) (i.e. I'd likely need to redo the same sanitisation logic if we were to split), let me know if this is what you meant by both sets."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 165,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yeah, that's a fair point.  ACK"
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 165,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please remove the regex, especially for security critical code.  std::regex is not very performant, and can generally be replaced with a simple parser that doesn't require regex compilation on startup.  There's a bug that goes through documenting all the removals, and why."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 9,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For example, are you sure that zero or more match is correct here?  An empty username seems like it wouldn't be valid.\n\nIf this were a simple parser, it'd be a lot easier to explain in a comment whether that's intentional or not."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 11,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "The zero match is correct, e.g. `host:/blah.facebook.com` is a valid subject for a host certificates.\n\nI've tried a non-regex parser initially and I thought it was a bit too complex, will try my hand at it again."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "they're both complex, one is code we can read and compiles at compile time, one has a runtime overhead \ud83d\ude0a\n\nfor non-bmc use cases, regex is generally a perfectly acceptable choice, so i don't fault you for going that route."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 11,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Implemented logic using string operations, let me know what you think"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is this using a standard like spiffe?  I would much rather have generic parsing code that parses out the hostname than code that explicitly looks for facebook.com.  If the cert is signed, it's up to the signer if they want to sign other hosts.  \"was signed by facebook.com\" isn't really something the bmc should be enforcing just as a technical simplification, and clear separation of responsibilities.  ie, the BMC trusts any data that's signed, no need to do further verification, that's the responsibility of the signer."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 14,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "> Is this using a standard like spiffe? \n\nNo, AFAICT this is a Meta-specific convention (so unfortunately not very generic). \n\nThe host suffix bit is there more to be able to remove it easily later. We don't use these to uniquely identify hosts internally and avoids issues with username character count limits."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "this implies that the user on the bmc is going to be user_foo, not foo based on returning this.  I'm assuming that's not what you intend?  Users on the bmc are going to be \"foo\""
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Internally, we have three basic types of certs (\"user\", \"svc\", and \"host\") and the idea is to map those to BMC users with the <type> being used as prefix to eliminate  collisions if we have a service and a user and service with the same name, e.g:\n\n  \"user:zeus/dev123.facebook.com\" -> \"user_zeus\"\n  \"svc:zeus\" -> \"svc_zeus\""
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Internally, we have three basic types of certs (\"user\", \"svc\", and \"host\") and the idea is to map those to BMC users with the <type> being used as prefix to eliminate  collisions if we have a service and a user and service with the same name, e.g:\n\nright, so the core of the problem here is that on OpenBMC (and linux in general) \"name\" isn't used to differentiate service vs user.  OpenBMC has no sense of a service login at this point (well, it kinda does, but I'm assuming your service isn't the same as OpenBMCs definition of service), only the idea of a \"user\" so just collapsing it down to name means that things like IPMI can now break this code, by creating a user called \"foo\" instead of \"user_foo\"\n\nAs far as this patchset goes, this is the thing that I'd like to see ironed out at OpenBMC/dbus level.\n\nas far as a bmc is concerned, what is a \"service\" and is it any different than a user?  In this code, they're treated essentially the same.\n\n> \n>   \"user:zeus/dev123.facebook.com\" -> \"user_zeus\"\n>   \"svc:zeus\" -> \"svc_zeus\""
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "> In this code, they're treated essentially the same.\n\nThat's the intention, the idea is to leverage a BMC user as a natural way to map an external identity (a person, a service, or a host) to a set of permissions.\n\nI agree the term \"service\" is a bit confusing here. At Meta, that's generally understood as a containerised cloud service (that has a `svc:<service_name>` identity/cert that's used to interact with other services), and unlike e.g. a linux \"service user\" to set permissions to daemon processes (though with the same intent of restricting permissions to a \"service\")."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > In this code, they're treated essentially the same.\n> \n> That's the intention, the idea is to leverage a BMC user as a natural way to map an external identity (a person, a service, or a host) to a set of permissions.\n\nRight.... but in this case you're not mapping it to a set of permissions, you're mapping it to an /etc/shadow user.  \n\n> \n> I agree the term \"service\" is a bit confusing here. At Meta, that's generally understood as a containerised cloud service (that has a `svc:<service_name>` identity/cert that's used to interact with other services), and unlike e.g. a linux \"service user\" to set permissions to daemon processes (though with the same intent of restricting permissions to a \"service\").\n\nyep, I understood what a service was, I was mostly remarking that on the BMC there is no concept of a service.  As a concrete example, should we be naming service users service_foo instead of svc_foo?  I don't think there's anything that would say one way or another.\n\nMy worry is that if we set this precedent from within bmcweb without a discussion with phosphor-user-manager maintainers, we'll have inadvertently started storing user meta data in the username itself, which we should understand the consequences of before we do it."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "> My worry is that if we set this precedent from within bmcweb without a discussion with phosphor-user-manager maintainers\n\nWhat'd be a good way to reach out to them?\n\nIn principle, my reasoning was that if an org decides on using BMC users as an abstraction, potential conflicts with BMC's user naming rules would come with the territory and the risk would be on us (Meta) to adapt/resolve any issues that arise from this (I can add comments to make it clearer if it helps)\n\nFor example, without this change, I imagine there'd be a similar risk if we were able to produce client subject CNs using the same convention (eg. client certs with `Subject CN = \"svc_service_name\"`)."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > My worry is that if we set this precedent from within bmcweb without a discussion with phosphor-user-manager maintainers\n> \n> What'd be a good way to reach out to them?\n\nthe normal project communication paths.  The mailing list, discord, or opening a documentation review.\n\n> \n> In principle, my reasoning was that if an org decides on using BMC users as an abstraction, potential conflicts with BMC's user naming rules would come with the territory and the risk would be on us (Meta) to adapt/resolve any issues that arise from this (I can add comments to make it clearer if it helps)\n> \n> For example, without this change, I imagine there'd be a similar risk if we were able to produce client subject CNs using the same convention (eg. client certs with `Subject CN = \"svc_service_name\"`).\n\nI'm ignoring the above, because the discussion needs to be in a forum where the right people can respond.  A bmcweb code review isn't the right place to have this discussion."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Does this matter if we're not planning to use phosphor-user-manager to manage these users?  I don't think we can possibly add all of our services and users into phosphor-user-manager directly."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Currently the existing mTLS+Redfish code is implemented against pam and phosphor-user-manager, if you guys plan on making phosphor-user-manager optional, that's a much bigger discussion that again, I don't really think should happen in a bmcweb code review, and ideally would have at least a rough sketch of how it's intended to work before we start merging patches that break interface boundaries.  (I dislike the design process, so I don't want to make you go through that level of scrutiny).\n\nI would ask questions like how you intend to make AccountService (which isn't optional in the redfish spec) work without a Phosphor-user-manager backend, and other things that seem important.\n\nWith that said, if that's the case that you intend to follow this up with more implementation and discussion, but you don't want to do it now, what I would say is to refactor the code to only parse out user type, and post them the existing PUM way without the namespace (which should get a majority of the code merged), and we can follow up with service/host once you guys have sketched out how to make bmcweb work without a user backend.  Seem like an ok path?"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "> Seem like an ok path?\n\nSounds good to me, I'll isolate the svc/host logic into a separate change and we can discuss this with more detail later"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 40,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, probably want warning here or error here.  If the intermediate is signing bad requests, something has gone very... very wrong."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we avoid using an in-out parameter here?  The input and the output represent different things.  Putting them in one variable is confusing."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 55,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Ack"
                },
                {
                    "file": "meson.build",
                    "line": 80,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets make this option anem a less company specific enum, because I suspect others are going to have additional options, and I know things like spifee exist that might come up in the future.  something like:\n\ntls-username-parsing-mode: {CommonName, Meta, Spiffe, ....}"
                },
                {
                    "file": "meson.build",
                    "line": 80,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Ack"
                },
                {
                    "file": "meson.build",
                    "line": 80,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "s/anem/enum/g"
                },
                {
                    "file": "meson.build",
                    "line": 80,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done, added as `-Dmutual-tls-common-name-parsing='meta'` option"
                },
                {
                    "file": "meson.build",
                    "line": 450,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We intentionally run all unit tests with all options enabled.   Unit tests by definition shouldn't care what the config options are, unless they effect the actual output, in which case they should only be switching between the two behaviors in tests."
                },
                {
                    "file": "meson.build",
                    "line": 450,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 196,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "ee16618b842e2c52469d04bf3292ea1e786adc05",
            "parents": [
                "27b0cf90f6cba207837f5c263a45c6ea5651975b"
            ],
            "ref": "refs/changes/77/67477/4",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1698787126,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "missing testing."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Thanks for the feedback, will follow up with changes."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 60,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 198,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "097cefd4d92d6424f8005cf59fa728da8409b628",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/77/67477/5",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1701314338,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In the future, it would've been a lot better if this were a separate commit.  it's an independent feature flag, and would've made this commit smaller and more self container.\n\nAll good."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Could you please just update the existing mtls script to support your new type of encoding?\nhttps://github.com/openbmc/bmcweb/blob/master/scripts/generate_auth_certificates.py\n\nI appreciate a lot that you tested it very well, but checking in a test script into a user-driven repo when one already exists to do this kind of thing duplicates some effort."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "I can, would it be OK if I publish as a separate change? Need to ramp up on that script first."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep, feel free to split it up."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 49,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Remove.  Just say you enabled this meson option on romulus.  No need to go into this level of details on how."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 49,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just say \"unit tests pass\", which even itself is a given, because CI also runs the unit tests."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Although, but to you.  This is a nit."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Hi Ed, apologies for the delay. Think I've got everything based on your feedback, but let me know what you think"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just posted a bunch of fixes.  Missing includes, some of the refactorings I asked for with iostreams, and changing the prototype of your function to output a std::optional instead of using an in-out param which simplifies some code.\n\nFYI, Changing around the parser in the way I did results in an almost 1KB reduction in the final binary size when your option is enabled (which is about half a percent of the total).  While it doesn't sound like a lot, these kinds of fixes when made consistently keep bmcweb able to be applied to a number of systems, and given that its binary size is already big, keeping making every attempt to not make it worse keeps the binary usable for everyone.\n\nPlease take a look at the fixes I made and see if they make sense to you.  Feel free to remove anything you disagree with or you'd like to discuss."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 92,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets break this into its own branch.  This is code that will need to get security reviewed a lot.  The simpler it is, the better."
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "line": 92,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally we try to avoid using stringstreams for parsing.  They compile pretty heavy, are difficult to check for errors without exceptions, and aren't terribly performant.\n\nNot sure if that matters in this case, but one example of such a parser is here:  https://github.com/openbmc/bmcweb/blob/7164bc62dd26ec92b01985aaae97ecc48276dea5/redfish-core/include/utils/time_utils.hpp#L47\n\nUp to you if you want to change."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 25,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We would generally do\n\nstd::find(':')"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 53,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "in what conditions is the user host empty?  I suspect this should've been a hard error?"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 53,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nvm.  Figured it out.  done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: it might be better to use static constexpr's and lengths instead of hard-coded number.  Not sure which will actually be less cluttered."
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  Anything that avoids magic numbers like these is preffered.  Something like\n\n\nconstexpr std::string_view facebook = \".facebook.com\";\nif (userHost.ends_with(facebook)){\n    userHost.resize(userHost.size() - facebook.size();\n}"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is this possible?  You put the remaining username into userHost on line 52.  unless there was an error, this should always be eof, right?  I suspect we need to be checking for stream errors here?"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 106,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "wouldn't users be mapped to just userName, not userType_userName?"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 106,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "The problem is, in this example, these represent three separate entities in our case:\n\n```\nuser:zeus/hostname      # an employee with username=zeus\nsvc:zeus                # a service called zeus\nhost:/zeus.facebook.com # a host called zeus\n```\n\nIf we don't include the `userType` field, they'd all map to `sslUser = \"zeus\"`, which would not be correct. I've refactored the variable name as `entity` instead, let me know if it makes it clearer"
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "line": 106,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm closing this comment out, we can follow up on the other thread that's basically asking the same question."
                },
                {
                    "file": "meson_options.txt",
                    "line": 201,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, \"as a user name\" not \"as-is\""
                },
                {
                    "file": "meson_options.txt",
                    "line": 201,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I can't explain why this unit test is passing, but reading through the code, it looks like the code expects the hostnames to show up as one of 3 suffixes (.facebook.com etc), for which I would expect this check to fail.  Can you clarify if this is intentional?"
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 59,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -1
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -2
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 90,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 304,
            "sizeDeletions": 3
        },
        {
            "number": 6,
            "revision": "3a1d6992ebc84ada55da13a337dac43594e0a3d5",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/77/67477/6",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1701375911,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FYI, this was making a string copy which clang-tidy caught.  It's been fixed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -1
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 2
        },
        {
            "number": 7,
            "revision": "2311a9c72042c64177184d61e638a039e1b34196",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/77/67477/7",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1701377295,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -1
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 2
        },
        {
            "number": 8,
            "revision": "a25a6a8e4ba14c8973e0b00c11140bc5e939301e",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/77/67477/8",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1701377539,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -1
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 2
        },
        {
            "number": 9,
            "revision": "175d0b00232241409422e15728ccd5fb0ad15e16",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/77/67477/9",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1701377724,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Thanks for the feedback and code changes, it's very appreciated. I've made some minor adjustments from your code, let me know what you think"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If you'd like to get this on master quickly, I suspect we can get a version that ONLY does users, as bmc definitely has that idea, and follow up with"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "And follow up with the service/host idea in a later patch."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 110,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -1
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 2
        },
        {
            "number": 10,
            "revision": "ba222708761062006082e0b1c2273e19b404744b",
            "parents": [
                "7164bc62dd26ec92b01985aaae97ecc48276dea5"
            ],
            "ref": "refs/changes/77/67477/10",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1701800922,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Code itself looks like it implements what the commit message intends.  The remaining things are:\n\n1. Have a discussion with phosphor-user-manager maintainers, to figure out if namespacing service/host/user with the acronyms you put will work with other non-redfish services.\n\n2. Split out the key usage bit enforcement into its own patch, and discuss with DMTF, or pull up the TLS RFC and determine if we need to enforce this bit at all.\n\nAfter those things are done, this can merge."
                },
                {
                    "file": "meson_options.txt",
                    "line": 204,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The rest of the descriptions in this file are wrapped at 80 characters.  Please do the same."
                },
                {
                    "file": "meson_options.txt",
                    "line": 204,
                    "reviewer": {
                        "name": "Marco Kawajiri",
                        "email": "kawajiri@meta.com",
                        "username": "kawmarco"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 113,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -1
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 74,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 282,
            "sizeDeletions": 2
        },
        {
            "number": 11,
            "revision": "33c41ead654c178e55aadc8bbf017c89119c75de",
            "parents": [
                "75a4bb6cb0039627722a0146de08924f62554da2"
            ],
            "ref": "refs/changes/77/67477/11",
            "uploader": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "createdOn": 1701962081,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 49,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 190,
            "sizeDeletions": 1
        },
        {
            "number": 12,
            "revision": "cd86a821e2b80d5917bd085f510317526cd3d427",
            "parents": [
                "b914b54cb40334d2458013a2da398b2a70ebf70b"
            ],
            "ref": "refs/changes/77/67477/12",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1701981955,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 49,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 190,
            "sizeDeletions": 1
        },
        {
            "number": 13,
            "revision": "e01e632ab604c31fed2265bee8f89f05bbc7a9d3",
            "parents": [
                "3ba00f39bec28abc8ee9fd464432b19b4896141e"
            ],
            "ref": "refs/changes/77/67477/13",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1702055458,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 49,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 190,
            "sizeDeletions": 1
        },
        {
            "number": 14,
            "revision": "0e373b53f81fc1720050571755ecfcdc6dd9ba9b",
            "parents": [
                "23f1c96e6bc9060b54ff08a6b4d6cf8b8e0c3b23"
            ],
            "ref": "refs/changes/77/67477/14",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1702076379,
            "author": {
                "name": "Marco Kawajiri",
                "email": "kawajiri@meta.com",
                "username": "kawmarco"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "@marco, are you going to put together another WIP patchset for enabling the service/user distinction?  I suspect you can just check out the files from one of your older patchsets and push it into a new review."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 35,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls_meta.hpp",
                    "type": "ADDED",
                    "insertions": 73,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "test/http/mutual_tls_meta.cpp",
                    "type": "ADDED",
                    "insertions": 49,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 190,
            "sizeDeletions": 1
        }
    ]
}