{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "topic": "NMI-source",
    "id": "I42c647b7064329bc88a0ce981a8ed665c360b058",
    "number": 50021,
    "subject": "nmi: merge two NMI interfaces",
    "owner": {
        "name": "Andrei Kartashev",
        "email": "a.kartashev@yadro.com",
        "username": "alatarum"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/50021",
    "hashtags": [],
    "createdOn": 1640766894,
    "lastUpdated": 1704216885,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1640766894,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1640766914,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1640767334,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/32872/ : SUCCESS"
        },
        {
            "timestamp": 1641218613,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(7 comments)"
        },
        {
            "timestamp": 1641291287,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1641401264,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1641404122,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1641847679,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1641854161,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1641886934,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1642029484,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1642060134,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1642195549,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1644090609,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1644090619,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1644090619,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1644090711,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1644091036,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/36648/ : SUCCESS"
        },
        {
            "timestamp": 1645735529,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1655991214,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1655991261,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655991261,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1655991598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/45716/ : SUCCESS"
        },
        {
            "timestamp": 1656059715,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Topic x86-power-contol-fixup removed"
        },
        {
            "timestamp": 1656059728,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Topic set to NMI-source"
        },
        {
            "timestamp": 1657134026,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1657197650,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1704214962,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1704214988,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1704214988,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1704215008,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/77456/ : FAILURE"
        },
        {
            "timestamp": 1704215034,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1704215316,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1704215982,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1704216014,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1704216014,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1704216169,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/77457/ : FAILURE"
        },
        {
            "timestamp": 1704216546,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1704216568,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1704216568,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1704216885,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/77458/ : SUCCESS"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "16dd514d69e860f0158cb56a105fac72efbce2d4",
            "parents": [
                "4f703341d9f9b1bf873d3aa93255573e9eb44bfa"
            ],
            "ref": "refs/changes/21/50021/1",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1640766894,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@AndrewG - Adding you for IBM/Power feedback on this one."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: we should probably add dash in these everywhere (for consistency and correctness)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 8,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is it possible for us to simply add a Source to NMI?  There is an 'None' option.  I know this might also require some modification in more daemons but it seems like the more appropriate way going forward."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "I thought about this, but I this will require me to change all other interface users which I don't even know about and can't test."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You're going to have to find and fix these anyhow.  By adding a new function the existing implementations of Host.NMI will be missing a function and, if built using PDI, will fail to compile.\n\nhttps://github.com/search?q=org%3Aopenbmc+host.nmi&type=code\n\nIt should just be these 3.\n\n  https://github.com/openbmc/openpower-proc-control/blob/2246cca047e65613c4ad76848cfb34f78330bfcc/nmi_interface.hpp\n \n https://github.com/openbmc/bmcweb/blob/1e1e598df6d1d9530dde6e92d8f74f8143f60e50/redfish-core/lib/systems.hpp\n  https://github.com/openbmc/x86-power-control/blob/c46ebb493f0e0cc1ccc5525d5484465bba69551f/src/power_control.cpp\n\nI understand you might not be able to test the openpower-proc-control one.  We're going to have to rely on the maintainer for assistance there for any testing.  Just be clear to them about that."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "That's bad, I was sure, PDI will just create some default implementation which always throw something like \"not implemented\" exception.\n\nActually, Intel implementation had no this `NMIWithSource` method, but they had ugly way to trigger NMI with changing several properties. We can keep this approach to not change openpower specific code, but I really dislike that trick."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> That's bad, I was sure, PDI will just create some default implementation which always throw something like \"not implemented\" exception.\n\nPDI generates default implementations for properties but not for methods."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ok, I see. Then it is no sense to add separate method."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "None doesn't look like an acronym."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can we spell this out?  ChassisCommand (even though I don't really know what a chassis-command is)..."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Sure, no problem"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 54,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: PCI (acronym so capitals)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 54,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "PCH is something that only exists in Intel.\n\nIn some regards this makes me think that the values of these enumerations shouldn't all be in this interface, but some should be in 'com.intel.Control.Host.NMI'.  We've done this in a few other places where the \"enumeration\" property is just a string and the values can come from multiple interfaces.  Would that be the better thing to do on this property so we have less discussions about \"this interrupt is for this architecture\" or are we going to be able to keep a relatively small super-set?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "This is something I strongly disagree: the fact that PCH/ME is Intel-specific doesn't mean, it can't mentioned as one of possibly values. The interface was already moved from \"com.intel.xxx\" to \"openbmc_project\" to simplify it's usage, my intention here now is to make it more uniform, to reduce differences between Intel and Power \"worlds\" if OpenBMC project.\n\n> We've done this in a few other places where the \"enumeration\" property is just a string and the values can come from multiple interfaces.  \n\nHow could this be implemented on PDI level? How could you generate bindings for that? Do we already have support for such \"multiple enums for one parameter\"? Otherwise is looks to me as you discrediting idea of using PDI-generated binding by yourself by asking to use free from strings instead of enums."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> This is something I strongly disagree: the fact that PCH/ME is Intel-specific doesn't mean, it can't mentioned as one of possibly values. The interface was already moved from \"com.intel.xxx\" to \"openbmc_project\" to simplify it's usage, my intention here now is to make it more uniform, to reduce differences between Intel and Power \"worlds\" if OpenBMC project.\n\nAnd this is good intention on your part.  Typically I've been refraining from large enumeration lists that contain architecture-specific values though so that other architectures don't pay the penalty of these enums.  PCH itself is likely not going to exist for much longer even on Intel.  AMD is going to have their own things.  I don't want this list to become a superset of every processor ever made.\n\n> How could this be implemented on PDI level? How could you generate bindings for that? Do we already have support for such \"multiple enums for one parameter\"? Otherwise is looks to me as you discrediting idea of using PDI-generated binding by yourself by asking to use free from strings instead of enums.\n\nI'm not asking for free-form strings.  I'm asking for strings of a specific, well-defined structure. ;)\n\nYes, sdbusplus/PDI sort of already supports this.  Not as ideally as I'd like probably but fine enough.  As we get more of these we may decide to make the syntax slightly friendlier perhaps but that will probably require adding some decoration to the YAML to help the generator out.\n\n  sdbusplus::message::convert_from_string<std::variant<enum1, enum2, enum3>>(source)\n\nThat will return a variant containing one of the 3 enum types."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Without declaration in YAML, this looks like undocumented hack. I would prefer to not use it in this form.\n\nI still can't get your point: what is wrong with having all the variants in one YAML file? Do you care about generated code size? Then, we probably can introduce something like \"platfrom\" flag for conditional code-generation, like:\n        - name: PCH\n          platform: x86-intel\n          description: >\n            Via southbridge NMI."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Is the PCH type used anywhere?  Is it possible to clean up this list, and remove anything that isn't currently used?  Then we can discuss adding them back in as individual reviews when there is a specific need."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Without declaration in YAML, this looks like undocumented hack. I would prefer to not use it in this form.\n\nIt is documented, isn't it?  Why would we do something different than what other interfaces already do?\n\n> I still can't get your point: what is wrong with having all the variants in one YAML file? Do you care about generated code size?\n\nNo, it isn't just code size.  They end up having to have case statements (or a \"default\") for hardware they have no idea what it is.  If they add a \"default\" it means that they lose compile-time-checking for new added hardware that they really DO care about.  At which point, we might as well simply use strings.\n\n> Then, we probably can introduce something like \"platfrom\" flag for conditional code-generation, like:\n\nProposals for an entirely new YAML schema should not be buried in an interface modification like this.  If you want to propose a new way to document this, this is fine, but does that mean you're also signing up to add support in PDI / sdbus++?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "@Jason, it is only used by oem handlers in intel-ipmi-oem, so it is on your (Intel-team) side to decide if we can remove something here. Actually, none of this \"NMISource\" is used elsewhere outside of intel-ipmi-oem, so I don't think anyone except Intel care about this.\n\n@Patrick\nCan you point some particular example of that \"other interfaces\"?\nWhen I want to get  Interface documentation, I open YAML, corresponding to this interface and I expect to find there all valid values for the property in this interface. Of at least the reference to where can I get more information. How this will look for your \"multi-union\" property?\n\nI'd like to think we strive to the ideal world, where all applications in OpenBMC uses PDI bindings to work with interfaces and especially unions ;).\n\n> If you want to propose a new way to document this, this is fine, but does that mean you're also signing up to add support in PDI / sdbus++?\nI don't think I can do this now, that was just thinking loudly )"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "> @Jason, it is only used by oem handlers in intel-ipmi-oem, so it is on your (Intel-team) side to decide if we can remove something here. Actually, none of this \"NMISource\" is used elsewhere outside of intel-ipmi-oem, so I don't think anyone except Intel care about this.\n> \nI checked with my team.  We likely do not need some of these properties anymore, but there is concern about changing user-facing properties without fully understanding them, so if possible it would be good to keep them defined."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Could you please check, if PCH really can trigger NMI and report to BMC via ipmi about it triggered? \nIf it is not a case, I believe it is save to remove this entry and close this discussion."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": ">there is concern about changing user-facing properties without fully understanding them\n\nWho would be the users here?  If it is existing code we should be able to search for it, right?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "> >there is concern about changing user-facing properties without fully understanding them\n> \n> Who would be the users here?  If it is existing code we should be able to search for it, right?\n\nSorry for the delay. The users here are external.  This is an option in intel-ipmi-oem that an external user could set for the source, and since we don't know if there are any external users that still rely on this setting, we would like to keep it, if possible."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> @Patrick - Can you point some particular example of that \"other interfaces\"?\n\nI must have missed this.\n\nDump.CreateDump's AdditionalData field and Inventory.Decorator.Compatible requirements documented in Software/README.md are two that come to mind."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> This is an option in intel-ipmi-oem that an external user could set for the source, and since we don't know if there are any external users that still rely on this setting, we would like to keep it, if possible.\n\nWe should be able to handle this in code in intel-ipmi-oem.\n\nI'm not interested in keeping around legacy interfaces to keep downstream code happy.  I think every enumeration is currently available as it use to be.  I would like to deprecate PCH, but I'm fine with not doing that now.  I don't really see any impact to the existing code base that isn't being proposed as fixes (and the one I've mentioned missing in bmcweb).  If there is upstream code to be fixed, let's point that out and do it.\n\nIf someone is sshing in and running busctl, there is nothing we can do about that.  Any other external interface should be through managed code that we can fix if we missed something."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -46
                }
            ],
            "sizeInsertions": 76,
            "sizeDeletions": 74
        },
        {
            "number": 2,
            "revision": "fb60b5e7dcec101535b39029c31ff55431fb8cd8",
            "parents": [
                "4f703341d9f9b1bf873d3aa93255573e9eb44bfa"
            ],
            "ref": "refs/changes/21/50021/2",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1644090609,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 46,
                    "deletions": -2
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -46
                }
            ],
            "sizeInsertions": 70,
            "sizeDeletions": 76
        },
        {
            "number": 3,
            "revision": "fe8ebe1ff2108e0d3629abfab891013d18d56035",
            "parents": [
                "0d921265d3ee62885fcf313215c0bea451e26984"
            ],
            "ref": "refs/changes/21/50021/3",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1655991214,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Seems reasonable to me. Thanks for updating the openpower-proc-control code as well. May want a small update to https://github.com/openbmc/docs/blob/master/designs/nmi-dbus-interface.md to reflect the new parameter but it was a pretty minimal design doc to start with."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 49,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Based on Jason's remarks above I'd like a small comment added here that this is retained for legacy reasons and additional chipset-specific NMIs are not to be added to this enumeration set."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -2
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -46
                }
            ],
            "sizeInsertions": 72,
            "sizeDeletions": 76
        },
        {
            "number": 4,
            "revision": "50cd7a0bce9fecce1eed588e38bebea0c38f8f03",
            "parents": [
                "cc4ce70daa8ffed4848c15c5ddc50c51b31dda4a"
            ],
            "ref": "refs/changes/21/50021/4",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1704214962,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I've rebased this, but it looks like there is potentially a change missing in bmcweb?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I rebased this.  It looks to me like there is a bmcweb change likely missing."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -15
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -2
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -44
                }
            ],
            "sizeInsertions": 72,
            "sizeDeletions": 61
        },
        {
            "number": 5,
            "revision": "946647868e7d7908d58482fdd6192dfbb8cc3f17",
            "parents": [
                "cc4ce70daa8ffed4848c15c5ddc50c51b31dda4a"
            ],
            "ref": "refs/changes/21/50021/5",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1704215982,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -15
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -15
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -2
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -44
                }
            ],
            "sizeInsertions": 72,
            "sizeDeletions": 76
        },
        {
            "number": 6,
            "revision": "12215883532367d32c7608d8f3a6d558a262e600",
            "parents": [
                "cc4ce70daa8ffed4848c15c5ddc50c51b31dda4a"
            ],
            "ref": "refs/changes/21/50021/6",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1704216546,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -15
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -15
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -2
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -44
                }
            ],
            "sizeInsertions": 72,
            "sizeDeletions": 76
        }
    ]
}