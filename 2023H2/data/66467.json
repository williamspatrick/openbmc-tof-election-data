{
    "project": "openbmc/libmctp",
    "branch": "master",
    "id": "I0d6b246857552ebc0cd5ab880520f75124baf79e",
    "number": 66467,
    "subject": "Add MCTP over KCS transport binding",
    "owner": {
        "name": "Konstantin Aladyshev",
        "email": "aladyshev22@gmail.com",
        "username": "Kostr"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libmctp/+/66467",
    "hashtags": [],
    "createdOn": 1693993603,
    "lastUpdated": 1696595455,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1693993603,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1693993638,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1693993639,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1693993655,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/73770/ : FAILURE"
        },
        {
            "timestamp": 1693993798,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1693993822,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1693993823,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1693993861,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/73771/ : SUCCESS"
        },
        {
            "timestamp": 1694087738,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1694087774,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1694087774,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1694087806,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/73863/ : SUCCESS"
        },
        {
            "timestamp": 1694740317,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1694766277,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1695085129,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1696234224,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1696234239,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1696234240,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1696234268,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74627/ : SUCCESS"
        },
        {
            "timestamp": 1696234329,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1696380212,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 4: Code-Review-1\n\n(21 comments)"
        },
        {
            "timestamp": 1696427997,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1696428008,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1696428008,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1696428041,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74700/ : SUCCESS"
        },
        {
            "timestamp": 1696428795,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 5:\n\n(15 comments)"
        },
        {
            "timestamp": 1696466680,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1696467698,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(9 comments)"
        },
        {
            "timestamp": 1696539776,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1696550992,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1696595413,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1696595455,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Abandoned"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "ce0fc67020a5e50c28b72a430d09d0f16e84269b",
            "parents": [
                "2a2a0f6fd83318cfc37f44a657c9490c6a58a03a"
            ],
            "ref": "refs/changes/67/66467/1",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1693993603,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "kcs.c",
                    "type": "ADDED",
                    "insertions": 597,
                    "deletions": 0
                },
                {
                    "file": "Makefile.inc",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "utils/mctp-demux-daemon.c",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": 0
                },
                {
                    "file": "libmctp-kcs.h",
                    "type": "ADDED",
                    "insertions": 92,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 765,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "7e9cc4d9d1088e52fddbfb85115cff7e824232c0",
            "parents": [
                "2a2a0f6fd83318cfc37f44a657c9490c6a58a03a"
            ],
            "ref": "refs/changes/67/66467/2",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1693993798,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "kcs.c",
                    "type": "ADDED",
                    "insertions": 605,
                    "deletions": 0
                },
                {
                    "file": "Makefile.inc",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "utils/mctp-demux-daemon.c",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": 0
                },
                {
                    "file": "libmctp-kcs.h",
                    "type": "ADDED",
                    "insertions": 92,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 773,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "3a168c8481c36421c842e024025c81e638a75564",
            "parents": [
                "2a2a0f6fd83318cfc37f44a657c9490c6a58a03a"
            ],
            "ref": "refs/changes/67/66467/3",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1694087738,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Only a partial review, but something that I think can be addressed relatively quickly"
                },
                {
                    "file": "libmctp-kcs.h",
                    "line": 66,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Bare in mind that this is the public header for the binding, that is, the declarations that a user will have access to by including the header.\n\nMost of the above are implementation details. I much prefer those are placed in the `.c` file and not in the header, as we don't have any motivation to expose them. Rather, we have a motivation to avoid exposing them, as otherwise we're stuck maintaining them forever (someone will use them for something and prevent us from removing them)."
                },
                {
                    "file": "libmctp-kcs.h",
                    "line": 66,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Can we place all of it in some other header which is not a library API header?\n\nFor example `kcs.h`?"
                },
                {
                    "file": "libmctp-kcs.h",
                    "line": 66,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Is there a need to though? What other code are the definitions and macros going to be shared with?\n\nMaybe there's some scope for sharing some of the definitions and macros with astlpc.c, but that's not how the patch is written currently. That's also a cleanup we can do later on. I think it's probably easier if we keep these changes isolated for the moment."
                },
                {
                    "file": "libmctp-kcs.h",
                    "line": 66,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "libmctp-kcs.h",
                    "line": 73,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This can also go in the implementation"
                },
                {
                    "file": "libmctp-kcs.h",
                    "line": 73,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "kcs.c",
                    "type": "ADDED",
                    "insertions": 603,
                    "deletions": 0
                },
                {
                    "file": "Makefile.inc",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "utils/mctp-demux-daemon.c",
                    "type": "MODIFIED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "libmctp-kcs.h",
                    "type": "ADDED",
                    "insertions": 92,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 774,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "54242e25ae072e02911ddfc9d3b4487a14382904",
            "parents": [
                "2a2a0f6fd83318cfc37f44a657c9490c6a58a03a"
            ],
            "ref": "refs/changes/67/66467/4",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1696234224,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Can you please add a link to the specification in the commit message?\n\nI think it's also worth noting here that it makes use of the \"raw\" KCS chardev, which is not likely to go into the upstream kernel at any point."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Hi Konstantin, I've left a few comments. The most significant issue is the implementation blocks rather than driving a state machine through polling for file descriptor readiness.\n\nAlso not sure how much effort you want to put into this given you have the kernel implementation getting reviews upstream."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Yeah, the motivation to refactor all of the code to state machine logic is very low at this point. Not sure if I'll find the time to do all of this.\n\nBut nevertheless since the current solution is working I think it would be nice to make it a good patch at least. I've corrected all the other comments that you've left.\n\nBTW, can we still merge:\n\n`66497: astlpc: Provide KCS device path as a binding argument` | https://gerrit.openbmc.org/c/openbmc/libmctp/+/66497\n\n`66498: libmctp: Drop 'astlpc-raw-kcs' PACKAGECONFIG option` | https://gerrit.openbmc.org/c/openbmc/openbmc/+/66498\n\n?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I've merged the libmctp patch, we'll have to squash the recipe patch into the bump when it appears."
                },
                {
                    "file": "kcs.c",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Perhaps state here that Table 1 defines the PEC in terms of the SMBus specification, with a link to the SMBus specification.\n\nThat said, on what basis do we ignore bit 8? What is the source of that assertion?"
                },
                {
                    "file": "kcs.c",
                    "line": 80,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "All this algorithm along with the comments was copied from the edk2 code.\n\nIn the kernel driver I've verified that I can just use standard 'i2c_smbus_pec' from the \nhttps://github.com/torvalds/linux/blob/71e58659bfc02e4171345f80b13d6485e9cdf687/drivers/i2c/i2c-core-smbus.c#L28 instead. So I probably copy that code and refer to kernel. I think this would be more clear."
                },
                {
                    "file": "kcs.c",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "What's the license of the EDK2 code? Regarding the kernel, you can't immediately copy that code in as it will be under a GPL license, which is not compatible with Apache-2.\n\nThere may be some room to move as the routines are short and fairly universal, but we need to be cautious."
                },
                {
                    "file": "kcs.c",
                    "line": 80,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "I'm not an expert on the license stuff, but here I can see:\n```\nSPDX-License-Identifier: BSD-2-Clause-Patent\n```\nhttps://github.com/tianocore/edk2-platforms/blob/master/License.txt\n\nThere is also a `License-History` file in the repository:\n```\nhttps://github.com/tianocore/edk2-platforms/blob/master/License-History.txt\n```\nWhat does it mean for us?"
                },
                {
                    "file": "kcs.c",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "My brief investigation suggests Apache-2 and BSD-2-Clause should be fine. However, we need to abide by the BSD requirements and make sure the copyright information is retained (along with the SPDX license specifier). I think it would be easiest to do this in its own file. If you don't mind creating a crc8.c and moving it there that would help."
                },
                {
                    "file": "kcs.c",
                    "line": 103,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I've developed a bit of a preference for avoiding `__attribute__((packed))` where we can. It's non-standard, and the compiler is smart enough to optimise away `memcpy()` calls.\n\nHowever, this is just an implementation detail. We're not spraying `__attribute__((packed))` over structs visible in the public headers (unlike other libraries I'm aware of). If you're happy to change it that would be nice, but I won't require you do so."
                },
                {
                    "file": "kcs.c",
                    "line": 106,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Generally capitalisation is used for constants. I'd prefer we `s/PEC/pec/`."
                },
                {
                    "file": "kcs.c",
                    "line": 106,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done\n\nI've also renamed the fields in the header as they are named in the kernel driver:\n```\nnetFnAndLUN   -> netfn_lun\ndefiningBody  -> defining_body\n```"
                },
                {
                    "file": "kcs.c",
                    "line": 107,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "As above."
                },
                {
                    "file": "kcs.c",
                    "line": 129,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why `void *`?"
                },
                {
                    "file": "kcs.c",
                    "line": 129,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "I've replaced it to `struct mctp_binding_kcs *kcs`.\nNot sure why I did `void` initially"
                },
                {
                    "file": "kcs.c",
                    "line": 138,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Perhaps we could defer to strace here?"
                },
                {
                    "file": "kcs.c",
                    "line": 138,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "I don't usually have strace in my builds for example. So for me prints are preferred approach.\n\nBut I've dropped them for your request"
                },
                {
                    "file": "kcs.c",
                    "line": 142,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why `void *`?"
                },
                {
                    "file": "kcs.c",
                    "line": 142,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "I've replaced it to `struct mctp_binding_kcs *kcs`.\nNot sure why I did `void` initially"
                },
                {
                    "file": "kcs.c",
                    "line": 150,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Again, these values are all something we can determine with strace."
                },
                {
                    "file": "kcs.c",
                    "line": 150,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "I don't usually have strace in my builds for example. So for me prints are preferred approach.\n\nBut I've dropped them for your request"
                },
                {
                    "file": "kcs.c",
                    "line": 165,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "On the BMC side a write to the status register updates the status (unlike the host side, which puts data into ODR and sets the Command bit in the status register). This should be called `mctp_kcs_write_status()`."
                },
                {
                    "file": "kcs.c",
                    "line": 165,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "kcs.c",
                    "line": 198,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I'd prefer we learn the lessons from having to convert the astlpc driver from blocking to polling. Can you please implement the binding as a state machine driven by events on the raw KCS file descriptor instead?"
                },
                {
                    "file": "kcs.c",
                    "line": 279,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "We already have `crc32.h` and `crc32.c`. Maybe pull this out into `crc8.h` and `crc8.c`? Or amalgamate both into just `crc.h` and `crc.c`. Ideally we'd add some tests as well.\n\nAlso, do we need to be generic over the polynomial?"
                },
                {
                    "file": "kcs.c",
                    "line": 279,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Would it be okay if we write it like this?\n\nKernel also have a function generic over the polynomial. But at the same time the POLY is fixed as define, so I'm not sure if it should be placed in something called `crc.c`. We can make `crc8` to accept `poly` as an argument to keep all the SMBUS stuff out of the `crc.c`. But in this case the code would be not identical to kernel.\n\nhttps://github.com/torvalds/linux/blob/71e58659bfc02e4171345f80b13d6485e9cdf687/drivers/i2c/i2c-core-smbus.c#L28\n```\n#define POLY    (0x1070U << 3)\nstatic uint8_t crc8(uint16_t data)\n{\n        int i;\n\n        for (i = 0; i < 8; i++) {\n                if (data & 0x8000)\n                        data = data ^ POLY;\n                data = data << 1;\n        }\n        return (uint8_t)(data >> 8);\n}\n\n// Packet error code (PEC), as defined in the SMBus 2.0 Specification\n// PEC calculation algorithm is copied from the 'linux/drivers/i2c/i2c-core-smbus.c' driver\nstatic uint8_t i2c_smbus_pec(uint8_t crc, uint8_t *p, size_t count)\n{\n        int i;\n\n        for (i = 0; i < count; i++)\n                crc = crc8((crc ^ p[i]) << 8);\n        return crc;\n}\n```"
                },
                {
                    "file": "kcs.c",
                    "line": 279,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Okay. I don't mind, I was just curious about whether we needed to be generic over the polynomial. I don't think we do. We can bake the polynomial into the implementation and call it `crc8_ccitt()` in accordance with the table here:\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check#Polynomial_representations_of_cyclic_redundancy_checks\n\nOtherwise, my concern here is mixing GPLv2 kernel code with other licenses. If you've used the BSD-2-Clause EDK2 as a reference let's keep that. See my comment above about separating out the implementation into `crc8.c`."
                },
                {
                    "file": "kcs.c",
                    "line": 325,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This might be a slightly less tedious using designated initialisers:\n\n```\nstruct mctp_kcs_header kcs_hdr = {\n    .netFnAndLUN = MCTP_KCS_NETFN_LUN;\n    .definingBody = DEFINING_BODY_DMTF_PRE_OS_WORKING_GROUP;\n    .len = mctp_pktbuf_size(pkt);\n};\n```"
                },
                {
                    "file": "kcs.c",
                    "line": 325,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "kcs.c",
                    "line": 334,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "libmctp tries to follow kernel style. While any reasonably recent GCC supports mixed declarations and statements it would be nice to group the declarations at the top of the function."
                },
                {
                    "file": "kcs.c",
                    "line": 334,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done. Move all of the declaration to the function start here and in other places"
                },
                {
                    "file": "kcs.c",
                    "line": 336,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "`memcpy(send_buf, &kcs_hdr, sizeof(kcs_hdr));`"
                },
                {
                    "file": "kcs.c",
                    "line": 336,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done\n\nI've renamed all\n```\nsizeof(struct ...)\n```\nto\n```\nsizeof(*ptr_to_struct)\n```\nor\n```\nsizeof(struct_variable)\n```"
                },
                {
                    "file": "kcs.c",
                    "line": 338,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Maybe a comment here that this can't overflow as `kcs_hdr.len` is `uint8_t`, which is accounted for by the 256 in the declaration of `send_buf`?"
                },
                {
                    "file": "kcs.c",
                    "line": 338,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "kcs.c",
                    "line": 340,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "If we're going to stick with packed structs, this should be `memcpy(..., &kcs_tlr, sizeof(kcs_tlr));`"
                },
                {
                    "file": "kcs.c",
                    "line": 340,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Done"
                },
                {
                    "file": "kcs.c",
                    "line": 351,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "See previous comments about this being a state machine rather than a blocking loop."
                },
                {
                    "file": "kcs.c",
                    "line": 462,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Again, this should be a state machine whose actions hand control back to the caller without blocking."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "kcs.c",
                    "type": "ADDED",
                    "insertions": 661,
                    "deletions": 0
                },
                {
                    "file": "Makefile.inc",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "utils/mctp-demux-daemon.c",
                    "type": "MODIFIED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "libmctp-kcs.h",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 774,
            "sizeDeletions": 2
        },
        {
            "number": 5,
            "revision": "b3fd79e8540e441a774d3592b2f3c0313fa5073c",
            "parents": [
                "2a2a0f6fd83318cfc37f44a657c9490c6a58a03a"
            ],
            "ref": "refs/changes/67/66467/5",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1696427997,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I kept the previous review a bit abstract as I was hoping for a refactor to make the implementation async, but given you don't plan to do that I've taken a closer look at the blocking implementation. I've made some further comments."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "It turned out that the current `kcs_bmc_cdev_raw` driver can't be used as-is in the code. And the modifications for the driver are not that simple and even if possible probably not worth the effort since the Linux kernel driver approach is on the way.\n\nFor example in some points KCS state machine requires BMC to read STR, but in the process the code can't read IDR. And the `kcs_bmc_cdev_raw` driver doesn't satisfy such requirements.\n\nWith these race cases communication is not reliable, sometimes your packets would go flawlessly and sometimes KCS machine would stuck.\n\nThe error that I've caught was connected with the `WR_END` command byte:\n\nHOST writes `WR_END=0x62` command, but BMC sees 0x62 as `DATA` (bit 4 in the STR register is read as 0)."
                },
                {
                    "file": "kcs.c",
                    "line": 104,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "bit of a nit but this should probably be `(b)` for expansion-safety"
                },
                {
                    "file": "kcs.c",
                    "line": 203,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Can we at least implement this internally using `poll(2)`?"
                },
                {
                    "file": "kcs.c",
                    "line": 231,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Can we at least implement this internally using `poll(2)`?"
                },
                {
                    "file": "kcs.c",
                    "line": 257,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Is this necessary?"
                },
                {
                    "file": "kcs.c",
                    "line": 276,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "See the concern about mixing GPL-2 and Apache-2 code."
                },
                {
                    "file": "kcs.c",
                    "line": 525,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "You must terminate the loop and transition to an error state if read_len exceeds 255. We don't want it to be possible to overflow the buffer."
                },
                {
                    "file": "kcs.c",
                    "line": 567,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why not allocate the packet up front and push the data directly into the packet buffer rather than bounce through a stack buffer?"
                },
                {
                    "file": "kcs.c",
                    "line": 567,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "We don't know the allocation size since the `kcs_header->len` is a part of the received data.\n\nMaybe we can use max possible size here instead (256)? The API is not documented very well, so I'm unsure if this code would lead to the correct MCTP packet for example:\n```\nmctp_pktbuf_alloc(&kcs->binding, 256);\nmemcpy(mctp_pktbuf_hdr(pkt), (uint8_t *)(kcs_header + 1), kcs_header->len);\n```\n\nAlso using static memory instead of the dynamic allocation (malloc/free) is probably easier for the system. Not sure if this relevant though."
                },
                {
                    "file": "kcs.c",
                    "line": 567,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Your caution is valid, as to implement my suggestion we need to fix up line 589 below:\n\n```\nkcs->binding.pkt_size = 256;\n```\n\nWith we can do `mctp_pktbuf_alloc(&kcs->binding, 0)`, and then use `mctp_pktbuf_push(&kcs->binding, &data, sizeof(data))` for each byte read off the KCS interface (line 524)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "configure.ac",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "kcs.c",
                    "type": "ADDED",
                    "insertions": 635,
                    "deletions": 0
                },
                {
                    "file": "Makefile.inc",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "utils/mctp-demux-daemon.c",
                    "type": "MODIFIED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "libmctp-kcs.h",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 753,
            "sizeDeletions": 2
        }
    ]
}