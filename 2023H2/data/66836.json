{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "readability-function-size",
    "id": "Icbdd55d2f672037a57d8ed08d52b20427e9e1e4f",
    "number": 66836,
    "subject": "clang-tidy: propose a base .clang-tidy",
    "owner": {
        "name": "Alexander",
        "email": "alexander.hansen@9elements.com",
        "username": "pointbazaar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/66836",
    "hashtags": [],
    "createdOn": 1695924469,
    "lastUpdated": 1698848007,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1695924469,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1695924488,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695924488,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1695924514,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74580/ : SUCCESS"
        },
        {
            "timestamp": 1695932844,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1695934288,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1695935163,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1695961201,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1695978403,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1695978429,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695978429,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1695978450,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74586/ : SUCCESS"
        },
        {
            "timestamp": 1695978780,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1695979353,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 3: Commit message was updated.\n\nCopied Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1695979394,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1695979394,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1695979420,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74588/ : SUCCESS"
        },
        {
            "timestamp": 1696279490,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1696281944,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(7 comments)"
        },
        {
            "timestamp": 1696291894,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1696334970,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1696334997,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1696334997,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1696335139,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74648/ : SUCCESS"
        },
        {
            "timestamp": 1696335188,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 4:\n\n(8 comments)"
        },
        {
            "timestamp": 1696359549,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1696374595,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1696406491,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1696406515,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1696406515,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1696406539,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74679/ : SUCCESS"
        },
        {
            "timestamp": 1696407596,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1696413072,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1696467998,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1696526077,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(6 comments)"
        },
        {
            "timestamp": 1696586568,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1696586598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1696586598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1696586624,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/74765/ : SUCCESS"
        },
        {
            "timestamp": 1696588593,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 6:\n\n(6 comments)"
        },
        {
            "timestamp": 1696606422,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1697643889,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1697648459,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1697651692,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1697653735,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1697653756,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1697673418,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1697734917,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1697737866,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1698085074,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1698085106,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1698085106,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1698085374,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/75382/ : SUCCESS"
        },
        {
            "timestamp": 1698085434,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1698848003,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7: Code-Review+2"
        },
        {
            "timestamp": 1698848007,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully rebased and submitted as 5ae481581052b996966ef4c3df18afb12b1fbda8"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1286dee479bd8bc71a5f6e22d496d67a223fe865",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/1",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1695924469,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How did we arrive at these values, and why do they differ from the tidy defaults?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "the values are a suggestion. If someone has a better idea...\n\nThe clang-tidy defaults at\n https://clang.llvm.org/extra/clang-tidy/checks/readability/function-size.html\nare not really useful since everything besides\n\"StatementThreshold\" is ignored."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> If someone has a better idea...\n\nStart with the defaults, cite experts or the coding standard on places we've differed from the defaults.\n\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f3-keep-functions-short-and-simple\n\nFWIW, the existing coding standard says to use cyclomatic complexity over actual line length, which would imply that we really should be turning on:\n\nhttps://clang.llvm.org/extra/clang-tidy/checks/readability/function-cognitive-complexity.html"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Agree with Ed on both fronts. Need to base the numbers in existing recommended practices, and cyclomatic complexity is a better estimate of the code being problematic."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Agreed that the cyclomatic complexity is also a good measure.\n\nBut cpp core guidelines also have a recommendation for the number of lines\nin F.3: Keep functions short and simple.\n\nIncluded the cyclomatic complexity check, since they also have a recommendation for it.\n\nI would like to turn on both, since its nice to be able to have the entire function on one screen."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You've keyed in 10 into readability-function-cognitive-complexity.Threshold, but the units are different between what clang-tidy calls it and what F3 calls it, right?  They follow different rules?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "how do they differ? Is there a function to map one to the other?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Both clang-tidy and cppcoreguideslines have documentation that can explain how they function better than I can in a commit message.  One is a test for \"cognative complexity\" the other is a test for \"cyclomatic complexity\".  I don't have the full details on if they're the same.\n\nhttps://clang.llvm.org/extra/clang-tidy/checks/readability/function-cognitive-complexity.html\n\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f3-keep-functions-short-and-simple\n\nOne asks for \"10 different paths\" the other asks for complexity."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "In that case, the way out could be to just fix the clang-tidy default of 25.\n\nClang-Tidy would then be the source for that specific value just like many other thresholds used in clang-tidy checks for openbmc.\n\nFixing it to not cause any disruptions in case they change it."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This commit now looks much closer to something I can get behind.  Thanks for the good work!  I would like to see some evidence that hard-enforcement of these rules produces a better result in terms of actual code, and ideally change to make this soft enforcement (warning, rather than error).  If that's a matter of just picking a project and putting together a refactoring patchset series to bring it into compliance, that would be good to show how much better enforcing this can be.  Feel free to target any project I maintain and I'd be happy to review your patches (or feel free to work with another maintainer).\n\nIf it helps you, please take a look at most of my clang-tidy commits, where in general when enabling it, I will include a number of diffs that show fixed issues that were made better by enabling the flag.  Feel free to use these as a reference.\n\nPlease bear in mind, that this is no requirement that you fix ALL issues in the project, but just enabling this rule without any additional refactoring examples is just a new burden to the project maintainers, rather than being a help."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "> This commit now looks much closer to something I can get behind.  Thanks for the good work!  I would like to see some evidence that hard-enforcement of these rules produces a better result in terms of actual code, and ideally change to make this soft enforcement (warning, rather than error).  If that's a matter of just picking a project and putting together a refactoring patchset series to bring it into compliance, that would be good to show how much better enforcing this can be.  Feel free to target any project I maintain and I'd be happy to review your patches (or feel free to work with another maintainer).\n\n+1\n\n> \n> If it helps you, please take a look at most of my clang-tidy commits, where in general when enabling it, I will include a number of diffs that show fixed issues that were made better by enabling the flag.  Feel free to use these as a reference.\n\n+1\n\n> \n> Please bear in mind, that this is no requirement that you fix ALL issues in the project, but just enabling this rule without any additional refactoring examples is just a new burden to the project maintainers, rather than being a help.\n\n+1"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "I picked one of your smaller projects to begin with, ipmbbridge.\nhttps://gerrit.openbmc.org/c/openbmc/ipmbbridge/+/66866\n\nThe review for correctness of the refactoring might be the harder part.\nFollowing the control flow and making sure it is still the same as before.\n\nEnabling and enforcing checks for function size and cyclomatic complexity (with exceptions for some functions) could make it easier to review refactorings like this in the future, as there are less paths through the code one needs to check."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you please pick a project that already has clang-tidy enabled, and a little less trivial?   ipmbridge doesn't run tidy at all today (although is something I'd love to see happen) and hasn't really been refactored since Dawid wrote it, so it's really hard to evaluate if these checks actually help, or what their impact is on code review.  It also has a negligible amount of code, so I don't have confidence that the refactor we're seeing there is actually representative. \n\nEven with that, I'm seeing some worrying things about the settings we've picked, namely the max params number.  cppcoreguildelines, says to \"be suspicious\" at 7 params, not that it's outright banned.  I wonder if the hard limit should be closer to 20-30, given that a lot of structs in c++ need initialized in a constructor, and the existing tidy checks don't seem to make a distinction there.  Is there a way we can do better?  Have you done any research into other projects that have enabled these checks, and what values they chose as a hard backstop?  I'm hoping we're not the first that's enabling these checks.\n\n> The review for correctness of the refactoring might be the harder part.\n\nAgreed.  How would you suggest we handle that?  If refactoring causes significant numbers of failures, that seems like it would defeat the goals of having readable code cause fewer bugs.\n\n> as there are less paths through the code one needs to check.\n\nI don't quite understand this.  In total, there's the same number of paths, they're just separated differently, right?  Arguably there's more paths, because methods can now be called from whereever.\n\nInterestingly enough making the code more readable results in a 70 line increase in total code in that small ipmb example.  Not sure how much we can determine from that, but it's interesting the net is such a large positive number."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "(1)\nYou can suggest a project, and i can refactor some functions if so desired.\n\nBut i will not completely refactor something and invest time just to prove a point to someone, if we are still unclear about parameter values for these checks.\n\n(2)\nOther projects would not be a source for a value, right? \nA quick search provides inspiration.\nhttps://github.com/search?q=readability-function-size.ParameterThreshold&type=code\n\n(3)\nThe problem causing the 'hard to refactor' is the functions being so cyclomatically complex in the first place. Which only adds to my point.\n\nThe way to refactor would be to do so with a cup of coffee and a bunch of time on the hands of the reviewer. The benefit is that this will hopefully never be required again in the future, if the checks are enforced and not disabled again in the future by someone too lazy to refactor their code.\n\nYes the number of total possible paths stays the same or increases with the number of functions. But when changes are made, they are made to these individual functions, which can be reviewed separately.\n\n(4)\nThe total number of lines does not matter so much in terms of being able to maintain something, if the code is well structured.\n\nAn example would be linux kernel hwmon subsystem, where drivers mostly follow the same structure and one can easily come in and create a new hwmon.\n\nIn various projects, total lines of code go into the millions, and they still make regular releases and continue their developments."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 27,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "088d62e4e790a85a4e5c7409d7c70a2327a043d4",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/2",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1695978403,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 38,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 9,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 47,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "abb937a742b60625ef9e44cda96778cc28253efe",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/3",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1695979353,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please wrap your commit 50/72"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "ok"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nitpick, link this at the bottom with something like\n\ncpp core guidlelines [1]\n\nThen at the bottom\n\n\n[1] https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines\n\n\n\nThis is a nit, fix if you think it makes your commit better."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "it does make it better \ud83d\ude0a Thanks."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I agree with the goal \"to make the code more readable\"\n\nI worry, that enforcing arbitrary limits will not help. strict adherence to this rules will not necessarily facilitate cleaner code.\n\nOne can imagine \n- Splitting one logical function multiple time, so it complies with with 60 line rule. \n- Or packing all 8 parameters into a onetime use structs to get around the 7 parameter limit. \n- Or dumping cyclomatic complexity into a library,\n\n\nA strong system of ownership and reviewers keeps code clean, and maintainable. I would perfer not to limit either the maintainers or the devs in such a strict way"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I think Ed makes a good point about excluding these settings from the `WarningsAsErrors` set. That at least gives maintainers some automated feedback on contributions without enforcing the style."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "I'm unsure about it. Picked the latest jenkins run from ci-repository as an example (https://jenkins.openbmc.org/job/ci-repository/74640/console). Here, very many warnings are displayed, and would almost certainly be ignored by >90% of developers, as the job was successful.\n\nPeople almost never care about warnings. They just get buried in the endless amount of logs.\n\nRegarding the point about strict adherence: Ed mentioned (over here https://gerrit.openbmc.org/c/openbmc/bmcweb/+/66823) that certain functions\ncan be excluded from some checks by using NOLINT. \n\nAnd i agree that some functions such as constructors might take many parameters for good reasons, and some functions are just inherently nontrivial, with lots of branches and splitting them up for the sake of cyclomatic complexity would just make them more confusing.\n\nThat's part of the reason i proposed very lax thresholds in the beginning, until i was asked to back up the values. Cpp Core Guidelines are more strict.\n\nBut using NOLINT we can just exempt some parts of the code from these rules."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "> People almost never care about warnings. They just get buried in the endless amount of logs.\n> \n\nEd's idea was that the warnings would be something that *maintainers* can reference, for a period, while we evaluate whether these settings are something we want to enforce. I don't think he was suggesting that we should expect contributors to dig into the warnings if CI gave the patch a Verified+1."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "I'm all for first enabling the new checks as warnings.\nAnd i am certain we should enforce these checks (with NOLINT exceptions) for every repo, after it comes into compliance.\n\nReadability is essential for maintainers to be able to efficiently review changes and for contributors to make changes without introducing new bugs in functions with 200+ lines of code and deep nesting of control flow.\n\nI don't see how refactoring can be done otherwise in a project like this, where many people submit patches to many repositories which all might introduce new checks or behaviors into already existing functions. The patch might work and be correct but the function keeps on growing and it gets harder to change it without fear of breaking something. And making Maintainers responsible for refactoring does not scale...\n\nJust my opinion :)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Yes, it seems we are agreeing with each other."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> And i am certain we should enforce these checks (with NOLINT exceptions) for every repo, after it comes into compliance.\n\nI can't say I'm as certain about these being hard failures, which is why I'd like to see how much code we can actually get cleaned up with this.  NOLINT warnings everywhere makes code less readable IMO, so the goal should be NOLINT is the uncommon exception.\n\nTake note that we use cppcheck as it stands today with warnings enabled, but result ignored in the build system, so there is some precedent for running static analysis and using manual human effort to find the issues.\n\n> Readability is essential for maintainers to be able to efficiently review changes and for contributors to make changes without introducing new bugs in functions with 200+ lines of code and deep nesting of control flow.\n\nAs a maintainer, I find that it's significantly more to do with how well the code path is tested, and how organized the code is, rather than directly how many lines a function is, but I'm happy to have any improvement.\n\n> I don't see how refactoring can be done otherwise in a project like this\n\n> The patch might work and be correct but the function keeps on growing and it gets harder to change it without fear of breaking something\n\nOnly if maintainers don't do their jobs.  I routinely tell people to break out code into smaller functions before adding large blocks of code to an existing method.  Maybe you've seen differently?\n\nMost of the really bad code in bmcweb was written that way by the author, many of whom disappeared from the project once their code was accepted.  It's a hard tradeoff to be able to say \"This code is ugly, but solves the engineering problem, so we should accept it, warts and all.\"\n\n\n> That's part of the reason i proposed very lax thresholds in the beginning, until i was asked to back up the values\n\nThe most important thing here is that you proposed lax thresholds without any real plan to get to consistency or proper enforcement."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 33,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Currently, the code is very poorly tested.\n\nRecently, in-band update was broken on the master branch for a while,\narguably one of the most important features.\n\nSo for most repos, right now, testing cannot be relied upon to determine if a change will break stuff. \n\nWhen you manually keep track of the size of a function, why not automate it?\nOne less manual task for maintainers."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think this is deprecated?  We can just point at the coding standard?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 35,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "i removed the fluff."
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 5,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do we want to start with these only as warnings instead of hard errors?\n\nI think that would be a much easier way to roll this out.  We can take a look at what kinds of failures this flags, and as repos come into spec, or add NOLINT flags where appropriate, we can have repos start enforcing the rule.\n\nThen once all repos are enabled, you can work with maintainers to start refactoring the functions to be more to your liking.  Seem reasonable?"
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 5,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "> Do we want to start with these only as warnings instead of hard errors?\n> \n> I think that would be a much easier way to roll this out.  We can take a look at what kinds of failures this flags, and as repos come into spec, or add NOLINT flags where appropriate, we can have repos start enforcing the rule.\n> \n> Then once all repos are enabled, you can work with maintainers to start refactoring the functions to be more to your liking.  Seem reasonable?\n\n+1"
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 5,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Agreed."
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 7,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is it possible to include comments with the links to F.2 and F.2 in cppcoreguidlelines so it's more clear why these are here?  If this file doesn't support comments, no need to worry about it, but it would be nice to have a pointer.  Most of the other rules we have the clang-tidy rule itself links to the check, so we don't really need a link."
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 7,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "+1"
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 7,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "included the comments."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 38,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 9,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 47,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "4b9e7076164c73b9ef664c7a4f6b15adf0294cfc",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/4",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1696334970,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 4,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is it possible to indent these for readability?\n\n```\nChecks: '\n    -*\n    readability-function-size,\n    readability-function-cognitive-complexity\n'\n```"
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 4,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "done."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "34d88eb211a9cf37a4b280a6b88e25cd07afd3f4",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/5",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1696406491,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "the exact words are \"be suspicious\""
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "changed it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 32,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't see anything added here about the plan.  As-is, it's just a new test that no project passes, so is arguably a net negative to the project.  Can you outline what the goal is here, and who is taking responsibility for getting at least some of the codebase up to the standard."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 32,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Added a section about the goal/responsibilities."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is it your intention to get these passing across a subset of the project, or just to enable the tests?  (please answer in your commit message).  This commit functionally is only documentation which is good to get consensus (which I think we have), now what's the plan for the actual refactoring work?\n\nA couple things of note that I see in the ipmbridge patchset now:\n\nThe NOLINTBEGIN directives themselves only show the tidy check that failed, and don't make it very obvious which parameter of the test actually failed.  It took me a good bit of looking to be able to tell that some NOLINT directives were for extra params.  Also, NOLINTBEGIN and NOLINTEND make more of a mess than I would've thought.  Does NOLINT not work?  Can we not refactor these functions?  This makes me worried about the readability being worse with that param enabled.  I would probably advocate for removing the param limit for the moment until we can solve these issues, and come up with a strategy for refactoring.\n\nMore importantly ipmbbridge is so little code, and is already relatively structured, that I'm not sure we're doing ourselves a service picking it as an example.  It's also not run on very many platforms, so it's not a great place to start to look at how many bugs we cause as part of these refactoring.  It's likely that any bugs we inject wouldn't be found for a very long time (as has happened in the past) and we don't get enough code reviews on that project to see how it effects code submissions that violate these rules."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Added a section to the commit message. Plan is to enable it for a few of the more central projects.\n\nThe NOLINT works for clang-tidy checks right? I didn't see examples of breaking it down to the parameters of an individual check.\n\nNOLINTBEGIN and NOLINTEND would be needed, as the clang-tidy docs say that NOLINT and NOLINTNEXTLINE do not work across multiple lines. Our clang-format wraps function signatures though.\n\nThe parameter limit could stay a warning. Or we increase it. But then the value would have to be backed up, right? What would be your source for a value?\n\nipmbbridge was just meant as an example, i am not advocating for the refactoring to be merged.\n\nAs an example, i think it is sufficient to see how the new checks might benefit the project."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 47,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/6",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1696586568,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 48,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Great!  Can't wait to see what you do with those repos."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 48,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I get that you don't want to do a major refactor without knowing the exact values, but without merged examples of this making a portion of the codebase better, it's really hard to approve a blanket value.\n\nAs written, if all of these checks were enabled on the repos, they'd cause hundreds of errors in CI logs, which would cover up real failures and make reviews much more difficult.\n\nConsidering that the ipmbbridge refactor says in the commit message that it isn't recommended to be merged because it probably causes bugs, I'm not sure how we would apply this to larger repos.\n\nAll in all, I'm all for simplification, lets start working on the refactoring, and figure out what the tradeoff is in actual code that we can merge.  If we can confidently say \"setting the max line length to X results in better OpenBMC code\" and we have some merged reviews to back that up, that's fine."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "- to me it is obvious that these checks would help to improve the codebase.\n  Arriving at blanket values is easy, as some of them are suggested by \n  C++ Core Guidelines.\n\n- not advocating for enabling these as warnings across all openbmc repos.\n  Warnings that no one reads do not help. This patch is for 'docs' only\n  and should reflect an agreement in the community about how the code should look.\n  If and when to enable the warnings / hard errors would be something on a\n  per-repository basis.\n\n- putting mergeable refactorings as a requirement for arriving at some values\n  creates an incentive to refactor a 'little less trivial' project.\n  Large refactorings are very much bugprone without tests.\n  \n  Agreeing on some values and then starting with the smaller projects\n  would probably go much more smoothly.\n\n- there is almost no tradeoff. It simply results in better code.\n  The tradeoff is having to do a NOLINT once in a while.\n\n- if there is no consensus, then new and existing subprojects can\n  sprout functions of unbounded size, nesting and parameter count,\n  worsening the situation."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The comments below make it clear that you don't intend to make this a global, all repos rule, so I don't think checking this in the docs repo is appropriate.  With that said, I think we have a set of starting values.  Lets start the refactoring work on the repos you listed and see how it goes with these settings."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> The comments below make it clear that you don't intend to make this a global, all repos rule, so I don't think checking this in the docs repo is appropriate.\n\nI'm undecided on this statement.\n\nWith the .clang-format, we've fully rolled that out across all the repos and the .clang-format is intended to be an unchanged \"apply to all repos\" reference.  We're not really there with .clang-tidy yet.  I do think it is valuable to have a \"if you're going to enable clang-tidy, this is a minimum of what you should strive to enable\" reference.  That's probably a lot better than the current approach which is that each repository has a different subset of clang-tidy tests enabled and configured differently.\n\nI think this is mostly an issue about being clear as to where we're currently at with clang-tidy and what the intended purpose of this reference copy is."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> if you're going to enable clang-tidy, this is a minimum of what you should strive to enable\" reference. \n\nThat sounds reasonable, but I don't think what's here represents a \"minimum\", and instead represents a new test that we want to turn on.  I would expect a lot of other tests to be turned on before complexity.  A long time ago when I was pushing on the template repo, I intended to make https://gerrit.openbmc.org/c/openbmc/docs/+/41099/4/template_app/.clang-tidy the minimums, but obviously I never got the repo created.\n\nWith that said, if we want to merge this, my opinion here isn't strong.  My opinion can basically be summed up as \"I wish this patchset did more\".  We can iterate on it."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "i would prefer to have a small selection of checks that provide a lot of value instead of turning on anything that looks nice.\n\nEvery check that makes it into docs and eventually becomes a warning/hard error in repos forces contributors to do another iteration on their patchset.\n\nWhat 'more' should this patchset do?\n\nAdding a lot of checks and ultimately failing to make the checks hard errors may lead to people forgetting about them and only the CI logs getting longer.\n\nAlso, currently i kind of feel uncomfortable about the 'Who will be responsible'\nsection and would like to remove it.\n\nWhile i can certainly do some amount refactoring, a patch should stand on its own without vague references to future work that may or may not be done by an individual."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> What 'more' should this patchset do?\n\nDocument that this config file is idealized, and not intended to be applied or enforced project wide (yet).\n\n> Also, currently i kind of feel uncomfortable about the 'Who will be responsible'\n\nThen work with the contributors of those projects and identify people that can do the refactoring if you don't feel like you can do them yourself.  With that said, if you want to remove the section from your commit message, all good.\n\nI think that in the broad strokes, we're agreeing that:\n\nThe tidy checks for complexity _could_ have value in the project.\nWe should start working through refactoring the complicated portions of the stack, and retesting.\n\nI think I said this before, but I'll reiterate, I've turned these checks on before for some of the projects you mention (dbus-sensors and bmcweb), and that lead to a number of refactoring patchsets that I wrote to make things simpler and break things out.  Refactoring is a ton of work, so I appreciate you volunteering to do even some of it."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "documented (in the .clang-tidy) that the checks are currently optional."
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What does this mean?  The default value isn't implemented?"
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 15,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "It means that clang-tidy apparently does not implement cyclomatic complexity."
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Gotcha.  so we just use the default here."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 78,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "84b3878288ab3fd9543114aa37c2a81ac08bbc8d",
            "parents": [
                "717d273cf8bceac3868a278aeb34d19e8d74c1b3"
            ],
            "ref": "refs/changes/36/66836/7",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1698085074,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 79,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "5ae481581052b996966ef4c3df18afb12b1fbda8",
            "parents": [
                "60fea57cb8fb434fe6d37981fcb5a7f66ad596d0"
            ],
            "ref": "refs/changes/36/66836/8",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1698848007,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 79,
            "sizeDeletions": 0
        }
    ]
}