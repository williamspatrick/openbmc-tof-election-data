{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "Ie8289e63fff7abaaf9ede7684037b0afc43ef0a2",
    "number": 67475,
    "subject": "Add property subscription utility",
    "owner": {
        "name": "Jonathan Doman",
        "email": "jonathan.doman@intel.com",
        "username": "jonathan-doman"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/67475",
    "hashtags": [],
    "createdOn": 1698781967,
    "lastUpdated": 1702701594,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1698781967,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1698782002,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1698782002,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1698782157,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/75641/ : FAILURE"
        },
        {
            "timestamp": 1698785117,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1698785147,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1698785147,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1698785580,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/75643/ : SUCCESS"
        },
        {
            "timestamp": 1701799440,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(12 comments)"
        },
        {
            "timestamp": 1701800841,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1702699559,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1702699621,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1702699621,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1702700018,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/77160/ : SUCCESS"
        },
        {
            "timestamp": 1702701594,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 3:\n\n(13 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "a9a7de438ada81d1954b9e17abd641f9061edc68",
            "parents": [
                "6db88387ecd17feca151a86304741ab462c13cd0"
            ],
            "ref": "refs/changes/75/67475/1",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1698781967,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/openbmc_project/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "example/meson.build",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "example/prop_match.cpp",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "example/yaml/xyz/openbmc_project/Example.interface.yaml",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/openbmc_project/Example/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "type": "ADDED",
                    "insertions": 167,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/meson.build",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 307,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "2c78758d1a7d0b769b9a18cd79de8c398611ebcc",
            "parents": [
                "6db88387ecd17feca151a86304741ab462c13cd0"
            ],
            "ref": "refs/changes/75/67475/2",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1698785117,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "example/prop_match.cpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please don't use printf in C++ code."
                },
                {
                    "file": "example/prop_match.cpp",
                    "line": 23,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                },
                {
                    "file": "example/prop_match.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm putting up a commit to move this to the sdbusplus namespace.  I don't know why we ended up with a \"phosphor\" namespace in this repository years ago."
                },
                {
                    "file": "example/prop_match.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Ack"
                },
                {
                    "file": "example/prop_match.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we need to show an example with raw sd_event_loop calls?\n\nI'd prefer if we can eliminate all this sd-event stuff from line 37-59.  It seems like noise in the scope of an example."
                },
                {
                    "file": "example/prop_match.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "AFAICT, there's no way to use `Timer` without this kind of code. But I agree it was noisy and I replaced it with a std::thread to get equivalent behavior that's a bit more clear."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why are we adding this when we already have support in both asio and async for getting a property?  I don't trust non-async code to call this function as it is because people are probably not thinking about the lifetimes correctly."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "This particular `getProperty()` function I agree probably doesn't add much utility, but it's used by `subscribeToProperty()`. I could put it in a details namespace so no one uses it directly.\n\n`subscribeToProperty()` is in the asio callback style of programming, but I chose to write it without any asio dependency to be more generic. This way it's usable by any asio apps and apps that just use synchronous calls. I figured there might be appetite for this style after seeing `message::call_async()`. But if you think this should be kept in the asio box I can make that change. I can see how it might be perceived as muddying the waters and providing too many options for users."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This potentially fails if the property itself is a variant and/or enum."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please use `unpack`."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Can you clarify what might fail? I added a variant type to the example and it still seems to work fine."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 59,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I really don't want another weird \"make your own error code\" path.  If you don't want exceptions, use ASIO with the magic compile flags to avoid exceptions.  Otherwise, use exceptions."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Exceptions would be fine, but how can I do that with a callback style of programming? The signal comes in asynchronously and any error would have to be communicated to the callback."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why not a named struct or tuple?  Is there an advantage of array here?\n\nIf we use tuple can these be move constructed instead of unique_ptr held?"
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Changed to named struct with `optional` wrapper. There was no compelling reason to use a unique_ptr here."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 121,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please don't use custom error types outside of ASIO."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 121,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Will continue discussion of error handling in other thread."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 126,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You're not covering the service owner name change signal."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 126,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "It's not clear to me why that would be needed - can you clarify?"
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 133,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Prefer to use `unpack`."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 133,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 139,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Something is very funny here.  In the lambda constructor on line 102 you did a `std::move(handler)`.  Then on line 130 you did a by-value copy?  But then here you're doing a move copy?  The lifetimes are not obviously correct."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 139,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Agreed, it was funny. Changed to putting the common logic into a struct/functor managed via shared_ptr. It's still an unusual pattern but at least the lifetimes are more clear."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Use `unpack`."
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "line": 142,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/openbmc_project/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "example/meson.build",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "example/prop_match.cpp",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "example/yaml/xyz/openbmc_project/Example.interface.yaml",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/openbmc_project/Example/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "type": "ADDED",
                    "insertions": 167,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/meson.build",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 307,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "62e095d014b0c97babc73093c27e37f45b3bc83c",
            "parents": [
                "2bf0bb29cf5c44da8fc94cee8ef87e23def03dba"
            ],
            "ref": "refs/changes/75/67475/3",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1702699559,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/openbmc_project/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "example/meson.build",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "example/prop_match.cpp",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "example/yaml/xyz/openbmc_project/Example.interface.yaml",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/openbmc_project/Example/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/property.hpp",
                    "type": "ADDED",
                    "insertions": 179,
                    "deletions": 0
                },
                {
                    "file": "example/gen/xyz/meson.build",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 393,
            "sizeDeletions": 0
        }
    ]
}