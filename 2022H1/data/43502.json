{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I6fb298675053f3e6490204e805159c0e2f0b50d0",
    "number": 43502,
    "subject": "Add a method to set priority for rules.",
    "owner": {
        "name": "Hao Jiang",
        "email": "jianghao@google.com",
        "username": "drakedog2008"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/43502",
    "commitMessage": "Add a method to set priority for rules.\n\nUpon a request with certain URI, the matching rule with highest\npriority with be returned. This is extremely helpful when we set a\ndefault behavior for a series of URI with wild card(Rule Param).\n\nTo achieve priority, rule ptr is moved from individual vector into\ntrie structure, so that trie node could visit rule properties.\n\nThe rule vector has two preallocated index with special meaning:\n1. index == 0 meaning rule not exist. It is replaced by nullptr.\n2. index == 1 meaning redirect rule. It is currently not used. But it is\nreplaced by method getRedirectRule().\n\nTested:  unit test\n\nSigned-off-by: Hao Jiang <jianghao@google.com>\nChange-Id: I6fb298675053f3e6490204e805159c0e2f0b50d0\n",
    "createdOn": 1621892417,
    "lastUpdated": 1644882713,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1621892417,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1621892431,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621892466,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17946/ : FAILURE"
        },
        {
            "timestamp": 1621895491,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1621895511,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621895703,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17949/ : FAILURE"
        },
        {
            "timestamp": 1621899037,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1621899061,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621899869,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17951/ : FAILURE"
        },
        {
            "timestamp": 1621900125,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1621900156,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1621900156,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621900171,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621900174,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17952/ : ABORTED"
        },
        {
            "timestamp": 1621900326,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17953/ : FAILURE"
        },
        {
            "timestamp": 1621900430,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1621900446,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621900783,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17954/ : FAILURE"
        },
        {
            "timestamp": 1621901875,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1621901891,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621902228,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/17955/ : FAILURE"
        },
        {
            "timestamp": 1621978497,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1621978521,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621978862,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/18076/ : FAILURE"
        },
        {
            "timestamp": 1621979505,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1621979526,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1621980049,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/18077/ : SUCCESS"
        },
        {
            "timestamp": 1622063210,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 9:\n\n(2 comments)\n\nFor context are there many rules that have matching URI's when  using the wildcard? Could you give me a concrete example?\n\nIs it possible to save the Rules in order by priority. This would allow you can take the first matching rule, rather then iterating though."
        },
        {
            "timestamp": 1622063635,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 9:\n\n> Is it possible to save the Rules in order by priority. This would allow you can take the first matching rule, rather then iterating though.\nOn further thought that does not make seance."
        },
        {
            "timestamp": 1622064622,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Patch Set 9:\n\n(2 comments)\n\n> For context are there many rules that have matching URI's when  using the wildcard? Could you give me a concrete example?\n\nThe unit test are good examples. \n\n> Is it possible to save the Rules in order by priority. This would allow you can take the first matching rule, rather then iterating though.\n\nNo it cannot. the rules are stored in trie structure so there are no linear order. And to find a rule from an URL, we have to traverse the trie. So an ordered queue doesn't save time."
        },
        {
            "timestamp": 1622069029,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 9: Code-Review+1\n\nLooks reasonable to me."
        },
        {
            "timestamp": 1622076051,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(8 comments)\n\nI didn't make it through the whole patchset."
        },
        {
            "timestamp": 1622140330,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Patch Set 9:\n\n(7 comments)"
        },
        {
            "timestamp": 1622140825,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1623080809,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1623081221,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(3 comments)"
        },
        {
            "timestamp": 1625788514,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Patch Set 9:\n\n(3 comments)"
        },
        {
            "timestamp": 1644882713,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "68d5fa46a009e950b80544fbf8f3a7348595d84c",
            "parents": [
                "b614e2bde68db6712228f8533f56f94e41fda624"
            ],
            "ref": "refs/changes/02/43502/1",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621892417,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 155,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -87
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 279,
            "sizeDeletions": 90
        },
        {
            "number": 2,
            "revision": "d221e907de00512c7a7f189b7bd4d95c78244346",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/2",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621895491,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 160,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -87
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 285,
            "sizeDeletions": 90
        },
        {
            "number": 3,
            "revision": "852dca86289e09c2133b682a3502a5787f0c8c07",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/3",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621899037,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 160,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -88
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 285,
            "sizeDeletions": 91
        },
        {
            "number": 4,
            "revision": "dbddd682f2ed01c17617b19c05da11c448454ae6",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/4",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621900125,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 160,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -88
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 287,
            "sizeDeletions": 91
        },
        {
            "number": 5,
            "revision": "ed690c1bf83fdbd8f9e6adaa3917c7a9cb2c0f91",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/5",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621900156,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 160,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -88
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 287,
            "sizeDeletions": 91
        },
        {
            "number": 6,
            "revision": "ccf47d33d27f2b592eceabbe1ca656af1194a25d",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/6",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621900430,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 160,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -88
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 287,
            "sizeDeletions": 91
        },
        {
            "number": 7,
            "revision": "b1c5022b088b0e71b5e8f1a5c60a606405976a31",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/7",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621901875,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 160,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -86
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 287,
            "sizeDeletions": 89
        },
        {
            "number": 8,
            "revision": "d43b81c304ebeadfdf757a010a31c3addaed7d68",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/8",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621978497,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 159,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -86
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 286,
            "sizeDeletions": 89
        },
        {
            "number": 9,
            "revision": "7548fb413b5a90206b3f4bab99012c5340ff7333",
            "parents": [
                "2ebb9683287cf6b1a2f2cc3c077bd99aceefa8dd"
            ],
            "ref": "refs/changes/02/43502/9",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1621979505,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It would've really helped if this change were made in a different commit.  This is going to significantly change the cache loading of the router, as what existed there was done on purpose to reduce the cache misses for the hot path (ie searching for a URI).\n\nCan you walk me through why this was required?  It would seem like the flattened node structure would've still worked, and this was just an extra cleanup."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "I thought about making it 2 patches. But I found it is hard to explain the reason why we need the first patch until it reaches second patch of adding priority. \n\nI can make it a separate patch if you think it is more clear. \n\nThe reason of the refactor is that, priority belongs to rule and routing algorithm(find) belongs to trie. In order to implement priority search/find, rule needs to be visible to Tire. \n\nFor the previous implement, both rule (vector) and trie are parallel member variables of router. So when trie need to visit rule for priority, it has to claim its ownership by router then redirect to rule with vector index. \n\nGiven that trie and router are two individual class, I believe it is a bad practice to add a router*/router& to trie to claim the ownership. Making rule belongs to Trie makes more sense."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "BTW, what do you mean by cache loading? optimizeNode() within validate()? \n\nIf it is, the mechanism is still here untouched."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The reason of the refactor is that, priority belongs to rule and routing algorithm(find) belongs to trie. In order to implement priority search/find, rule needs to be visible to Tire.\n\n\nThis doesn't \"require\" that we flatten the tree;  Similarly, the http verb (GET/POST/PATCH) belongs to the rule, but can still operate just fine.\n\nWhat I suspect needs to happen here is the trie needs to be updated with a structure that supports priority.\n\n\n> BTW, what do you mean by cache loading? optimizeNode() within validate()? \n\nNo, I mean, when a URL is looked up, your patchset will pull more cache lines into the processor, for data that isn't required to fulfill the request.  Not all requests will require looking at the priority of every handler, so keeping them in separate structures ensures that we only pull in those cache lines when they're needed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "> > The reason of the refactor is that, priority belongs to rule and routing algorithm(find) belongs to trie. In order to implement priority search/find, rule needs to be visible to Tire.\n> \n> \n> This doesn't \"require\" that we flatten the tree;  Similarly, the http verb (GET/POST/PATCH) belongs to the rule, but can still operate just fine.\n\nThe reason GET/POST/PATCH works fine without the refactor is that only Router needs to operation on these members of Rule (to handle requests). \n\nHowever, for priority, things are different. Trie needs this variable from Rule to perform the trie search. \n\n> \n> What I suspect needs to happen here is the trie needs to be updated with a structure that supports priority.\n> \n\nI think it is more reasonable that priority is an attribution of rule rather something belongs to the Trie, given we are setting the priority in the following way: \n\n```\n   rule1.name(\"rule1\").priority(1) \n```\n\n\n> > BTW, what do you mean by cache loading? optimizeNode() within validate()? \n> \n> No, I mean, when a URL is looked up, your patchset will pull more cache lines into the processor, for data that isn't required to fulfill the request.  Not all requests will require looking at the priority of every handler, so keeping them in separate structures ensures that we only pull in those cache lines when they're needed.\n\nI don't think my patchset will increase the search time complexity of an URL. Each URL will go through the height of (PARAMed) trie with or without priority. \n\nAs for data complexity/throughput, a ptr of rule is actually passed into for each visiting Node. Since the rule is pre-allocated in the rule vector, then it is just loading 2 integers from memory into register and do compare. I cannot see much of extra cash line?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we just remove it entirely?  We don't use it, and its usage was deprecated a long time ago.  The code you're seeing there is just remnants that haven't been cleaned up."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Yep, I can do that."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "What runs the unit test file given here? Does this unit test need to be added to a list somewhere, perhaps in the Meson configuration file, in order to get it to run?\n"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 1158,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is the safety check that we've now lost because we've moved to a pointer."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 13,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "This is a bug fix actually. routing.hpp requires this header. \n\nThis problem wasn't exposed because of the include sequence. bmcweb include this header ahead of routing.hpp."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 108,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Are these only used in the test?"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "No it will be used for anyone who want to set a highest or lowest priority."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I only see these used in unit tests, and would imagine they're a bit of an anti-pattern.  There should be no route with a \"max\" priority such that it can't be overridden."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "But we still need priorityMin(). I am going to use min for default rule of redfish to read cached responses. \n\nI made a priorityMax() because: \n1. the beauty of symmetry (LoL. \n2. it is easier for the users to static_assert their priority within [min, max)."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> But we still need priorityMin(). I am going to use min for default rule of redfish to read cached responses. \n\nShouldn't the default be 0?  That way, any handler can choose to be higher or lower priority than the default?\n\n> \n> I made a priorityMax() because: \n> 1. the beauty of symmetry (LoL. \n> 2. it is easier for the users to static_assert their priority within [min, max).\n\nIn this case, wouldn't the generalized way to do that be to simply have a \n\nusing priorityType = int;\n\nsomewhere in here?  Then users can simply call numeric limits if they need it?  Although given the previous answer, I suspect that it's unlikely a user would need it in a normal setting."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "> Shouldn't the default be 0?  That way, any handler can choose to be higher or lower priority than the default?\n\nThe default value of priority is 0. But the priority of a default rule is the minimum. \n\n> In this case, wouldn't the generalized way to do that be to simply have a \n> using priorityType = int;\n\nYes, we can do it this way. \n\nI was thinking having a min/max method is more straightforward for the users comparing to figuring out the priority type is a numeric integer followed by applying the min/max limit of the integer. But anyway, it is acceptable to me."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is taking ownership of a raw pointer, which we don't really want from a safety perspective, if we continue with combining the structs this way, we should be using some form of smart pointer."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "The old mechanism didn't take ownership either. Explained in L1323"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "correct, it didn't take ownership, but it took an index, which could be bounds checked against the vector.  In the worst case scenario, you'd get the wrong node, but you'd never get a node with a bounds issue."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 692,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is this new constructor and private variable needed?  I don't see it used."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 692,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "It was used for getRedirectRule(). Since we are deprecating getRedirectRule(), we can delete it."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 1323,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You're capturing a pointer by value here, which makes it really easy to have lifetime issues.  The old mechanism was safer, because routes were always added to the array, and range checked before being used."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 1323,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Both mechanism should be equally safe: \n\n1. In the old one, we push/pop Trie node and rule vector at the same time. That means the life time of a rule is the same no matter outside the trie node(using vector index) or inside. \n\n2. the allrules vector is still there. (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43502/9/http/routing.hpp#b1460). The original rule vector is just the bare ptr copy of the allrules element, which doesn't preserve life time at all. \n\n3. there is no rule deletion at all, so the lifetime of a rule is basically from the rule creation until the end of game. Actually, the originally implementation made it impossible to delete, since a deletion in the middle of rule list will cause every index of following the rules minus one."
                },
                {
                    "file": "http/routing.hpp",
                    "line": 1323,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Both mechanism should be equally safe: \n> \n> 1. In the old one, we push/pop Trie node and rule vector at the same time. That means the life time of a rule is the same no matter outside the trie node(using vector index) or inside. \n\nThere's nothing about the ownership model that guarantees that though.\n\n> \n> 2. the allrules vector is still there. (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43502/9/http/routing.hpp#b1460). The original rule vector is just the bare ptr copy of the allrules element, which doesn't preserve life time at all. \n\n\nThis would kind of imply that you want to use a shared_ptr, possibly with this handler accepting by weak_ptr\n\n> \n> 3. there is no rule deletion at all, so the lifetime of a rule is basically from the rule creation until the end of game.\n\nExcept on shutdown, which can (and has in the past) had lifetime issues with calls being made while the system is shutting down.\n\n> Actually, the originally implementation made it impossible to delete, since a deletion in the middle of rule list will cause every index of following the rules minus one.\n\nIt's impossible to delete, but very easy to reallocate the vector memory and invalidate the pointers right?"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 1323,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "> > Both mechanism should be equally safe: \n> > \n> > 1. In the old one, we push/pop Trie node and rule vector at the same time. That means the life time of a rule is the same no matter outside the trie node(using vector index) or inside. \n> \n> There's nothing about the ownership model that guarantees that though.\n> \n\nCurrently, I remove the per-method rule vector so we won't need such guarantee any more. \n\n> > 2. the allrules vector is still there. (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43502/9/http/routing.hpp#b1460). The original rule vector is just the bare ptr copy of the allrules element, which doesn't preserve life time at all. \n> \n> \n> This would kind of imply that you want to use a shared_ptr, possibly with this handler accepting by weak_ptr\n> \n\nI was just saying that the original code used the bare ptr, so my change won't make things worse. \n\n> > \n> > 3. there is no rule deletion at all, so the lifetime of a rule is basically from the rule creation until the end of game.\n> \n> Except on shutdown, which can (and has in the past) had lifetime issues with calls being made while the system is shutting down.\n> \n\nYes, shutdown may be a problem. Do you think I should make a individual patch after this one since the same problem exists before this patch? \n\n> > Actually, the originally implementation made it impossible to delete, since a deletion in the middle of rule list will cause every index of following the rules minus one.\n> \n> It's impossible to delete, but very easy to reallocate the vector memory and invalidate the pointers right?\n\nTheoretically, yes, we can re-fill the vector with other rule instance. Practically, no, the higher function wrapper (router/app) never offers such api or does such thing. Adding a rule is like an one-off sale."
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "line": 19,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Will routes need to add a priority this way, to have an explicit priority."
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "line": 19,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "yes. This is the way to set priority. The default priority value is 0 so most of the current node/rule doesn't need to explicitly set the priority. \n\nThe priority is designed to set default rule for redfish node in the future."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/ut/priority_test.cpp",
                    "type": "ADDED",
                    "insertions": 159,
                    "deletions": 0
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 96,
                    "deletions": -86
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 286,
            "sizeDeletions": 89
        }
    ]
}