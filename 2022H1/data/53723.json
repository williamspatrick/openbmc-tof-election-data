{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Icbc1268903204f0417b2962c3b4c37c57eb4d208",
    "number": 53723,
    "subject": "bmc-boot-ready: ensure power on dependencies",
    "owner": {
        "name": "Andrew Geissler",
        "email": "andrew@geissonator.com",
        "username": "geissonator"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/53723",
    "commitMessage": "bmc-boot-ready: ensure power on dependencies\n\nIBM has seen a few occurrences where a power on and boot of a system is\nrequested before the needed BMC services have been started. The goal of\nthis design is to provide a flexible solution to ensuring all needed BMC\nservices have started prior to allowing a power on and boot of a system.\n\nChange-Id: Icbc1268903204f0417b2962c3b4c37c57eb4d208\nSigned-off-by: Andrew Geissler <geissonator@yahoo.com>\n",
    "createdOn": 1652447479,
    "lastUpdated": 1653354101,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1652447479,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1652478295,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1652792520,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(3 comments)"
        },
        {
            "timestamp": 1652815749,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1652957579,
            "reviewer": {
                "name": "ankita prasad",
                "email": "ankita.prasad@intel.com",
                "username": "ankitaprsad22"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1653327231,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1653354101,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d1a72d0da3a4cee65a87b682e0f57231749a4805",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/23/53723/1",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "createdOn": 1652447479,
            "author": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ah, I think this proposal helps solve my old stuff too: https://gerrit.openbmc-project.xyz/q/topic:bmc-boot-indicator"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "ankita prasad",
                        "email": "ankita.prasad@intel.com",
                        "username": "ankitaprsad22"
                    },
                    "message": "do we really need a new state? Rather we can just check for necessary services and either boot or not boot."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 58,
                    "reviewer": {
                        "name": "ankita prasad",
                        "email": "ankita.prasad@intel.com",
                        "username": "ankitaprsad22"
                    },
                    "message": "do we really need a new state? Rather we can just check for necessary services and either boot or not boot."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, I think a new state provides a mechanism for external clients (using Redfish) to know whether they can request a power on. If we go with an approach where we just queue up the request, we may not need it.\n\nThe state-manager design is to monitor for systemd targets to reflect state. This allows a layer of abstraction in that different system owners can put different services in the corresponding target. If we hard code state-manager to monitor specific services, we're hamstringing out ability to support a multitude of system types."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This isn't really a state of the BMC though.  It is a state about the Chassis/Host, isn't it?  How do you handle multi-host designs?  Maybe there is a VRM in each compute blade that needs its data collected, but only to block the single compute blade from booting."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, basically all chassis/host instances have to wait for the basic BMC services to be started. We have a basic issue that certain BMC services are required to power on and boot your system. So this design is saying you have to wait for those base services to be started before any chassis or host operation is valid."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't really follow this.  What errors are there?  \n\nThis seems like the most obvious solution.  We already have:\n\n- obmc-power-start-pre@.target\n- obmc-host-start-pre@.target\n\nWhy wouldn't you have any service that needs to insert itself as \"required before boot\" into the Wants/Required of these existing targets?  I'm not convinced that a new target (+ state) is warranted."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "This leads into your next question. I think there are two options here. Either we have a clear way to tell the user when the required BMC services have started and the system can be powered on, or we go with what you're leaning towards which is we queue up the request from the user, have the required services block around the target you indicate here, and have it power on once the services are done.\n\nThe issue I have with the queue option is that what happens when the services never complete? Or one fails and the BMC gets stuck in the Quiesced state (which is what started this whole design for IBM). We don't want to try and power on if a critical service has not started or failed, and we have no way to asynchronously tell the caller we've failed and will not be honoring their queued power on request. This design is leaning towards just failing the call and letting the user deal with the retry/error handling logic because they're going to know the behavior they want best. Otherwise what do we say to the clients? Make the request, start some arbitrary timeout, and wait for the system to actually power on? What do they do when the timeout hits? It just seems more clear to give them a \"NotReadyToBoot\" error code at the time of the request."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This also seems much worse.  We're pushing this off into all the users of the power on sequence rather than just automatically queuing it up into the normal power on sequence.  I mentioned in your first code review that you'd be making external interfaces like the power button have to implement some kind of queueing behavior or otherwise inform the user that \"you can't actually power on yet\".  It is much better from a user experience, to me, to keep the current \"start the sequence\" path that I\"m recommending because we can insert LED behavior into that sequence to clearly inform the user \"I heard you and am working on it\".  This goes for post codes + op-panel displays too."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "More details above, but yes, the power button either handles it or they just throw away the error and the lack of powering on is a clear sign to the user something is up. But the alternative...the system never powers on anyway, or just starts at some random time in the future seems worse to me. Someone hits the button, it's not ready, so they go fiddling with the power supplies or something and it randomly turns on a few minutes later??"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'd agree that a lengthy, silent delay between pushing the power button and it actually taking effect isn't great.  It sounds like Patrick's suggestion is that we could make it less silent via LED feedback, but I'm not sure how likely it is that trying to convey \"I heard you and am working on it\" via an LED would really be achievable in a clear, self-explanatory way; anything I can think of seems like it would be more likely to be completely cryptic or misinterpreted as buggy behavior by someone not already intimately familiar with OpenBMC.  Conveying \"sorry, no can do\" via an LED seems a lot more tractable (though the implicit \"try again in a minute or two\" is admittedly non-obvious).\n\nThis is of course completely tangential, but it seems like a lot of the problems we're grappling with here would be substantially reduced if we solved the long-standing \"OpenBMC takes way too long to boot\" problem (though it'd need to be a pretty dramatic improvement I suppose)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 124,
            "sizeDeletions": 0
        }
    ]
}