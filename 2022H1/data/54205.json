{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "design",
    "id": "If0c0193b6bc2eae79d82756462d23ef7084f9fc1",
    "number": 54205,
    "subject": "Physical topology design",
    "owner": {
        "name": "Benjamin Fair",
        "email": "benjaminfair@google.com",
        "username": "BenjaminFair"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/54205",
    "commitMessage": "Physical topology design\n\nThis design describes a way to encode information about the physical\ntopology of a system such as one chassis containing another or being\npowered by a power supply. It also explains how this information will be\nconsumed by daemons such as bmcweb to represent it in Redfish.\n\nSigned-off-by: Benjamin Fair <benjaminfair@google.com>\nChange-Id: If0c0193b6bc2eae79d82756462d23ef7084f9fc1\n",
    "createdOn": 1654128649,
    "lastUpdated": 1657688947,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1654128649,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1654128806,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654129821,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654187207,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654282850,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654282949,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1656521814,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1657228203,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1657228216,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Topic set to design"
        },
        {
            "timestamp": 1657228226,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Unset private"
        },
        {
            "timestamp": 1657228337,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1657258333,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1657298100,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1657536986,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1657645319,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1657648980,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1657651893,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657666817,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657688947,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "7ea725047e67d8dffb8bbae55e4a24ffa7e087a2",
            "parents": [
                "ac5d544553934f8083c61c5986a1420261bc8a4c"
            ],
            "ref": "refs/changes/05/54205/1",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1654128649,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "WIP of the physical topology design (currently private). Still need to fill out the \"alternative considered\" section"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Also I was surprised to learn that core maintainers can see changes marked as private. Maybe that is common knowledge. "
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "adding Nan b/c related to go/obmcl/41468"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I don't think they can. I believe only people added as reviewers can see private changes"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "for a relationship between A and B, do we need to define the relationship in both A and B. Or is just one fine... since the definition is a two way relationship."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "The object mapper takes care of generating the reverse association for you"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 77,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "In the past Patrick as advocated hierarchies. There are internal tooling that model resources as a hierarchies. I would expect a health discussion around viability of path hierarchies.\n\nEd claims there are degenerate cases, that will not work in a hierarchical modeling such as \"backplanes\". The claim is back plans are (1)both contained by the chassis and (2)plugged into the motherboard. Making the hierarchical modeling difficult. \n\nThere are more examples of challenges created by hierarchical modeling, and it might save time to address them in this section."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 77,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I've filled out the section discussing path hierarchies as an alternative"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 93,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 103,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "8fd63293659c49b919bb80ca1ca0b5847ea4211b",
            "parents": [
                "6147515382bb95237725d0e40e02f51e47c7a8af"
            ],
            "ref": "refs/changes/05/54205/2",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1657228203,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Does it make sense to provide an example config here to help readers understand how this dynamic probe works?"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I'll include an example in the next revision"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  An example would be good.  I'm pretty sure I'm ok with this, and it solves the problem, but one or two examples, (even an example in review) might be helpful to show a real system."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Same here; it will be great if we can get an example query (e.g., how Fans are connected to a chassis).\n\nAlso, I have the same concerns as Patrick: the association will contain as list of object paths, right? How will we parse that path? If we only use filename, then we will have the problem of nested names, for example, say we have two chassis, one contained by the other\n\n```\n/a/b/c/chassis0\n/a/b/c/chassis0/chassis0\n```\n\nhow do know which chassis0 an inventory maps to? Maybe we assume all filenames are unique?"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "> Same here; it will be great if we can get an example query (e.g., how Fans are connected to a chassis).\n\nSure, I can add an example response from the mapper\n\n> \n> Also, I have the same concerns as Patrick: the association will contain as list of object paths, right? How will we parse that path? If we only use filename, then we will have the problem of nested names, for example, say we have two chassis, one contained by the other\n> \n> ```\n> /a/b/c/chassis0\n> /a/b/c/chassis0/chassis0\n> ```\n> \n> how do know which chassis0 an inventory maps to? Maybe we assume all filenames are unique?\n\nYes, all D-Bus paths should be unique"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "> Yes, all D-Bus paths should be unique\n\nNo, I was asking the filename (the last piece of the path), not the entire DBus path."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Associations are based on the entire D-Bus path, so this should be fine"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This feels a bit hand-wavy in the way it is worded.  Is it really \"significant...complexity\"?\n\nIs there any case where certain types of associations (such as contained-in) would always be hierarchy and other types of association (ex. powered-by) would not be?  This doesn't seem more complex on the part of the client and it more intuitive to humans."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "It would at least double the complexity since the clients need to understand both ways of encoding topology.\n\nChassis contains relationships should always be hierarchical, so the paths could work for that, but I'd prefer avoiding a special case for one type of relationship.\n\nAnother potential issue: could we ever have multiple inventory providers at once? In that case, coordinating paths across multiple daemons would be much more difficult than just using associations."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This feels a bit hand-wavy in the way it is worded.  Is it really \"significant...complexity\"?\n\nHaving been party to several people attempting it.... Yes. It really does add significant complexity given there are now two paths to any architecture.\n\n\n> Is there any case where certain types of associations (such as contained-in) would always be hierarchy and other types of association (ex. powered-by) would not be?\n\nI can't really think of any.\n\n> Chassis contains relationships should always be hierarchical, so the paths could work for that, but I'd prefer avoiding a special case for one type of relationship.\n\nThis is the key, you can pick ONE definition for paths, be it contained by, socketed into (which are different relationships than contained by) powered by, Drives for, ect.  EVERYTHING else needs to use associations, so doing something different for the one case just makes things more complex."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't see a great section to write this.\n\nIn effect, you've taken just the \"connections\" part of the inventory design and used that as justification why using associations is better, but by leaving out the rest of the design you've implicitly simplified away all the other issues.  A few issues that associations cause in my initial thinking:\n\n* Naming becomes a harder problem and should probably be specified.\n\nWhere you previous might be able to name an inventory object /chassis0/proc0 and /chassis1/proc0, you now need to either name them chassis0-proc0 and chassis1-proc0 or proc0 and proc8.  Both of these are a bit clumsy and the second is much less intuitive for humans.\n\n* How are \"building blocks\" defined?\n\nThis might be somewhat due to my own ignorance of the details of EM (and this is also somewhat related to 'naming').  It is much more obvious to me how you would go about specifying a building block of your system, such as a compute card, in a hierarchical design.  \"I detected compute card X in slot Y, so all of its stuff is named /slotY/stuff\".  How you go about specifying (and generating the name) of duplicative entities, and creating all the appropriate associations back to parents, isn't obvious to me.  Is there anything in the EM design already that handles this?\n\n* Implicit information vs explicit information.\n\nUsing hierarchy means you get a good view into the inventory relationships for free (implicit due to path assignments).  That means system designers don't need to do anything [special] to get a huge part of their Redfish data exposed.  Using associations means that all of it needs to be expressed explicitly and anything that is missed is missing.  This increases the work necessary.\n\nSome might argue that explicit expression is less bug-prone because it is all obvious and I can sympathize with that argument.  I think it is mostly only true when you are writing your system *after* all the association features have been done.  The minute we add a new association, all old systems are going to be missing it, and likely most of them will never get it added.  Implicit definitions, at least wherever possible, allow us to keep most systems on parity with each other much easier."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "> I don't see a great section to write this.\n> \n> In effect, you've taken just the \"connections\" part of the inventory design and used that as justification why using associations is better, but by leaving out the rest of the design you've implicitly simplified away all the other issues.  A few issues that associations cause in my initial thinking:\n> \n> * Naming becomes a harder problem and should probably be specified.\n> \n> Where you previous might be able to name an inventory object /chassis0/proc0 and /chassis1/proc0, you now need to either name them chassis0-proc0 and chassis1-proc0 or proc0 and proc8.  Both of these are a bit clumsy and the second is much less intuitive for humans.\n\nYou can technically still use whatever path names you want, you'd just also need the associations for clients to understand this information.\n\nMaybe we could have the inventory providers automatically create these associations? This would only really apply to PIM though since EM doesn't let you use more complex paths for chassis items\n\n> \n> * How are \"building blocks\" defined?\n> \n> This might be somewhat due to my own ignorance of the details of EM (and this is also somewhat related to 'naming').  It is much more obvious to me how you would go about specifying a building block of your system, such as a compute card, in a hierarchical design.  \"I detected compute card X in slot Y, so all of its stuff is named /slotY/stuff\".  How you go about specifying (and generating the name) of duplicative entities, and creating all the appropriate associations back to parents, isn't obvious to me.  Is there anything in the EM design already that handles this?\n\nYes, EM already lets you customize names based on the \"index\" or bus number of an item that was detected:\n\nexample: https://github.com/openbmc/entity-manager/blob/master/configurations/nvme_p4000.json\n\ndocumentation: https://github.com/openbmc/entity-manager/blob/394ea2b48699cfed8807e61720b78b5a88027366/CONFIG_FORMAT.md#configuration-syntax\n\nDuplicate items will all have the same \"Connections\" field so they'll all get associated back to whatever they're connected to automatically. In the future, we could do this dynamically based on I2C topology (which would allow generic items to connect to other generic items), but that's not necessary for this initial design and would be an EM-specific feature.\n\n> \n> * Implicit information vs explicit information.\n> \n> Using hierarchy means you get a good view into the inventory relationships for free (implicit due to path assignments).  That means system designers don't need to do anything [special] to get a huge part of their Redfish data exposed.  Using associations means that all of it needs to be expressed explicitly and anything that is missed is missing.  This increases the work necessary.\n> \n> Some might argue that explicit expression is less bug-prone because it is all obvious and I can sympathize with that argument.  I think it is mostly only true when you are writing your system *after* all the association features have been done.  The minute we add a new association, all old systems are going to be missing it, and likely most of them will never get it added.  Implicit definitions, at least wherever possible, allow us to keep most systems on parity with each other much easier.\n\nOpenBMC has existed so far without this information being exposed on Redfish at all, so most users haven't needed this functionality. I'd much rather keep this the same unless system designers explicitly enable it and make sure that it's exporting correct information.\n\nMissing information is better than incorrect information"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Naming becomes a harder problem and should probably be specified.\n\nPretty sure the duplication issue has been a solved problem in EM for a while, and in phosphor-inventory, there's an implicit requirement that names don't collide.  I don't think this design makes it any harder.\n\n\n> Both of these are a bit clumsy and the second is much less intuitive for humans.\n\n1. If we need to build tooling around this to help humans, we can.\n2. Nothing about this design precludes placing things in a hierarchical path if A, the software can support it, B. it's useful enough to humans that it makes sense, but in a design that supports add in cards, we weren't able to make it work in a reasonable way;  Happy to see review code that can do A+B though, but in the general rules of \"is it hard to unwind if we make the wrong decision\", we could certainly have a patchset that adds the associations support (some of which already exists) THEN we could set things up in patch hierarchies to make them useful to humans when we figured out the hard problems with them.\n\n\n> \"I detected compute card X in slot Y, so all of its stuff is named /slotY/stuff\"\n\nPer the fact that we can only represent ONE atom of the graph, all of its stuff can't go in sloty/stuff.  only the stuff contained within it can go in it (assuming containment is the graph association you choose), otherwise we can't tell the difference between \"Contained by\" and \"Associated with port\", or \"cabled to\".\n\n\n>  Is there anything in the EM design already that handles this?\n\nYup.  The naming problem has been solved, and yeah, it's clumsy, but it does function in a way that avoids collisions.\n\n\n> OpenBMC has existed so far without this information being exposed on Redfish at all, so most users haven't needed this functionality.\n\nUsers have needed this functionality.  Most have ended up hardcoding it in their downstream forks for a given system."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 110,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 125,
            "sizeDeletions": 0
        }
    ]
}