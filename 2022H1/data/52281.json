{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Iba72b3e342cdc05d1fb972e2e9856763a0a1b3c5",
    "number": 52281,
    "subject": "Refactor HttpClient Class",
    "owner": {
        "name": "Carson",
        "email": "clabrado@google.com",
        "username": "carsonlab"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/52281",
    "commitMessage": "Refactor HttpClient Class\n\nRefactors HttpClient with the following changes:\n- Convert class to singleton\n- Replace circular buffers with devectors\n- Sending queued requests and closing connections handled\n  within their own callback\n- Add connection pooling (max size 4)\n- HttpClient supports multiple connections to multiple clients\n- Retry policies can be set for specific use cases\n\nAlso modifies its use in the Subscription class to be compatible\nwith the refactored code.\n\nIt is assumed that a BMC will be able to handle 4 parallel\nconnections and thus the max pool size is set as 4.  The max\nnumber of queued messages was left unchanged at 50.  Eventually\nwe may want to allow tuning of these limits to boost performance.\nThat would come in a future patch.\n\nTested:\nLaunched two Event Listener servers that created 6 and 2\nsubscriptions. Sending a test event created a connection pool\nfor each server. 4 and 2 connections were added to each pool,\nrespectively and were used to send the test request. For the first\npool the 2 extra requests were placed into a queue until\nconnections became available. After a request completed, its\nassociated connection was used to send the next request in\nthe queue. Resending the test event caused those prior connections\nto be reused instead of new connections being added to the pools.\n\nSigned-off-by: Carson Labrado <clabrado@google.com>\nChange-Id: Iba72b3e342cdc05d1fb972e2e9856763a0a1b3c5\n",
    "createdOn": 1648064093,
    "lastUpdated": 1652402271,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1648064093,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1648064115,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648064115,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1648064153,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/39567/ : FAILURE"
        },
        {
            "timestamp": 1648064535,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1648064559,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648064559,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1648064713,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/39568/ : FAILURE"
        },
        {
            "timestamp": 1648065639,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1648065659,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648065660,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1648065818,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/39569/ : FAILURE"
        },
        {
            "timestamp": 1648067851,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1648067890,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648067890,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1648068310,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/39577/ : FAILURE"
        },
        {
            "timestamp": 1648073586,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1648073600,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648073600,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1648074043,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/39591/ : FAILURE"
        },
        {
            "timestamp": 1648074233,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1648074251,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648074252,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1648075043,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39592/ : SUCCESS"
        },
        {
            "timestamp": 1648159541,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1648159555,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648159555,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1648159658,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/39692/ : FAILURE"
        },
        {
            "timestamp": 1648161349,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1648161360,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648161361,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1648161944,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39695/ : SUCCESS"
        },
        {
            "timestamp": 1648163786,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1648163807,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648163807,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1648164455,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39698/ : SUCCESS"
        },
        {
            "timestamp": 1648165905,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 9:\n\n(2 comments)"
        },
        {
            "timestamp": 1648238573,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1648253404,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1648253418,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648253418,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1648253504,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1648254018,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39787/ : SUCCESS"
        },
        {
            "timestamp": 1648268604,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(4 comments)"
        },
        {
            "timestamp": 1648487707,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 10:\n\n(3 comments)"
        },
        {
            "timestamp": 1648498346,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1648498361,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648498362,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1648498933,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39956/ : SUCCESS"
        },
        {
            "timestamp": 1648514367,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1648514393,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648514393,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: -Ok-To-Test"
        },
        {
            "timestamp": 1648514822,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1648514972,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39969/ : SUCCESS"
        },
        {
            "timestamp": 1648518837,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1648596468,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1648596484,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648596484,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: -Ok-To-Test"
        },
        {
            "timestamp": 1648597321,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40076/ : SUCCESS"
        },
        {
            "timestamp": 1648598507,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1648673484,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 14: Commit message was updated."
        },
        {
            "timestamp": 1648767252,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 15: Patch Set 14 was rebased"
        },
        {
            "timestamp": 1648767266,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648767267,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: -Ok-To-Test"
        },
        {
            "timestamp": 1648767691,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/40274/ : FAILURE"
        },
        {
            "timestamp": 1648769426,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 16: New patch set was added with same tree, parent, and commit message as Patch Set 15."
        },
        {
            "timestamp": 1648769441,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Verified-1"
        },
        {
            "timestamp": 1648769442,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648769443,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: -Ok-To-Test"
        },
        {
            "timestamp": 1648769891,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16:\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/40277/ : FAILURE"
        },
        {
            "timestamp": 1648771106,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 17."
        },
        {
            "timestamp": 1648771132,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648771132,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: -Ok-To-Test"
        },
        {
            "timestamp": 1648771552,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/40285/ : FAILURE"
        },
        {
            "timestamp": 1648778161,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 18."
        },
        {
            "timestamp": 1648778178,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648778178,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: -Ok-To-Test"
        },
        {
            "timestamp": 1648778601,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/40289/ : FAILURE"
        },
        {
            "timestamp": 1648789480,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 19."
        },
        {
            "timestamp": 1648789493,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648789493,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: -Ok-To-Test"
        },
        {
            "timestamp": 1648789921,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/40295/ : FAILURE"
        },
        {
            "timestamp": 1648791131,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 20."
        },
        {
            "timestamp": 1648791153,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648791154,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: -Ok-To-Test"
        },
        {
            "timestamp": 1648791737,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40297/ : SUCCESS"
        },
        {
            "timestamp": 1649193489,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1649198265,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1649203644,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(15 comments)"
        },
        {
            "timestamp": 1649274299,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 20:\n\n(10 comments)"
        },
        {
            "timestamp": 1649299656,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(8 comments)"
        },
        {
            "timestamp": 1649365011,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 20:\n\n(2 comments)"
        },
        {
            "timestamp": 1649366649,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 21: Patch Set 20 was rebased"
        },
        {
            "timestamp": 1649366662,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1649366663,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: -Ok-To-Test"
        },
        {
            "timestamp": 1649367261,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40779/ : SUCCESS"
        },
        {
            "timestamp": 1649451145,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 22."
        },
        {
            "timestamp": 1649451158,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1649451159,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: -Ok-To-Test"
        },
        {
            "timestamp": 1649451187,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/40842/ : FAILURE"
        },
        {
            "timestamp": 1649451193,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 22:\n\n(8 comments)"
        },
        {
            "timestamp": 1649451245,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 23."
        },
        {
            "timestamp": 1649451258,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 23: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1649451258,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 23: -Ok-To-Test"
        },
        {
            "timestamp": 1649451908,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 23: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40844/ : SUCCESS"
        },
        {
            "timestamp": 1649453000,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 23:\n\n(1 comment)"
        },
        {
            "timestamp": 1649644909,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 24."
        },
        {
            "timestamp": 1649644922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 24: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1649644922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 24: -Ok-To-Test"
        },
        {
            "timestamp": 1649645524,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 24: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40870/ : SUCCESS"
        },
        {
            "timestamp": 1649659282,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 25."
        },
        {
            "timestamp": 1649659297,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 25: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1649659298,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 25: -Ok-To-Test"
        },
        {
            "timestamp": 1649659888,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 25: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40873/ : SUCCESS"
        },
        {
            "timestamp": 1649660084,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 25:\n\n(2 comments)"
        },
        {
            "timestamp": 1649713399,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 26."
        },
        {
            "timestamp": 1649713437,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 26: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1649713437,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 26: -Ok-To-Test"
        },
        {
            "timestamp": 1649714028,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 26: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40926/ : SUCCESS"
        },
        {
            "timestamp": 1650389076,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 27."
        },
        {
            "timestamp": 1650389121,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 27: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650389126,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 27: -Ok-To-Test"
        },
        {
            "timestamp": 1650389701,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 27: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41619/ : SUCCESS"
        },
        {
            "timestamp": 1650390782,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 28: New patch set was added with same tree, parent, and commit message as Patch Set 27."
        },
        {
            "timestamp": 1650390794,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 28: Verified+1"
        },
        {
            "timestamp": 1650390796,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 28: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650390796,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 28: -Ok-To-Test"
        },
        {
            "timestamp": 1650391386,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 28:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41620/ : SUCCESS"
        },
        {
            "timestamp": 1650392933,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 28:\n\n(2 comments)"
        },
        {
            "timestamp": 1650651607,
            "reviewer": {
                "name": "Manish Baing",
                "email": "manish.baing@intel.com",
                "username": "manishbaing"
            },
            "message": "Patch Set 28:\n\n(2 comments)"
        },
        {
            "timestamp": 1650917471,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1650917750,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 29: Patch Set 28 was rebased"
        },
        {
            "timestamp": 1650917765,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 29: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650917765,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 29: -Ok-To-Test"
        },
        {
            "timestamp": 1650918646,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 29: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41949/ : SUCCESS"
        },
        {
            "timestamp": 1650921773,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 30."
        },
        {
            "timestamp": 1650921790,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 30: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650921791,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 30: -Ok-To-Test"
        },
        {
            "timestamp": 1650922399,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 30: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41951/ : SUCCESS"
        },
        {
            "timestamp": 1650989938,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 31."
        },
        {
            "timestamp": 1650989954,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 31: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650989955,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 31: -Ok-To-Test"
        },
        {
            "timestamp": 1650990456,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 31: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/41984/ : FAILURE"
        },
        {
            "timestamp": 1650991969,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 32."
        },
        {
            "timestamp": 1650991985,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 32: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650991986,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 32: -Ok-To-Test"
        },
        {
            "timestamp": 1650992578,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 32: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41986/ : SUCCESS"
        },
        {
            "timestamp": 1650992961,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 32:\n\n(4 comments)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1651094191,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 33: Patch Set 32 was rebased"
        },
        {
            "timestamp": 1651094207,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 33: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1651094207,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 33: -Ok-To-Test"
        },
        {
            "timestamp": 1651095096,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 33: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42122/ : SUCCESS"
        },
        {
            "timestamp": 1651162131,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 34: New patch set was added with same tree, parent, and commit message as Patch Set 33."
        },
        {
            "timestamp": 1651162145,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 34: Verified+1"
        },
        {
            "timestamp": 1651162147,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 34: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1651162147,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 34: -Ok-To-Test"
        },
        {
            "timestamp": 1651163345,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 34:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42214/ : SUCCESS"
        },
        {
            "timestamp": 1651540963,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 34:\n\n(17 comments)"
        },
        {
            "timestamp": 1651541251,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 34:\n\n(1 comment)"
        },
        {
            "timestamp": 1651611425,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 34:\n\n(5 comments)"
        },
        {
            "timestamp": 1651611433,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1651688115,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 34:\n\n(3 comments)"
        },
        {
            "timestamp": 1651699540,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 35: Patch Set 34 was rebased"
        },
        {
            "timestamp": 1651699554,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 35: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1651699554,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 35: -Ok-To-Test"
        },
        {
            "timestamp": 1651699558,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 36: New patch set was added with same tree, parent, and commit message as Patch Set 35."
        },
        {
            "timestamp": 1651699574,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 36: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1651699574,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 36: -Ok-To-Test"
        },
        {
            "timestamp": 1651699579,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 35: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42605/ : ABORTED"
        },
        {
            "timestamp": 1651700062,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 36: Verified-1 Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42606/ : ABORTED"
        },
        {
            "timestamp": 1651700193,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 35: Verified-1 Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42612/ : ABORTED"
        },
        {
            "timestamp": 1651700871,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 36: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42613/ : SUCCESS"
        },
        {
            "timestamp": 1651864612,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 36:\n\n(28 comments)"
        },
        {
            "timestamp": 1651869056,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 37: Patch Set 36 was rebased"
        },
        {
            "timestamp": 1651869075,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 37: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1651869075,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 37: -Ok-To-Test"
        },
        {
            "timestamp": 1651869750,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 37: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42815/ : SUCCESS"
        },
        {
            "timestamp": 1652065674,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 38."
        },
        {
            "timestamp": 1652065687,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 38: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652065688,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 38: -Ok-To-Test"
        },
        {
            "timestamp": 1652066662,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 38: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42826/ : FAILURE"
        },
        {
            "timestamp": 1652070899,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 39."
        },
        {
            "timestamp": 1652070926,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 39: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652070926,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 39: -Ok-To-Test"
        },
        {
            "timestamp": 1652071007,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 39: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42828/ : FAILURE"
        },
        {
            "timestamp": 1652073465,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 40."
        },
        {
            "timestamp": 1652073486,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 40: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652073487,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 40: -Ok-To-Test"
        },
        {
            "timestamp": 1652074447,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 40: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42830/ : FAILURE"
        },
        {
            "timestamp": 1652074750,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 41."
        },
        {
            "timestamp": 1652074791,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 41: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652074792,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 41: -Ok-To-Test"
        },
        {
            "timestamp": 1652075471,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 41: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42832/ : SUCCESS"
        },
        {
            "timestamp": 1652080270,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 42."
        },
        {
            "timestamp": 1652080289,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 42: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652080289,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 42: -Ok-To-Test"
        },
        {
            "timestamp": 1652080951,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 42: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42834/ : SUCCESS"
        },
        {
            "timestamp": 1652114008,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 42:\n\n(20 comments)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1652114152,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 42:\n\n(1 comment)"
        },
        {
            "timestamp": 1652114434,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 42:\n\n(1 comment)"
        },
        {
            "timestamp": 1652114586,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 42:\n\n(1 comment)"
        },
        {
            "timestamp": 1652114645,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 42:\n\n(7 comments)"
        },
        {
            "timestamp": 1652114880,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 42:\n\n(2 comments)"
        },
        {
            "timestamp": 1652123958,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 42:\n\n(5 comments)"
        },
        {
            "timestamp": 1652128824,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 42:\n\n(4 comments)"
        },
        {
            "timestamp": 1652132427,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 42:\n\n(1 comment)"
        },
        {
            "timestamp": 1652142248,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 43."
        },
        {
            "timestamp": 1652142266,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 43: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652142267,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 43: -Ok-To-Test"
        },
        {
            "timestamp": 1652142298,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 43: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42859/ : FAILURE"
        },
        {
            "timestamp": 1652142448,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 44."
        },
        {
            "timestamp": 1652142465,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 44: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652142466,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 44: -Ok-To-Test"
        },
        {
            "timestamp": 1652143154,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 44: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42860/ : SUCCESS"
        },
        {
            "timestamp": 1652144149,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 44:\n\n(3 comments)"
        },
        {
            "timestamp": 1652219325,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 44:\n\n(1 comment)"
        },
        {
            "timestamp": 1652219423,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 44: Code-Review+1"
        },
        {
            "timestamp": 1652219445,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 44:\n\n(1 comment)"
        },
        {
            "timestamp": 1652220677,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 44:\n\n(1 comment)"
        },
        {
            "timestamp": 1652221107,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 44:\n\n(1 comment)"
        },
        {
            "timestamp": 1652236580,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 45: Patch Set 44 was rebased"
        },
        {
            "timestamp": 1652236600,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 45: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652236600,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 45: -Ok-To-Test"
        },
        {
            "timestamp": 1652236911,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 46."
        },
        {
            "timestamp": 1652236929,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 46: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652236930,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 46: -Ok-To-Test"
        },
        {
            "timestamp": 1652236936,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 45: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/42999/ : ABORTED"
        },
        {
            "timestamp": 1652236944,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 46:\n\n(1 comment)"
        },
        {
            "timestamp": 1652237517,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 46: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/43000/ : SUCCESS"
        },
        {
            "timestamp": 1652286760,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 46:\n\n(2 comments)"
        },
        {
            "timestamp": 1652286814,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 46: Code-Review+2"
        },
        {
            "timestamp": 1652286830,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as f52c03c1bc89590965720664567381cc74a3cefc"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "6a7b9377074c4a6e160c9e3acc949645be194f62",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/1",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648064093,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -12
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 301,
                    "deletions": -131
                }
            ],
            "sizeInsertions": 355,
            "sizeDeletions": 143
        },
        {
            "number": 2,
            "revision": "6ecbe1419a853cccffd6924172e95004719a4130",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/2",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648064535,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 318,
                    "deletions": -142
                }
            ],
            "sizeInsertions": 376,
            "sizeDeletions": 157
        },
        {
            "number": 3,
            "revision": "06402926f9067dbdcf34db6f4b5c3d8ba22ae43d",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/3",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648065639,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 318,
                    "deletions": -142
                }
            ],
            "sizeInsertions": 376,
            "sizeDeletions": 157
        },
        {
            "number": 4,
            "revision": "19142346984df1c1050a88d3e1c45d2b3bbf0ce2",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/4",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648067851,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 319,
                    "deletions": -142
                }
            ],
            "sizeInsertions": 377,
            "sizeDeletions": 157
        },
        {
            "number": 5,
            "revision": "9d4be963fe12c6c9ba64b6d32054ae8e0741b74a",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/5",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648073586,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 316,
                    "deletions": -142
                }
            ],
            "sizeInsertions": 374,
            "sizeDeletions": 157
        },
        {
            "number": 6,
            "revision": "d8f57ffc2e33e5d46ad7d7e1160e6fc20a7193a9",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/6",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648074233,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 315,
                    "deletions": -142
                }
            ],
            "sizeInsertions": 373,
            "sizeDeletions": 157
        },
        {
            "number": 7,
            "revision": "e044b751bde7876aba76a8fd0a049c5731f8ddb3",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/7",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648159541,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 316,
                    "deletions": -160
                }
            ],
            "sizeInsertions": 374,
            "sizeDeletions": 175
        },
        {
            "number": 8,
            "revision": "c43cadf050df3eb0e0b6a3dd68b4de6d89ba5763",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/8",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648161349,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 330,
                    "deletions": -175
                }
            ],
            "sizeInsertions": 388,
            "sizeDeletions": 190
        },
        {
            "number": 9,
            "revision": "156e6f2125278449dc7ef8b33ea28525305c29bc",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/9",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648163786,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/http_client.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FYI, these type of captures are unsafe and should be avoided.  What was there was arguably more correct.  The qkward bit is that this will work 99% of the time in testing, but will cause rare and difficult to debug seg faults."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I was running into an issue where some of the member variables in ConnectionInfo were throwing errors if they were not initialized in the constructor while also being a member variable of another class. \n\nMy way around this was to instead use ConnectionInfo pointers inside ConnectionPool and then dynamically allocate a new ConnectionInfo object each time another one was needed.  However, this resulted in any calls to \"self(shared_from_this())\" throwing a weak_ptr exception due to the ConnectionInfo object being dynamically allocated.  Is there a way to convert this to a shared_ptr?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I was able to revert to capturing \"self(shared_from_this())\" rather than \"this\".  I did this by changing \"std::vector<ConnectionInfo*> connections\" to \"std::vector<std::shared_ptr<ConnectionInfo>>\" and using \"make_shared\" when creating a new connection"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 229,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep, you got it.  to use shared_from_this the element has to be within a shared_ptr."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 308,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Do I actually need to close this connection?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 308,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Per discussion with Ed, the connection should be closed.  The code has been updated to do that"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 422,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I realize this is still WIP, so feel free to ignore this for the moment, but your data structures above look like they assume only a single connection to a single client, and I think this is the most important data structure of this whole patch.  What I suspect you need to do is define a struct for looking up servers.  something like\n\nstruct HttpHost{\n   string hostname;\n   uint16_t port;\n}\n\nDefine an operator< function for the above, then do something like:\n\nboost::container::flat_map<HttpHost, std::vector<std::weak_ptr<ConnectionInfo>>>\n\nIn general when a request needs to be performed you would do:\n\nLook through the struct and garbage collect connection weak_ptrs that need to be removed from the list (ie weak_ptr.lock() fails).\n\nLook up the key for this host, or create the key if it doesn't exist (ie try_emplace or operator[])\nloop over the connections to this host, and see if any connections exist that can be used.\nIf no connection to this host exists, create a new one and emplace it into the ConnectionInfo struct.\n\nAnother thing to note, this needs to have some kind of global scope so it can be shared across the bmc."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 422,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I'm assuming a single client to be denoted by its hostname:port pair.  ConnectionInfo is a single connection to a single client.  \n\nConnectionPool contains a vector of ConnectionInfo objects so it represents multiple connections to a single client.  \n\nHttpClient in Patchset9 contains a vector of ConnectionPool objects.  This has been changed to std::map as of Patchset 13.  Through this HttpClient allows multiple connections to multiple clients.\n\nHttpClient has also been implemented as a singleton to provide global access to sending requests.\n\nThe general process for sending a request is HttpClient's sendData() method now requires hostname and port arguments.  The hostname and port get concatenated to serve as the key hostnamePort. The \"std::map<hostnamePort,ConnectionPool> connectionPools\" is checked for the hostnamePort key to see if the associated connection pool object exists.\n\nIf one exists then that ConnectionPool calls its own sendData() method which searches all of its connections for one that is not in use.  If a connection is not available then ConnectionPool will add a new connection to its pool and then use that connection to send the request."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 422,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> \n> ConnectionPool contains a vector of ConnectionInfo objects so it represents multiple connections to a single client.  \n> \n\n\nI suspect I missed this subtlety the first time I reviewed this;  Seems like you have it under control."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 422,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "No worries, it's a lot to parse so I appreciate the feedback"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 472,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Is it alright to look up the io_context() each time instead of storing a copy of it?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 472,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yes, although you shouldn't be looking it up from the dbus connection while in the HTTP connection.  I would expect an http connection to be able to be instantiated without needing a dbus connection, which implies that you probably need to either grab it from the socket, or store a reference to it."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 472,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "In that case I'll store a reference and use that whenever I need to add a new connection to the pool."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 472,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I changed the code as described"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 500,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Should this be a map or flat_map?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 500,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "probably std::unordered_map if I had to guess.  There's no time when you're going to iterate the list, there's no need for it to be sorted, and lookups to it are going to be algorithmically rare so the standard one likely compiles smaller.  With that said, this is super unlikely to be in a hot loop, so I'd be more worried about memory usage than anything."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 500,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I have a connectionPool for each destination host:port.  Each time a message is sent the first step is to look up the connection pool associated with the destination.  My worry with std::unordered_map is will a bmc typically have enough host:port destinations so that the hashing operation does not end up taking more time than would searching a map for a given host:port?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 500,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "In Patchset 13 I have modified this to be std::map instead of std::vector.  That's to keep it in line with the approach suggested in your above comment on line 422 as well as the discussions in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/49667."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 500,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I'm marking this as resolved since it is closely related to another comment suggesting I use unordered_map as the data structure.  That change has been made"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 322,
                    "deletions": -177
                }
            ],
            "sizeInsertions": 380,
            "sizeDeletions": 192
        },
        {
            "number": 10,
            "revision": "873202525aebe4387e30eae989e9e88076a95286",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/10",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648253404,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 350,
                    "deletions": -188
                }
            ],
            "sizeInsertions": 408,
            "sizeDeletions": 203
        },
        {
            "number": 11,
            "revision": "72281ffd6a2ad6be7d526d3e139379a9cef9e310",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/11",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648498346,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -14
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 342,
                    "deletions": -189
                }
            ],
            "sizeInsertions": 376,
            "sizeDeletions": 203
        },
        {
            "number": 12,
            "revision": "beddda2229b8a048e8f7452314570ae999c04310",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/12",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648514367,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -14
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 280,
                    "deletions": -176
                }
            ],
            "sizeInsertions": 314,
            "sizeDeletions": 190
        },
        {
            "number": 13,
            "revision": "99cee12dae1aaf8fc9a9180b94bee096b195e25c",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/13",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648596468,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -13
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 260,
                    "deletions": -179
                }
            ],
            "sizeInsertions": 288,
            "sizeDeletions": 192
        },
        {
            "number": 14,
            "revision": "db369b7aa799f480bddfdd49b3f727444efca093",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/81/52281/14",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648673484,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -13
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 260,
                    "deletions": -179
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 192
        },
        {
            "number": 15,
            "revision": "6306d534e465dd6e82904401a9dc636ed8683d4e",
            "parents": [
                "456cd875f3c56b45605d8a017e91d810876a035c"
            ],
            "ref": "refs/changes/81/52281/15",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648767252,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -13
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 260,
                    "deletions": -179
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 192
        },
        {
            "number": 16,
            "revision": "1dd03dfca83640eda30ebb59dd18dfa98f5dd065",
            "parents": [
                "456cd875f3c56b45605d8a017e91d810876a035c"
            ],
            "ref": "refs/changes/81/52281/16",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648769426,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -13
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 260,
                    "deletions": -179
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 192
        },
        {
            "number": 17,
            "revision": "eedd5eedf07aee0fe2659a152d118c91f841d254",
            "parents": [
                "456cd875f3c56b45605d8a017e91d810876a035c"
            ],
            "ref": "refs/changes/81/52281/17",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648771106,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 263,
                    "deletions": -182
                }
            ],
            "sizeInsertions": 299,
            "sizeDeletions": 197
        },
        {
            "number": 18,
            "revision": "defa3db89b47ac30466fac414bd1ad9ce24dea84",
            "parents": [
                "456cd875f3c56b45605d8a017e91d810876a035c"
            ],
            "ref": "refs/changes/81/52281/18",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648778161,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -13
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 260,
                    "deletions": -179
                }
            ],
            "sizeInsertions": 294,
            "sizeDeletions": 192
        },
        {
            "number": 19,
            "revision": "5999f9a9e054d3e7d9911f01721d87a3fcea88b1",
            "parents": [
                "456cd875f3c56b45605d8a017e91d810876a035c"
            ],
            "ref": "refs/changes/81/52281/19",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648789480,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -13
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 266,
                    "deletions": -185
                }
            ],
            "sizeInsertions": 299,
            "sizeDeletions": 198
        },
        {
            "number": 20,
            "revision": "b61ba6f3154203ee2ec27df956c849e4111b6718",
            "parents": [
                "456cd875f3c56b45605d8a017e91d810876a035c"
            ],
            "ref": "refs/changes/81/52281/20",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1648791131,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lots of comments;  This is looking like a great start!"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally rather than an explicit ID (which can have uniqueness problems) in other places we've relied on just printing \"this\" pointer as the identifier."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I wanted connID to refer to its vector location within ConnectionPool's std::vector<std::shared_ptr<ConnectionInfo>> connections.  It's only used for logging purposes.  The actual ID of a ConnectionInfo instance is a combination of host, port, and connId.  As-is, ConnectionPool does not delete an instance of ConnectionInfo so there are not concerns about connId collisions within a given connection pool.\n\nI at least want to keep the current fields since I think those are the most readable for logging purpose.  I can add \"this\" pointer as an overall unique ID if you still think it's necessary."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I wanted connID to refer to its vector location within ConnectionPool's std::vector<std::shared_ptr<ConnectionInfo>> connections.  It's only used for logging purposes.  The actual ID of a ConnectionInfo instance is a combination of host, port, and connId.  As-is, ConnectionPool does not delete an instance of ConnectionInfo so there are not concerns about connId collisions within a given connection pool.\n\nNot deleting ConnInfo seems like a problem.  If all the connections time out, I would expect them to be deleted from the pool, right?  Or am I missing a subtlety?\n\n> \n> I at least want to keep the current fields since I think those are the most readable for logging purpose.  I can add \"this\" pointer as an overall unique ID if you still think it's necessary.\n\nconnID pointing to the index in the vector seems error prone, given that it's not fixed.  If I call connections.erase(connections.begin(), 1) ie erase the first connection, all the indexes now get invalidated."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "The subtlety is ConnInfo is never deleted so there is not a worry about the indexes getting invalidated.  The connection can be closed for failure events like timeouts, but once it has been closed it can be re-resolved and used by future message sending events.\n\nMy thought is message sending is a repeated event. If the message load is high enough to cause multiple connections to be added to the pool then that load will happen again. When a message fails we don't block sending other messages to that client.  It should be sufficient to just close the connection.  Deleting and then recreating ConnectionInfo's then would just be unnecessary overhead.\n\nAdding queues and capping the pool size at 4 would limit the size of the connection pools."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 86,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Slightly confused here why doResolve needs to store data?  Would it be better just loaded into a class variable prior to resolving the dns?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 86,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "That was to make it available to sendMessage() since one of the flows is doResolve() -> doConnect() -> sendMessage().  I didn't consider using a class variable, but yes that would be better than passing data through the entire flow."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 86,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I have uploaded the change.  I added \"data\" as a class variable for ConnectionInfo"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Every time you capture by value like this, you're making a complete copy of the data, which I'm not sure you intended."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "The only alternative I could think of was using \"&data\" and that's unsafe.  Your above suggestion of storing data as a class variable should get around this issue."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yep."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I have removed the \"data\" captures in the latest patchset"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If the operation got aborted (ie, the request completed within the timeout) we should not be closing the connection.  I would expect this code to to nothing."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "This is how it's handled in the existing code.  waitAndRetry gets called when there is a failure in the flow before a response is received.  When the timer expires the connection is closed so we can attempt to resend the message beginning with doResolve().\n\nI need to do something or else the connection will just remain in a fail state and never get reused.  It seems like my only options are close the connection so it gets returned to the pool or retry sending the message."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This is how it's handled in the existing code.\n\nACK.  Existing code is incorrect then, but I won't hold you to solve all problems for all code in one patch \ud83d\ude0a\n\nLuckily timers don't fail that often, if ever (and if they do, something else is very...very wrong) so it's not a big deal.\n\n>  waitAndRetry gets called when there is a failure in the flow before a response is received.  When the timer expires the connection is closed so we can attempt to resend the message beginning with doResolve().\n> \n> I need to do something or else the connection will just remain in a fail state and never get reused.  It seems like my only options are close the connection so it gets returned to the pool or retry sending the message.\n\nThis is where we need some subtleties;  I suspect that the class above (HttpClient) class needs to hold the to-be-sent data queue, and only erase items from the queue once they've been successfully sent.\n\nIdeally the connection would never truly own any data, given the connection might be destroyed and need to be retried.  It might own by a shared_ptr, just to get lifetime gaurantees (probably want to hold weak_ptr internally, then shared_ptr when you start an async transaction with the data)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> This is where we need some subtleties;  I suspect that the class above (HttpClient) class needs to hold the to-be-sent data queue, and only erase items from the queue once they've been successfully sent.\n> \n> Ideally the connection would never truly own any data, given the connection might be destroyed and need to be retried.  It might own by a shared_ptr, just to get lifetime gaurantees (probably want to hold weak_ptr internally, then shared_ptr when you start an async transaction with the data).\n\nIf my justification from a previous comment for never deleting connections is valid then I won't have to worry about letting the ConnectionInfo own the data.  Because I'll have a connection pool I'll need some intermediate container anyway to hold the data when it is being sent.  If I wait to remove data from the queue until it's been successfully sent, then that would lock me into only sending a single message at a time.  ConnectionInfo's data member can serve as this intermediate container."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> never deleting connections\n\nLets be clear here.  Connections will always have to be able to be deleted.  the EventService/Aggregator configuration could change at any time, and the underlying connection objects need to be closed and deleted.  Connection classes might get to be reused in some cases, but we can't assume that any structure lasts forever.\n\n\n> ConnectionInfo's data member can serve as this intermediate container.\n\nSure, that approach seems fine."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> Lets be clear here.  Connections will always have to be able to be deleted ...\n\nI was thinking deleted in the sense that there are not methods which directly delete a ConnectionInfo object from ConnectionPools's vector of shared_ptr<ConnectionInfo>.  That's why in the other thread I was trying to justify setting arbitrary IDs for individual connections.\n\n> Sure, that approach seems fine.\n\nCool then I'll mark this as resolved since that has been implemented and there are other comment threads specifically focused on it."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I was thinking deleted in the sense that there are not methods which directly delete a ConnectionInfo object from ConnectionPools's vector of shared_ptr<ConnectionInfo>.  That's why in the other thread I was trying to justify setting arbitrary IDs for individual connections.\n\nBut see that's the trick, there needs to be something that can delete the connectionInfo objects.  This is a form of memory/resource leak.  What happens if I add/remove 1 million different EventService configs?  The BMC would run out of memory.  That can be a security/safety concern."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 279,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Yeah I can see why we'd want to be able to delete connections, but I was somewhat assuming that wasn't yet implemented since there was a \"TODO: delete subscription\" within \"waitAndRetry()\" which I carried over.\n\nShould I add deleting connections to this patch?  I would add a method that gets called whenever an EventService subscription is deleted.  It would check that subscription's hostname:port pair against those of the other subscriptions.  If there is not another subscription using the same hostname:port then I would just delete the entire corresponding ConnectionPool since it is no longer being used."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 289,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We shouldn't ignore timer errors like this.  If the timer subsystem in linux has failed us, we can just abort entirely, something has gone very wrong, and we should clean up and get out."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 289,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Similar to the previous comment, I was replicating the existing approach.  I'll do your suggestions and close the connection regardless of how many retries were remaining."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 289,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep, if the old code had a problem it's fine.  No need to boil the ocean."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 334,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is going to force a re-resolve for every request, which I'm pretty sure isn't what we want.  We only want to re-resolve if the system stops responding."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 334,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "This function only gets called when we want to retry a request that previously failed (including failures during doResolve()).  For all retries wouldn't we want to close the connection and then retry starting from the very beginning of the flow like in the existing code just to be safe?\n\nI suppose the alternative would be to check the value of self->state at the end of waitAndRetry() in order to begin the retry from the point in the flow the failed.  That would look like:\n\nresolveFailed --> doResolve()\nconnectFailed --> doConnect()\nsendFailed --> sendMessage()\nrecvFailed --> doCloseAndRetry()"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 334,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This function only gets called when we want to retry a request that previously failed \n\nI missed that subtlety the first time around;  Fine as-is."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 394,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This can't be the final behavior;  We will overwhelm servers this way if we get a flood of events, and we spin up one connection per event.  There needs to be some kind of queue, and a limit on number of connections per client (probably 1-4 is a good reasonable starting place).\n\nThis is what the requestDataQueue variable was supposed to handle in the old code, and I don't think we can remove it."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 394,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I changed it so that now each connection pool can only have a max of 4 connections.  Each pool also has a requestDataQueue like in the old code to buffer the additional requests that need to be sent when all connections in the pool are in use."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 394,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Based on what you described, sounds good (haven't gotten a chance to look at the patchset yet)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 394,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 429,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, this-> isn't required for member classes."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 429,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 436,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "probably want unordered_map here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 436,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I know unordered_map has constant time lookup, but I'm still concerned that there won't realistically be enough \"connectionPool\" objects in the map to overcome the overhead of the hash operation (e.g. for 10 items it should actually take less time to locate an item in std::map than in std::unordered_map).\n\nI'll make the change to unordered_map for this CL and leave exploring alternatives to something that can be revisited in the future if needed."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 436,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK.  I do appreciate that you've thought about the problem;  If you want to leave it as-is, it's fine.  I guess I always assumed that std::less on a string, when doing multiple comparisons (especially comparisons that have common prefixes, which seems likely) would far and above beat the overhead of std::hash.\n\nWith that said, agree, we're probably in the noise for either.  Use whichever works for you."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 467,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is doing your key lookup twice.  The API you're looking for here is try_emplace().  The ret.second parameter tells you if the element was constructed."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 467,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I switched to using try_emplace() and moved this section of code into sendData()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I would've expected the \"connectionExists\" and \"createConnection\" methods to be private to a user of this interface.  There's less left to implementation details in that way, and it simplifies the calling code."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You shouldn't need to construct a temporary here with emplace (it kinda defeats the purpose), and also requires your ConnectionPool element to have a move operator, which ideally you wouldn't want.\n\nping me on discord if you cant get the in-place construction to work, it should definitely be possible here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I did that to try to simply the individual calls to sendData().  I can change connectionExists() and createConnection() to be private, but that will require providing their arguments to sendData().  This new sendData() would attempt to create a connection pool if one doesn't already exist before sending the message to the specified client.  The end result would be something like:\n\nvoid sendData(\n    const std::string& data, \n    boost::asio::io_context& ioc,\n    const std::string& id,\n    const std::string& destIP,\n    const std::string& destPort,\n    const std::string& destUri,\n    const boost::beast::http::fields& httpHeader\n)\n\nI feel like this still complicates the calling code, but just in a different way.  Is this acceptable or is there another option?\n\nWhat if I make \"createConnection\" private, keep the existing version of sendData(), and also add the new version of sendData()?  Presumably you'll want to send data when you first create a connection pool so that would combine the two steps.  The existing sendData() would be called when you can assume a client connection already exists, and connectionExists() provides the ability to choose between the two situations in case the calling code needs to know."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I did that to try to simply the individual calls to sendData().  I can change connectionExists() and createConnection() to be private, but that will require providing their arguments to sendData().  This new sendData() would attempt to create a connection pool if one doesn't already exist before sending the message to the specified client.  The end result would be something like:\n> \n> void sendData(\n>     const std::string& data, \n>     boost::asio::io_context& ioc,\n>     const std::string& id,\n>     const std::string& destIP,\n>     const std::string& destPort,\n>     const std::string& destUri,\n>     const boost::beast::http::fields& httpHeader\n> )\n\nwhile it seems a little messy, I think it's a decent API, although can we pass ioc on construction of the object, instead of for each sendData call?  that's how most of the other implementations do it.\n\n> \n> I feel like this still complicates the calling code, but just in a different way.  Is this acceptable or is there another option?\n\nIf I compare to the python requests library (which is my gold standard for this kind of thing):\nhttps://docs.python-requests.org/en/latest/api/\n\nWhat you have above is basically the same, with the exceptions that destIp/Port/URI are all combined into one string (which seems reasonable given your API)\n\n> \n> What if I make \"createConnection\" private, keep the existing version of sendData(), and also add the new version of sendData()?  Presumably you'll want to send data when you first create a connection pool so that would combine the two steps.\n\nI'm not quite following;  Why is that better than just calling a single overload of sendData?  The caller has to maintain the request structure around anyway, right?\n\n>  The existing sendData() would be called when you can assume a client connection already exists, and connectionExists() provides the ability to choose between the two situations in case the calling code needs to know.\n\nThis seems like it's just pushing stuff into the library that really shouldn't be.  If you think it's cleaner, I'll concede, this isn't super important to me, but just about every client http library I know of requires you provide the connection details with every request (see requests above)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Most of my motivation was trying to keep sendData() as close to the original implementation as possible which was only \"void sendData(const std::string& data)\". I'm good with only having the single version with more arguments now that I know that's pretty standard.\n\n> can we pass ioc on construction of the object, instead of for each sendData call?\n\nI can lookup ioc when HttpClient is initialized and then pass it to ConnectionPool and later ConnectionInfo each time one is created."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "sendData() is now the lone public API.  It handles creating a new connection pool if one does not already exist and then sends the request.  I used try_emplace() as advised in a previous comment to perform the check and also construct a new ConnectionPool in place if one does not exist.\n\nThe createConnection() and connectionExists() functions have been deleted and their functionality effectively moved into sendData()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I think I got it to work if you can confirm it looks correct.  I also moved this section of code into sendData()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Marking resolved since this has been implemented for awhile and newer threads have been created that overlap in this area"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Marking resolved since more recent comments that overlap have not raised issues with the implementation."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 476,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 491,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't use exceptions for this kind of error handling;  Other bmcweb code prefers range checks and return codes for handlable (ie non fatal) errors."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 491,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I was trying to avoid performing two lookups on \"connectionPools\".  I can use find() instead to accomplish this while also removing the use of exceptions."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 491,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 491,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I removed the exception in favor of using find()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "There retry policies are EventService subscription specific, and I wouldn't really expect them to be in a common class.  Aggregator retries (which are implementation defined) are going to have very different policies than EventSerivce, which is defined by the redfish spec."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Sounds good.  I'll make each ConnectionPool have its own associated retry policy.  The policy will need to be viewable by each ConnectionInfo in the pool.  My options are:\n(1) Have the policy variables be members of ConnectionPool and add pointers to these members within each associated ConnectionInfo.\n(2) Have a global map (or similar struct) that contains <HostPortKey,policy struct>.  Each ConnectionInfo would have to query the global to get its associated policy.\n\nI think the first option would be both faster to interact with and require less memory."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Sounds good.  I'll make each ConnectionPool have its own associated retry policy.  The policy will need to be viewable by each ConnectionInfo in the pool.  My options are:\n\nI was actually thinking we just push it into client code (ie, EventService has a retry mechanism, and aggregator has a different retry mechanism).  With that said, if you want to try to do a generic thing, I'm in for the ride, lets see if we can build something reasonable.\n\n> (1) Have the policy variables be members of ConnectionPool and add pointers to these members within each associated ConnectionInfo.\n> (2) Have a global map (or similar struct) that contains <HostPortKey,policy struct>.  Each ConnectionInfo would have to query the global to get its associated policy.\n> \n> I think the first option would be both faster to interact with and require less memory.\n\n1 seems fine, just use shared_ptr where appropriate."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I moved these functions back to HttpClient methods.  They now take also require a host and port argument so that the retry details can be linked to the associated connection pool.\n\nI think this will work as a generic approach as long as each each host:port combination can only have a single retry policy.\n\nAre shared_ptr's still needed if connections won't be destroyed during normal operation?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I moved these functions back to HttpClient methods.  They now take also require a host and port argument so that the retry details can be linked to the associated connection pool.\n> \n> I think this will work as a generic approach as long as each each host:port combination can only have a single retry policy.\n\nI don't think that can be guaranteed.  EventService and a Redfish client could be on the same server, or could be operating through a reverse proxy or load balancer.\n\n> \n> Are shared_ptr's still needed if connections won't be destroyed during normal operation?\n\nAs a statement, we can't have that;  Connections MUST be able to be destroyed in normal operation, otherwise we'll run out of memory.\n\nAlso application shutdown is part of \"normal operation\" so the connections will be destroyed at some point.  If we're in the middle of a read/write when that shutdown happens, the ownership needs to be handled properly.\n\nNow, there are a bunch of patterns for ensuring RAII correctness, shared_ptr/weak_ptr is one of them (ie, share ownership between the real owners, and the callback) and I'm ok with basically any that are engineer-wise correct.  What I'm not ok with is relying on UB on object destruction.  Not handling that properly has caused way too much hard-to-triage bugs in the past.\n\nNote, all of the above is said without having looked at your current patch, and someone keying off a single sentence.  It's quite possible you've handled this already"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> I don't think that can be guaranteed.  EventService and a Redfish client could be on the same server, or could be operating through a reverse proxy or load balancer.\n\nI've been thinking on this, and my solution is to use a retryPolicyName argument as the key rather than a host:port pair.  The retry policy is now set on a per connection basis.  That means there is still only a single connection pool per each host:port pair, but connections within that pool can have different retry policies.\n\nThe retry policies are stored as a global map.  sendData() requires supplying a retry policy argument.  That policy name is ultimately used to set the retry policy for each message send by ConnectionInfo.  The policy name is queued if all connections in the pool are in use.  The methods setRetryConfig() and setRetryPolicy() have been converted into free functions.\n\nFor the RAII correctness I tried to follow the existing implementation as an example, but I'm not sure if my changes are completely compliant."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Marking as resolved since these concerns were addressed by my retry policy changes as described in another comment.  Short version is each connection now contains a copy of the retry policy and there is no need to try to retroactively update existing connection's retry policies whenever a given policy is updated.  Those changes will only affects future messages."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 505,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 266,
                    "deletions": -185
                }
            ],
            "sizeInsertions": 301,
            "sizeDeletions": 200
        },
        {
            "number": 21,
            "revision": "d1a712c0192f3ef00bc0000e5c6a57429acdd690",
            "parents": [
                "9739de9a62a9ae8173fff748268eecc73d559f39"
            ],
            "ref": "refs/changes/81/52281/21",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1649366649,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -15
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 266,
                    "deletions": -185
                }
            ],
            "sizeInsertions": 301,
            "sizeDeletions": 200
        },
        {
            "number": 22,
            "revision": "0cb07fe5a62b74f3c9077c68f1997a275199ad26",
            "parents": [
                "9739de9a62a9ae8173fff748268eecc73d559f39"
            ],
            "ref": "refs/changes/81/52281/22",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1649451145,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -20
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 248,
                    "deletions": -178
                }
            ],
            "sizeInsertions": 281,
            "sizeDeletions": 198
        },
        {
            "number": 23,
            "revision": "a04d9ad72689c51bed93d1ab094763529c1b90db",
            "parents": [
                "9739de9a62a9ae8173fff748268eecc73d559f39"
            ],
            "ref": "refs/changes/81/52281/23",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1649451245,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -20
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 240,
                    "deletions": -172
                }
            ],
            "sizeInsertions": 274,
            "sizeDeletions": 192
        },
        {
            "number": 24,
            "revision": "1d38bfa08cbecd96d3248551c386ccc3a5d8dd23",
            "parents": [
                "9739de9a62a9ae8173fff748268eecc73d559f39"
            ],
            "ref": "refs/changes/81/52281/24",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1649644909,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -20
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 286,
                    "deletions": -149
                }
            ],
            "sizeInsertions": 325,
            "sizeDeletions": 169
        },
        {
            "number": 25,
            "revision": "ef598e450f3c6ad5d822d09ec365a992f4b9a88f",
            "parents": [
                "9739de9a62a9ae8173fff748268eecc73d559f39"
            ],
            "ref": "refs/changes/81/52281/25",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1649659282,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 320,
                    "deletions": -150
                }
            ],
            "sizeInsertions": 358,
            "sizeDeletions": 168
        },
        {
            "number": 26,
            "revision": "1662f4c201ad3f89a8a1a681832e422e3803bd81",
            "parents": [
                "9739de9a62a9ae8173fff748268eecc73d559f39"
            ],
            "ref": "refs/changes/81/52281/26",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1649713399,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 387,
                    "deletions": -150
                }
            ],
            "sizeInsertions": 425,
            "sizeDeletions": 168
        },
        {
            "number": 27,
            "revision": "2eba0e7a3839cac0aa34150ae406a4011fa76213",
            "parents": [
                "eb1c47d3d98a186164ffb90214037c6062da7937"
            ],
            "ref": "refs/changes/81/52281/27",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1650389076,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 389,
                    "deletions": -150
                }
            ],
            "sizeInsertions": 427,
            "sizeDeletions": 168
        },
        {
            "number": 28,
            "revision": "ecd0f74dd2670db21f4d99e51ffe598cb9611219",
            "parents": [
                "eb1c47d3d98a186164ffb90214037c6062da7937"
            ],
            "ref": "refs/changes/81/52281/28",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1650390782,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "NO_CHANGE",
            "comments": [
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "are you treating maxPoolSize as constant here..? If so, wanted to understand static usage here ."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Yes it's treated as a constant.  I made its declaration consistent with the other constants.  It appears static is redundant in this context so I've removed it from the global constant declarations."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "initialization ..?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "This gets initialized during the constructor.  It represents its position in ConnectionPool's connections vector."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 389,
                    "deletions": -150
                }
            ],
            "sizeInsertions": 427,
            "sizeDeletions": 168
        },
        {
            "number": 29,
            "revision": "03d3c0f31ef152a1e4a4397a61c3e087fa90e52b",
            "parents": [
                "5deabed966f0ae5953dfb3a250a42b0046257ee8"
            ],
            "ref": "refs/changes/81/52281/29",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1650917750,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 389,
                    "deletions": -150
                }
            ],
            "sizeInsertions": 427,
            "sizeDeletions": 168
        },
        {
            "number": 30,
            "revision": "fe3a9409c7f12379fbd84142ebc4efb9738697fa",
            "parents": [
                "5deabed966f0ae5953dfb3a250a42b0046257ee8"
            ],
            "ref": "refs/changes/81/52281/30",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1650921773,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 392,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 430,
            "sizeDeletions": 171
        },
        {
            "number": 31,
            "revision": "36ced43c9dd1e336eeb552601c32e0ff4b9c4013",
            "parents": [
                "5deabed966f0ae5953dfb3a250a42b0046257ee8"
            ],
            "ref": "refs/changes/81/52281/31",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1650989938,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 419,
            "sizeDeletions": 171
        },
        {
            "number": 32,
            "revision": "c6b601c3a90d54c85d5b1b7bb25c7ffc7539aee9",
            "parents": [
                "5deabed966f0ae5953dfb3a250a42b0046257ee8"
            ],
            "ref": "refs/changes/81/52281/32",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1650991969,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 171
        },
        {
            "number": 33,
            "revision": "95e82fb621c8e1319256bd569c2c17d937acdee7",
            "parents": [
                "3d768a165183dd8cf7e485ac67ab7270845d5f87"
            ],
            "ref": "refs/changes/81/52281/33",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1651094191,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 171
        },
        {
            "number": 34,
            "revision": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
            "parents": [
                "3d768a165183dd8cf7e485ac67ab7270845d5f87"
            ],
            "ref": "refs/changes/81/52281/34",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1651162131,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "NO_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I dislike the change from a clear state machine, to some logic that is more difficult to follow.\nI understand it is important for the pool, but it would be great if you could clean up the state flow.\n\nI don't like friend classes either. \n\nBut we do what we must."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I do see the value of your work, and thanks for working on the connection pooling\n\nThe first message sounded too negative, when I re read it :)"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "No worries, it didn't sound negative.  I appreciate any and all feedback :D"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Yeah the pool combined with queued requests and a retry policy makes it pretty ugly.  The same flow from before is there if you squint a bit.  I just replaced the handleConnState() calls with directly calling the next method in the chain and then the end behavior is handled the the callback.  \n\nUsing callbacks is ultimately what I came up with to handle having singular connection objects that are part of a pool with queued messages.  It also plays nice (I think) with future Redfish Aggregation plans where I will need to do additional processing on received responses.  Do you have some particular suggestions for spot it could be cleaned up?  I'm game to try, but I don't see where to clean up the overall flow."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I dislike the change from a clear state machine, to some logic that is more difficult to follow.\n\nThis is super subjective, so I'm open to opinion here, but IMO, the \"clear state machine\" was waaaaaaaaaaaaay less clear than it looked on the surface, given that there were multiple paths through he state machine, and a number of paths didn't even work the state machine.  This has caused several bugs over time when people assumed that the \"state\" variable in the class was kept up to date all the time.\n\nIMO, getting rid of the state machine is a good thing, given that it makes complex code look complex, instead of making complex code look simple in ways that people make bad assumptions when adding stuff."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "How were these figures selected.\nJust a quick statement on how they were picked could be very useful.\n\nThey will have different performance implications on different platforms. If they cause a performance issue users will want to tune them."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "That was from discussion with Ed in which he said I needed to set a low max pool size and that not even Chrome opened more than 4 connections.  To allow user tuning I'm assuming you mean via a compiler flag?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Some bmc's have 4 GB of ram and Dual-core Cortex-R, ARM Cortex A7.\nAnd some have 256 mB of ram, and some much older ARM9.\n\nThere is a wide spread of systems running this software, but you have to set actual values for application performance. \n\nYou can add a comment saying \n\"pool size was set based on reviewing other implementations of application software\". That sounds better then chrome does it this way.\n\nFor maxRequestQueueSize, I would want to the average size of a message, so I could take a guess at the total size used. (Or just add worst case which is 409.6 kilobytes)\n\nAnd I don't really care about \"httpReadBodyLimit\" as long as it throws appropriately."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "From my perspective:\nGiven that bmcweb is a single threaded async event-driven reactor, the amount of connections we can simultaneously handle isn't really constrained by our CPU processing power, but instead governed by our available memory.  The sizeof(ConnectionInfo) is relatively small (I'm guessing 1KB not including the request/response payloads).\n\nI said 4 as a starting point because most BMCs should be able to handle 4 parallel connections well, and in the case of bmcweb as a client (which is one of the main intended use cases for this) connection sizes above 4-8 tends to be the inflection point where we start losing performance.\n\n> To allow user tuning I'm assuming you mean via a compiler flag?\n\nLets avoid this for a moment until we have a better understanding of how people would use it.  I could definitely see some amount of tuning here if the bmc is talking to, say, a really fast x86 nginx server, but at some point we're over optimizing until we have a setup that works.\n\n\nAgree with John here that there could be a sentence about this in the commit message.\n\n\n> And I don't really care about \"httpReadBodyLimit\" as long as it throws appropriately.\n\nWe don't throw in bmcweb.  A server responding with a larger-than-expected payload is not an exceptional case, and needs to return an appropriate error to the caller."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> You can add a comment saying ...\n\n> Agree with John here that there could be a sentence about this in the commit message.\nI added a comment about choosing the max pool size.  In the commit I mentioned that we may want to be able to tune these max values in the future.\n\n> We don't throw in bmcweb.  A server responding with a larger-than-expected payload is not an exceptional case, and needs to return an appropriate error to the caller.\nDo I need to do some additional special handling for this sort of failure in recvMessage(), or is the existing general ec check for async_read() sufficient?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ec check is sufficient generally."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Ed is correct, returning an appropriate error to the caller, is better."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 37,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "And the comment is okay. I do wonder what this does to bmcweb performance, being that bmcweb is io bound. But that is not a question for this thread."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "remove, never entered."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Rather than remove it I now set it as the state at the start of recvMessage().  This mimics how sendInProgress is used at the start of sendMessage()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "std::chrono::seconds, rather then converting the std::chrono::seconds when used."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This type came from the old one.  I agree, seconds would be better here, but in terms of incremental progress, this is no worse than it was.  UP to Carson if he wants to make this change."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I went ahead and changed it so that it doesn't have to be converted each time it's used."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm a little confused why this would be a global?  I could see maybe having 2-3 globals, but the RetryPolicyData class is super small (two uint32s and a string, and even the string could be an enum at some point)\n\nWoudl it be better if this were just owned as a member variable by each ConnectionInfo class?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "My reason for that is I wanted any changes in a retry policy to be reflected in messages that are actively being sent as ones that were queued before the policy was changed.  Giving each ConnectionInfo a reference meant I wouldn't have to iterate over every connection looking for ones using the policy so that I could update their retry info.\n\nEach ConnectionPool also needs to have access to this data so that it can set the retry parameters each time it prepare a ConnectionInfo to send a message.  It seemed like a waste of memory to queue the entire retry policy with each message.  \n\nIf retry policy changes should only apply to messages sent after the change, and queueing the entire policy is not a concern, then I can move this to be a member of HttpClient and perform the retry policy lookup as part of its sendData method."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> My reason for that is I wanted any changes in a retry policy to be reflected in messages that are actively being sent as ones that were queued before the policy was changed.\n\nThis doesn't seem like what you would want I would think?  Is there a use case where we would change the policy at runtime and that would need to propogate to existing connections?\n\n>  Giving each ConnectionInfo a reference meant I wouldn't have to iterate over every connection looking for ones using the policy so that I could update their retry info.\n\nBut now you have subtle safety issues.  Generally we would model this with something like a shared_ptr, so the ownership of the policy can be shared.\n\n> \n> Each ConnectionPool also needs to have access to this data so that it can set the retry parameters each time it prepare a ConnectionInfo to send a message.  It seemed like a waste of memory to queue the entire retry policy with each message.\n\nSee above;  RetryPolicy as a structure is trivially small\n  \n> \n> If retry policy changes should only apply to messages sent after the change, and queueing the entire policy is not a concern, then I can move this to be a member of HttpClient and perform the retry policy lookup as part of its sendData method.\n\nLets poke at why a retry policy would change a little;  It's quit possible I'm not seeing the use case here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> This doesn't seem like what you would want I would think?  Is there a use case where we would change the policy at runtime and that would need to propogate to existing connections?\n\n> Lets poke at why a retry policy would change a little;  It's quit possible I'm not seeing the use case here.\n\nMy reasoning is just from my own ignorance on how this feature is intended to work.  I think the only possible scenario where this could even happen would be if an existing connection is involved in a retry loop when the policy was changed.  \n\nAfter thinking about it, I think it makes more sense to not modify existing connections' retry policies whenever they change.  Presumably the retry policy would be updated before any messages are sent.  If the policy is updated then that's because the changes are needed by messages that are yet to have been sent rather than the update being an attempt to modify any existing connection's in progress retry loop."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > This doesn't seem like what you would want I would think?  Is there a use case where we would change the policy at runtime and that would need to propogate to existing connections?\n> \n> > Lets poke at why a retry policy would change a little;  It's quit possible I'm not seeing the use case here.\n> \n> My reasoning is just from my own ignorance on how this feature is intended to work.  I think the only possible scenario where this could even happen would be if an existing connection is involved in a retry loop when the policy was changed.\n> \n> After thinking about it, I think it makes more sense to not modify existing connections' retry policies whenever they change.  Presumably the retry policy would be updated before any messages are sent.  If the policy is updated then that's because the changes are needed by messages that are yet to have been sent rather than the update being an attempt to modify any existing connection's in progress retry loop.\n\n\nI think it's reasonable that the retry behavior is \"locked in\" when the request is started.  If the user changes the number of retries while a request is in flight, we're already in undefined behavior land.\nshort version: +1 to what you said."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 70,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Sounds good, I've made the changes so that now the retry policy for a message gets set when sendData() is first called.  That entire policy is stored as part of the request queue.  Any changes to the policy only affect messages sent after the change.  The retryInfo map has also been moved from being a global to a member of HttpClient."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Pretty sure you don't want to move this.  Destructors are run in the order they're declared in the class, and in the case of async handlers (like the resolver or tcp_stream) the callbacks are called back with operation aborted on destruction, so if you capture buffer in one of your async operations, and this class gets destroyed, it's possible to have memory safety issues;  With that said, this class is already \"wrong\"  The ideal order would be\n\n//non-reference members\nport\nconnid\nect\n\n// Data buffers\ndata;\nbuffer;\nparser;\n\n// Async callables\ncallback;\nresolver;\nconn;\n\n\nThis way, when data buffers get captured by the async callables section, there's no way that they can have lifetime issues."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I rearranged the members.  Does this look correct now?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Will take a look and comment if it's not resolved."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This has some worrying consequences for lifetime, and the possibility that these change at runtime.  (what if someone deletes \"default\")  I suspect we'd rather just keep a copy of these params, similar to what I mentioned above."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I will change these to copies if the proposal on my response to your earlier comment sounds acceptable."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 98,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I've made the changes"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 117,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 117,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Nit, you enter this state but never check it that you are in this state.\n\nThis is why the \"state machine\" pattern is subtle here;  Technically this code is correct, because there's no way to be in this handler if the state wasn't already resolveInProgress.\n\n> It is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 133,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 133,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You're pointing out essentially what I said earlier;  The state machine pattern doesn't really enforce anything, and even if we checked the state here..... What would we do if it weren't what was expected?  There really isn't much we can do at that point."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 151,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 159,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 166,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 183,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 209,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 209,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I too can copy-paste responses \ud83d\ude0a  (but I choose not to in this case)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 244,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "doesn't need done in this patchset, but in this callback, should we be returning the whole parsed request, not just a single header?  It would seem like there's more a client would want to do with the result of the response in the future."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 244,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "We will need that in the future.  I left that for the next patchset in the chain since that functionality wasn't needed by the original implementation https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/52633."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 244,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 306,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 349,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 370,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Connection Pool should get it's own file. \nbecause this file already long, and this is natural break."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 370,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Does that include ConnectionInfo as well since they're pretty tightly coupled?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 370,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I would want ConnectionInfo and ConnectionPool in different translation units. I don't think there is any build performance increase (with smaller translations) b/c of bmcweb's linking. The file is only 650 lines, so it is fine to keep it. I prefer file less the 1,000 lines. \n\nI will back down, and say 650 lines is good."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 370,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We're not super consistent (at all) about the \"one class per file\" rule, and basically all of bmcweb is one compile unit these days, just because we don't have a good abstraction for the beast templates, so separating compile units actually makes the incremental build take LONGER instead of shorter.  This is something we need to fix at some point.\n\nI'm happy with whatever John and Carson want to agree on here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 370,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "In that case I would like to leave all of these in the same file for the time being."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 378,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I suspect we don't actually (in the end) want the headers for a given request to be connection global.  With that said, I realize that's how the old code worked, so if you don't want to do that right away, just make sure we capture this by value (to avoid seg faults on lifetime  issues) and that should be fine.\n\nThis being owned in the http client class is a holdover from Redfish EventService using essentially the same headers for all requests;  But for aggregator work, I wouldnt' expect that to be the case."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 378,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Yeah I noticed that was going to be needed as well as being able to change the verb for each request.  I make those changes in a later patch (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/53301) just to preserve the original functionality.  For this patch I changed it so that httpHeader is now captured by value."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 378,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 383,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It looks like these 3 things are all read, pushed and popped together.  Can this just be made into a class, something like\n\n\nstruct PendingRequest {\n   std::string requestData;\n   std::function<...> callback;\n   string retryPolicyName;\n}\n\n\nThen these devectors collapse into one\n\ndevector<PendingRequest>\n\n\nWhich IMO makes the code infinitely more readable."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 383,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Agreed, I've made that change."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 385,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "gross, No action required."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 385,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We use this pattern elsewhere.  FWIW, public vs private methods are essentially a lie, because they're trivial to turn private to public in an open source project, so I'm not super careful about that kind of thing."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 389,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit/style thing.  only pass an argument by shared_ptr if the method could potentially take shared ownership of it.  In this case, it just looks like it's setting some properties on ConnectionInfo, so this can just be passed by ConnectionInfo&"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 389,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "It just sets some properties.  setConnRetryPolicy() is similar.  I have removed the shared_ptr arguments from both."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 447,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, fine as is.  In theory because the server is answering us, from here we can start over from after resolve.  It's only when we don't get a correct response that we need to re-resolve.\n\nWith that said, for servers that don't implement keepalive, peformance is clearly not a concern, so I don't have a problem here, just FYI."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 462,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 470,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "capture by weak_ptr please, in case this class gets destroyed in the middle of an operation"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 470,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I made the change to capture by weak_ptr.  Note that doing so required storing ConnectionPool shared_ptr's in HttpClient's connectionPools unordered map and slightly reworking the try_emplace() used within HttpClient.sendData().  Please let me know if there are issues with those changes."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 470,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Marking done;  If there are still issues I will comment on the new patch."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 486,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "bind_front doesn't have any effect if you're not binding anything."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 486,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "It's been removed"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 498,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "same as above."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 498,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 499,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This portion of both branches looks identical.  Can we combine the logic a little?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 499,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I was able to combine most of it"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 507,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "thinking out loud (ie, nothing to fix here) but I wonder how curl decides how multiple connections get assigned."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 507,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 511,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit.  this-> is redundant."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 511,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I don't remember what I did, but at some point while writing the code it wouldn't compile without me using \"this->\".  I've removed it as well as the other instances."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 512,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I realize that addConnection just called emplace_back, so this is guaranteed to exist in the current flow, but in general, we require that code is memory safe in each scope.  Yes, it's a little pedantic here, but there have been cases where it has helped us a lot, so I try to enforce it in all cases.\n\nSo, in terms of this block, two options here.\n\n1. Return a reference to the newly created ConnectionInfo object.  Note, that emplace_back on line 535 actually has an overload that will give you a reference to the emplaced object, so this should be pretty doable, and not add a bunch of code.\n\n2. Check the range of connections.size() to make sure it's > 1 before calling back()\n\n\nI personally think #1 is better, but it's debatable.\n\nThis would also help with the fact that connections.back() is called redundantly 4 times in this code block."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 512,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I went with the first option so now ConnectionInfo.addConnection() returns the reference to the newly emplaced object.  I now use that reference instead of repeatedly calling connections.back()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 512,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 513,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, more bind_front with one arg.  I will stop mentioning it, but please fix all of them."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 513,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "They have all been removed"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 520,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, use emplace_back for consistency.\n\n\nnon-nit, please std::move(data) to avoid making a complete copy here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 520,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I made those changes and also added std::move() in similar spots where it is missing.  I had to modify earlier functions in the callstack whose arguments were \"const std::string&\" in order to use std::move().  This was all of the way up through functions calling the Subscription class's sendEvent() method."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 520,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I wasn't expecting it would be that big of a change.... sorry for that, it probably could've waited until another patchset, but it's done now, so it's all good."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 520,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "No worries, the changes were straightforward so I didn't have to get too creative or anything"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 549,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "which ioc does this setup? \n1)ConnectionPool\n2)the friend in HttpClient or your \n3) Both ?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 549,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "That sets up the ioc in each connection pool contained by HttpClient.  It's later used to create each individual connection (ConnectionInfo) within the pool."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 549,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I spent like 10 minutes trying to find what happens if you use a friend class to that has members with the same name, and I could not find anything conclusive. \n\nI trust you. But it would make everyone's life better if they had different names"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 549,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  if you use a friend class to that has members with the same name\n\n\nFriend class just means \"I trust this friend to call my private methods\".  Having two classes that have similar naming doesn't really have any effect, as everything is namespaced based on the class name."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 171
        },
        {
            "number": 35,
            "revision": "13dc956ae9f46bd54bd0dba7afab0662118b76f9",
            "parents": [
                "031514fb7798057bbe0261a92b6c368cd5a35f66"
            ],
            "ref": "refs/changes/81/52281/35",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1651699540,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 171
        },
        {
            "number": 36,
            "revision": "cac99d26215c8ea991bcacdaed205f581a512119",
            "parents": [
                "031514fb7798057bbe0261a92b6c368cd5a35f66"
            ],
            "ref": "refs/changes/81/52281/36",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1651699558,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "NO_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lots of comments here, but I just want to underline, this is great work!  and most of the comments are minor style things;  I really like the cleanups being done sofar."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Thanks :D"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 171
        },
        {
            "number": 37,
            "revision": "a2d569263cfa2d828f255fcb699ba7e59ec6b3c9",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/37",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1651869056,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 378,
                    "deletions": -153
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 171
        },
        {
            "number": 38,
            "revision": "e40efa5c2c3634455a4cb901b0c29fc391241fa3",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/38",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652065674,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 416,
                    "deletions": -159
                }
            ],
            "sizeInsertions": 462,
            "sizeDeletions": 177
        },
        {
            "number": 39,
            "revision": "fb3837fe14236ea1af7708e6e5e1900f2164b114",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/39",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652070899,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -18
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 416,
                    "deletions": -159
                }
            ],
            "sizeInsertions": 462,
            "sizeDeletions": 177
        },
        {
            "number": 40,
            "revision": "bad46198fec993e9c07ed3471ca0a9278c313cef",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/40",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652073465,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 416,
                    "deletions": -159
                }
            ],
            "sizeInsertions": 480,
            "sizeDeletions": 188
        },
        {
            "number": 41,
            "revision": "9067660610310bce8d495f59d02f0e6b8dc3f30a",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/41",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652074750,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 416,
                    "deletions": -159
                }
            ],
            "sizeInsertions": 480,
            "sizeDeletions": 188
        },
        {
            "number": 42,
            "revision": "4f4dbb096febe155dcd5dd7935f6bdbb47238d82",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/42",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652080270,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 416,
                    "deletions": -159
                }
            ],
            "sizeInsertions": 480,
            "sizeDeletions": 188
        },
        {
            "number": 43,
            "revision": "1395e46144cdcc1ae637828a429753fc0075b906",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/43",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652142248,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 437,
                    "deletions": -163
                }
            ],
            "sizeInsertions": 502,
            "sizeDeletions": 192
        },
        {
            "number": 44,
            "revision": "d7afe6880dd08af4a1cea3cd18e9febce0a8075d",
            "parents": [
                "550a6bf85f81c1725b6c320a5ee419335cff2cf6"
            ],
            "ref": "refs/changes/81/52281/44",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652142448,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "LGTM, leaving open for a bit to see if anyone else has input here."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Thanks, sounds great!"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 104,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "please remove commented out code."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 104,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Oops, thanks I removed it"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 439,
                    "deletions": -163
                }
            ],
            "sizeInsertions": 504,
            "sizeDeletions": 192
        },
        {
            "number": 45,
            "revision": "266fe0cab43c9c791482b553ee7c208dff8f0438",
            "parents": [
                "867b2056d44300db9769e0d0b8883435a179834c"
            ],
            "ref": "refs/changes/81/52281/45",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652236580,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 439,
                    "deletions": -163
                }
            ],
            "sizeInsertions": 504,
            "sizeDeletions": 192
        },
        {
            "number": 46,
            "revision": "a8fc843f88a2fdcf900bb9adbd84cc00f6678afb",
            "parents": [
                "867b2056d44300db9769e0d0b8883435a179834c"
            ],
            "ref": "refs/changes/81/52281/46",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652236911,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 435,
                    "deletions": -163
                }
            ],
            "sizeInsertions": 500,
            "sizeDeletions": 192
        },
        {
            "number": 47,
            "revision": "f52c03c1bc89590965720664567381cc74a3cefc",
            "parents": [
                "d01e32c3786f2fbbb70c9724a87cf979b4a06232"
            ],
            "ref": "refs/changes/81/52281/47",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1652286830,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -29
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 435,
                    "deletions": -163
                }
            ],
            "sizeInsertions": 500,
            "sizeDeletions": 192
        }
    ]
}