{
    "project": "openbmc/openbmc",
    "branch": "master",
    "topic": "bmc-boot-indicator",
    "id": "I565303d5b1b2e1bf604a5a3b4e5c4cbace541352",
    "number": 44839,
    "subject": "meta-phosphor: Add phosphor-boot-indicator recipe",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@aj.id.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/openbmc/+/44839",
    "commitMessage": "meta-phosphor: Add phosphor-boot-indicator recipe\n\nphosphor-boot-indicator indicates BMC boot state via a GPIO. The\npackage installs a systemd service that looks up and sets the state of\nthe bmc-management-ready GPIO defined by [1].\n\nThe service depends on bmcweb and dropbear. These dependencies are used\nas indicators that the system has reached a state that further failures\nare able to be inspected either via the web UI, redfish or by inspecting\nthe BMC from a shell session.\n\n[1] https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/44838\n\nChange-Id: I565303d5b1b2e1bf604a5a3b4e5c4cbace541352\nSigned-off-by: Andrew Jeffery <andrew@aj.id.au>\nSigned-off-by: Eddie James <eajames@linux.ibm.com>\n",
    "createdOn": 1626074145,
    "lastUpdated": 1645144028,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1626074145,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1626074195,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1626074204,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-openbmc/5225/"
        },
        {
            "timestamp": 1626075047,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-openbmc/5225/ : SUCCESS"
        },
        {
            "timestamp": 1626076243,
            "reviewer": {
                "name": "Jenkins OpenBMC IBM",
                "email": "geissonator+jenkinsibm@gmail.com",
                "username": "jenkins-openbmc-ibm"
            },
            "message": "Patch Set 1:\n\nBuild Successful \n\nIBM Hardware CI : witherspoon hardware tests passed"
        },
        {
            "timestamp": 1626121298,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1626130161,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1626130879,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1626203297,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1626221771,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1626225173,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1626226169,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1626273952,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1636427478,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\nComing back to this one as people are starting to get unhappy internally."
        },
        {
            "timestamp": 1636430181,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\nI'm reflecting on the idea of the target. I think it might be unnecessary. I think it's enough to do as @wak suggests and just specify After= relationships and have WantedBy=default.target"
        },
        {
            "timestamp": 1644352380,
            "reviewer": {
                "name": "Edward A. James",
                "email": "eajames@us.ibm.com",
                "username": "eddiejames"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1644352425,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1644352425,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1644361467,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-openbmc/9152/"
        },
        {
            "timestamp": 1644362466,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-openbmc/9152/ : SUCCESS"
        },
        {
            "timestamp": 1644363782,
            "reviewer": {
                "name": "Jenkins OpenBMC IBM",
                "email": "geissonator+jenkinsibm@gmail.com",
                "username": "jenkins-openbmc-ibm"
            },
            "message": "Patch Set 2:\n\nBuild Successful \n\nIBM Hardware CI : witherspoon hardware tests passed"
        },
        {
            "timestamp": 1645107984,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1645144028,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "a666eb13623448d6d287f2f9a330926d6f227771",
            "parents": [
                "67d90e92a7b212e6664b74484fb4214988e0d6a5"
            ],
            "ref": "refs/changes/39/44839/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1626074145,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you talk a little more about why this is useful to a system?  Where does this GPIO go to?  How does it react?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "In IBM's P10 platform designs, this GPIO is routed to a microcontroller that drives indicators on an operator panel (containing LEDs, a display, navigation buttons, reset button etc).\n\nThe GPIO is one of two inputs to some logic that determines whether the BMC has failed to boot. This particular GPIO tells the controller that we've got some useful userspace running on the BMC.\n\nIf the GPIO is not asserted within a given time frame the microcontroller times-out the BMC boot and asserts an error condition on the panel."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This would be great detail for the commit message."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why aren't we using the equivalent of `systemctl is-system-running`?  Or the target that indicates we've reached a standby state; I think it is just multi-user.target.  It seems rather arbitrary to depend on those two services."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I explained that in the next sentence."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It isn't as if I stopped reading after this sentence.\n\nThis doesn't change the seeming arbitrariness of the decision and the fact that it conflicts with other definitions of \"is the BMC running\" we've used in the codebase.  Why is this new state a good idea when we already have this, but with slightly different meaning?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "First, I agree with patrick here.  I don't have a problem with coming up with a new target for this kind of thing, but we should be very explicit about how this differs from the existing.\n\nSecond, it seems odd that it would rely on both bmcweb AND dropbear.  These seems like they would be mutually exclusive when using this to inspect failures (you're going to use redfish OR SSH, not both) so I'm not quite following why they would both be here.\n\nThird, at some point in the future, we'll have systems that opt for openssh instead of dropbear (pretty sure facebook does this).  Should we create an ssh alias target so that this is generic? \n(could be in a future patchset, and I wouldn't hold this up for it)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> It isn't as if I stopped reading after this sentence.\n\nI didn't expect so. My issue was I tried to explain what I was trying to achieve. The concern about using default.target is that we might have some failure of a service wanted by default.target that isn't critical to the BMC's operation (e.g. some kind of telemetry). I don't want to be indicating that the BMC failed to boot if it's reachable by the usual management tools (e.g. redfish, ssh). We can use those to sort out any further failures.\n\n> This doesn't change the seeming arbitrariness of the decision\n\nHow is the choice of services arbitrary? Admittedly we could also include out-of-band IPMI in the set, but I think the set has a coherent definition (BMC management services are available on the network interface).\n\n> and the fact that it conflicts with other definitions of \"is the BMC running\" we've used in the codebase.\n\nWhat's the conflict? This is a subset of the BmcReady state, I don't see how it conflicts? It's just a subset.\n\n> Why is this new state a good idea when we already have this, but with slightly different meaning?\n\nWell, this is where it becomes a judgement call. If we've failed to get this far then there's no way to inspect the BMC as no external interfaces are available, so we need an external indicator that it's the case. If we've reached the point where at least some of the set { Redfish, SSH, IPMI } are available then those services can be used to inspect the failure state in a detailed way.\n\n> I don't have a problem with coming up with a new target for this kind of thing, but we should be very explicit about how this differs from the existing.\n\nThe existing being ... default.target?\n\n> Second, it seems odd that it would rely on both bmcweb AND dropbear.  These seems like they would be mutually exclusive when using this to inspect failures (you're going to use redfish OR SSH, not both) so I'm not quite following why they would both be here.\n\nThat's just because I was a little lazy and didn't add an explicit target, but there's no way to express OR dependencies that I'm aware of. We should add an explicit target. More below.\n\n> Third, at some point in the future, we'll have systems that opt for openssh instead of dropbear (pretty sure facebook does this).  Should we create an ssh alias target so that this is generic? (could be in a future patchset, and I wouldn't hold this up for it)\n\nI don't think we should create an alias for ssh, rather I think we should create e.g. a bmc-network-services.target (open to bikeshedding), and any specific units that meet its definition can be installed into it. Then we get rid of the current {Wants,After}= and just use {Wants,After}=bmc-network-services.target (possibly {Requires,After}=bmc-network-services.target)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > It isn't as if I stopped reading after this sentence.\n> \n> I didn't expect so. My issue was I tried to explain what I was trying to achieve. The concern about using default.target is that we might have some failure of a service wanted by default.target that isn't critical to the BMC's operation (e.g. some kind of telemetry). I don't want to be indicating that the BMC failed to boot if it's reachable by the usual management tools (e.g. redfish, ssh). We can use those to sort out any further failures.\n> \n> > This doesn't change the seeming arbitrariness of the decision\n> \n> How is the choice of services arbitrary? Admittedly we could also include out-of-band IPMI in the set, but I think the set has a coherent definition (BMC management services are available on the network interface).\n> \n> > and the fact that it conflicts with other definitions of \"is the BMC running\" we've used in the codebase.\n> \n> What's the conflict? This is a subset of the BmcReady state, I don't see how it conflicts? It's just a subset.\n> \n> > Why is this new state a good idea when we already have this, but with slightly different meaning?\n> \n> Well, this is where it becomes a judgement call. If we've failed to get this far then there's no way to inspect the BMC as no external interfaces are available, so we need an external indicator that it's the case. If we've reached the point where at least some of the set { Redfish, SSH, IPMI } are available then those services can be used to inspect the failure state in a detailed way.\n> \n> > I don't have a problem with coming up with a new target for this kind of thing, but we should be very explicit about how this differs from the existing.\n> \n> The existing being ... default.target?\n> \n> > Second, it seems odd that it would rely on both bmcweb AND dropbear.  These seems like they would be mutually exclusive when using this to inspect failures (you're going to use redfish OR SSH, not both) so I'm not quite following why they would both be here.\n> \n> That's just because I was a little lazy and didn't add an explicit target, but there's no way to express OR dependencies that I'm aware of. We should add an explicit target. More below.\n\nGotcha.\n\n> \n> > Third, at some point in the future, we'll have systems that opt for openssh instead of dropbear (pretty sure facebook does this).  Should we create an ssh alias target so that this is generic? (could be in a future patchset, and I wouldn't hold this up for it)\n> \n> I don't think we should create an alias for ssh, rather I think we should create e.g. a bmc-network-services.target (open to bikeshedding), and any specific units that meet its definition can be installed into it. Then we get rid of the current {Wants,After}= and just use {Wants,After}=bmc-network-services.target (possibly {Requires,After}=bmc-network-services.target)\n\nSeems reasonable;  We'll also need an ssh target at some point if we ever want to support openssh (redfish uses it) but that's a different problem."
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 7,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Please don't add surprise service starts to our build via `Wants` or `Requires`. Simply adding the ordering constraint is enough. We have dropbear.socket and bmcweb.service in some instances but don't have them brought up by any targets currently."
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 7,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "There's conversation in the commit message and discord about using a target instead. This is the planned way forward. It will be up to the platforms to decide what services are depended on by the target."
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 8,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Wouldn't you want a Requires= here?  If ssh or bmcweb fails to start, presumably you don't want to set this GPIO?\n\n(take this with a grain of salt.... not a unit file expert)."
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 39,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Killing the binary above doesn't guarantee this?"
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 39,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "The interface contract for the GPIO chardevs is that any given state beyond closing the chip fd this is undefined. In our platform designs the GPIO is on a pull-down, so if it goes high impedance it should work. However, there's a bug in the Aspeed GPIO driver that means that values survive closing the chip fd. This is a bit of hack that makes sure the line goes back to high impedance and thus gets pulled down.\n\nIt needs to be fixed properly, but I need to get a decent chunk of time to look at it all. In the mean time this hack that should be a no-op helps make sure the system is in the right state."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator_0.1.bb",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 84,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "9e13d8b0be036385953acdc27013abc9eed6c39c",
            "parents": [
                "2d29c6d216e9803917c8060809040d042906279c"
            ],
            "ref": "refs/changes/39/44839/2",
            "uploader": {
                "name": "Edward A. James",
                "email": "eajames@us.ibm.com",
                "username": "eddiejames"
            },
            "createdOn": 1644352380,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 37,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we really want to turn systemd service files into a scripting language like this?  Should pieces of this be broken out into a shell script?"
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "line": 37,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yes, this was mostly laziness."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator_0.1.bb",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "meta-phosphor/recipes-phosphor/state/phosphor-boot-indicator/phosphor-boot-indicator.service",
                    "type": "ADDED",
                    "insertions": 40,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 74,
            "sizeDeletions": 0
        }
    ]
}