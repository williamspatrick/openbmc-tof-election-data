{
    "project": "openbmc/estoraged",
    "branch": "master",
    "id": "If137d02e185c366f4a1437076512b4883ba6d595",
    "number": 53118,
    "subject": "Initial integration with Entity Manager",
    "owner": {
        "name": "John Wedig",
        "email": "johnwedig@google.com",
        "username": "johnwedig"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/estoraged/+/53118",
    "commitMessage": "Initial integration with Entity Manager\n\nThis commit changes eStoraged so that it doesn't take a specific device\nas an argument. Instead, it looks for a config object from Entity\nManager and creates a D-Bus object corresponding to the config object.\n\nThe config objects need to expose the following interface:\n  \"xyz.openbmc_project.Configuration.EmmcDevice\"\n\nTo support more types of storage devices in the future, we can introduce\na new interface for each one.\n\nIn addition, eStoraged currently only supports 1 eMMC device. If we want\nto support more than one in the future, we will need to add more\ninformation to the Entity Manager config, to distinguish between them.\n\nAssuming the eMMC is located on a FRU-detectable board, an \"Exposes\"\nentry can be added to that board's Entity Manager config, for example:\n{\n    \"Name\": \"example_emmc\",\n    \"Type\": \"EmmcDevice\"\n}\n\nDoing so will tell Entity Manager to create a config object with the\nEmmcDevice interface mentioned above. Then, eStoraged will find the\nconfig object with that interface and create its own D-Bus object that\ncan be used to manage the eMMC.\n\nTested:\nUpdated the Entity Manager config (as described above), started\neStoraged, then tested most of its methods and properties using busctl.\n$ busctl call xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume FormatLuks ays 3 1 2 3 \\\n  xyz.openbmc_project.Inventory.Item.Volume.FilesystemType.ext4 \\\n  --timeout=60\n$ busctl call xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume Lock\n$ busctl call xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume Unlock ay 3 1 2 3\n$ busctl get-property xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume Locked\n$ busctl get-property xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Drive Capacity\n$ busctl call xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume Erase s \\\n  xyz.openbmc_project.Inventory.Item.Volume.EraseMethod.VerifyGeometry\n$ busctl call xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume Erase s \\\n  xyz.openbmc_project.Inventory.Item.Volume.EraseMethod.LogicalOverWrite \\\n  --timeout=1200\n$ busctl call xyz.openbmc_project.eStoraged \\\n  /xyz/openbmc_project/inventory/storage/mmcblk0 \\\n  xyz.openbmc_project.Inventory.Item.Volume Erase s \\\n  xyz.openbmc_project.Inventory.Item.Volume.EraseMethod.LogicalVerify \\\n  --timeout=1200\n\nSigned-off-by: John Wedig <johnwedig@google.com>\nChange-Id: If137d02e185c366f4a1437076512b4883ba6d595\n",
    "createdOn": 1650407816,
    "lastUpdated": 1651162106,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1650407816,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1650407830,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650407830,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1650407960,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/41639/ : FAILURE"
        },
        {
            "timestamp": 1650409331,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1650409343,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650409343,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1650409512,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41640/ : SUCCESS"
        },
        {
            "timestamp": 1650484759,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1650490410,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1650490447,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1650490460,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650490460,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1650490634,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41747/ : SUCCESS"
        },
        {
            "timestamp": 1650491229,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 4: Commit message was updated."
        },
        {
            "timestamp": 1650491381,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1650492415,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1650493165,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1650493997,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1650495726,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 4:\n\n(14 comments)"
        },
        {
            "timestamp": 1650561755,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1650561770,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650561770,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1650561807,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(11 comments)"
        },
        {
            "timestamp": 1650561949,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41859/ : SUCCESS"
        },
        {
            "timestamp": 1650588127,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1650645506,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1650652128,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 5:\n\n(8 comments)"
        },
        {
            "timestamp": 1650665180,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(5 comments)"
        },
        {
            "timestamp": 1650669020,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(4 comments)"
        },
        {
            "timestamp": 1650674067,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1650905390,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1650922985,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1650923007,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1650923007,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1650923160,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1650923185,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/41957/ : SUCCESS"
        },
        {
            "timestamp": 1651085092,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(4 comments)"
        },
        {
            "timestamp": 1651093715,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1651093731,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1651093731,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1651093799,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Patch Set 7:\n\n(4 comments)"
        },
        {
            "timestamp": 1651093909,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/42116/ : SUCCESS"
        },
        {
            "timestamp": 1651094827,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 7: Code-Review+2\n\n(2 comments)"
        },
        {
            "timestamp": 1651095143,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 7: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1651095489,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1651162106,
            "reviewer": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "3d837955d2c802173b87eba6151ab6bc5c57dfc5",
            "parents": [
                "252d032d757263c31f3293fcb2acbd790dce6ec6"
            ],
            "ref": "refs/changes/18/53118/1",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1650407816,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 145,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 105,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 580,
            "sizeDeletions": 54
        },
        {
            "number": 2,
            "revision": "9efa1bef60608c73df7e2847165197e0975724ce",
            "parents": [
                "252d032d757263c31f3293fcb2acbd790dce6ec6"
            ],
            "ref": "refs/changes/18/53118/2",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1650409331,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "nit: line wrapping"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Fixed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "might be good to have an example e-m JSON too"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I added some more information about this and included an example \"Exposes\" entry. Take a look at what I have now.\n\nI wonder if this information should also be added to the README file."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Sui Chen",
                        "email": "suichen@google.com",
                        "username": "quadpixels"
                    },
                    "message": "I ran the CodeChecker layer on this change, it did not generate any potential warnings/errors, except that `mmcSendExtCsd` and `mmcCmdAdtc` in src/erase/sanitize.cpp not being used (they are not part of this change though).\n\n+1 to a sample E-M json config, since \"Configuration\" is used, so it may be good to indicate which Board JSON file the EMMC is Exposed from?"
                },
                {
                    "file": "src/main.cpp",
                    "line": 42,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "looks like this capture isn't used in the lambda"
                },
                {
                    "file": "src/main.cpp",
                    "line": 42,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Good catch. I removed it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 80,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 145,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 108,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 609,
            "sizeDeletions": 54
        },
        {
            "number": 3,
            "revision": "a7e9222107e634c6e1218069746109ad2335f98b",
            "parents": [
                "fa5cb6f7186851db5b3a77bfb07452d440827eee"
            ],
            "ref": "refs/changes/18/53118/3",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1650490447,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 80,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 145,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 108,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 615,
            "sizeDeletions": 54
        },
        {
            "number": 4,
            "revision": "90be9b338b34579e195bf1be2d7f548e7199e153",
            "parents": [
                "fa5cb6f7186851db5b3a77bfb07452d440827eee"
            ],
            "ref": "refs/changes/18/53118/4",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1650491229,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "I'm a little suspicious of the fact that we need a timer + retry logic. It should just set up a match for `xyz.openbmc_project.Configuration.EmmcDevice` and then query existing `xyz.openbmc_project.Configuration.EmmcDevice` once. Any new devices from that point onward would be discovered."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "The reason I included the retry logic was because dbus-sensors does it. From my testing, I haven't seen eStoraged actually do any retries, though. I don't know why dbus-sensors has the retry logic.\n\nWould you prefer that I just remove the retries?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "partial review"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I talked to Ed about the retries. He says that ObjectMapper wasn't always reliable, and that the retries might not be needed anymore.\n\nFrom looking around in dbus-sensors, I noticed that only the fan sensors make use of the retries, whereas all the other sensor types do not.\n\nSo, I removed the retry logic from this CL. I don't think it's needed."
                },
                {
                    "file": "include/getConfig.hpp",
                    "line": 31,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "This object inherits from a shared version of itself? I am not familar with this pattern, could you add some context?\n\nThat is interesting"
                },
                {
                    "file": "include/getConfig.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Should be private? only used by class"
                },
                {
                    "file": "include/getConfig.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I changed this to make the callback private, but the others still need to be public, since they are accessed via the \"self\" shared pointer."
                },
                {
                    "file": "include/getConfig.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "sounds good"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 33,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "why are you doing this?\n\nThis creates another copy of your shared object, but your orignal shared object ownership should be enough. It is not clear to me that this function needs to own it's own version of \"this\".\n\nWhy can't you just use \"this\" for every place you use \"self\"."
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 33,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "This is how it's done in dbus-sensors. The intent is to protect against the possibility of the GetStorageConfiguration object getting destroyed before the callback runs. Since the callback runs later after the async_method_call, it's entirely possible for the GetStorageConfiguration object to get destroyed earlier."
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "your retries might have stack issues.\n\nAbout how many retries before stacks size is greater then 4k?"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "A similar question came up in this past review: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/35336/5..9/include/Utils.hpp#b173\n\nBut there's a chance I'll just remove the retries. I'm trying to figure out why they exist in dbus-sensors."
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "nice, you can set a max number of retries. (Either dynamically or at build)"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 76,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I removed the retry logic."
                },
                {
                    "file": "src/main.cpp",
                    "line": 54,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "makes sense for multi storage system."
                },
                {
                    "file": "src/main.cpp",
                    "line": 54,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/main.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "NIT:\nget ride of temporary that is only used once. Or use string_view&"
                },
                {
                    "file": "src/main.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I changed it to \"const std::string&\", which I think should accomplish the same thing. I just want an alias to the string that already exists."
                },
                {
                    "file": "src/main.cpp",
                    "line": 59,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "sounds good, it is pretty common do use these temporaries."
                },
                {
                    "file": "src/main.cpp",
                    "line": 70,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "NIT:\nget ride of temporary that is only used once. Or use string_view&"
                },
                {
                    "file": "src/main.cpp",
                    "line": 70,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I changed it to \"const estoraged::StorageData&\"."
                },
                {
                    "file": "src/main.cpp",
                    "line": 70,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "sg"
                },
                {
                    "file": "src/main.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "should be a constexpr, unless you think in the future systems storage devices will not be linux block devices."
                },
                {
                    "file": "src/main.cpp",
                    "line": 73,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I changed it to const. constexpr didn't work because it complained about it not being a literal."
                },
                {
                    "file": "src/main.cpp",
                    "line": 93,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "not required, first std::filesystem::path should natviely string cast. \n\nNext the findSizeOfBlockDevice should be updated to take std::filesystem::path \n( I can do that)"
                },
                {
                    "file": "src/main.cpp",
                    "line": 93,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Interesting, I thought I had to explicitly convert this. Done."
                },
                {
                    "file": "src/main.cpp",
                    "line": 100,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "same as above"
                },
                {
                    "file": "src/main.cpp",
                    "line": 100,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/main.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "I see that you plan to support multiple storage devices, but currently we don't.\n\nI would rather either support multiple storage devices, or not support them, rather then a skeleton that partially supports it.\n\nI would get feedback from other reviewers/approves before you do a major refactor."
                },
                {
                    "file": "src/main.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Yeah, as you can see, I was trying to structure things to be easily scalable.\n\nBut I also don't think it makes much of a difference either way. For example, currently createStorageObjects() has a for loop which is going iterate either 0 times or once. Alternatively, we could remove the for loop and add a check at the beginning to see if there's 0 config objects before processing the config object."
                },
                {
                    "file": "src/main.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "yeah, it sounds like your scalable approach is well liked. It is a bit awkward because we don't need it yet, but I suppose that is always true of scalable  designs.\n\nLooks good"
                },
                {
                    "file": "src/main.cpp",
                    "line": 152,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "we should log if we get canceled"
                },
                {
                    "file": "src/main.cpp",
                    "line": 152,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "This is similar to what dbus-sensors does. I think it intentionally didn't log anything here, in case there's a bunch of new config objects that show up within a short period of time, in which case we might cancel the timer multiple times in a row. But on the other hand, eStoraged is not expecting a bunch of config objects, so I'm not sure if I should just remove the timer logic."
                },
                {
                    "file": "src/main.cpp",
                    "line": 152,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "This'll also happen if more than 1 property is instantiated in the interface - the match will trigger for each individual property rather than just after the interface is fully populated"
                },
                {
                    "file": "src/main.cpp",
                    "line": 152,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Thanks for pointing that out, Benjamin. In that case, I think this timer logic makes sense the way it is, and logging any canceled timers would just add noise to the log."
                },
                {
                    "file": "src/main.cpp",
                    "line": 152,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Gotcha, I understand now. \nThank you"
                },
                {
                    "file": "src/main.cpp",
                    "line": 165,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "why do you make this match?\n\nI am not very familiar with them"
                },
                {
                    "file": "src/main.cpp",
                    "line": 165,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "The purpose of this is to monitor the bus for any new config objects. So, if the config object isn't ready when eStoraged starts up, we will still see it show up later. From my testing, I can see that this is actually being used."
                },
                {
                    "file": "src/main.cpp",
                    "line": 165,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Thanks for the explanation, I have never created a matcher"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 80,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 145,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 108,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 622,
            "sizeDeletions": 54
        },
        {
            "number": 5,
            "revision": "b0d513e9002a5e6d2ac79ccbd05494480384e77b",
            "parents": [
                "fa5cb6f7186851db5b3a77bfb07452d440827eee"
            ],
            "ref": "refs/changes/18/53118/5",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1650561755,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "looks fine"
                },
                {
                    "file": "src/util.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "super nit:\nThe entries in /dev are not files, they are \"nodes\"\n\nAlso, maybe the reviewers know, is there a programmatic way to find a dev node, from a sysfs device?"
                },
                {
                    "file": "src/util.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I'm pretty sure they are also called device files.\n\nIf we wanted a programmatic way to find a device node the corresponds to a sysfs path, I came across the function sd_device_get_devname(). See the documentation here:\nhttps://www.freedesktop.org/software/systemd/man/sd_device_get_syspath.html#\n\nConverting from /sys/block/<device> to /dev/<device> seems simple enough without that function, but I can use it if people want. Note that I would need to put that function inside a class, to allow for mocking during unit tests."
                },
                {
                    "file": "src/util.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Very cool, how would you get the systemd device object to use for the function call?\n\n I don't want to block this change for some future work\nresolved"
                },
                {
                    "file": "src/util.cpp",
                    "line": 96,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "We would handle this in the same way we do with cryptsetupInterface and filesystemInterface. In the normal case, it would pass in a systemd object (possibly as a default parameter), whereas during unit tests, we would pass in a mockSystemd object (both of which inherit from systemdInterface)."
                },
                {
                    "file": "src/util.cpp",
                    "line": 106,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Are there any other types of exception that could be thrown above?"
                },
                {
                    "file": "src/util.cpp",
                    "line": 106,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "According to the documentation, this is the only exception the at() function can throw: https://www.boost.org/doc/libs/1_79_0/doc/html/boost/container/flat_map.html"
                },
                {
                    "file": "src/util.cpp",
                    "line": 130,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit\nPreference to remove, and use the implicitly conversion"
                },
                {
                    "file": "src/util.cpp",
                    "line": 130,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "It doesn't work when you try to do that. The compiler complains about std::filesystem::path not having a member function called starts_with()."
                },
                {
                    "file": "src/util.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Nit\nPreference to remove, and use the implicitly conversion"
                },
                {
                    "file": "src/util.cpp",
                    "line": 138,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "This also doesn't work without the explicit conversion. It complains about there being no matching '+' operator."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 81,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 144,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 108,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 622,
            "sizeDeletions": 54
        },
        {
            "number": 6,
            "revision": "58175dd12f82c8a14f875e82a54b25ab99ecb7f5",
            "parents": [
                "fa5cb6f7186851db5b3a77bfb07452d440827eee"
            ],
            "ref": "refs/changes/18/53118/6",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1650922985,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/util.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: double in"
                },
                {
                    "file": "include/util.hpp",
                    "line": 26,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "minor nit: std::shared_from_this() for here and below?"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "That doesn't seem to work.\n\n> error: \u2018shared_from_this\u2019 is not a member of \u2018std\u2019; did you mean \u2018enable_shared_from_this\u2019"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "oh wow that's really interesting"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "It is neat. \"shared_from_this()\" is a member of the base class (std::enable_shared_from_this<T>)"
                },
                {
                    "file": "src/getConfig.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Totally missed that we're inheriting that class oops."
                },
                {
                    "file": "src/main.cpp",
                    "line": 144,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I'm not too familiar with deadline_timer (I should probably look this up) but if this is true, could it be possible that if there are events that happen every 0.9 seconds for an hour (let's say), we won't actually call the processing handler below for an hour?"
                },
                {
                    "file": "src/main.cpp",
                    "line": 144,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "That's basically correct. But strictly speaking, the handler will still get called when you cancel the timer, with the operation_aborted error code. So you would have an opportunity to do some processing, if you wanted.\n\nI'm obviously not expecting to receive a steady stream of events for that long.\n\ndocumentation here: https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_deadline_timer/expires_from_now/overload2.html"
                },
                {
                    "file": "src/test/util_test.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Interesting, I thought we didn't need to \"Clean up\" in gtest"
                },
                {
                    "file": "src/test/util_test.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "John Wedig",
                        "email": "johnwedig@google.com",
                        "username": "johnwedig"
                    },
                    "message": "I don't think that's the case (unless you know something I don't).\n\nIf we don't do this clean up, I can see that the files will still sit around in the build directory. In fact, there's a bunch of files from other unit test not getting removed.\n\njohnwedig@johnwedig:~/gbmc_work/upstream_estoraged/estoraged/build$ ls\nbuild.ninja            meson-private      testFile\ncompile_commands.json  notDivisible       testfile_notDivisible\ninclude                patternPass        testfile_notZeroEnd\nlife_time              patternsDontMatch  testfile_notZeroStart\nmeson-info             service_files      testfile_pass\nmeson-logs             src\n\nThose file may not be doing much harm, but in my case, one of the test cases (findDeviceNotFoundFail) will fail if the file mmcblk0 exists. So, the clean up is important here.\n\nBy the way, the estoraged_test was a little different because the test framework class was set up to remove the file automatically: https://github.com/openbmc/estoraged/blob/master/src/test/estoraged_test.cpp#L92"
                },
                {
                    "file": "src/test/util_test.cpp",
                    "line": 94,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I see - I guess the files created are not cleaned up and persist vs. the tests / classes do not."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 142,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 88,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 596,
            "sizeDeletions": 54
        },
        {
            "number": 7,
            "revision": "d32b966771e03788af7b912d4cf701d98c391097",
            "parents": [
                "fa5cb6f7186851db5b3a77bfb07452d440827eee"
            ],
            "ref": "refs/changes/18/53118/7",
            "uploader": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "createdOn": 1651093715,
            "author": {
                "name": "John Wedig",
                "email": "johnwedig@google.com",
                "username": "johnwedig"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "src/test/util_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 138,
                    "deletions": 0
                },
                {
                    "file": "include/util.hpp",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/util.cpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "include/getConfig.hpp",
                    "type": "ADDED",
                    "insertions": 77,
                    "deletions": 0
                },
                {
                    "file": "src/main.cpp",
                    "type": "MODIFIED",
                    "insertions": 142,
                    "deletions": -54
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/getConfig.cpp",
                    "type": "ADDED",
                    "insertions": 88,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 596,
            "sizeDeletions": 54
        }
    ]
}