{
    "project": "openbmc/openbmc-build-scripts",
    "branch": "master",
    "id": "If42a22bfeca223fd5bc8f35ed937aa5f60713f2a",
    "number": 54756,
    "subject": "Enforce commit message style",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/openbmc-build-scripts/+/54756",
    "commitMessage": "Enforce commit message style\n\nThroughout the project, it is a manual human process to enforce the idea\nof commit message formatting, and leads to more conflict than would\nideally be required for something that's relatively algorithmic, and\nable to be enforced by CI.  Jenkins is able to give faster response\ntimes to users, thus ensuring that committers are more likely to be able\nto resolve their commit message issues in a timely manner.\n\nThis commit adds the gitlint[1] application to our builds, and integrates\nits checks with CI in the format-code.sh script.  Gitlint appears to be\na relatively active project with a number of releases, relatively up to\ndate commits on its github, and by the documentation as well as this\nauthors testing, appears to do exactly what the project needs in terms\nof checks.\n\ngitlint has a number of configuration options[2], of which the defaults\nappear to be ok for OpenBMCs style requirements, with the exception\nof title-max-length, which by default is set to 72.  This commit checks\nin a .gitlint file that was generated via 'gitlint generate-config' to\nuse as a starting point.\n\nTo avoid impacting the entire project at this time, this commit checks\nfor the existence of a .gitlint file in the root of the directory\n(expected to be empty in most cases), and uses that to gate its\nscanning.  At some point in the future, once we've determined this meets\nour needs, this check will be removed so that we can enforce this\nproject-wide.\n\nGitlint also supports user-defined rules[3], so it seems likely that in the\nfuture, we could also support our requirements for the \"Tested\" field,\nbut that is not included in this commit.\n\nTested:\nCreated a commit with a title that was too long, as well as added a\n.gitlint file in bmcweb.  Ran openbmc-build-scripts and observed.\n\n'''\nRunning spelling check on Commit Message\nopenbmc-dictionary - misspelling count >>\n0\ngeneric-dictionary - misspelling count >>\n0\n1: T1 Title exceeds max length (62>50): \"my very long commit message that is way too long for this line\"\nTraceback (most recent call last):\n  File \"/build/unit-test.py\", line 1229, in <module>\n    check_call_cmd(f, CODE_SCAN_DIR)\n  File \"/build/unit-test.py\", line 234, in check_call_cmd\n    check_call(cmd)\n  File \"/usr/lib/python3.10/subprocess.py\", line 369, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command '('/build/format-code.sh', '/build/bmcweb')' returned non-zero exit status 1.\n'''\n\n[1] https://jorisroovers.com/gitlint/\n[2] https://jorisroovers.com/gitlint/configuration/\n[3] https://jorisroovers.com/gitlint/user_defined_rules/\n\nSigned-off-by: Ed Tanous <edtanous@google.com>\nChange-Id: If42a22bfeca223fd5bc8f35ed937aa5f60713f2a\n",
    "createdOn": 1655828903,
    "lastUpdated": 1656441687,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1655828903,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1655828980,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655828980,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1655828987,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/521/"
        },
        {
            "timestamp": 1655829819,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/521/ : SUCCESS"
        },
        {
            "timestamp": 1655830687,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1655830694,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655830865,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655834696,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1655835241,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655837192,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655837514,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655840993,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655841312,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1655841321,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1655841332,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655841332,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1655841338,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/522/"
        },
        {
            "timestamp": 1655842166,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/CI-MISC/job/ci-openbmc-build-scripts/522/ : SUCCESS"
        },
        {
            "timestamp": 1655847709,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1655848041,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1655875130,
            "reviewer": {
                "name": "Joel Stanley",
                "email": "joel@jms.id.au",
                "username": "shenki"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1655908417,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "38402e08578452716284770e2968996028c80161",
            "parents": [
                "971a6978985ad9fdcffce1ef5cfa3e203ee56f03"
            ],
            "ref": "refs/changes/56/54756/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1655828903,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "speaking of 72 chars, is there a gitlint option for checking 72 chars?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "in the body of the message?  Yes.  Actually, looking at it, it looks like the default is 80, not 72.  I'll need to resolve that.\n\nACK\n\nhttps://jorisroovers.com/gitlint/rules/#b1-body-max-line-length"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Updated body-max-line-length in the latest patchsets .gitlint file."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Thanks, looks good"
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "I feel I end up enforcing the commit message body 72 chars check rather than 50 char title, with the style that we have where we usually list the component we're touching as part of the commit message title for example in openbmc/openbmc:\n\nmeta-google: phosphor-host-ipmid: We now have like\n\n^ that being 50 chars (meant to say \"We now have like 2 words left\" but ran out of chars)"
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why aren't we trusting what is in the .gitlint?"
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\ud83d\udc4d\n\nI don't know how well gitlint handles URLs and test plans either...\n\nWe should probably discuss that as part of the default .gitlint proposal (in docs?)."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "because this seems like the kind of thing that we shouldn't be pushing into per-repo semantics.  Our rules for this are projectwide, and unlike format/tidy where they need to be rolled out incrementally, gitlint only applies to HEAD on code reviews, so there should be no need to roll things out gradually (with the exception of opting in a couple repos to start with as a test).\n\nWith that said, yes, given that we need more than one rule here, I'm going to check in a .gitlint file into this commit shortly."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I can check in a .gitlint file here, and we can discuss.  This seems like the kind of thing that we don't need to propagate out to all the individual repos.\n\nIMO, as a standard, we shouldn't be prefixing <repo name> to the beginning of commits, given that, as Brandons comment asserts, you run out of characters in a hurry, and if you really want to append the repo name in something like a combined commit log, that can be done when you aggregate the commits into one, instead of making every user do it in a commit message."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": ">IMO, as a standard, we shouldn't be prefixing <repo name> to the beginning of commits, given that, as Brandons comment asserts, you run out of characters in a hurry, and if you really want to append the repo name in something like a combined commit log, that can be done when you aggregate the commits into one, instead of making every user do it in a commit message.\n\nI'm not understanding what you're suggesting here.\n\nCommits in a code repository, like bmcweb, should not be prefixed with \"bmcweb:\" because that is redundant.\n\nWe absolutely want commits in openbmc/openbmc to be prefixed with something like 'meta-google' if they only affect meta-google.  This helps everyone filter out the noise but especially the maintainers.  If I had to choose between \"your commit has the meta layer affected in the commit message\" and \"you went past 50 (or even 72) characters\" I'd pick the former every time.\n\nI glanced through the rules in gitlint.  I'm going to be very surprised if we can get something that is both useful and makes most everyone happy..."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> >IMO, as a standard, we shouldn't be prefixing <repo name> to the beginning of commits, given that, as Brandons comment asserts, you run out of characters in a hurry, and if you really want to append the repo name in something like a combined commit log, that can be done when you aggregate the commits into one, instead of making every user do it in a commit message.\n> \n> I'm not understanding what you're suggesting here.\n> \n> Commits in a code repository, like bmcweb, should not be prefixed with \"bmcweb:\" because that is redundant.\n\nCorrect.\n\n> \n> We absolutely want commits in openbmc/openbmc to be prefixed with something like 'meta-google' if they only affect meta-google.  This helps everyone filter out the noise but especially the maintainers.  If I had to choose between \"your commit has the meta layer affected in the commit message\" and \"you went past 50 (or even 72) characters\" I'd pick the former every time.\n\nAh, I guess that's a good point;  I missed the subtlety between the two.\n\n> \n> I glanced through the rules in gitlint.  I'm going to be very surprised if we can get something that is both useful and makes most everyone happy...\n\nThe only thing we can do is try?\n\ngitlint does have a convention for ignoring certain rules or all rules via comment flags in your commit message, so maybe that's a good trapdoor for the cases where we need to ignore certain rules for good reason?"
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "https://jorisroovers.com/gitlint/rules/#i4-ignore-by-author-name\n\nI take it this isn't going to be an acceptable addition to the .gitlint:\n```\n[ignore-by-author-name]\nregex=patrick@stwcx.xyz\n```"
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "LOL, probably not, but you could add:\n\ngitlint-ignore: all\n\nto your commit messages, and it would bypass the checks.  If you have good reasons for bypassing a check, it seems ok as a trapdoor."
                },
                {
                    "file": "scripts/format-code.sh",
                    "line": 31,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "added a .gitlint to this commit."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 67,
                    "deletions": 0
                },
                {
                    "file": "scripts/build-unit-test-docker",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "scripts/format-code.sh",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 73,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "e31ec3e259a46fb32024ec2f7841e81db03c5140",
            "parents": [
                "971a6978985ad9fdcffce1ef5cfa3e203ee56f03"
            ],
            "ref": "refs/changes/56/54756/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1655841312,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Joel Stanley",
                        "email": "joel@jms.id.au",
                        "username": "shenki"
                    },
                    "message": "I think this is something to review for, but we want common sense to be able to override the tools.\n\nIf there's a case where eg. a URL to a bug tracker, or a stack trace, is included in a commit message, the developer and maintainer should be able to ignore the suggestion of the tool for the benefit of a clearer commit message.\n\nIf this is simply advisory, and is able to be overridden by the repo maintainer, then that is fine."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I think this is something to review for, but we want common sense to be able to override the tools.\n\nWhich part?  Surely end of line whitespace in your commit message or a 200 character title are something we can just blanket disallow?  Yes, the lint length thing could use some discussion, or maybe we just don't check the title length at all, or set it to a higher-than-documented value.\n\n> \n> If there's a case where eg. a URL to a bug tracker, or a stack trace, is included in a commit message, the developer and maintainer should be able to ignore the suggestion of the tool for the benefit of a clearer commit message.\n\nAgreed;  I assumed the tool treated URLs as a single \"word\" so they wouldn't be split across lines, but I can test that.  I'm also assuming that if stack traces are quoted, they don't count against your line limit, but I can test that as well.\n\n> \n> If this is simply advisory, and is able to be overridden by the repo maintainer, then that is fine.\n\nAt this point it's able to be overridden by either the maintainer or the submitter by adding \"gitlint-ignore: all\" to the commit message somewhere.  Is that enough?"
                },
                {
                    "file": "config/.gitlint",
                    "line": 47,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Maybe we should move the discussion we were having on the other file to here - I'm against hard-setting the title max length to 50 and instead using 72 due to how openbmc/openbmc usually prefers at a minimum specifying the meta layer, preferring to also list the repo it's touching (OR we should change that rule). When I'm reviewing code here and downstream, I tell people that 50 is the rule to follow but 72 is the real hard limit.\n\n\"meta-google: \" is 13 characters for instance, so we'd have 37 chars left for the header which is often not enough."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 66,
                    "deletions": 0
                },
                {
                    "file": "scripts/build-unit-test-docker",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "config/.gitlint",
                    "type": "ADDED",
                    "insertions": 130,
                    "deletions": 0
                },
                {
                    "file": "scripts/format-code.sh",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 204,
            "sizeDeletions": 0
        }
    ]
}