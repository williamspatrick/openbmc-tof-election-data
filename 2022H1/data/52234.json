{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Ibe9d23f47cabf66beca7a8b041466ff1864c5b29",
    "number": 52234,
    "subject": "Propose design for integrating firmware upgrades into PSUSensor.",
    "owner": {
        "name": "Justin Ledford",
        "email": "justinledford@google.com",
        "username": "justinledford"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/52234",
    "commitMessage": "Propose design for integrating firmware upgrades into PSUSensor.\n\nThis comes after discussions in\nhttps://gerrit.openbmc-project.xyz/c/openbmc/docs/+/50509 where the\ngeneral consensus is to modify existing telemetry solutions\n(dbus-sensors) to support firmware upgrades, rather than create an\nentirely new i2c device management daemon from scratch.\n\nSigned-off-by: Justin Ledford <justinledford@google.com>\nChange-Id: Ibe9d23f47cabf66beca7a8b041466ff1864c5b29\n",
    "createdOn": 1647971810,
    "lastUpdated": 1651194959,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1647971810,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1649265302,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1649275784,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1649277030,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1649278257,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1650403674,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1650403715,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1650856679,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(9 comments)"
        },
        {
            "timestamp": 1650907905,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1650923674,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1650923690,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1651016343,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1651190318,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1651192963,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1651193930,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1651194959,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "2d8d5e503ac44c62247d04df7f34ba021cb50593",
            "parents": [
                "fd0ec1f9212f127bf302dd4ceb8f4fa2e29a5f1d"
            ],
            "ref": "refs/changes/34/52234/1",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1647971810,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "friendly ping for review"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I haven't read this proposal yet, but I wanted to point out that there is also another design in progress for \"updating things other than the BMC\".  There is probably a good amount of overlap here.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/docs/+/37950"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Thanks for the link, I was not aware of it.\nThat design is proposing to extend phosphor-bmc-code-mgmt's ItemUpdater implementation to handle multiple devices or hosts.\n\nOur proposal is to add an ItemUpdater implementation to PSUSensor to handle updates for the same devices that it manages telemetry on to avoid issues from i2c interleaving.\n\nSince the two designs are meant to handle separate scenarios I think they can co-exist, but I will review more closely to see if there any similarities that can be shared between the two designs."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "We mean to say that for these devices performing a config/firmware update and telemetry polling concurrently would result in a failed config/firmware update right?"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Right, that is a better way to word it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "type": "ADDED",
                    "insertions": 117,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 133,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "2e8313deca396f6487b48b2ff9388b100c081b70",
            "parents": [
                "fd0ec1f9212f127bf302dd4ceb8f4fa2e29a5f1d"
            ],
            "ref": "refs/changes/34/52234/2",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1650403674,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Looking like a good start, although I'd really like the alternative discussed more.  If I missed conversations, please point me to them."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, replace with \"Single pmbus device\"  I don't think we expect cross-bus things here, and it's good to be explicit."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 34,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 48,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please call out that when these are paused, that they should return an Unavailable status interface.  This is going to be important for the dbus interfaces."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 48,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  Shouldn't this just be handled within PSUSensor?  Why is systemd needed at all here?"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "My thinking was that the software actually interacting with the device could be broken out for various reasons, but this doesn't need to be with systemd, it could just be a CLI called directly with boost-process like you mentioned below.\n\nAs far as why not include all of the logic in PSUSensor:\n- This makes it a bit more modular and more plug-in-play for anyone with existing tools to install firmware, they only need to write the config to call the appropriate tool. Also I expect some devices may not be made public, so this would make it more maintainable; there is no need to maintain any downstream patches.\n- The sensor reading logic is already deferred to hwmon sensors, so the firmware install logic would have a similar level of abstraction.\n\nI originally decided to go with systemd units because that is how the ItemUpdater is implemented in phosphor-bmc-code-mgmt. The Activation step simply calls a user supplied systemd service: https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/master/obmc-flash-host-bios%40.service.in"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> My thinking was that the software actually interacting with the device could be broken out for various reasons, but this doesn't need to be with systemd, it could just be a CLI called directly with boost-process like you mentioned below.\n> \n> As far as why not include all of the logic in PSUSensor:\n> - This makes it a bit more modular and more plug-in-play for anyone with existing tools to install firmware, they only need to write the config to call the appropriate tool. Also I expect some devices may not be made public, so this would make it more maintainable; there is no need to maintain any downstream patches.\n\nIMO, the mechanism for modularity that we already have here is dbus, because we have a well defined way to define APIs, and maintain some semblance of a stable API over time.  Adding yet another avenue for plugins would have to answer lots of new questions about how we're going to maintain and extend it over time that I'm not sure we have answers to.\n\n> - The sensor reading logic is already deferred to hwmon sensors, so the firmware install logic would have a similar level of abstraction.\n\nWe \"defer\" to hwmon because it has a lower level of access, and has a stable, well defined ABI that we can rely on over time.  We didn't invent it ourselves.\n\n> \n> I originally decided to go with systemd units because that is how the ItemUpdater is implemented in phosphor-bmc-code-mgmt. The Activation step simply calls a user supplied systemd service: https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/master/obmc-flash-host-bios%40.service.in\n\n\nYeah, we have that pattern, but that pattern kind of exposes exactly what I'm talking about.  So far as I'm aware, those service files don't expose a proper redfish interface.\n\n\n\nAs another example of something that systemd targets don't have a handle on is the idea of progress.  There's no way to transfer some progress percentage, and expose the dbus progress API for redfish to consume and supply to the user in this scheme.  If it's built into psusensor (or ADM1266daemon depending on how much of the code is device specific) exposing that interface in a future patch series becomes trivial."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "I expect some devices will definitely require a decent amount of specific code. Are you suggesting that code should belong in a separate daemon with a DBus API that PSUSensor would talk to, with PSUSensor providing the DBus API for Redfish (ItemUpdater API implementation)? Or that this ADM1266daemon implement the ItemUpdater API, import the PSUSensor class, and reuse (factor out, or just copy?) whatever is relevant from PSUSensorMain?"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Also how much device-specific code is too much for it to not be included in PSUSensor?"
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I expect some devices will definitely require a decent amount of specific code. \n\nThat's fine.  It's arguably the same architectural distinction between say, an NVMe sensor based on mctp, and a TMP75 sensor based on kernel sysfs.  They have almost no code in common, so they're put in different daemons.  The only reason we don't put everything in one \"super daemon\" is just for failure modes, so that one failing daemon doesn't kill off all sensors for the whole system.  We actually used to run daemon per-sensor, but that had resource and performance consequences so the middle ground of \"deamon per sensor class\" is what we've landed on.\n\n> Are you suggesting that code should belong in a separate daemon with a DBus API that PSUSensor would talk to, with PSUSensor providing the DBus API for Redfish (ItemUpdater API implementation)? Or that this ADM1266daemon implement the ItemUpdater API, import the PSUSensor class, and reuse (factor out, or just copy?) whatever is relevant from PSUSensorMain?\n\nBoth are possible;  Which we do is going to depend on how much code is truly device specific in practice, and that question is better answered in code review.  In the past, it's been found that while lots of things claim to require lots of implementation specific code, that device specific code is relatively small, and easy to abstract in such a way that it doesn't make a mess (ie file per device type?).  The fact that we can even abstract this to a systemd target tells me it's pretty doable to just have a switch table of manufacturer and model numbers, and call the appropriate functions for each device type, but I'm open to other patterns.\n\n\nIf #including PSUSensor into ADM1266 is the approach that leads to the least code duplication, that seems fine to me.  I suspect that the PSUSensor class that exists today has some PSUSensor (the daemon) specific code in it at the moment, but this is the great part about abstractions, we can move that into PSUSensorMain, or into another class."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Also how much device-specific code is too much for it to not be included in PSUSensor?\n\nIt's a judgement call made by maintainers, and is highly dependent on what the code looks like;  Patchsets are really the best way to discuss this kind of thing, but in this context, I find it pretty hard to believe that a firmware update would be that much extra code to the point of requiring a new daemon, unless there were incompatible licensing restrictions (which are a good reason to spin off a daemon) or required modifying how the PMBUS/I2C bindings worked to the point of being incompatible with other devices.\n\nIn terms of the complexity in API, VRs aren't THAT complex compared to say, management engine or an RDE/IPMB subcontroller, so I suspect the PMBUS device-specific code can live in PSUsensor (with clean abstractions and code) for a long long time if not forever.\n\nIMO, lets take this one step at a time.  Remember, this isn't a one way door, we can decide to break things into their own daemon at a later date without a lot of overhead so long as we keep good abstractions."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 88,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why are these separate services?  Just put the logic in PSUSensor directly.  As-written, this just feels like separate daemons with extra steps.  Proper error handling is going to be difficult (near impossible) with systemd targets."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 88,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "Justin can chime in..\nbut what we've seen in the past with pmbus devices is that there isn't a consistent \"version\" string implemented across the pmbus devices we've seen.\nWhile some, like the ADM1266, have a nice mfg rev register we can use there are other devices where we've had to be a bit more creative.\n\nFor version at least - systemd targets is one way of allowing for an OEM to specify their own version formatting.\n\nThe only other obvious solution is to create some plugin system."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 88,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> but what we've seen in the past with pmbus devices is that there isn't a consistent \"version\" string implemented across the pmbus devices we've seen.\n\nThis is why the devicetype in entity-manager is the actual model number of the device, and not just generic \"PMBUS\".\n\n>have a nice mfg rev register\n\nYep, but this is ADM1266 specific, so openbmc needs to know it's talking to an ADM1266, which comes from the EM config file."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 93,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "A problem that's solved by just putting the logic in PSUsensor.\n\nIn this case, depending on how much device-specific logic there is, we might want a \"ADM1266Device\" daemon, that just shares the sensor code through the object libraries we already have but I don't have context on how much code that is."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  This doesn't track for me.  For built-in functions, we shouldn't be calling a CLI, and even if we needed to, fork/exec (or probably boost-process in this case) is doable to write, and the whole point of this design is that we don't call other daemons, all logic for managing a given device is in the daemon for said device.\n\nOne device, one daemon, to the extent possible."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 103,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "While I sympathize with your problems here, this is not the intent of openbmc, so it probably doesn't belong in this design doc.  If vendors don't want to produce source code, that's fine, but in upstream we're going to actively avoid complexity induced because vendors chose to not open source code.\n\nMy general advice in this case is when vendors do that, wrap that code in a daemon, expose the relevant dbus interfaces, and you'll be relatively insulated from the upstream changes, and relying on an interface that, while it does change, it's relatively rare and straightforward."
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "line": 112,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "please discuss the security impacts of being able to update a device from outside the system, mitigations, and how it will be tested."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "type": "ADDED",
                    "insertions": 116,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 132,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "e5ff0c73d433e7853c7eed0d9a627c9c81780f75",
            "parents": [
                "fd0ec1f9212f127bf302dd4ceb8f4fa2e29a5f1d"
            ],
            "ref": "refs/changes/34/52234/3",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1650923674,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "One more question (but nothing that will hold up the code review) are there any pieces out of fwupd that we could use?  A quick search doesn't show any mention of pmbus, but it does have a well defined plugin interface for doing firmware updates that might give us a lot more capability really quickly, and would let us share code with normal linux distributions.\n\nMostly just food for thought."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "designs/psusensor-fw-update.md",
                    "type": "ADDED",
                    "insertions": 118,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 134,
            "sizeDeletions": 0
        }
    ]
}