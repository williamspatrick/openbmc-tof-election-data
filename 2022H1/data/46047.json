{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "Ic8c836b49ffc2847d912808e80de2e5e21f9a1a1",
    "number": 46047,
    "subject": "Added few more passsword policy parameters",
    "owner": {
        "name": "Ratan Gupta",
        "email": "ratankgupta31@gmail.com",
        "username": "ratagupt"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/46047",
    "commitMessage": "Added few more passsword policy parameters\n\nThese parameters are required to control the complexitiy\nof the password.\n\nSigned-off-by: Ratan Gupta <ratankgupta31@gmail.com>\nChange-Id: Ic8c836b49ffc2847d912808e80de2e5e21f9a1a1\n",
    "createdOn": 1629373657,
    "lastUpdated": 1649940414,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1629373657,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1629373673,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1629373937,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1629373973,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1629373977,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/24651/ : ABORTED"
        },
        {
            "timestamp": 1629374480,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/24653/ : SUCCESS"
        },
        {
            "timestamp": 1629374935,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629482180,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629605610,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629718801,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1629720102,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1629746539,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629755948,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(7 comments)"
        },
        {
            "timestamp": 1629800234,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1629804743,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1629808804,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629811499,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629844558,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629880832,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1629916382,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1630300582,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1630314765,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 2:\n\n(2 comments)\n\nAwaiting for Patrick comments addressal."
        },
        {
            "timestamp": 1630502664,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Patch Set 2:\n\nThanks all for the review comments\nRichard, I had not updated this commit as Ed was mentioning about the security concern, hence we spoke with our PE team and they are fine with the build time configuration for now.we will revisit this later."
        },
        {
            "timestamp": 1632589380,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1649940414,
            "reviewer": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "message": "Abandoned"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "e28641716d3325dab74934a7b23cf0beed671697",
            "parents": [
                "964c4c78a6532c65ee0670f39796dac93efb9c06"
            ],
            "ref": "refs/changes/47/46047/1",
            "uploader": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "createdOn": 1629373657,
            "author": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 44,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "d405e4f25977289a5d2585890edddc267932d849",
            "parents": [
                "964c4c78a6532c65ee0670f39796dac93efb9c06"
            ],
            "ref": "refs/changes/47/46047/2",
            "uploader": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "createdOn": 1629373937,
            "author": {
                "name": "Ratan Gupta",
                "email": "ratankgupta31@gmail.com",
                "username": "ratagupt"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why do these need to be controllable at runtime?  Generally aren't these controlled by compile-time policy?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Admin should be able to change the password policy(to be more restrict) at any point of time depending on security guidelines."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Isn't that a security concern if admins (ie possible attackers) can change password policy at runtime?  In general I would've expected this to be a compile-time policy."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Ratan,\nQuestion 1: What is the envision here. Even if we want administrator to change this policy, how administrator is going to make it?\n1. OEM IPMI commands\n2. Redfish schema (OEM ? because standard one doesn't exist). \n\nMy View: \nFrom security point of it, a company must enforce minimum needed security (set as compile time policy), and anything further which to be configured by user must be D-Bus property.\nSame is done for Password length, where allow administrator to increase the password length, but can't reduce it below the compile time. \n\nQuestion 2 is, Do we need to allow this one to administrator ? Redfish standard schema doesn't have the same, and i fail to visualize benefit it brings when compared with Compile time policy based restriction & ability to change the password min length."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "> Question 1: What is the envision here. Even if we want administrator to change this policy, how administrator is going to make it?\n1. Redfish schema (OEM ? because standard one doesn't exist).\nUntil it is approved, My thought process to go with OEM Redfish.\nI have already opened a Redfish forum thread for the same.\nhttps://redfishforum.com/thread/524/account-service-password-complexity-missing\n\n\n> From security point of it, a company must enforce minimum needed security (set as compile time policy), and anything further which to be configured by user must be D-Bus property.\nSame is done for Password length, where allow administrator to increase the password length, but can't reduce it below the compile time. \n\n+1.\n\n\n> Question 2 is, Do we need to allow this one to administrator ? Redfish standard schema doesn't have the same, and i fail to visualize benefit it brings when compared with Compile time policy based restriction & ability to change the password min length.\n\nRedfish Forum thread is already opened up, \nOn other note, min password length is there in the standard redfish schema , so hoping these are also candidate for the password policy restriction.\n\nBenefit: Say you have shipped the system with less stricted password policy , now at later moment of time admin wants to restrict the password policy, there should be an run time option.\n\n\n\n> Isn't that a security concern if admins (ie possible attackers) can change password policy at runtime?  In general I would've expected this to be a compile-time policy.\n\nEd, If I get you correctly, You are suspecting that admin credentials have been compromised, In that case admin can do lot of unwanted things.\n\nFor the password policy restriction at runtime we already have MinPasswordLength and Max password length in the redfish standard which admin can change at run time."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Question 1: What is the envision here. Even if we want administrator to change this policy, how administrator is going to make it?\n> 1. Redfish schema (OEM ? because standard one doesn't exist).\n> Until it is approved, My thought process to go with OEM Redfish.\n> I have already opened a Redfish forum thread for the same.\n> https://redfishforum.com/thread/524/account-service-password-complexity-missing\n\nThis was brought up in the redfish meeting today, and there were some serious concerns about the completeness, or whether it was even possible to model all these things at runtime.\n\n> \n> \n> > From security point of it, a company must enforce minimum needed security (set as compile time policy), and anything further which to be configured by user must be D-Bus property.\n> Same is done for Password length, where allow administrator to increase the password length, but can't reduce it below the compile time. \n> \n> +1.\n> \n> \n> > Question 2 is, Do we need to allow this one to administrator ? Redfish standard schema doesn't have the same, and i fail to visualize benefit it brings when compared with Compile time policy based restriction & ability to change the password min length.\n> \n> Redfish Forum thread is already opened up, \n> On other note, min password length is there in the standard redfish schema , so hoping these are also candidate for the password policy restriction.\n> \n> Benefit: Say you have shipped the system with less stricted password policy , now at later moment of time admin wants to restrict the password policy, there should be an run time option.\n> \n> \n> \n> > Isn't that a security concern if admins (ie possible attackers) can change password policy at runtime?  In general I would've expected this to be a compile-time policy.\n> \n> Ed, If I get you correctly, You are suspecting that admin credentials have been compromised, In that case admin can do lot of unwanted things.\n> \n> For the password policy restriction at runtime we already have MinPasswordLength and Max password length in the redfish standard which admin can change at run time."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "> This was brought up in the redfish meeting today, and there were some serious concerns about the completeness, or whether it was even possible to model all these things at runtime.\n\nIf as a openBMC team we are fine, we can always start with basic mandatory password policy requirement and later on we can add more.\nEd, Any thoughts on the same."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > This was brought up in the redfish meeting today, and there were some serious concerns about the completeness, or whether it was even possible to model all these things at runtime.\n> \n> If as a openBMC team we are fine, we can always start with basic mandatory password policy requirement and later on we can add more.\n\nI still have serious concerns about the security aspects of this.  If an administrator has access to change these parameters, that means that for administrators there is effectively no password complexity requirements.  Considering that the use of non-admin users is in its infancy, and has a number of holes (rest-dbus for example), I'm not really understanding what the use case for this is until we have better user class support, and even after that, I have serious worries about its effectiveness as a security tool.\n\n\nI would like to see this discussed at length with DMTF, which likely will require you to attend one of the meetings and possibly give a presentation and mockup on these additions.  The very short abstract you gave in your forum post didn't even include the fact that you wanted these PATCHable.\n\n> Ed, Any thoughts on the same."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "> I still have serious concerns about the security aspects of this.  If an administrator has access to change these parameters, that means that for administrators there is effectively no password complexity requirements.  Considering that the use of non-admin users is in its infancy, and has a number of holes (rest-dbus for example), I'm not really understanding what the use case for this is until we have better user class support, and even after that, I have serious worries about its effectiveness as a security tool.\n\nDo You have the similar concern for MaxPasswordLength and MinPasswordLength which is in the standard?\n\n\n\n> I would like to see this discussed at length with DMTF, which likely will require you to attend one of the meetings and possibly give a presentation and mockup on these additions.  The very short abstract you gave in your forum post didn't even include the fact that you wanted these PATCHable.\n\nAbove two described properties(MaxPasswordLength and MinPasswordLength) also allows PATCH operation.\n\nBut I agree with the point that this is not complete, There could be multiple other combinations which we can not cover by having these properties."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Ratan, \nMy question 2 still remains the same\n\ni.e. We already have compile time policy to start with minimum password length and even allow administrator to increase the complexity using MinPasswordLength. \n\nThe same can be performed for increasing the password complexity, but is it required ? i.e. It allows configurable option by Adiministrator, but whether administrator requires to do that. \n\nFor argument sake, I am assuming we are having a need, then my understanding is as follows\n1. Administrator needs to increase password complexity, but reducing it below certain value will not be allowed (protected by compile time policy min value). (same way as MinPasswordLength).\n2. All these password complexities combined can't increase the MinPasswordLength.\n3. Redfish shouldn't dictate allowed Special characters that will satisfy for the SpecialCharacterLength. If needed, new property must be introduced in Redfish which will expose the AllowedSpecialCharacters[enum]\n4. Property must be updatable only by Admin.\n5. To support backward compatibility these properties can't be made as mandatory, and User must not make no complexities required. i.e. If the property is not specified, then complexities in unknown to the user.\n6. i.e. Each & every property must be satisfied to accept the password, MinPaswword configured must be sum of all these new MinProperties proposed, else error must be returned. \n\n\nEven though i am unable to visualize the use case scenario here, don't want to block the code, if IBM wants to implement even in OEM Schema (which either administrator / IBM early request - SupportRole will update). \nWe are adding new properties, and need to maintain all those in future, as long as IBM thinks that it is worth it and it is in-need of this should be fine. (Going ahead with +1 for this reason. IBM & Maintainers can decide)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Ratan, \n> My question 2 still remains the same\n> \n> i.e. We already have compile time policy to start with minimum password length and even allow administrator to increase the complexity using MinPasswordLength. \n\nFor what it's worth, in the discussion with others in the DMTF, it's not clear this was a conscious decision to make those read/write.  I believe most implementations make them read-only.  Yes, I have some concerns about those as well, but to a much lesser degree.\n\n> \n> The same can be performed for increasing the password complexity, but is it required ? i.e. It allows configurable option by Adiministrator, but whether administrator requires to do that. \n> \n> For argument sake, I am assuming we are having a need, then my understanding is as follows\n> 1. Administrator needs to increase password complexity, but reducing it below certain value will not be allowed (protected by compile time policy min value). (same way as MinPasswordLength).\n> 2. All these password complexities combined can't increase the MinPasswordLength.\n> 3. Redfish shouldn't dictate allowed Special characters that will satisfy for the SpecialCharacterLength. If needed, new property must be introduced in Redfish which will expose the AllowedSpecialCharacters[enum]\n> 4. Property must be updatable only by Admin.\n> 5. To support backward compatibility these properties can't be made as mandatory, and User must not make no complexities required. i.e. If the property is not specified, then complexities in unknown to the user.\n> 6. i.e. Each & every property must be satisfied to accept the password, MinPaswword configured must be sum of all these new MinProperties proposed, else error must be returned. \n> \n> \n> Even though i am unable to visualize the use case scenario here, don't want to block the code, if IBM wants to implement even in OEM Schema (which either administrator / IBM early request - SupportRole will update). \n\nOEM schemas have their own rules, which generally involve a discussion with DMTF about the feature first.\n\n> We are adding new properties, and need to maintain all those in future, as long as IBM thinks that it is worth it and it is in-need of this should be fine. (Going ahead with +1 for this reason. IBM & Maintainers can decide)\n\nI think we for sure need to make this configurable at compile time whether or not they're runtime writable."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Should I rename this as MinUpperCaseCharactersInPassword?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "I think yes."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "That name is becoming a bit absurd.  Do we want a separate interface called \"PasswordPolicy\"?  I guess we would need to move the MinPasswordLength property though in that case."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "An alternative would be to create a property which is \"PasswordPolicy\" as a map<enum, size> and the enum is { \"MinUpperCase\", \"MinLowerCase\", \"MinDigits\", etc. }."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "+1.\nAlso explicitly call out the default value or at least document as\n\n\"Minimum password length specified in build time is marked as default value\".\n\nAlso need to say when MinUpperCase + MinLowerCase + MinDigits must be <= MinPasswordlength, else error will be returned."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "I agree with separate password policy interface-> we can do in two phase.\n\nPhase 1: Move all the newly introduced property into new interface.\nPhase 2 : Move the Min Password Length and MaxPassword length to this new interface.\n\nDo we have any preference for having map of (key value pairs) v/s (individual property for each policy param).?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 42,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "If we do it as a map, I think we can keep it here.  Then phase 2 can be \"refactor them to the map property instead\".  Anytime we have a property name that can is only descriptive enough when it contains > 16 characters probably indicates a scoping problem, hence why I originally suggested a separate PasswordPolicy interface.  The map property solves it similarly.\n\nYou can pick which you want to go.  I think that a map makes it more obvious when we are using the default value (because the value is absent from the map) but is a little harder to interact with because it requires a read-modify-write of the property to add a new policy setting.  The map is nicer for clients, I think, though because it is a single property to read.\n\nIf you go with a PasswordPolicy interface, probably keep them as separate properties."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 43,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The preference is for these to be 'size' now.  No need to restrict to a byte and there is no advantage to do so."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 43,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think we're trying to eliminate these InternalFailures as well.  Do you have a good reason for putting it into these interfaces?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 58,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Should we have defaults for each of these? For eg 0 or NaN to denote these policies are not enforced?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 58,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Seems like 0 is an implied \"not enforced\" right?  Min=0 means you don't have to have a particular character type."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 58,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "> Seems like 0 is an implied \"not enforced\" right?\nYes"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 65,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we need to define what is a \"special character\"?  How does unicode fit into this password policy?  Is \ud83c\udf89 a special character?  What about \u0d6a (Malayalam numeric 4)?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 65,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "We will document the supported special characters here."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 65,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Instead of that, create Allowed Special characters as a read-only property which will expose the same. That one will work in the long run"
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 68,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "wrap."
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "line": 68,
                    "reviewer": {
                        "name": "Ratan Gupta",
                        "email": "ratankgupta31@gmail.com",
                        "username": "ratagupt"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/User/AccountPolicy.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 30,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 43,
            "sizeDeletions": 0
        }
    ]
}