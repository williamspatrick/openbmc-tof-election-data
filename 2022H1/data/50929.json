{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I5c1d8a513e7b72552c818d19f831ca5bc26e7a37",
    "number": 50929,
    "subject": "sensors: always add all properties for thresholds iface",
    "owner": {
        "name": "Andrei Kartashev",
        "email": "a.kartashev@yadro.com",
        "username": "alatarum"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/50929",
    "commitMessage": "sensors: always add all properties for thresholds iface\n\nAccording to PDI, there is no optional properties for interfaces, but in\ncase the threshold is not used, it should be set to NaN.\n\nThis refactors threshold interfaces creation to always initialize both\nLow and High properties.\n\nTested: ensure, both thresholds created even if only one defined:\n xyz.openbmc_project.Sensor.Threshold.Critical interface  -  -      -\n .CriticalAlarmHigh                            property   b  false  emits-change\n .CriticalAlarmLow                             property   b  false  emits-change\n .CriticalHigh                                 property   d  260    emits-change writable\n .CriticalLow                                  property   d  nan    emits-change writable\n\nSigned-off-by: Andrei Kartashev <a.kartashev@yadro.com>\nChange-Id: I5c1d8a513e7b72552c818d19f831ca5bc26e7a37\n",
    "createdOn": 1643990758,
    "lastUpdated": 1645160774,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1643990758,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1643990782,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1643990782,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1643991037,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/36605/ : SUCCESS"
        },
        {
            "timestamp": 1643991713,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1643992393,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1643992402,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1643992402,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1643992657,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/36608/ : SUCCESS"
        },
        {
            "timestamp": 1644325375,
            "reviewer": {
                "name": "Alexander Amelkin",
                "email": "a.amelkin@yadro.com",
                "username": "AlexanderAmelkin"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1644455266,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644482423,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644554674,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1644554970,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1644770790,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644959735,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 2:\n\n(9 comments)"
        },
        {
            "timestamp": 1645146259,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1645160774,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "283ac9df107defd3d999a9fe1f6be6799ac3649b",
            "parents": [
                "70b66e24925a1bc07aa2e0078f86b6f87fa56da7"
            ],
            "ref": "refs/changes/29/50929/1",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1643990758,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "This is alternative implementation for https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/43172\nCompared to 43172, my solution looks bit more natural, but it doesn't allow to set value for non-existing threshold. It is possible to create threshold object on the fly, same as there, but with current design we can't save changes anywhere: it is not possibly to add new threshold interface to EM from dbus.\nPossible solution could be to redesign EM threshold configuration to use e.g. single json to describe all thresholds instead of creating individual interface to each one, but this is out of scope of this change."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This is alternative implementation for https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/43172\n\nThis is great that you're pushing code in response to this, but it would help significantly if you could also participate on the discussion happening in that review using the points you give below.  Otherwise, it ends up being up to the maintainers to decide which patchset is \"better\", which we'd rather be a community thing.\n\n> Compared to 43172, my solution looks bit more natural,\n\nit would help a lot if you could quantify this more before you post on the other changeset.  \"natural\" isn't very descriptive in terms of describing engineering details.\n\n> but it doesn't allow to set value for non-existing threshold. It is possible to create threshold object on the fly, same as there, but with current design we can't save changes anywhere: it is not possibly to add new threshold interface to EM from dbus.\n> Possible solution could be to redesign EM threshold configuration to use e.g. single json to describe all thresholds instead of creating individual interface to each one, but this is out of scope of this change.\n\nIn the context of this review, and 43172, lets focus on the change being made, not hypothetical features we could add later (unless this patchset directly enables those features or puts us closer to the path of enabling).\n\nI'm happy to discuss making thresholds that didn't previously exist create-able, but not in the context of this patch."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "> This is great that you're pushing code in response to this, but it would help significantly if you could also participate on the discussion happening in that review using the points you give below.  Otherwise, it ends up being up to the maintainers to decide which patchset is \"better\", which we'd rather be a community thing.\n\nI don't see what kind of participation do you expect? I can also give the link from that issue to this, but I don't think this will change anything significantly. Anyway, maintainers need to make decision on which implementation they like more.\n\n> it would help a lot if you could quantify this more before you post on the other changeset.  \"natural\" isn't very descriptive in terms of describing engineering details.\n\nWell, saying \"more natural\" I mean this solution is like refactoring, while that more like a workaround (in Russian we call such solutions \"\u043a\u043e\u0441\u0442\u044b\u043b\u044c\" (crutch) =)).\nI now working on switchable threshold sets feature (allow to change thresholds when e.g. host going to standby) and this was part of the work.\n\n> In the context of this review, and 43172, lets focus on the change being made, not hypothetical features we could add later (unless this patchset directly enables those features or puts us closer to the path of enabling).\n \nI highlight this because 43172 allow to set such thresholds, but it is impossible to save them, only keep until reboot, while this change will reject attempt to change N/A threshold.\n\n> I'm happy to discuss making thresholds that didn't previously exist create-able, but not in the context of this patch.\n\nThe implementation for sure is out of scope here."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > This is great that you're pushing code in response to this, but it would help significantly if you could also participate on the discussion happening in that review using the points you give below.  Otherwise, it ends up being up to the maintainers to decide which patchset is \"better\", which we'd rather be a community thing.\n> \n> I don't see what kind of participation do you expect? I can also give the link from that issue to this, but I don't think this will change anything significantly.\n\nIdeally, go into the patchset in question, and point out specific lines, with specific suggestions where code could be simpler, better, or more future proof, or go to the tested statement, and point out test cases that the current patchset doesn't patch.\n\n> Anyway, maintainers need to make decision on which implementation they like more.\n\nFWIW, I'm the maintainer on this, and assuming both patchsets are equal, I will generally try to pick the one that has more community input, as it implies that the community has tested it better and is more interested in supporting it.  If there are significant engineering advantages to one or another that are called out, that is definitely a deciding factor in many cases.\n\n> \n> > it would help a lot if you could quantify this more before you post on the other changeset.  \"natural\" isn't very descriptive in terms of describing engineering details.\n> \n> Well, saying \"more natural\" I mean this solution is like refactoring, while that more like a workaround (in Russian we call such solutions \"\u043a\u043e\u0441\u0442\u044b\u043b\u044c\" (crutch) =)).\n\nBut why (using technical details, variable names, and data structures from the patchset) is it better?  Ideally, this should be answered in your commit message, not in a gerrit comment.\n\n> I now working on switchable threshold sets feature (allow to change thresholds when e.g. host going to standby) and this was part of the work.\n\nThis is great detail, probably a distinct advantage of this patchset, and should be mentioned in your commit message.\n\n> \n> > In the context of this review, and 43172, lets focus on the change being made, not hypothetical features we could add later (unless this patchset directly enables those features or puts us closer to the path of enabling).\n>  \n> I highlight this because 43172 allow to set such thresholds, but it is impossible to save them, only keep until reboot, while this change will reject attempt to change N/A threshold.\n\nThat's also great detail, and should be in your commit message (ideally with a test case that the other patchset would fail).\n\n> \n> > I'm happy to discuss making thresholds that didn't previously exist create-able, but not in the context of this patch.\n> \n> The implementation for sure is out of scope here."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "> Ideally, go into the patchset in question, and point out specific lines, with specific suggestions where code could be simpler, better, or more future proof, or go to the tested statement, and point out test cases that the current patchset doesn't patch. \n> FWIW, I'm the maintainer on this, and assuming both patchsets are equal, I will generally try to pick the one that has more community input, as it implies that the community has tested it better and is more interested in supporting it.  If there are significant engineering advantages to one or another that are called out, that is definitely a deciding factor in many cases.\n\nOk, got it\n\n> But why (using technical details, variable names, and data structures from the patchset) is it better?  Ideally, this should be answered in your commit message, not in a gerrit comment.\n\nWith this `fillMissingThresholds` we first loop over thresholds to initialize interfaces, then loop over them to \"fill\" (using  O(N^2)) and then loop over them again to register all properties. This quite overcomplicated, because we know from the beginning all the interfaces and can loop over then instead.\nActually, this can be even more simplified if we group threshold objects by pairs. This could be subject of separate patch.\n\n> This is great detail, probably a distinct advantage of this patchset, and should be mentioned in your commit message.\n> \n> That's also great detail, and should be in your commit message (ideally with a test case that the other patchset would fail).\n\nI believe, all this should not go to commit message, because the only one of CRs will be merged and then commit message will get into the git log. For one, who will study git log, this discussion have no value, since it relates to something, which never was in git."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> this can be even more simplified if we group threshold objects by pairs\n\nI haven't read your whole comment, but the above is essentially a patchset I tried to write a while back, and what lead to a lot of the simplification of thresholds patchsets.  Now that most of them have landed it might be doable again, but I haven't gotten back to it in a while."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 95,
                    "deletions": -44
                }
            ],
            "sizeInsertions": 118,
            "sizeDeletions": 44
        },
        {
            "number": 2,
            "revision": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
            "parents": [
                "70b66e24925a1bc07aa2e0078f86b6f87fa56da7"
            ],
            "ref": "refs/changes/29/50929/2",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1643992393,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/sensor.hpp",
                    "line": 241,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "size_t should be passed by value, as should the const double& value below."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 241,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ack"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 244,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't see found ever getting set to true?"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 244,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "seems that I loose it somewhere"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 249,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Check request is different than current value?"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 255,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The old mechanism that just captured threshold was better than having to search for it.  We should aim to do that still if we can.  Having to search for a threshold is kinda messy, especially when we know exactly what threshold it was when we created it."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 255,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Probably, I can deal without search here for this patch, but in my following proposal (switchable thresholds) this would be required anyway."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 257,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets leave this off for now;  I'm happy to entertain this as a request,"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 257,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "do you mean, I should not leave TODO item?"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 297,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why did this get moved up?  It seems like we'd want to initalize all the interfaces right next to eachother?"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 297,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "not a functional change, just to group sensorInterface operations"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 328,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please abstract this to something approximating findThresholdDirection here https://github.com/openbmc/dbus-sensors/blob/c8fed20b29ec8a33190a02860bfa3b44cfb828ed/src/Thresholds.cpp#L34\n\nAnd put it in the same file to keep all our conversions in one spot."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 328,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ack"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 328,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Can this be a compile timer check? size of thresholdInterfaces, threshold level enum and constexpr struct thresProp (https://github.com/openbmc/dbus-sensors/blob/master/include/Thresholds.hpp#L133)\nare expected to be consistent.\n1. index of thresholdInterfaces are maps 1:1 threshold level \n2. threshold level enum is 0 - highest consecutive\n3. struct thresProp include one entry for each supported level.\n\nSince Level converts to index for <thresholdIntefaces>, I don't see added advantage of keeping \"struct thresProp\" to be flexible, where index does not have to match Level. These lookups are not needed if we ensure \"struct thresProp\"\n1. Level match index\n2. Has an entry for each supported Level\n\nThe code would be a lot simpler without all the matching and look up at the cost of ensuring couple const structures are defined correctly."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 350,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What if both are Nan?  It's still going to create a threshold.  I realize from some of the other conversations that might be what you want, but for the moment, lets stick a \n\nif (!std::isfinite(thLowValue) && !std::Isfinite(thHighValue)){\n   continue;\n}\n\nin there.  creating 5 threshold interfaces for every sensor needs discussed, and it's a big enough API change, and unrelated enough to this patch (which is just making the dbus interfaces correct) that I'd like to see it in a different patch.  As you've written it, it likely going to have some consequences, as it means system designers no longer have the ability to spec which thresholds are supported on which sensors, which might be important, so we'll need to discuss if we should blanket do this for all systems (which will have some impact) or if this should go in the per-entity configuration information, so component designers have some compile-time control over it.\n\nI'd rather not hold up this patch while that discussion happens."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 350,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Only in case interface already initialized (not NULL). Probably, good idea would be move entire initialization here. This will reduce code duplication in every constructor, wee just need to pass objServer here.\n\nAnd no, I don't want to create all 5 interfaces for every sensor yet."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 350,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "+1 only create interface if at least one of them not nan"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 367,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is already covered in the propertyAlarm() method.  I suspect we should be using that to avoid duplication of logic."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 367,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These two are essentially the same code, can we loop over something like\n\n\nstd::array<Direction, 2>{Direction::High, Direction::Low} to avoid this duplication?  The only things that I see that are different are about to be using helpers\nSomething like:\n\nfor (Direction dir: std::array<Direction, 2>(Direction::High, Direction::Low)){\n    thresIface->register_property(\n        propertyLevel(dir), thHighValue,\n        [&, level, thresSize, label, dir](const double& request,\n                                          double& oldValue) {\n            return updateThreshold(level, dir, thresSize,\n                                    label, request, oldValue);\n        });\n    thresIface->register_property(propertyAlarm(dir), false);"
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 367,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "I don't like to use propertyLevel/propertyAlarm here: we will have to run same loop 4 times, while we can do this once. Will it be optimized out at compile time?\nAnd I think, it is not that much of duplication..."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 367,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "How about extend the ThresholdDefinition to add property string array to reflect threshold dbus interface and iterate through the array to call register_property().\nThe added advantage is that we have one central place to define the consts that reflect what is in phosphor-dbus-interfaces for thresholds.\n\nSomething like:\nhttps://github.com/openbmc/dbus-sensors/blob/master/include/Thresholds.hpp#L126\nstruct ThresholdDefinition\n{\n    Level level;\n    uint8_t sevOrder;\n    const char* levelName;\n    std::array<const char *, 4> propStr;\n\n};\n\nconstexpr static std::array<thresholds::ThresholdDefinition, 5> thresProp = {\n    {{Level::WARNING, 0, \"Warning\", {\"High\", \"Low\", \"AlarmHigh\", AlarmLow\"}},\n ...\n}"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 95,
                    "deletions": -44
                }
            ],
            "sizeInsertions": 118,
            "sizeDeletions": 44
        }
    ]
}