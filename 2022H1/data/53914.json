{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I8d175ef3abc40498be76b445cc93421710cfdc38",
    "number": 53914,
    "subject": "Power:Mode Add power mode lock property and method",
    "owner": {
        "name": "Ben Tyner",
        "email": "ben.tyner@ibm.com",
        "username": "bentyner"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/53914",
    "commitMessage": "Power:Mode Add power mode lock property and method\n\nAdded a power mode lock property and a method for setting the property.\n\nSigned-off-by: Ben Tyner <ben.tyner@ibm.com>\nChange-Id: I8d175ef3abc40498be76b445cc93421710cfdc38\n",
    "createdOn": 1653316868,
    "lastUpdated": 1657137964,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1653316868,
            "reviewer": {
                "name": "Ben Tyner",
                "email": "ben.tyner@ibm.com",
                "username": "bentyner"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1653316921,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1653316921,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1653317388,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/43616/ : SUCCESS"
        },
        {
            "timestamp": 1653506711,
            "reviewer": {
                "name": "Chris Cain",
                "email": "cjcain@us.ibm.com",
                "username": "cjcain"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1653657690,
            "reviewer": {
                "name": "Sheldon Bailey",
                "email": "baileysh@us.ibm.com",
                "username": "baileysh"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1653660565,
            "reviewer": {
                "name": "Martha Broyles",
                "username": "marthabroyles"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1654005618,
            "reviewer": {
                "name": "Edward A. James",
                "email": "eajames@us.ibm.com",
                "username": "eddiejames"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1654008231,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1654024966,
            "reviewer": {
                "name": "Sheldon Bailey",
                "email": "baileysh@us.ibm.com",
                "username": "baileysh"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1654028582,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654036698,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1654119488,
            "reviewer": {
                "name": "Sheldon Bailey",
                "email": "baileysh@us.ibm.com",
                "username": "baileysh"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654185654,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654272856,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654289784,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654749656,
            "reviewer": {
                "name": "Ben Tyner",
                "email": "ben.tyner@ibm.com",
                "username": "bentyner"
            },
            "message": "Abandoned"
        },
        {
            "timestamp": 1657137964,
            "reviewer": {
                "name": "Sheldon Bailey",
                "email": "baileysh@us.ibm.com",
                "username": "baileysh"
            },
            "message": "Removed reviewer Sheldon Bailey <baileysh@us.ibm.com> with the following votes:\n\n* Code-Review+1 by Sheldon Bailey <baileysh@us.ibm.com>\n"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "648ecd4d3046ea65938f16a7917b946e96be5834",
            "parents": [
                "c6cf37a77b2d7ed93d8bd006ba842289d3d1369a"
            ],
            "ref": "refs/changes/14/53914/1",
            "uploader": {
                "name": "Ben Tyner",
                "email": "ben.tyner@ibm.com",
                "username": "bentyner"
            },
            "createdOn": 1653316868,
            "author": {
                "name": "Ben Tyner",
                "email": "ben.tyner@ibm.com",
                "username": "bentyner"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm confused why we have a method to change a property.  Why not just make the property not read only?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Sheldon Bailey",
                        "email": "baileysh@us.ibm.com",
                        "username": "baileysh"
                    },
                    "message": "Support on the BMC for equivalent FSP function --mode_lock.\nMy understanding is that this Lock can only be set to true in MFG through this function,,, and would require the system to go through a MFG reset to clear it. This would lock the PowerModeLocked into a write once condition."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "What it be more re-usable if you just made a single PowerModeLock property, that could have a possible error of xyz::openbmc_project.Common.Error.NotAllowed?\n\nYour implementation could then just return that NotAllowed if someone tried to change it back to false after it was set to true.\n\nThis way, another implementation could could still lock the power mode where the PowerMode property could still not be changed, but the lock itself could be removed."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there any information on what this is?  Is this something that is supported on many implementations?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Sheldon Bailey",
                        "email": "baileysh@us.ibm.com",
                        "username": "baileysh"
                    },
                    "message": "This may or may not be used, that depends on the customer order.  MFG tool sets Mode parameters and then sets the mode lock to prevent changes.  If a customer wants to buy a system at a specific performance mode, and orders that and the Power Mode Lock is set to prevent changes."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not interesting in taking a one-off property like this.\n\nIf you want to write up a design for maintaining manufacturing-only settings, we can probably go that route.\n\nYou might want to look at `Control.Security.SpecialMode = Manufacturing` as a way to identify that you are in manufacturing mode and then cause any writes to the PowerMode to go into your manufacturing persistent area?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Sheldon Bailey",
                        "email": "baileysh@us.ibm.com",
                        "username": "baileysh"
                    },
                    "message": "It is not if the system is in Manufacturing mode.\nRather it is in the Factory for manufacturing to set a specific performance mode. and then manufacturing sets Mode Lock that prevents the system from being changed at customer level to any other Performance Mode."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There must be some subtlety that I'm not understanding.  I'll just reiterate this:\n\n> If you want to write up a design for maintaining manufacturing-only settings, we can probably go that route.\n\nIf instead of 'manufacturing-only settings' you need this to read 'settings which can be set at manufacturing and persist through a \"factory reset\"', so be it.  In any case we're not going to do these one at a time as you discover them all by adding random 'Lock' properties."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "It's possible we'd end up implementing this by allowing only certain Redfish auth levels access to write the power mode lock.\n\nthat would just require a PowerModeLock property and adding NotAllowed to power mode.\n\nIs that doable?  how about a new interface with powerModeLock by itself?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> that would just require a PowerModeLock property and adding NotAllowed to power mode.\n\nI don't really see how that changes anything.  You still have the same one-off property proposal.\n\nIf we need a design for \"properties which can be restricted\" let's come up with a design for that.  Not make one-off properties to facilitate a specific case."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What is the rationale for making this hidden?  We don't have any other properties which are hidden."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Sheldon Bailey",
                        "email": "baileysh@us.ibm.com",
                        "username": "baileysh"
                    },
                    "message": "Since this is read only and the above function is the only way to set it, it makes sense that we would not need this hidden in introspect.  Any end user could not change it. I can change that depending on above feedback."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Power/Mode.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 34,
            "sizeDeletions": 0
        }
    ]
}