{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "I1b0c0ef0a1baf1175580119d192a3590f33b49e9",
    "number": 51224,
    "subject": "fru-device: Remove use of std::async",
    "owner": {
        "name": "Jonathan Doman",
        "email": "jonathan.doman@intel.com",
        "username": "jonathan-doman"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/entity-manager/+/51224",
    "commitMessage": "fru-device: Remove use of std::async\n\nBus scanning was being done in a background thread for the apparent\npurpose of being able to impose a time limit on the scan operation.\nHowever, it doesn't work as intended because the future object's\ndestructor will still wait for the async task to finish.\n\nReplace the async/future use with a simple chrono time check. Besides\nbeing simpler and safer, we can also remove the link dependency on\npthreads.\n\nSigned-off-by: Jonathan Doman <jonathan.doman@intel.com>\nChange-Id: I1b0c0ef0a1baf1175580119d192a3590f33b49e9\n",
    "createdOn": 1644949979,
    "lastUpdated": 1654823341,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1644949979,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1644949989,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1644949989,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1644950396,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/37319/ : FAILURE"
        },
        {
            "timestamp": 1644951351,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1644951364,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1644951364,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1644951639,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/37321/ : SUCCESS"
        },
        {
            "timestamp": 1644959708,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644963620,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1646754323,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1654823324,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1654823341,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Abandoned"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "f38adbde49e299dbc686e7f88252decaef209f94",
            "parents": [
                "f2081624c160934f14c932ec6abb84efc86d50ce"
            ],
            "ref": "refs/changes/24/51224/1",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1644949979,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -1
                },
                {
                    "file": "src/FruDevice.cpp",
                    "type": "MODIFIED",
                    "insertions": 100,
                    "deletions": -105
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 120,
            "sizeDeletions": 108
        },
        {
            "number": 2,
            "revision": "c734a6232f3c02c60f922b54db2ea2982df5af8a",
            "parents": [
                "f2081624c160934f14c932ec6abb84efc86d50ce"
            ],
            "ref": "refs/changes/24/51224/2",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1644951351,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "HAH, James and I argued about this exactly thing in code review when he first did it.  Only took 4 years for me to be vindicated \ud83d\ude0a\n\nThis is on my list to review (haven't done yet).  Given the possibilities of race conditions, testing this is going to be fun, but we'll get that figured out."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "B"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Yeah, async behavior is not obvious in these these case. When I initially read this code, I thought getBusFRUs would return and let the async thread keep running in the background (which would be bad). But then I tested out a simple example and saw that ~future() waits for the task to exit (and confirmed this behavior is documented on cppreference).\n\nI'm just learning about fru-device and noticed this weird code, so I welcome any suggestions for testing it."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'd probably start by reworking a board to lock up the i2c bus (grounding out a clock pin should be enough)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "right, but keep in mind that ~future isn't called until this leaves scope, and I believe the timer executes as part of the future.  Ideally this would all move to asio stuff to be more \"normal\""
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "After looking at this more, I can see that the existing code does work because we are able to abort an hung ioctl() call by closing the fd when the future times out. There is no simple way to achieve the same thing without using multiple threads as the future/async is doing. What I considered:\n\n1. This change. Doesn't work b/c it doesn't abort the ioctl()\n2. ASIO-based solutions as suggested by Ed. We need to use ioctl() so async_read-type solutions won't help. Using a timer to close the fd doesn't work while we're stuck in the kernel.\n3. Using the I2C_TIMEOUT ioctl() beforehand to prevent things from hanging for so long. This may work well but it's a global operation on the i2c adapter properties so I'm wary of doing it just for fru-device.\n\nSo I'm going to abandon this change."
                },
                {
                    "file": "src/FruDevice.cpp",
                    "line": 592,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See comment above, I don't think this case is handled anymore."
                },
                {
                    "file": "src/FruDevice.cpp",
                    "line": 62,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit, if you're declaring the type anyway, could you just do\n\nconstexpr std::chrono::seconds busTimeout(5);\n\nand avoid auto entirely?"
                },
                {
                    "file": "src/FruDevice.cpp",
                    "line": 386,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For a timer, I don't think this works.  My understanding was that when this was written, the call on line 409 would block, essentially forever./  The ideal way would be to set up a boost::asio::steady_timer instance to close the FD if needed.  Even better than that would be reworking it so that we do non-blocking async_read calls using boost::asio::random_access_file, and then in the timer just call cancel() in the case of the timer expiring."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -1
                },
                {
                    "file": "src/FruDevice.cpp",
                    "type": "MODIFIED",
                    "insertions": 101,
                    "deletions": -105
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 121,
            "sizeDeletions": 108
        }
    ]
}