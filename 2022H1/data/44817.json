{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "Ieba39414cbd7457d3b0578190033cef0303d840d",
    "number": 44817,
    "subject": "psusensor: attempt to reassign fd if reading returns ENODEV",
    "owner": {
        "name": "Justin Ledford",
        "email": "justinledford@google.com",
        "username": "justinledford"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/44817",
    "commitMessage": "psusensor: attempt to reassign fd if reading returns ENODEV\n\nIf the driver providing the underlying file is unbound, reading the fd\nwill return ENODEV, even if the driver is rebound. In this case we can\nstart polling an open on the fd, rather than reading.\n\nMotivating use-case:\nA hardware engineer needs to margin voltages across many voltage\nregulators. For each margining operation an unbind is done on the hwmon\ndriver, the voltage is changed and then the driver is rebound.\nWithout this patch PSUSensors would need to be restarted. This would add\nseveral additional seconds to the process.\n\nAfter the margining operation is done system sensor values need to be read\n via IPMI. However since PSUSensors is restarted the SDR on the BMC and\nthe cached SDR on the external system could be different. The host side\nnow needs to refresh its copy of SDR.\n\nIn our system this is done through a rescan operation that takes 15s+ to\ncomplete.\n\nTherefore simply restarting PSUSensors would result in an unacceptable\ntest time for our systems.\n\nAnother motivating use-case:\nDevices whose sensors are managed by dbus-sensors may require firmware\nupdates. In this case the hwmon driver must be unbound to eliminate\nbus contention issues. After the update is complete the driver is\nrebound, and telemetry can behave like normal again.\n\nTested:\nunbound a hwmon driver, changed the vout on these device, rebound the\ndriver and was able to read the updated vout through\n`busctl get-property xyz.openbmc_project.PSUSensor`.\n\nSigned-off-by: Justin Ledford <justinledford@google.com>\nChange-Id: Ieba39414cbd7457d3b0578190033cef0303d840d\n",
    "createdOn": 1625860219,
    "lastUpdated": 1656469478,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1625860219,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1625860231,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1627014892,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1: Code-Review+1\n\nThis seems like a rather good idea to me. It makes reading of sensors more robust."
        },
        {
            "timestamp": 1628013680,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1628106956,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1628106970,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628107038,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/23815/ : FAILURE"
        },
        {
            "timestamp": 1628107217,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 3: New patch set was added with same tree, parent, and commit message as Patch Set 2."
        },
        {
            "timestamp": 1628107227,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1628107230,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628107244,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1628107255,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3:\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/23816/ : FAILURE"
        },
        {
            "timestamp": 1628107255,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628107436,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23817/ : SUCCESS"
        },
        {
            "timestamp": 1628123146,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1628206476,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1628206503,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628206521,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1628206685,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23936/ : SUCCESS"
        },
        {
            "timestamp": 1628206998,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1628207548,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1628207559,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1628207563,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628207597,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1628207748,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23937/ : SUCCESS"
        },
        {
            "timestamp": 1628207800,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1628208356,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1628214877,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1629417144,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 6:\n\n(2 comments)\n\nNice feature, this improves reliability."
        },
        {
            "timestamp": 1629482792,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 6:\n\ncurious, are we waiting for any changes before getting +2?"
        },
        {
            "timestamp": 1629491140,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 6:\n\n> Patch Set 6:\n> \n> curious, are we waiting for any changes before getting +2?\n\nThere are still comments have not been addressed/respond yet. So at least waiting for that"
        },
        {
            "timestamp": 1629491440,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1629760357,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(5 comments)\n\nOverall, I'm not a huge fan of this kind of recovery.  If devices are unbinding, it's clear that either:\n1. We've designed something incorrectly, as some other application is in control of our device with no interlock.\n2. Linux and system level assumptions have failed to a level that we shouldn't try to recover.\n\nWhat I suspect is #1, where there's some other code that is wanting to interact with the VR, but has chosen not to create the interlocks required.  That seems wrong to me;  If we need interlocks for this, lets make them explicit, and in the same application, instead of just \"handling\" the error."
        },
        {
            "timestamp": 1629763877,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1629993323,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1630372346,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 7: Commit message was updated."
        },
        {
            "timestamp": 1630372582,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1631246044,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1635468823,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1635468837,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635468867,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/29297/ : FAILURE"
        },
        {
            "timestamp": 1635469538,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 8:\n\n(5 comments)"
        },
        {
            "timestamp": 1635469686,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1635469697,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635469844,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29298/ : SUCCESS"
        },
        {
            "timestamp": 1635472578,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Removed reviewer Andrew Jeffery."
        },
        {
            "timestamp": 1635808064,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 9: Code-Review+1\n\nEd, does this look good to you?\n\nCommit was updated to include the motivating use-case"
        },
        {
            "timestamp": 1635808438,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(1 comment)\n\n> Patch Set 9: Code-Review+1\n> \n> Ed, does this look good to you?\n> \n> Commit was updated to include the motivating use-case\n\nI typed the below response a while back but didn't hit send.  I guess I'm a little worried we're going down the \"microservices everything\" path, rather than having a single daemon responsible for a single piece of hardware, which tends to simplify things like this.  The core of this commit is \"we're bifurcating control of the VR at runtime to multiple applications, and that causes problems\" which I want to really grok as a design pattern.  As is, this fixes one minor class of problem, but doesn't actually solve the problem of split hardware ownership.  If margining is a use case, why isn't that going into PSU sensor (or possibly a new VR sensor to split the logic out)?\n\nOverall, I need to give this more thought, and ideally look at exactly what you guys are doing, I just haven't had a chance yet."
        },
        {
            "timestamp": 1635811857,
            "reviewer": {
                "name": "Vernon Mauery",
                "email": "vernon.mauery@linux.intel.com",
                "username": "vmauery"
            },
            "message": "Patch Set 9:\n\n(2 comments)"
        },
        {
            "timestamp": 1635812021,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 9:\n\n> I typed the below response a while back but didn't hit send.  I guess I'm a little worried we're going down the \"microservices everything\" path, rather than having a single daemon responsible for a single piece of hardware, which tends to simplify things like this.\n\nFair enough and I agree with you regarding \"single daemon - single device\" but I don't think that should preclude psu-sensors from being able to recover from a userspace unbind/rebind operation.\n\n\n>  The core of this commit is \"we're bifurcating control of the VR at runtime to multiple applications, and that causes problems\" which I want to really grok as a design pattern.  As is, this fixes one minor class of problem, but doesn't actually solve the problem of split hardware ownership. \n If margining is a use case, why isn't that going into PSU sensor (or possibly a new VR sensor to split the logic out)?\n\nDo we want to create a new API everytime there is a new lab/mfg  use-case? I'm more of the mind where I care mostly about the production use-case and try to provide software that is reliable enough to withstand the random things done to hardware in a lab/mfg environment.\n\nI also don't want to be in the critical path for every single new test hardware engineers think up."
        },
        {
            "timestamp": 1635812615,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1635814753,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n> Patch Set 9:\n> \n> > I typed the below response a while back but didn't hit send.  I guess I'm a little worried we're going down the \"microservices everything\" path, rather than having a single daemon responsible for a single piece of hardware, which tends to simplify things like this.\n> \n> Fair enough and I agree with you regarding \"single daemon - single device\" but I don't think that should preclude psu-sensors from being able to recover from a userspace unbind/rebind operation.\n\nIf it's single device single daemon, the daemon itself would be doing the unbind operation, and would therefore be able to tell the difference between a real error, and a \"we just unbound it\" error.  If something else is doing the unbind, we've moved away from single device single daemon.\n\n> \n> \n> >  The core of this commit is \"we're bifurcating control of the VR at runtime to multiple applications, and that causes problems\" which I want to really grok as a design pattern.  As is, this fixes one minor class of problem, but doesn't actually solve the problem of split hardware ownership. \n>  If margining is a use case, why isn't that going into PSU sensor (or possibly a new VR sensor to split the logic out)?\n> \n> Do we want to create a new API everytime there is a new lab/mfg  use-case?\n\nDepends on what you mean by API.  Dbus API?  hell no.  That would be insanity.  Some CLI that can do what the engineers need?  Probably in most cases.\n\nI suspect some of this is the conflict that dbus-sensors hasn't been moved over to a userspace PMBUS implementation, so there's some competing priorities in the interrim, and the things that you're wanting to do can't just be added to the VR controller (be it psu sensors or something else).\n\n> I'm more of the mind where I care mostly about the production use-case and try to provide software that is reliable enough to withstand the random things done to hardware in a lab/mfg environment.\n\nFWIW, that's a fine position to have, but literally every system will need to margin VRs at some point, so it's worth solving properly.  With that said, maybe margining VRs without a bmc reboot is somewhat unique?\n\n> \n> I also don't want to be in the critical path for every single new test hardware engineers think up.\n\nI don't think anyone does, but if the aformentioned CLI is useful, it shouldn't need to be in the critical path?"
        },
        {
            "timestamp": 1635871780,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 9:\n\n> If it's single device single daemon, the daemon itself would be doing the unbind operation, and would therefore be able to tell the difference between a real error, and a \"we just unbound it\" error.  \n\nI see what you're saying. This sounds like a reasonable approach. To me an \"Unbind\" or \"DisableDevice\" API belongs on some inventory item that represents the device.\nMaybe an association can point from sensors to the associated inventory?\n\n> If something else is doing the unbind, we've moved away from single device single daemon.\nYeah agreed.\n\n> Depends on what you mean by API.  Dbus API?  hell no.  That would be insanity.  Some CLI that can do what the engineers need?  Probably in most cases.\n\nYeah agreed, or at least let whoever is kicking the tires on hardware do what they need manually via the shell or script in the interim.\n\n \n> I suspect some of this is the conflict that dbus-sensors hasn't been moved over to a userspace PMBUS implementation, so there's some competing priorities in the interrim, and the things that you're wanting to do can't just be added to the VR controller (be it psu sensors or something else).\n\nYeah the conflict resolution is definitely not there in the userspace pmbus. The library gives you a class that makes manual unbinding easy.\nIf we have an inventory item that represents a device and that dbus-object has an unbind/rebind interface as well as an i2c interface then it should be trivial for a CLI to discover what dbus object it needs to poke to unbind.\n \n> > I'm more of the mind where I care mostly about the production use-case and try to provide software that is reliable enough to withstand the random things done to hardware in a lab/mfg environment.\n> \n> FWIW, that's a fine position to have, but literally every system will need to margin VRs at some point, so it's worth solving properly.  With that said, maybe margining VRs without a bmc reboot is somewhat unique?\n\nI didn't dig too deeply into exactly how things were being used. I think a CLI combined with a dbus unbind API is a fine direction.\n\n> > \n> > I also don't want to be in the critical path for every single new test hardware engineers think up.\n> \n> I don't think anyone does, but if the aformentioned CLI is useful, it shouldn't need to be in the critical path?\n\nAgreed. So the question remains, should we intentionally make dbus sensors break when userspace does a random unbind? Or should we make it so dbus sensors recover but log some error message showing that it detected a driver that was unbound?"
        },
        {
            "timestamp": 1635875483,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n> Patch Set 9:\n> \n> > If it's single device single daemon, the daemon itself would be doing the unbind operation, and would therefore be able to tell the difference between a real error, and a \"we just unbound it\" error.  \n> \n> I see what you're saying. This sounds like a reasonable approach. To me an \"Unbind\" or \"DisableDevice\" API belongs on some inventory item that represents the device.\n> Maybe an association can point from sensors to the associated inventory?\n\nBetter response to come later, but these two things exist.  Entity manager has a disable API for each node, and sensors have an all_sensors/chassis association."
        },
        {
            "timestamp": 1635897336,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 9:\n\n(2 comments)"
        },
        {
            "timestamp": 1635964718,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1635964729,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635964876,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29744/ : SUCCESS"
        },
        {
            "timestamp": 1635965886,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 10:\n\n(3 comments)"
        },
        {
            "timestamp": 1636046981,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 10: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1636047507,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1636047536,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1636047572,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1636047685,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29811/ : SUCCESS"
        },
        {
            "timestamp": 1636069540,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Removed reviewer Andrew Jeffery."
        },
        {
            "timestamp": 1636402748,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 11: Code-Review+1\n\nlgtm"
        },
        {
            "timestamp": 1636411901,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 11:\n\nThe only open question left to resolve is:\n\"Should PSUSensors make an attempt to recover a device even when a user unbinds and rebinds a driver from a device even though this is not a supported use-case?\""
        },
        {
            "timestamp": 1640051216,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 11:\n\n> Patch Set 11:\n> \n> The only open question left to resolve is:\n> \"Should PSUSensors make an attempt to recover a device even when a user unbinds and rebinds a driver from a device even though this is not a supported use-case?\"\n\nfriendly ping!"
        },
        {
            "timestamp": 1640461952,
            "reviewer": {
                "name": "Arun Lal K M",
                "email": "arun.lal@intel.com",
                "username": "arunlalkm-intel"
            },
            "message": "Patch Set 11: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1640728507,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1640728741,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1640760328,
            "reviewer": {
                "name": "Arun Lal K M",
                "email": "arun.lal@intel.com",
                "username": "arunlalkm-intel"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1656454020,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1656454159,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1656461746,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1656461905,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1656461958,
            "reviewer": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1656469478,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(3 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "2359942ce4f97fa4383d812f2747cf09fd6cacd6",
            "parents": [
                "f72eb8324e951a647e1625f55023c7ea8db00f67"
            ],
            "ref": "refs/changes/17/44817/1",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1625860219,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 204,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "do we still want to incrementError for both or just when fd < 0 ? I am not sure what could be causing the no_such_device in real usage (not because driver is manually removed for testing)."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 204,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "I added incrementError when fd < 0 while attempting to re-open, and when the first ENODEV is encountered. One real usage case where ENODEV occurs is when a firmware update to a PMBus device requires unbinding the device's hwmon driver to prevent i2c collisions."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 204,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 33,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "a1d1933776b73e9373c97e2738346b1eaa3b679f",
            "parents": [
                "913d4d00c0b31e968fee506298b78bb012ff6a3d"
            ],
            "ref": "refs/changes/17/44817/2",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1628106956,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "27b3e9c768aeb5e3fab9ab5c20ccc7f83ce7a902",
            "parents": [
                "913d4d00c0b31e968fee506298b78bb012ff6a3d"
            ],
            "ref": "refs/changes/17/44817/3",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1628107217,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "e02545a78c764a3184ad4d1eef2d797b2665ae5c",
            "parents": [
                "913d4d00c0b31e968fee506298b78bb012ff6a3d"
            ],
            "ref": "refs/changes/17/44817/4",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1628107244,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 176,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "strerror(errno) would be helpful here."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 176,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 2
        },
        {
            "number": 5,
            "revision": "0588ee5a0357c3372903f06abcdf181a0404d20d",
            "parents": [
                "913d4d00c0b31e968fee506298b78bb012ff6a3d"
            ],
            "ref": "refs/changes/17/44817/5",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1628206476,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "doesn't this end up incrementing error twice? \nsince fd < 0 I expect line 192 \"read(fd, buffer.data()...)\" to return -1 and errno == EBADF.\nThen line 223 incrementsError again."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Right good catch, fixed."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 211,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "is this correct? I don't see ENODEV specified as an errno that gets set by read which makes me think that this conditional can never be hit."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 211,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Yeah from https://man7.org/linux/man-pages/man2/read.2.html\n\n> On error, -1 is returned, and errno is set to indicate the error.\n\nAlso from `journalctl` while testing:\n`psusensor[1872]: No such device at /sys/class/hwmon/hwmon18/temp2_input, closing fd`"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 42,
            "sizeDeletions": 2
        },
        {
            "number": 6,
            "revision": "eb6378234b64b81bcf5936069019a0dd516d911b",
            "parents": [
                "913d4d00c0b31e968fee506298b78bb012ff6a3d"
            ],
            "ref": "refs/changes/17/44817/6",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1628207548,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "why would this happen outside of a debug context?  This would imply that the PSUsensor modeling is wrong, and other pieces need to be combined with psusensor, or psusensor functionally merged with whatever function is unbinding the driver."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "yeah, so this is in a \"debug\" context. That is hardware engineers perform voltage margining by unbinding a driver, using iotools to modify pmbus registers and then rebind the drivers and expect the sensors to report sensible values.\n\nWe initially just told the HW engineers to restart the service but their margining operations would adjust the voltage many times across several devices.. waiting seconds for the service to restart and become available ended up drastically increasing the test time."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> yeah, so this is in a \"debug\" context. That is hardware engineers perform voltage margining by unbinding a driver, using iotools to modify pmbus registers and then rebind the drivers and expect the sensors to report sensible values.\n> \n> We initially just told the HW engineers to restart the service but their margining operations would adjust the voltage many times across several devices.. waiting seconds for the service to restart and become available ended up drastically increasing the test time.\n\nAll of this detail would be great to have in the commit message, and explains a lot better what you're trying to accomplish;  It'd be good to better understand what exactly is taking seconds.  I would've expected the tests to run, then at the end, the sensor subsystem restarts once.  Lets get a next level of detail added here, and we can go from there."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "I went ahead and updated the commit message with the motivating factors. Justin, please look through it and see if you agree.\n\nAs far as why systemctl restart xyz.openbmc_project.psusensor.service causes unacceptable test times in our setup:\n\nThe rough process is as follows:\n\n-- via a BMC shell --\n1.)unbind driver\n2.) use iotools smbus to adjust voltage\n3.) rebind driver\n\n-- through the IPMI interface on another machine --\n4.) Read numerous sensor values through the IPMI interface\n\n\nIf instead we did systemctl restart xyz.openbmc_project.psusensor.service we'd have to wait an additional 2-3 seconds.\nAlso at this point since you're using dynamic-IPMI the SDR ordering could potentially change, so you have to fetch the SDR from the external side.\n\nThen when you take into account that the external tool requires a 'rescan' operation that takes 15 seconds to force refreshing the SDR.. you end up with a ridiculously long test time.\n\nWe know this because this was my first suggestion , \"just systemctl restart psusensors but make sure you do a rescan to guarantee a consistent SDR\"\n\nThis was also an obvious work-around and we thought we could help improve the code base instead. \nSo here we are, with a patch that tries to make PSUSensors more tolerant to corner conditions."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Thanks for updating the commit message Jason. I described another important use case which is unbinding drivers while device firmware updates occur."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> -- through the IPMI interface on another machine --\n\nThis part I'm not understanding;  You're already logged into the bmc shell, and access iotools level stuff, why drop to a lower fidelity, slower, more problematic IPMI interface?  Is there someone physically at the console?\n\n> So here we are, with a patch that tries to make PSUSensors more tolerant to corner conditions.\n\nAnd the problem is that if these corner conditions happen in a non-debug scenario (which they have in the past) now you can no longer detect hardware issues properly, so I'm not really sure how to support both use cases.  Lets chase down the other thread, and keep trying to understand why this is needed;"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 172,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "this potentially would flood the journal.  Please remove it."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 172,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "I reverted these lines back to how they were to avoid flooding the journal."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "If this fails, the read call below will happen on an invalid FD, so it will return EBADF below. Is the intention to retry every timer tick, until that file is ready again? If so, might want to catch EBADF as well as ENODEV. Or, is the intention to retry only once and then give up?\n\nAlso, if retrying every timer tick, it might generate a large amount of logging text if the device has been removed and not quickly replaced."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "+1 avoid flooding journal log.\nAlso should not go continue to read at line 188+"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1 to the +1"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "I refactored this change to put all the recover logic in separate functions and to avoid flooding the journal, please take a look."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Doesn't this branch need to return somewhere?  otherwise, we end up calling seek on a negative fd on line 190.  That seems wrong."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Good point, the latest change should avoid seeking a negative fd."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I am concerned about doing the read immediately after the reopen. This bypasses the flow of ASIO, which is to typically wait for an asynchronous event, to be sure the read buffer has content in it, and then to do the read. Otherwise, this risks blocking on the read call.\n\nIt might be preferable to do the reopen immediately after the close, instead of doing the reopen immediately before the read."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "+1"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1 in principal.  In practice, all reads out of this daemon are blocking, so it doesn't matter than much."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "With the latest change the ASIO flow is started again once re-opened, rather than immediately reading after the re-open."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 41,
            "sizeDeletions": 2
        },
        {
            "number": 7,
            "revision": "0fad8a39e20a66fa296bae10fc5ec2e11cfafb2e",
            "parents": [
                "913d4d00c0b31e968fee506298b78bb012ff6a3d"
            ],
            "ref": "refs/changes/17/44817/7",
            "uploader": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "createdOn": 1630372346,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "should read be skipped below?"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done (forgot to resolve this comment in an earlier change)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 55,
            "sizeDeletions": 2
        },
        {
            "number": 8,
            "revision": "d3b72d0af0857276a6179d68ed2a910fe1c016fd",
            "parents": [
                "b782eec69267206863c07f9ea26b475be7f0f291"
            ],
            "ref": "refs/changes/17/44817/8",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1635468823,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 1
        },
        {
            "number": 9,
            "revision": "73db989352a04d34368b7eacf03ddb6272cc6fc8",
            "parents": [
                "b782eec69267206863c07f9ea26b475be7f0f291"
            ],
            "ref": "refs/changes/17/44817/9",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1635469686,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not quite following.  Considering your temperature control loops are now invalidated, why wouldn't you disable PSUSensor, run your tests, then reenable it once?  There's no need to do it every time a VR is changed.\n\nI'm a little worried that this change is going to cover up real failures in a production scenario.  By design, PSUSensor intends to \"OWN\" the VR, so if that's not true, the design is going to be problematic.  Given that PSUsensor is \"in charge\" of the VR, I'd expect at least some kind of control handoff that's more robust than \"the FD returned an error\"."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "I would tend to agree here. This appears to behave like a bandaid for poorly behaved PSUs that keep getting errors (like if you didn't want the errors to show up in logs). By simply restarting the sensor whenever it goes awol, it hides any real errors."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": ">Considering your temperature control loops are now invalidated, why wouldn't you disable PSUSensor, run your tests, then reenable it once?\n\nFlow is to change the voltage on a rail, read the voltage from some other device rinse and repeat.\n\n@Vernon\n\n>This appears to behave like a bandaid for poorly behaved PSUs that keep getting errors (like if you didn't want the errors to show up in logs). By simply restarting the sensor whenever it goes awol, it hides any real errors.\n\nDon't quite follow. If you're talking about the part where we restart PSUSensors - we only do that because PSUSensors doesn't deal well with a /sys/class/hwmon/**/ path disappearing and then reappearing. This patch would make it so that you no longer have to restart PSUSensors to achieve this behavior.\n\nIf you're talking about unbinding/rebinding drivers to hide errors - that's not what the use-case is about. We're unbinding drivers to allow a hardware test have exclusive access to the device and rebinding them to give the device back to PSUSensors."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Please reopen this comment if there are any more concerns."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think this is still a concern, and I'm really not understanding the use case.\n\n> Flow is to change the voltage on a rail, read the voltage from some other device rinse and repeat.\n\n\nSo...\n\nsystemctl stop xyz.openbmc_project.PSUSesnsor.service\n\n>>  Change voltage rail, take readings, loop over hwmon outputs, do whatever needs done to margin your stuff\n\nsystemctl start xyz.openbmc_project.PSUSensor.service\n\n\nAlternatively, if you really want to have fine grained control, remove the relevant node from the Entity-manager dbus interfaces, let PSUSensor destruct the object itself, then add the node back when you're done.\n\n\nThere's two ways to do what you do that don't involve possibly breaking non-debug use cases, can we walk through in more detail why either of those existing options don't meet your needs?"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Since this is only called once in one place, suggest not to use a function. It would be easier to follow (IMO)"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "I think by keeping this code in a separate function it keeps handleResponse a little cleaner and more compact. Following the code path in handleResponse to the recover logic will require reading the neighboring functions anyways."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "That is fair.\n(really) nit: what do you think move restartAttemptRecover() after attemptRecover() so it is easier to follow the flow: setupAttemptRecover()->attemptRecover()->restartAttemptRecover->attemptRecover()->\n                                              ^                                         |\n                                              |-----------------------------------------|"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 185,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Good idea, done."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 190,
                    "reviewer": {
                        "name": "Vernon Mauery",
                        "email": "vernon.mauery@linux.intel.com",
                        "username": "vmauery"
                    },
                    "message": "fd is valid if it is >= 0\n\nwhile 0,1,2 are commonly assigned to stdin, stdout, stderr, it is possible to close those and get them assigned as new file handles."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 190,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 246,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Maybe move errno==ENODEV case inside else (line 23) after line 245. log msg and incrementError() do not have to be repeated."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 246,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 1
        },
        {
            "number": 10,
            "revision": "adb00c415e7e13c2f50afd860d8f2699e631fd8a",
            "parents": [
                "b782eec69267206863c07f9ea26b475be7f0f291"
            ],
            "ref": "refs/changes/17/44817/10",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1635964718,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 1
        },
        {
            "number": 11,
            "revision": "d6839625c161295e44f6dab365b34e89f11dd6bf",
            "parents": [
                "b782eec69267206863c07f9ea26b475be7f0f291"
            ],
            "ref": "refs/changes/17/44817/11",
            "uploader": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "createdOn": 1636047507,
            "author": {
                "name": "Justin Ledford",
                "email": "justinledford@google.com",
                "username": "justinledford"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "ping: any update on this patch Justin?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "Waiting on a +2"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "One thing as a reviewer - I sometimes skip reviews if there's unresolved comments. It may be a good idea to resolve all the comments (if they have been resolved) and ping the maintainers on discord to get their attention."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Patch Set 11:\n> \n> The only open question left to resolve is:\n> \"Should PSUSensors make an attempt to recover a device even when a user unbinds and rebinds a driver from a device even though this is not a supported use-case?\"\n\nYep, and that's pretty core to this patchset."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Arun Lal K M",
                        "email": "arun.lal@intel.com",
                        "username": "arunlalkm-intel"
                    },
                    "message": "Question:\nWill we keep attempting recovery? Is there a point we have to stop in case the file is no longer available?"
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Justin Ledford",
                        "email": "justinledford@google.com",
                        "username": "justinledford"
                    },
                    "message": "The code right now will keep attempting forever. If the file was present when the daemon started, it should eventually come back given the use-case that motivated this change. Perhaps we could add a timeout to the recovery in a future CL (preferably one that can be tweaked with a parameter for different use cases)."
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "line": 180,
                    "reviewer": {
                        "name": "Arun Lal K M",
                        "email": "arun.lal@intel.com",
                        "username": "arunlalkm-intel"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 96,
            "sizeDeletions": 1
        }
    ]
}