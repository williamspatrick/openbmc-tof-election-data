{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I677a34e1ee570d33f2322a80dc1629f88273e0d5",
    "number": 51707,
    "subject": "Add common url segments parser",
    "owner": {
        "name": "Szymon Dompke",
        "email": "szymon.dompke@intel.com",
        "username": "sdompke"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/51707",
    "commitMessage": "Add common url segments parser\n\nThis change is adding helper template function, which can be used both\nto validate and read segments from segments_view returned by boost_url\nparser. Number of segments is also validated - in case when argument\ncount differs from them, false will be returned. In case when we want to\nvalidate only existence of a segment, special argument can be passed in\nits place: 'anySegment'.\n\nReasoning why url_view  was chosen instead of strings:\n- This way code generation is kept minimal.\n- There are multiple parse functions in boost_url with different rules,\n  but all of them return url_view. This solution should accommodate\n  every use case.\n\nTesting done:\n- Unit tests are added, passing.\n- Refactored part of telemetry to use this new approach, no regression\n  spotted during simple POST/GET tests.\n\nChange-Id: I677a34e1ee570d33f2322a80dc1629f88273e0d5\nSigned-off-by: Szymon Dompke <szymon.dompke@intel.com>\n",
    "createdOn": 1646328666,
    "lastUpdated": 1649955701,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1646328666,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1646328696,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1646328696,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1646329292,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/38413/ : FAILURE"
        },
        {
            "timestamp": 1646331410,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1646392622,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1646392634,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1646392634,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1646393205,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/38455/ : SUCCESS"
        },
        {
            "timestamp": 1646394228,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1646704348,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(11 comments)"
        },
        {
            "timestamp": 1646755227,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1646755246,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1646755246,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1646755303,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 3:\n\n(12 comments)"
        },
        {
            "timestamp": 1646755941,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/38651/ : SUCCESS"
        },
        {
            "timestamp": 1646755969,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1646756787,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(12 comments)"
        },
        {
            "timestamp": 1646761493,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 3:\n\n(5 comments)"
        },
        {
            "timestamp": 1646844574,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1646844587,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1646844587,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1646844605,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 4:\n\n(7 comments)"
        },
        {
            "timestamp": 1646845338,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/38703/ : SUCCESS"
        },
        {
            "timestamp": 1647023217,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(12 comments)"
        },
        {
            "timestamp": 1647621875,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1647621889,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1647621889,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1647621892,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 5:\n\n(11 comments)"
        },
        {
            "timestamp": 1647622462,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39258/ : SUCCESS"
        },
        {
            "timestamp": 1647627763,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(11 comments)"
        },
        {
            "timestamp": 1647628409,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1648222543,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1648222561,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648222561,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1648222598,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 6:\n\n(8 comments)"
        },
        {
            "timestamp": 1648223204,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39743/ : SUCCESS"
        },
        {
            "timestamp": 1648224826,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1648224897,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1648569592,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1648569609,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648569609,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1648569658,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 7:\n\n(5 comments)"
        },
        {
            "timestamp": 1648569690,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 8: Commit message was updated."
        },
        {
            "timestamp": 1648570201,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40057/ : SUCCESS"
        },
        {
            "timestamp": 1648574994,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1648646469,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1648646483,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648646483,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1648646590,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 9:\n\n(4 comments)"
        },
        {
            "timestamp": 1648647072,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/40135/ : SUCCESS"
        },
        {
            "timestamp": 1648665414,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1648723734,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 9: Code-Review+1"
        },
        {
            "timestamp": 1649681499,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1649691210,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1649696097,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1649878411,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1649878427,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as ca1600c10f43648ce90f84a2a712c6ebd043dded"
        },
        {
            "timestamp": 1649878432,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "77dbd3fa63541c3856d8a4e543a478b9f9231975",
            "parents": [
                "a327dc5943ab2ae32f9d202cd77ac27d89d6a650"
            ],
            "ref": "refs/changes/07/51707/1",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1646328666,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "CI is catching this:\n\n../http/utility.hpp:748:48: error: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,-warnings-as-errors]\n    return (details::unpackUrlSegment(it, end, std::forward<Args>(args)) &&\n\nHonestly, I have no idea where is the issue. If someone have a solution, it would be great."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Without creating additional templates, it is hard to fix this warning, as it is related to implicit conversion of string literal during std::forward. I see that such warning was suppressed in similar case for readJson(), so I think it is also acceptable here?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 189,
            "sizeDeletions": 29
        },
        {
            "number": 2,
            "revision": "807aacea39956dd2bc370fa7df428dc3ae42fd51",
            "parents": [
                "46666f3fbd0414daabc65ce11421e758562156c7"
            ],
            "ref": "refs/changes/07/51707/2",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1646392622,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This doesn't really seem right to have helpers for this kind of thing.  Looking at the code, it just looks like we need a version that handles fragments, and then we should be good.  Partial matching is quite error prone."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "I had 1 particular use case on mind, when Telemetry is parsing MetricProperties, as they can be either:\n- /redfish/v1/Chassis/{ChassisId}/Sensors/{SensorId}/{Property}\n- /redfish/v1/Chassis/{ChassisId}/{NodeId}#/....\nFirst one is used for Sensor DMTF schema, while second is for Power and Thermal schema.\n\nYou are right that this 'partial' function could bring more harm than gains, so I am removing it. Instead, original function will be called twice, for each of patterns above.\n\nThis approach required addition of one dummy 'anySegment' argument, because we should not care for what segment is after Sensors/, we should only care that it exists. See added unit tests and telemetry_utils for sample usage of such argument."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Instead, original function will be called twice, for each of patterns above.\n\n\nYep, this is exactly what I would recommend.\n\n\n\n> This approach required addition of one dummy 'anySegment' argument, because we should not care for what segment is after Sensors/, we should only care that it exists\n\nWe care a bit that it's properly formatted as a dbus path name, right?  I'll take a look at the latest patch."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "I think that boost-url would not allow for such segment during parse?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm closing out this comment, there are other comments with more details and discussion and this thread is just noise.\n\nDone"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why not just accept by url_view then?  Seems odd to accept by segments when we will never have a segments object by itself.  Passing by url_view would also be required to handle the fragments."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "url_view is also fine, I will change it."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 140,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please use EXPECT_TRUE and EXPECT_FALSE, rather than director comparison against true or false.\n\nAlso, please put your method call inside the expect instead of loading into an intermediate variable.  It results in better error messages when failures occur."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 140,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 728,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please increment this in the calling scope.  Incrementing it here is confusing, and makes the calling scope look like it doesn't increment"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 728,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 742,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Break this up onto multiple lines to make it more readable, similar to what you did on line 722."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 742,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 748,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can this just accept a segments_view&\n\nThat seems simpler than passing iterators around.\n\n\nAlso, why is this overload needed?  it seems wrong to be parsing partial results in an API that's supposed to guarantee stability."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 748,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Changed to url_view. Overload removed."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 751,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Any idea why you needed this?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 751,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "It is related to passing string literals as arguments. Technically, they are const char[], but are used as const char*. This should be harmless, and this warning is also suppressed in similar use case - readJson."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 751,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 751,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please invert this check to save scope."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "declare each variable on its own line please."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 44,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why do we need to do an absolute check?  We're not turning this into a filesystem path."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "It is here as additional user input validation, as sensor @odata.id should start with /redfish/v1....."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "But we already would have that check later when we turn it into a dbus path, and dbus doesn't support relative paths."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Ok, I see what you mean - actually we are not converting it to dbus path, we are comparing it to elements of uri<->dbus map. But it is done after making many dbus calls, which would be obsolete if we made this check sooner. So you are right, that it is redundant, but please consider it as an optimization."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why would we need this as an optimization?  We should be passing dbus paths through the dbus path object designed for this, and relying on return codes from the processing functions."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "I went with your idea to check it inside readUrlSegments, so this no longer need to be checked on caller site."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 45,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 57,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Should we be setting an internal error here?"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 57,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Caller is setting the error, see metric_report_definition.hpp:236"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 57,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 55,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 191,
            "sizeDeletions": 29
        },
        {
            "number": 3,
            "revision": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/07/51707/3",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1646755227,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Looking much closer."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Thanks for comments, I will answer the rest of them once I prepare new patch-set tomorrow."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 728,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "typename please."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 728,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "One thing we learned is that this unpack method generates quite a bit of code duplication and binary size.  One thing I suspect that would improve this quite a bit would be to accept by std::variant<std::reference_wrapper(std::string), std::string_view> then call visit appropriately, which would remove the template duplication per call site.  If you need help putting together an example, let me know, I realize the above is non-trivial to build.  I suspect that would also clean up your pointer decay NOLINT issue, as the string_view would be constructed at the call site, which wouldn't throw a warning."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Seems doable, I will look into it."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done, it indeed solved the warning issue. Although it now has one additional side-effect: when args are forwarded to std::variant<>, code wont compile as it cannot implicit convert std::string (cannot decide between reference_wrapper<std::string> and std::string_view). There are 2 solutions:\n- use std::ref() for each output std::string\n- replace variant signature to contain const char* instead of std::string_view\n\nIn current patch-set I went with first soluton, as I see that std::string_view is preferred. In my opinion std::ref seems like a good programming practice, but I leave this decision to maintainers."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, that's a good point.  I'm fine with either solution;  I do think the const char* solution is a little cleaner at the call site, but that's pretty subjective, and like I said, I'm fine with either."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "If we want to be consistent, than we should not use const char* in new code, but that's my only objection here."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The statement I would make is \"We should prefer string_view in new code unless we have a good reason to use const char*\", for which, not being able to generate templates and cleaning up the call site seem like good reasons.\n\nWith that said, to reiterate, I'm fine either way."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 739,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please break this statement up.  It's difficult to read as-is."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 739,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit, can we use std::span here?  There's nothing about this algorithm that requires it be sorted, and ideally in the future replacing this stuff with std::vector would be ideal (but please don't do it in this patch)."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Sure, I will look into it in separate change."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I still suspect we don't need this check."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 42,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "ack, please see my another comment on this."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "see above, still not sure why this is needed when we have a dbus-specific checking routine.\n\nOk, I'm starting to understand this after reading the boost docs, it checks to make sure the url starts with a /.  I suspect this check should be done inside readUrlSegments so we don't have to do this check everywhere.  The unit tests should also have a test for trying to pass\n\n\"redfish/v1\"\ninstead of \n\n\"/redfish/v1\"\n\nand make sure the former fails parsing."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 42,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Great idea, done."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "isn't this required to be \"Sensors\""
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "See above, I suspect we need to run this through sdbusplus::message::object_path to make sure that it's valid."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "My opinion here would be to keep it separated and use boost-url to parse redfish uris and object_path to parse dbus paths. \n\nparse_relative_ref() makes some basic validation, but if it is insufficient here, maybe I can add additional checks to segment unpack functions? We just need to define which segment would count as invalid."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "My opinion here would be to keep it separated and use boost-url to parse redfish uris and object_path to parse dbus paths.\n\nAgreed, but in this case, we're not parsing this at all, which I think is something we should do, to ensure it's correct.  As written, technically I could write\n\n\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar/foobaz  and it would accept it, completely ignoring the last two parts, which seems incorrect.\n\n\nI'm ok in this patch if we don't want to parse it, because the old code didn't, but it should be an explicit decision."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "My reasoning was to cover exactly your example, sometimes we are not able to know how the segment is named, we just need to make sure that 'something' (and nothing less or more) is here.\n\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar/foobaz  -> OK\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar/foobaz/ -> bad\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar         -> bad\n\nAlso I made small mistake in the patchset you commented on - correct version is (*parsed, \"redfish\", \"v1\", \"Chassis\", chassis, \"Sensors\", crow::utility::anySegment, crow::utility::anySegment) to explicitly tell that we want exactly 2 segments here."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "but that's an issue if a user can write foobaz to an API and have it accept it.  What I suspect is happening in this case is we're re-parsing it later and failing the request later on in the stack.. Ideally we should be parsing \"foobaz\" here, then passing it to the methods that need is so they can validate it (or not)."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Telemetry code is an example why we cannot verify each segment 'here and now':\n1) User sends us multiple metrics as urls\n2) We need to parse chassisId and NodeId from each url. We don't know yet how to validate other url segments, except for their count. Here readUrlSegments is used.\n3) We need to call retrieveUriToDbusMap for each chassisId<->NodeId pair, which returns list of all metrics with given chassisNode. Those lists are merged afterwards.\n4) We check if each url from step 1) is in the merged list.\n\nSteps 3) and 4) are here to minimize number of async dbus calls. In theory it is possible to get rid of them, and we could check everything in one place, but this solution have a lot of flaws:\n- Some redundant dbus calls will occur\n- Even if we decide to optimize it in other way, sensors.hpp and telemetry refactor will be required."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Telemetry code is an example why we cannot verify each segment 'here and now':\n> 1) User sends us multiple metrics as urls\n> 2) We need to parse chassisId and NodeId from each url. We don't know yet how to validate other url segments, except for their count. Here readUrlSegments is used.\n\nThis is the step that's confusing to me.  We don't need to validate them at this step.  We can easily parse those two out into variables, then pass them to later steps for validation.\n\n> 3) We need to call retrieveUriToDbusMap for each chassisId<->NodeId pair, which returns list of all metrics with given chassisNode. Those lists are merged afterwards.\n> 4) We check if each url from step 1) is in the merged list.\n\nClarification on this point, we check to see if the ChassisId and the NodeId is in the merged list, dbus doesn't understand URIs, so in practice, we're parsing the URI twice for lack of wanting to pass the parsed variables down the stack.  I realize this is how sensors.hpp works today, but if it were new code, we probably wouldn't write it that way.\n\n> \n> Steps 3) and 4) are here to minimize number of async dbus calls. In theory it is possible to get rid of them, and we could check everything in one place, but this solution have a lot of flaws:\n> - Some redundant dbus calls will occur\n> - Even if we decide to optimize it in other way, sensors.hpp and telemetry refactor will be required.\n\nOk, to be clear, I'm not saying we need to do it this moment, but had we written the above code today, we probably would not have written it to parse a URI twice.  In my mind, given that we have a pretty easy escape hatch (parse the variable then don't use it) I don't think the AnySegment class is necessary for the API, and any usage of which in new code would be an anti-pattern.  It seems easier to just not have it, use the escape hatch for the couple places in code where we ideally would like to clean up one day, and call it good.\n\n\nIf the rest of the community feels strongly the other way, I'm happy to talk more, or I'm happy to go with community consensus on this, but in conforming, non-repeating code, I don't see a place where we would use AnySegment, and it just complicates what should be a relatively simple API."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Yeah, got it, no need to complicate, when it is the only such use-case. I replaced it with ignored std::strings, with short comment why."
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Marking as resolved"
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "line": 231,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems like something we should create a real struct for.  Something like\n\nstruct ChassisSensor{\n    std::string uri;\n    size_t index;\n}\n\nDoing this would also remove the need to do the unpacking on line 235, because the arguments would already be named."
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "line": 231,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 192,
            "sizeDeletions": 29
        },
        {
            "number": 4,
            "revision": "1359d52777d659072ff66891c951afaf489885c7",
            "parents": [
                "5f2b84ee090bb9d361de9c294aa85cecf3962c11"
            ],
            "ref": "refs/changes/07/51707/4",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1646844574,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not quite following why there's 3 different arguments here.\n\nstd::monostate is for fixed strings\nstd::reference_wrapper<std::string> is for variable strings we want to parse\n\nand std::string_view is.... for fixed strings again?  I'm not quite following why both are necessary."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "std::monostate (or any empty struct) -> we just want to check if segment is here, but dont't know (or care) how it is named. Also as you commented elsewhere, this could be technically replaced with explicitly ignored std::reference_wrapper<std::string>, but surprisingly, solution with empty struct generates less code.\n\nstd::reference_wrapper<std::string> -> variable strings we want to parse\n\nstd::string_view -> we want to check if this segment matches a given fixed string"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> std::monostate (or any empty struct) -> we just want to check if segment is here, but dont't know (or care) how it is named. Also as you commented elsewhere, this could be technically replaced with explicitly ignored std::reference_wrapper<std::string>, but surprisingly, solution with empty struct generates less code.\n\nHow much less?  If it's in the noise, I prefer the \"explicit\" version.  Frankly, per our coding standards of validating user input, we shouldn't be \"ignoring\" any url segments anywhere in the codebase, but I realize there are places where we do today, so a temporary escape hatch might be necessary in this code.  There should be very few of these in the codebase, so the total impact to binary size I would expect to be minimal, even if it's positive.  If I'm wrong on any of these points, lets discuss further, if only so I can understand the impact going foward.\n\n> \n> std::reference_wrapper<std::string> -> variable strings we want to parse\n> \n> std::string_view -> we want to check if this segment matches a given fixed string"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "I provided one long example where we can't validate segment immediately, in comment below, please check it.\n\nAs for the size difference I tried to make binary size comparison, but turns out it is negligible, only few instructions less, per each call in disassembly.\n\nWhile I was trying to prepare solution without anySegment I realized there is one additional benefit of using anySegment instead of some ignored std::string. It is way easier to see programmer intention when we read a code:\n  readUrlSegments(*parsed, \"redfish\", \"v1\", crow::utility::anySegment, std::ref(chassis), std::ref(node), crow::utility::anySegment)\n\nthan when we see:\n  readUrlSegments(*parsed, \"redfish\", \"v1\", std::ref(unknownSegment), std::ref(chassis), std::ref(node), std::ref(someSegmentMaybeIWillIgnoreIt))\n\nSo not only solution is more complete, it is also easier to read or to review.\n\nBut honestly, except for \"I really want to leave it as it is\", I won't try to defend it any more and if you insist I can remove this part."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I provided one long example where we can't validate segment immediately, in comment below, please check it.\n\nACK.\n\n> \n> As for the size difference I tried to make binary size comparison, but turns out it is negligible, only few instructions less, per each call in disassembly.\n\nThis is roughly what I expected.\n\n> \n> While I was trying to prepare solution without anySegment I realized there is one additional benefit of using anySegment instead of some ignored std::string. It is way easier to see programmer intention when we read a code:\n>   readUrlSegments(*parsed, \"redfish\", \"v1\", crow::utility::anySegment, std::ref(chassis), std::ref(node), crow::utility::anySegment)\n> \n> than when we see:\n>   readUrlSegments(*parsed, \"redfish\", \"v1\", std::ref(unknownSegment), std::ref(chassis), std::ref(node), std::ref(someSegmentMaybeIWillIgnoreIt))\n> \n> So not only solution is more complete, it is also easier to read or to review.\n\nI can't really say I agree with that.  Had you named your variable \"ignoredSensorType\" the second code would've been more clear, but even as you wrote it, I think the second is more clear, because I can see that you're parsing a variable and ignoring it, which doesn't require me to know anything about how readUrlSegments works.  In the first case, I as a user need to know what AnySegment does, which requires me to look up the code to see what's going on.\n\n> \n> But honestly, except for \"I really want to leave it as it is\", I won't try to defend it any more and if you insist I can remove this part.\n\nI'd really like to see it gone, as it implies something counter to the rule of validating input that we try to follow:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Sure, I see now. There won't be many (if any) other usages of this matcher, so I will remove anySegment and replace it with your previous suggestion of implicit ignored string."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sounds good."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 706,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 708,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This needs a better name that describes what it does.  \"argMatchesVisitor\" or something?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 708,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "How about UrlSegmentMatcherVisitor?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 708,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 708,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, prefer -> for these."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Maintainer of boost::url deciced to not implement -> operator for this iterator, so *it need to be used."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "AH, I forgot about that.  Fine as-is.  ACK."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 736,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, can this use span?  Might make it more usable in the future (no worries if it can't)."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 736,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "I could not find a good usage for std::span in this use-case. initializer_list seems to be better choice here."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 736,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Span just has fewer typing requirements.  No worries, like I said, fine as is."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 740,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Should these be const_iterator?  I don't think we're modifying urlSegments in these, although the visitor might also need to accept const params."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 740,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "segments_view is already read-only, so this iterator cannot modify them and is already implemented as const_iterator."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 740,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 754,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I wonder if this would be cleaner walking both iterators at the same time.  I wrote the below, which is a little easier to read, but I'm not going to require it unless you think it's better.\n\n\n    const boost::urls::segments_view::iterator segBegin = urlView.segments();\n    const boost::urls::segments_view::iterator segEnd = urlView.segments();\n    boost::urls::segments_view::iterator it = urlSegments.begin();\n    boost::urls::segments_view::iterator end = urlSegments.end();\n\n    while(it != end || segBegin != segEnd){\n        if (it == end || segBegin == segEnd){\n            BMCWEB_LOG_DEBUG << \"Wrong number of url parameters\";\n            return false\n        }\n        if (!std::visit(UrlSegmentVisitor(it), segment))\n        {\n            return false;\n        }\n        it++;\n        segBegin++;\n    }\n\n    return true;"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 754,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Considering above code, I came up with simple check before starting the loop, which also simplifies the loop itself.\n\n  if (segments.size() != urlSegments.size()){\n    return false;\n  }"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 754,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yes, that's even better \ud83d\udc4d"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 754,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 759,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we make this an explicit empty struct.  typedefing this to std::monostate is a little confusing.\n\n\nSomething like\n\nstruct StringSegment{};\n\nthen use that in the std::variant instead of monostate?\n\n\nI wrote the above comment before I understood what anySegment is used for.  We should be explicitly pulling out and using all arguments from the users call.  If we really can't validate some of them, that should be apparent at the call site, with us reading out the parameter as a std::string, then explicitly ignoring it (ideally with a comment about why)"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 759,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done. I think that calling it 'anySegment' is already explicit enough. Additionally, this solution generates smaller binary than solution with ignoring strings."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 759,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not questioning the name, I'm questioning the typecast to std::monostate.  Lets follow up on the \"do we need anySegment at all\" question in the thread above before we regroup on this."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 759,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 62,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 67,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 224,
            "sizeDeletions": 29
        },
        {
            "number": 5,
            "revision": "1114d0b25bd8fdd0a4372710bad611b5846239ff",
            "parents": [
                "0f503a9147aa5c58d42168dc2b4e8b520971e438"
            ],
            "ref": "refs/changes/07/51707/5",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1647621875,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lots of great progress here.  Keep it coming!"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 186,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In the below code this is now called AnySegment with a capital A.  I'm surprised this compiles.  Please take a look?"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 186,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "The one with capital A is typename for empty struct, the lowercase one is the constexpr variable in crow::utility namespace to use by user in the call."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 186,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I suspect we don't need two different typedefs, especially two that having the same name with different casing.  Just declare the struct outside of details and remove the using please."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 186,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "As we are dropping anySegement matcher, this is no longer needed."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 678,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you please add a quick comment (doesn't need to be extensive) about what each of these types represent in this case?  It's pretty subtle in this case, and I understand it now, but I didn't first reading this."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 678,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 705,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Iterators should be generally taken by value, but I suspect this should be taken by the contained type so the actual visitor doesn't have to do the dereference (which isn't necessarily valid)."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 705,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is the return of the failure.  Should this have a name to denote that \"NodeFindError\" or something like that?"
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 68,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 72,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 235,
            "sizeDeletions": 29
        },
        {
            "number": 6,
            "revision": "ddebe4704752ad76bbd89b7af6916c4070fe91a0",
            "parents": [
                "e76cd86812f29f1153a50c7de177945c7e4fb3e3"
            ],
            "ref": "refs/changes/07/51707/6",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1648222543,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 68,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 75,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 238,
            "sizeDeletions": 29
        },
        {
            "number": 7,
            "revision": "f12221d9bfbb29375e960736d085bc55d93f18be",
            "parents": [
                "9629907de7880c0853bb4d5b9c624c452a598861"
            ],
            "ref": "refs/changes/07/51707/7",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1648569592,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 59,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 221,
            "sizeDeletions": 29
        },
        {
            "number": 8,
            "revision": "fafc379a8ea1c3bc441d8ac741b97aefa9e1c66b",
            "parents": [
                "9629907de7880c0853bb4d5b9c624c452a598861"
            ],
            "ref": "refs/changes/07/51707/8",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1648569690,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is looking good to me as written, just a couple minor things (one typo, and one thing that if you didn't want to fix, I would be fine with leaving)."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 677,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, typo."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 677,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 700,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, considering that every place this is used it's used as a std::string_view, should we just store it directly as a string view here?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 700,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "Overall this would be good idea, but due to potential bug in implementation of urls::string_value class, there are compatibility issues with string_view, related to lifetime of data(). It was caught by adress sanitazer when I run CI on my local machine. I tried to debug it together with @Krzysztof Grobelny, and current solution is the safest one. \n\nSee this for full context: https://github.com/CPPAlliance/url/issues/159"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 700,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack.  Fine as written.  Thanks for looking into it and bringing it up with the maintiner."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 59,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 219,
            "sizeDeletions": 29
        },
        {
            "number": 9,
            "revision": "414277edc3238734c364b0f61f74d229559c08f9",
            "parents": [
                "9629907de7880c0853bb4d5b9c624c452a598861"
            ],
            "ref": "refs/changes/07/51707/9",
            "uploader": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "createdOn": 1648646469,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Thanks for your good work in cleaning this up. I look forward to it getting used more throughout the other places where it is useful.\n\nLeaving this open for a bit other people to comment, but LGTM."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "No more comments for this feature, can we merge this? This could be useful for my Trigger POST implementation."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "given it's a generic feature, I was kinda hoping Gunnar would review it as well, so he's aware of the context and could better effect reviews that need this stuff.  I'll give him a couple more days (I'm sure like the rest of us he's pretty buys with stuff), and if he doesn't reply, yes, it can merge."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "*busy."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Gave Gunnar some time;  Looks like he's pretty busy (aren't we all \ud83d\ude0a).  I'm going to merge this, and I can commit to coordinating any changes if Gunnar sees the need."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 59,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 221,
            "sizeDeletions": 29
        },
        {
            "number": 10,
            "revision": "ca1600c10f43648ce90f84a2a712c6ebd043dded",
            "parents": [
                "0145a22519adb4f7e6b79ba0f5446359713ea474"
            ],
            "ref": "refs/changes/07/51707/10",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1649878427,
            "author": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/telemetry_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -27
                }
            ],
            "sizeInsertions": 220,
            "sizeDeletions": 29
        }
    ]
}