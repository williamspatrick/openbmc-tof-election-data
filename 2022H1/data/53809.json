{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "design",
    "id": "Ie6579503609857b8c6abf4702cba852ac490b40d",
    "number": 53809,
    "subject": "Design proposal for nvmed",
    "owner": {
        "name": "Hao Jiang",
        "email": "jianghao@google.com",
        "username": "drakedog2008"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/53809",
    "commitMessage": "Design proposal for nvmed\n\nThis daemon will serves as an abstraction of NVMe subsystem, and provide\nstandard NVMe-MI functions on DBus interface.\n\nSigned-off-by: Hao Jiang <jianghao@google.com>\nChange-Id: Ie6579503609857b8c6abf4702cba852ac490b40d\n",
    "createdOn": 1652921588,
    "lastUpdated": 1657687515,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1652921588,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1652921684,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Topic set to design"
        },
        {
            "timestamp": 1653015866,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(9 comments)"
        },
        {
            "timestamp": 1653321180,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(21 comments)"
        },
        {
            "timestamp": 1654202016,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1656290268,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1656351244,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1657665422,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1657665436,
            "reviewer": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "message": "Patch Set 2:\n\n(18 comments)"
        },
        {
            "timestamp": 1657687515,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "56f76956a03e879a682b57dd0bbd56b84e1a15be",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/09/53809/1",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1652921588,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Hi Hao Jiang, thanks for the proposal. It sounds like we're missing support for a few NVMe use-cases in OpenBMC and that you'd like to resolve that. Great!\n\nI've added some comments around how I think we can work this document to help describe what it is you need. I think that can only be achieved by addressing some structural issues with the text, so -1 for now."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "I am back from vacation. Thanks for the suggestion. I will update the doc soon. "
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "+1 for Andrew and Ed's comments - this needs a bit of a rework to start with the problem statement before the solution is defined. Once that's done, we can review with a focus on the proposed design rather than the document structure.\n\nThe major design point will be the relation with the existing implementations; if this can't be implemented as part of one of the existing codebases, then how it would coexist. I suspect that your proposed nvmed exposes a richer set of potentially NVMe-specific management functionality, but we'd need to make that explicit, and describe how that works within the existing systems.\n\nI've added a couple of responses in line with the existing mctp/etc infrastructure too."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Coming back to this now that I've read through, I think we need to change the title to something representing the problems the proposal is solving, not the name of the proposed solution."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 1,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, whitespace error."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 11,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I think this section needs a few changes:\n\n1. It shouldn't mention a proposed solution (nvmed), it's meant to be a problem description\n2. The problems should be discussed in terms of use cases. What function elsewhere in an OpenBMC system would be requesting the GetLogPage or Identity functions? Why?\n3. The description should cover deficiencies in existing support for NVMe drives in OpenBMC, specifically phosphor-nvme and nvmesensor from dbus-sensors\n\nAs a part of dealing with 3, if there's a reason either of those components *shouldn't* contain the support you need, then that also needs to be covered, and argued in the \"Alternatives Considered\" section (the fact the entire content of \"Alternatives Considered\" is \"Stated in the above chapter\" is a bit of a red flag for me in terms of how you've structured your argument here).\n\nIMO the first time we should hear about \"nvmed\" is in the \"Proposed Design\" section."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1 to Arjs comments;  We need to call out the problem being solved here.  The existing solutions ( phosphor-nvme and nvme-sensor) have a way to enumerate nvme resources and put them on dbus, admittedly, in a more simplistic way than we'd like to see, but code can always be added to one of those."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This is only background if you already consider the design accepted, which isn't the purpose of this document. The purpose of this document is to help you help the community to converge on the architecture of a solution to your problems, where your problems are your use-cases that OpenBMC doesn't currently support.\n\nThings I'd consider background information are the requirements and environment that lead to the existence of both phosphor-nvme and nvmesensor from dbus-sensors."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Agree. The design is kind of under discussion internally for a while, making it more like a refined-decision when I wrote the proposal. \n\nAlso rephased the section, stripping away the design for nvmed and adding more background topic on phosphor-nvme and nvme sensor."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 47,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "IMO you need to flip the orientation here to describe these as deficiencies in phopshor-nvme without mentioning nvmed.\n\nYou also need to argue why it's not possible to change the design direction of phosphor-nvme and motivate the need for a third code-base to handle NVMe drives."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 47,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> IMO you need to flip the orientation here to describe these as deficiencies in phopshor-nvme without mentioning nvmed.\n> \n> You also need to argue why it's not possible to change the design direction of phosphor-nvme and motivate the need for a third code-base to handle NVMe drives.\n\n+1 this second sentence.  We already have two nvme-speaking daemons;  phosphor-nvme for static stack, and nvmesensor for entity-manager reactor stacks, from these requirements, it isn't clear why we'd need another.\n\nFWIW, I have no problem if the code for nvme-sensor was completely reworked to support these goals, and it's already a reasonably well tested starting point for this stuff."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 47,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "The argument against the existing nvme project is stated in the alternative section."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Requirements are behaviours derived from use-cases, not a concrete solution. A concrete solution should follow from the requirements. Again this makes it feel like a write-down-the-decisions document rather than a drive-the-decision-making-process document, but this is the first time I'm hearing of the decision making process."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "What does this mean?  Can you be more specific about what \"initialize\" actually does in this context?  Aren't nvme controllers initialized by default?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "It means setting up the mctp ep with the discovery protocol. It is part of the enumerating the nvme devices. \n\nIt is rather a implement detail rather than the requirement. So I moved it and detailed in the proposed design section."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please be more specific here.  What does \"Basic information\" mean?  Thermals?  Inventory?  Ideally this would be derived from your background section about missing features."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "+1; this could be more descriptive of the MI command set you're looking to expose."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Sure. I listed several examples of the status we need. \n\nAnd this section is moved to the Problem Description."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 57,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This also should be more specific.  NVMe-MI commands are called \"admin\" commands in the spec.  Presumably you have a few starter use cases?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 57,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "It looks like this is referring to two separate MI commands sets in the NVMe-MI spec: MI commands, and Admin Commands."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 57,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Yes, Jeremy is right. \n\nThere are bunch of NVMe matrix we need to read from MI commands and Admin commands. \n\nI listed several in the Problem Description."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "\"consumers\" maybe?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This is the kind of thing that needs to go into your problem description, phrased in terms of the fact that OpenBMC doesn't yet support these things."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Yeah. You are right. This is the new features we are requiring. \n\nMoved to problem section"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This interface already exists, and is called NVME1000.  I suspect we don't need to create a new one, but lets cover that once we've figured out the design here, and how it differs from the existing nvme reactors."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "The NVME1000 is designed for a NVMe thermal sensor who has properties like thresholds. \n\nThe design aims at a totally different type of device and user case. Yeah, let's try to make consent on the daemon first then the new interface may make its sense."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The NVME1000 is designed for a NVMe thermal sensor who has properties like thresholds. \n\nThermal sensors over nvme-mi is just the first thing it implemented.  \"NVME1000\" is meant to be the interface for \"supports nvme-mi\" and already has quite a different \n\n\n> \n> The design aims at a totally different type of device and user case.\n\nYou're using nvme-mi, over mctp to connect to an SSD and run nvme-mi commands.  It's the same device, same transport, and unless you don't plan to ever implement thermal sensor support, the same use case.\n\n> Yeah, let's try to make consent on the daemon first then the new interface may make its sense.\n\nEven if it's a new daemon, in entity-manager, it would still be an nvme-mi interface, so it would still use nvme1000, but sure, we can take that up in the above."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 90,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, this can probably be removed.  This is an existing feature of entity-manager, and doesn't really have anything to do with this design."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 90,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "VPDless NVMe device is against the spec, so we are eliminating the use case here."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is an example of something we generally shouldn't be doing, and doesn't really seem to have any requirements backing it.\n\nAs a rule, we should not be putting protocol-specific things (like mctp) on dbus, because it limits our ability to add new protocols going forward.\n\nThere is one counter example that I'm aware of (ipmb) and even in that case, we would not have built it that way today, and ideally we will migrate away from it in the future.\n\n\nThis interface should be exposing high level primitives, like storage, sensors, ect."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "> This is an example of something we generally shouldn't be doing, and doesn't really seem to have any requirements backing it.\n\nJust to clarify the separation of components here - the MCTP endpoint interfaces are not provided my this new (nvmed) design, but by the general MCTP infrastructure (mctpd), which nvmed should be using to discover the results of the MCTP enumeration process.\n\nThis dbus interface is already an accepted design; the presence of the MCTP endpoints is defined at https://github.com/openbmc/phosphor-dbus-interfaces/tree/master/yaml/xyz/openbmc_project/MCTP , and the mctpd interface at https://github.com/CodeConstruct/mctp#mctpd-usage .\n\nIn this section, I believe Hao is just using this to describe what interfaces nvmed is using, rather that what it is providing."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> , but by the general MCTP infrastructure (mctpd), which nvmed should be using to discover the results of the MCTP enumeration process.\n\nThis is roughly the same design that we did for IPMB that I thought we kind of agreed caused more problems than it solved, but Jeremy is certainly more of an expert here than I am, so I'll defer to his good judgement.\n\nWith that said, I wasn't aware that the mctpd->dbus design had been accepted, so that changes this a bit.  In terms of this design, can we just get this section removed, and the mctpd design doc/interfaces put in the background section?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "I tried to give the reader a first impression of how mctp ep is initiated from dbus. Maybe redirect to the MCTPd doc is a good idea. \n\nRemove the interface example and add mctpd link in the background"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, more whitespace issues."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I don't have strong opinions here, but I'd like to see some input from Jeremy and Matt."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I really don't think an MCTP-specific EM config type benefits us going forward over having more specific types (NVMe-MI, PLDM, RDE, ect).\n\nCan you think of a case where say, an nvme drive and a RDE accelerator would share code or configurations here?  Even if there were sharing, I suspect they would be minimal."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Yep, I think the NVMe(-MI) level is most suitable here. I dont see a need to expose much in the way of MCTP-specific configuration, as we already have the discovery process (MCTP Control Protocol) for that, the results of which are exposed via dbus anyway."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FWIW, also, in the case where we had a device that supported more than one of the set of nvme-mi, pldm, and RDE, we would still have a way to declare it (just declare all 3 exposes records)."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "If the device support multiple mctp type, will that be a problem we have multiple configuration for daemons (nvme, spdm etc) to initialize the same mctp ep?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 118,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The point of exposes records is they describe the interfaces that the drive supports.  In terms of the configuration data, no, it wouldn't be a problem for a drive to have multiple, that is the point.  Just the same as if a drive supported both an NVME-mi interface AND a TMP75."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It's not clear why having these very-specific interfaces on dbus is helpful, given the requirements you've laid out.  These are arguably implementation details of the nvme subsystem, and for the most part, should probably be abstracted away from dbus.  I could see possibly wanting to expose the controllers to add a \"manager\" resource within Redfish, but that probably deserves a design doc on its own."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "MI CMD set works at the subsystem scope but the Admin CMD set needs to be attached to the controllers. LogPages are independent across controllers too. \n\nWe also want to expose the Physical Function-Virtual Function relation since they include a different set of vendor defined commands. The VU cmd is not discussed in this doc but we need to prepare for it."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> MI CMD set works at the subsystem scope but the Admin CMD set needs to be attached to the controllers. LogPages are independent across controllers too. \n\nWhy does any of this need to be exposed to dbus?  Generally we wouldn't implement a \"raw\" nvme-mi command on dbus, and instead would expose the relavant sensors, inventory items, and other things.\n\n> \n> We also want to expose the Physical Function-Virtual Function relation since they include a different set of vendor defined commands. The VU cmd is not discussed in this doc but we need to prepare for it.\n\nI'm not sure why this changes anything.  Vendor defined commands can be put in the same daemon, same as we do with things like IPMBSensor."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 143,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I suspect this should be \"enumerating\""
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 143,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 145,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is a pretty generalized anti-pattern that we found when writing the other nvme daemons, as well as the generalized dbus-sensors architecture.  Keeping the polling as close to the hardware as can, and relying on dbus eventing for the rest allows use cases like EventService to function, and leads to faster responding user APIs.  It would help a lot if you could enumerate _why_ you think you need this, and we can talk through the use cases, but there have been plenty of examples where we built things as you describe above, and had to rewrite them later to go to user-space polling."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 145,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "I listed the reasons against local polling in the alternative section. \n\ntl;dr: \nThe NVMe OOB doesn't support async event and we need high level DC service to poll in order to reduce interference."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 145,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The NVMe OOB doesn't support async event \n\nThe existing daemon does support async eventing from the kernel. (and took a lot of architecture work to do it)."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 179,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Repeating again, all of the above is nvme-specific, and makes no attempt to reuse existing interfaces.  As-written, to accomplish your goals, this is going to require both IPMI and bmcweb to contain nvme-specific code about how to identify drives, read log pages, and do whatever else needs done.  I suspect this needs abstracted using the existing interfaces.  I suspect there's one or two interfaces that need added for the drive specific inventory things that we don't yet support, but as written, I don't think the above interfaces get us the level of abstraction on dbus that we generally would like to encourage."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 179,
                    "reviewer": {
                        "name": "Hao Jiang",
                        "email": "jianghao@google.com",
                        "username": "drakedog2008"
                    },
                    "message": "Agree on the first half. We need to reuse/expose the general Drive/Storge (maybe StorageController and Volume) interface with generic properties/methods. \n\nBut there are still NVMe specific which is hard/impossible to be defined on DBus level (e.g NVMe Feature set and controller Identify info). so we still need a NVMe API on DBus."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 179,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "So make an xyz.openbmc_project.NVMeFeatureSet dbus interface and attach it to the drive?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 187,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This isn't in your requirements."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 191,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you rephrase this, I'm not quite understanding this."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 196,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Other impacts:\n1. Physical layer constructs are now present in dbus, which very likely has security impacts.\n2. nvme-specific is now spread across the system\n3. A third nvme-specific daemon is created."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 200,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Okay, can you please add some more words justifying why they're complementary but must be separate? Am I just not across enough of the design points of phosphor-nvme? If not, can you please make sure that people like me reading this document can be convinced of your position just by reading the document (and any references)?"
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Okay, can you please add some more words justifying why they're complementary but must be separate?\n> Am I just not across enough of the design points of phosphor-nvme? If not, can you please make sure that people like me reading this document can be convinced of your position just by reading the document (and any references)?\n\n+1, I'd really like to understand this point as well.  It's not clear from the above."
                },
                {
                    "file": "designs/nvmed.md",
                    "line": 205,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Load testing?  Security testing?  Functional testing?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/nvmed.md",
                    "type": "ADDED",
                    "insertions": 205,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 218,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/09/53809/2",
            "uploader": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "createdOn": 1657665422,
            "author": {
                "name": "Hao Jiang",
                "email": "jianghao@google.com",
                "username": "drakedog2008"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/nvmed.md",
                    "type": "ADDED",
                    "insertions": 188,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 201,
            "sizeDeletions": 0
        }
    ]
}