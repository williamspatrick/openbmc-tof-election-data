{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I051ae22ba5740698eebde868f2275e8f8b9a4340",
    "number": 54699,
    "subject": "memory: make DIMM & Partition interface constants",
    "owner": {
        "name": "Nan Zhou",
        "email": "nanzhoumails@gmail.com",
        "username": "FighterNan"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54699",
    "commitMessage": "memory: make DIMM & Partition interface constants\n\nThese string literals are referenced multiple times. It's a common\npractise to make a single SoT, and reference that copy everywhere else.\n\nIn other words, this commit makes the two string literals\n1. \"xyz.openbmc_project.Inventory.Item.PersistentMemory.Partition\"\n2. \"xyz.openbmc_project.Inventory.Item.Dimm\"\n\nonly appear in one place. All other places just reference the variables.\n\nTested:\n1. trivial change, code compiles.\n2. No validator failures.\n\nSigned-off-by: Nan Zhou <nanzhoumails@gmail.com>\nChange-Id: I051ae22ba5740698eebde868f2275e8f8b9a4340\n",
    "createdOn": 1655508011,
    "lastUpdated": 1656455055,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1655508011,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1655508028,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655508028,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1655508534,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/45274/ : SUCCESS"
        },
        {
            "timestamp": 1655611277,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655856143,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1655856955,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1655856999,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655857000,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1655857001,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1655857326,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/45545/ : FAILURE"
        },
        {
            "timestamp": 1655942336,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3: Patch Set 2 was rebased"
        },
        {
            "timestamp": 1655942365,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655942365,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1655942986,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/45674/ : FAILURE"
        },
        {
            "timestamp": 1656347133,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 4: Patch Set 3 was rebased"
        },
        {
            "timestamp": 1656347150,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656347184,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1656347184,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1656347741,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/45933/ : SUCCESS"
        },
        {
            "timestamp": 1656389654,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656442654,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656451264,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656455055,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Abandoned"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "47cd356b673198a04d448b9288d5738687c74507",
            "parents": [
                "e825cbc8f967e54dfd6d911ebbbc6b2bfc7bc543"
            ],
            "ref": "refs/changes/99/54699/1",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1655508011,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally not in bmcweb.  Strings are deduplicated, at compile time, so unless the code is intentionally the same, it doesn't help to declare a global scoped variable."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Thanks, I am not saving memory usage or improving anything. \n\n> Strings are deduplicated, at compile time\nSeems like it depends on the compiler implementation. https://stackoverflow.com/questions/52423837/is-storage-for-the-same-content-string-literals-guaranteed-to-be-the-same \n\nJust these string literals are fixed (they are two DBus interfaces) and we really shouldn't create multiple SoT."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "For example, someday we changed the interface, without this change, we have to change the string literal multiple times."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> For example, someday we changed the interface, without this change, we have to change the string literal multiple times.\n\nYes, and that's a good thing, because it would require us to audit all the places this string is used, which we would need to do anyway, but if it's duplicated in other places, it shows up in code review, which is a good thing.\n\nAlso, and happens more in the project, only one instance of an interface changes, and needs to port to another daemon/interface, in which case, we would now need to move the only usage back to inline, which makes more of a mess.\n\nInline definitions also make it much easier to code review.\n\n> Seems like it depends on the compiler implementation. \n\nYep, and our specific implementation with the flags we have deduplicates them at compile time, and if it didn't, they'd be deduplicated as part of compression.\n\n\n\nThe biggest thing for me here is that code review is faster with inlines, and when someone wants to go debug something, someone can immediately convert an async_method_call into a dbus-send (or busctl) call.  At least that was the intent when we inlined all these strings."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Oh, so we prefer inline duplicate string literals? Seems like it's not consistent across the project.\n\nCertificate service file is an example."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I personally find inline string literals easier to read and turn into debug statements.  It's generally not something that I have enforced heavily, but I think it aids significantly in the readability to not have to reference another line when looking at dbus calls.\n\nAlso, when we started, we did a lot of global-scoped strings, and we kept having problems where a string would need to be reused between schemas, so either one schema needs to #include the other (bad for code separation) or we needed to create a totally separate file for all the string constants, which made the readability even worse (now you have to go to a different file to see the constants), and when we did it, now patches would merge-conflict heavily if two different patchsets needed that global, which tends to happen when more than one developer makes changes in a space.\n\nThe argument of \"if it ever changes\" is way less important than readability/code review speed/rebase conflicts to me.  In practice, we've had 2 schemas that ever really changed in backward incompatible ways, and in both cases, the names didn't change, so for the moment, a schema changing name without logic changes is hypothetical, and even if it happened, find and replace is trivial to do."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/memory.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -10
                }
            ],
            "sizeInsertions": 26,
            "sizeDeletions": 10
        },
        {
            "number": 2,
            "revision": "9543741bd5933844fc6d266d4895421c9e29c02d",
            "parents": [
                "4dd73a1cfa22ebf9b2ee2fd2aff6767eeb88e1c1"
            ],
            "ref": "refs/changes/99/54699/2",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1655856955,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/memory.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 11
        },
        {
            "number": 3,
            "revision": "3da4f9ae057f9d2e2b9cda40c5310a84c072f027",
            "parents": [
                "fe04d49cb52d8989818561c71bdbd6ba676058a5"
            ],
            "ref": "refs/changes/99/54699/3",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1655942336,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/memory.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 11
        },
        {
            "number": 4,
            "revision": "235f8cbbf52981756f23cd41dcfef8724eae957a",
            "parents": [
                "01358549a0ee0d2f321f037d670f1981c8533623"
            ],
            "ref": "refs/changes/99/54699/4",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1656347133,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "bump. I believe this patch is doing the correct thing"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/memory.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 32,
            "sizeDeletions": 11
        }
    ]
}