{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Idc175fab3af5c6102a5a3439b712b659ecb76468",
    "number": 55047,
    "subject": "json utility: add sort",
    "owner": {
        "name": "Nan Zhou",
        "email": "nanzhoumails@gmail.com",
        "username": "FighterNan"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55047",
    "commitMessage": "json utility: add sort\n\nThis commit adds a utility function |sortJsonArrayByKey|. It can sort an\njson array by value of a given key of each element.\n\nUse cases includes:\n1. sort the MemberCollection by @odata.id\n\nTested:\n1. unit test passed;\n2. used in the child patch, which worked on hardware;\n\nSigned-off-by: Nan Zhou <nanzhoumails@gmail.com>\nChange-Id: Idc175fab3af5c6102a5a3439b712b659ecb76468\n",
    "createdOn": 1656629250,
    "lastUpdated": 1657269001,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1656629250,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1656629295,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1656629296,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1656629810,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/46226/ : SUCCESS"
        },
        {
            "timestamp": 1656629980,
            "reviewer": {
                "name": "Cody Smith",
                "email": "scody@google.com",
                "username": "csmith105"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1656658772,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1656686124,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1657068707,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1657071819,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1657071872,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657071872,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1657072045,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1657072197,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/46436/ : FAILURE"
        },
        {
            "timestamp": 1657072634,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1657072686,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657072687,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1657073211,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/46441/ : SUCCESS"
        },
        {
            "timestamp": 1657084275,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1657084424,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1657108873,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1657131512,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1657133072,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1657133116,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657133116,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1657133163,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1657133632,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/46494/ : SUCCESS"
        },
        {
            "timestamp": 1657134128,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1657232447,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1657269001,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
            "parents": [
                "52464d36fc313ccbc5f4ef3871d510e6363d7e16"
            ],
            "ref": "refs/changes/47/55047/1",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1656629250,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm a little worried that this helper function will get misused to do an anti pattern that we've seen.  Generally when we need to sort lists, we sort the objects on the return of the mapper call, THEN iterate them and load them.  This is simpler, and means we're not moving large objects in place.  The only case I can see this being used is to construct the response object then use a destructor to do things \"at the end\" to sort the list, which is generally an anti pattern.  With that said, I'll look at how it's used and evaluate."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "> Generally when we need to sort lists, we sort the objects on the return of the mapper call, THEN iterate them and load them\n\nThis works in the workflow of call GetObject of the ObjectMapper where all objects are got from a single dbus call so we can easily sort them, but not the workflow in this commit which is call ManagedObjects of the ObjectManager of each service where objects might be owned by server services and thus we can't easily sort all the objects.\n\n> The only case I can see this being used is to construct the response object then use a destructor to do things \"at the end\" to sort the list, which is generally an anti pattern.\n\nThat does be the use case. We can make its usage limited to the efficient expand handlers which agree in the later commit that if we reduce the code duplication (which is done) and make the pattern reusable for other resource (will be done when developing threads resource), we can accept the downsides."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "To add more context, there are many cases where we hit failures in intermediate dbus calls.  Having the response object return the partial results for the things that did work is generally a huge win on client-development speed, as from a bug, you can immediately identify what's missing, and that helps velocity overall.  This is why we generally don't do sorts at the end, because they usually involve storing objects in a cache somewhere."
                },
                {
                    "file": "include/human_sort.hpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This looks identical to std::less?\n\nAlso, as a general rule, please try to name things differently than existing methods.  Considering this is comparing numbers, this isn't an \"alphanum\" compare."
                },
                {
                    "file": "include/human_sort.hpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Actually, given that the only usage here is string, I will just remove this overload."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 590,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is there any place we'd use this besides std::string?  Generally unless there's multiple use cases, we keep things non-templated until we need the template parameter."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 590,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 595,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why do we need to do a capture here?  can't we just declare it inline?"
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 595,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "This is to avoid creating multiple objects for a single sort. Please reopen if there is better solution."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 595,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The objects is static, why would we worry about opening more than one static object?\n\nPer the coding standard, write simple code, unless there's a good reason not to.  I would expect that both of these pieces of code generate nearly identical binaries."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 595,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Wait, what is static? The comparator function is not static, https://github.com/openbmc/bmcweb/blob/bb05f2227d53d590534d1df6e6a622e13cea76ae/include/human_sort.hpp#L106. It needs an \"object\".\n\n\n```\n\nclass Compare {\npublic:\n    Compare() {std::cout << \"Constructed\\n\";}\n    bool operator()(int a, int b) const {return a < b;}\n};\n\nint main() {\n    std::vector<int> vec = {0,1,2,3,4};\n    std::cout << \"One way\" << std::endl;\n    std::sort(vec.begin(), vec.end(), Compare());\n    std::cout << \"Another way\" << std::endl;\n    std::sort(vec.begin(), vec.end(), [](int a, int b) {\n      return Compare()(a, b);\n    });\n    return 0;\n}\n\n/*****************************\nOne way\nConstructed\nAnother way\nConstructed\nConstructed\nConstructed\nConstructed\nConstructed\nConstructed\nConstructed\nConstructed\n```\n\nWe should fix all the usage if you agree."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 595,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yes, I used the wrong word there; Its not static, but sizeof(AlphanumLess) == 0, so it doesn't require any effort to construct (it's one step from a function pointer) so adding it into the loop optimizes to no extra code at compile time.  This is the same pattern that std::less utilizes in other places, so inlining the object makes the code cleaner, and generates the same result."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 595,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "+1, It should be optimized by compiler"
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 596,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These should be const, which is going do show the coding error below;  nlohmann::json::operator[] creates an element if it doesn't exist, which is a case you'll need to handle.  As written, if the key being searched doesn't exist, it will be created as null, which isn't what you intended."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 596,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ValueType* please."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Wait, it's very clear get_ptr returns the corresponding pointer type, right?\n\nThis is similar to omit the type of result of make_shared or make_unique IMO."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Ack. Please reopen if it doesn't make sense."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "no, it's not.  get_ptr is not a standard library function, so there's no expectation that anyone knows what it returns."
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "I wonder what will happen if half the elements can be sorted and half cannot. For example we have 3 valid elements 1 invalid then another 3 valid elements. You need test for this case that documents behaviour. Will all be sorted, none, or it will be partially sorted."
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please answer the question asked.  What is the behavior?"
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Thank, @Nan Zhou. Test looks fine, I can figure out how algorithm works from looking at it."
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "If you take a look at the diff of patchset 1 and 2, I have already added a comment in the function to explain the behavior. \n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/55047/1..2\n\nNext time I will say \"Done. Added explanation to the function comment.\""
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep, that would be fine.  Thanks for adding the explaination."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "type": "ADDED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "include/human_sort.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 102,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "0de7f91a2759c109990d072a98a320dae1f56208",
            "parents": [
                "52464d36fc313ccbc5f4ef3871d510e6363d7e16"
            ],
            "ref": "refs/changes/47/55047/2",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1657071819,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 99,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "55ff8d261acb69530a7991d60b4e62d6fc5ffcfa",
            "parents": [
                "5ef735c8b7b7483037d0f287c8ddd642c0d885f2"
            ],
            "ref": "refs/changes/47/55047/3",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1657072634,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 99,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "278215d84c8f537847d800165a57b3a2c70b08d7",
            "parents": [
                "40d799e6fef1b39e35b4e0a0d1f5e44cb92a2de5"
            ],
            "ref": "refs/changes/47/55047/4",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1657133072,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils_test.cpp",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 101,
            "sizeDeletions": 0
        }
    ]
}