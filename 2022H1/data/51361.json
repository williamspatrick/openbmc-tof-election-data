{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "Ib7d870dd9fa0c178e17d16c565e6f05339bf3e60",
    "number": 51361,
    "subject": "Add new overload to register_property_r/rw",
    "owner": {
        "name": "Krzysztof Grobelny",
        "email": "krzysztof.grobelny@intel.com",
        "username": "krzysztof-i"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/51361",
    "commitMessage": "Add new overload to register_property_r/rw\n\nNew overload doesn't take initial property values as parameter, instead\ngetter function result is used to set stored reference value. This\napproach prevents situation when initial value can be different than\nvalue returned by getter function which can cause signals to missbehave.\n\nTested:\n- Changed examples register-property.cpp and get-all-properties.cpp to\n  use new overload. Examples are working as before.\n\nSigned-off-by: Krzysztof Grobelny <krzysztof.grobelny@intel.com>\nChange-Id: Ib7d870dd9fa0c178e17d16c565e6f05339bf3e60\n",
    "createdOn": 1645190815,
    "lastUpdated": 1645801832,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1645190815,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1645190825,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1645190826,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1645191496,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/37625/ : SUCCESS"
        },
        {
            "timestamp": 1645611365,
            "reviewer": {
                "name": "Adrian Ambro\u017cewicz",
                "email": "adrian.ambrozewicz@linux.intel.com",
                "username": "aambroze"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1645611701,
            "reviewer": {
                "email": "cezary.zwolak@intel.com",
                "username": "czwolak"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1645612324,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1645613746,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1645624236,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1645624249,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1645624249,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1645624920,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/37875/ : SUCCESS"
        },
        {
            "timestamp": 1645625000,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1645625009,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1645625009,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1645625035,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1645625333,
            "reviewer": {
                "name": "Adrian Ambro\u017cewicz",
                "email": "adrian.ambrozewicz@linux.intel.com",
                "username": "aambroze"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1645625682,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/37876/ : SUCCESS"
        },
        {
            "timestamp": 1645640083,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1645692427,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1645730734,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1645801829,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review+2"
        },
        {
            "timestamp": 1645801832,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "3e0568419ef8d586228b7f408378c5321dda7e93",
            "parents": [
                "dce747bcd90cc3dbc5eb3410f112f4a6cea2e384"
            ],
            "ref": "refs/changes/61/51361/1",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1645190815,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "My thoughts, wonder what author and maintainers think"
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "There is one significant difference between your implementation and 'organic' getter at https://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/51361/1/include/sdbusplus/asio/object_server.hpp#648 \n\nIn case getter throws sdbusplus::exception_t to notify about error (like uninitialized object or some unexpected access, which can be common during building D-Bus interfaces) your implementation will just 'leak' it to caller of register_property_r.\n\nI'm not sure if it's a good or bad thing, however it can be unpleasant surprise for new-api-adopter. I would expect that changing API to 'better one' should be transparent and should not change the behavior. Especially when aforementioned exceptions are supposed to be go-to solution for error handling."
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "How about catching the exception and returning false?"
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "In all code samples I saw no one is checking if this function returns true or false.\n\nThrow from get handler is only visible on dbus, there will be error message during Get, GetAll, introspect. As Adrian noticed this get handler will be called before adding property and it should be handled by called. It can be good or bad thing depending of how application is designed. For example in case of telemetry service it will be a good thing, but for some other application it can result in unhandled exception.\n\nI will do some tests and investigate some more sdbusplus code if there is another way to do this."
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "I dig into details and noticed that when interface is initialized signal 'InterfacesAdded' is send. To create message for 'InterfacesAdded' signal getFunction is called for the first time, but result is ignored. So this is perfect place to get initial value."
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "Seems reasonable."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 14
        },
        {
            "number": 2,
            "revision": "420442750b5919a7ff6ce666fe229ec5c1682dc2",
            "parents": [
                "dce747bcd90cc3dbc5eb3410f112f4a6cea2e384"
            ],
            "ref": "refs/changes/61/51361/2",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1645624236,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": -22
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 69,
            "sizeDeletions": 36
        },
        {
            "number": 3,
            "revision": "90fab6bb667460053cfc4587b58c987f74b1bf58",
            "parents": [
                "dce747bcd90cc3dbc5eb3410f112f4a6cea2e384"
            ],
            "ref": "refs/changes/61/51361/3",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1645625000,
            "author": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't see this part implemented in the code."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Maybe response to other comment will explain it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ack"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "Now changes are truly minimal and elegant. LGTM"
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 413,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It's too bad we can't default this using a std::result_of(CallbackTypeGet)... or can we?"
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 413,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Most of usages is like this:\n[](const auto& old, auto& new) {\n  return something;\n}\n\nBecause auto return type cannot be defaulted (at least in some cases it cannot)."
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 413,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Yeah, the issue is that we somewhere need to know the type passed in.  invoke_result / result_of need to know the arg types in order to be able to deduce the result type.  Since we have auto everywhere (intentionally) we need some template property to fix the value parameter / result types."
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The commit message claimed that the result of getFunction would be used for the default/initial value, but it seems here that we're using a default-initialization instead.  How does this solve the problem posed in the commit message?  Have I missed some additional code elsewhere?"
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "It's in line 296, GetFunction is called there for the first time with passed initial value as parameter, but it is possible to return different value, but initialValue was not modified. It was possible to execute set which changed value but because old value was incorrect signal could misbehave.\n\nPrevious code did it like this:\nint member = 10;\nregisterProperty_rw(\"Prop\", int{}, [&member](const auto& old, auto& new) { \n  member = old = new;\n  return 1;\n},\n[&member](const auto& old) {\n  return member\n});\n\nshared_ptr<int> value = int{};\n\nduring signal InterfaceAdded:\nsignal.append(GetHandler(*value)); // returns 10\n\nduring set:\nnew = 0;\nold = *value; // value is 0 because it was not assigned to value returned by GetHandler\n*value = SetHandler(*value, new);\nif (old != *value) { signalProperty(*value); } // actual value changed from 10 to 0, nothing happens\n\n\nNew code works like this:\nregisterProperty_rw<int>(\"Prop\", [&member](const auto& old, auto& new) { \n  member = old = new;\n  return 1;\n},\n[&member](const auto& old) {\n  return member\n});\n\nshared_ptr<int> value = int{};\n\nduring signal InterfaceAdded:\n*value = GetHandler(*value); // returns 10\nsignal.append(*value); \n\nduring set:\nnew = 0;\nold = *value; // value is 10 because it was assigned to value returned by GetHandler\n*value = SetHandler(*value, new);\nif (old != *value) { signalProperty(*value); } // actual value changed from 10 to 0, signal is send"
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "example/register-property.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -5
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -2
                },
                {
                    "file": "example/get-all-properties.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 16
        }
    ]
}