{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "I99c78373a18ad71a51b60bce06e5c09b779e04f2",
    "number": 47442,
    "subject": "Add CMIS-compliant module management daemon design doc.",
    "owner": {
        "name": "Jianqiao Liu",
        "email": "jianqiaoliu@google.com",
        "username": "liu-jianqiao"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/47442",
    "commitMessage": "Add CMIS-compliant module management daemon design doc.\n\nChange-Id: I99c78373a18ad71a51b60bce06e5c09b779e04f2\nSigned-off-by: Jianqiao Liu <jianqiaoliu@google.com>\n",
    "createdOn": 1633288186,
    "lastUpdated": 1645820361,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1633288186,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1633288876,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 2: New patch set was added with same tree, parent, and commit message as Patch Set 1."
        },
        {
            "timestamp": 1633289084,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1633319109,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1633385564,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(14 comments)\n\n@Jianqiao, gave some initial feedback.\n\n@Jeremy/Andrew, this feels a little like NC-SI and MCTP.  Can you read through and see your thoughts on how much of this belongs in the kernel vs a unique userspace daemon to do raw i2c accesses?"
        },
        {
            "timestamp": 1633452554,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1633733470,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(22 comments)"
        },
        {
            "timestamp": 1633971721,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1633991603,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1633992436,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 4:\n\n(28 comments)\n\nHi, Patrick, Ed, Brandon, Willy and Jason,\n\nThank you all for these insightful comments and suggestions! I spent a bit time absorbing them last week and have already address them all. Please take a look and feel free to let me know your feedback!\n\n\nJianqiao"
        },
        {
            "timestamp": 1633993810,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1633994206,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1634050896,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1634835797,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 6:\n\nFriendly ping our reviewers for next step guidance~ @Patrick Williams, @Ed Tanous\n\nIt has been ten days since the last activity. Please feel free to let me know if you need more time reviewing or other additional supporting materials. \n\nThanks!"
        },
        {
            "timestamp": 1635546063,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1635546638,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1635547982,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1636143949,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1636144113,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 7:\n\n(7 comments)"
        },
        {
            "timestamp": 1636144365,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 7:\n\n(3 comments)"
        },
        {
            "timestamp": 1636147971,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1636147984,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 8:\n\n(3 comments)"
        },
        {
            "timestamp": 1636150163,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1636492375,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(18 comments)\n\nI know I left a lot of comments but this is getting into fairly decent shape.\n\nWould be nice to get some feedback from others on this CC as well (outside Google)."
        },
        {
            "timestamp": 1636518372,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1636652015,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1636683031,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1636683204,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 9:\n\n(18 comments)"
        },
        {
            "timestamp": 1637012286,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1637012395,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 10:\n\n(2 comments)\n\nHi, Patrick and Jason,\n\nThanks very much for your comments! I've already addressed them all. \n\nAbout the discussion for user space v.s. kernel space, I've rephrased the text and tried to make myself more clear. Please feel free to let me know if you want a wider discussion. \n\n\nJianqiao"
        },
        {
            "timestamp": 1637108059,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 10: Code-Review+1"
        },
        {
            "timestamp": 1637704855,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 10:\n\nfriendly ping.\n\nPatrick, are you okay with Jianqiao's responses to your comments?"
        },
        {
            "timestamp": 1638237764,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1638299588,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 11:\n\n(11 comments)"
        },
        {
            "timestamp": 1638304966,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1638305177,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1638320141,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1638320193,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 11:\n\n(11 comments)\n\nHi, Patrick,\n\nThanks very much for your comments! I've already addressed them all. Please take another look.\n\nJianqiao"
        },
        {
            "timestamp": 1638332793,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(3 comments)"
        },
        {
            "timestamp": 1638333843,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(9 comments)"
        },
        {
            "timestamp": 1638334286,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1638370904,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 12:\n\n(2 comments)\n\nI got halfway through responding to Jason's comments on PS11 and then distracted.  Here is them.  Will review PS12."
        },
        {
            "timestamp": 1638393137,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1638396870,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1638487796,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1638487915,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 12:\n\n(10 comments)\n\nHi, reviewers,\n\nThis is a quick reply to some of your comments. There are still a couple of them un-addressed. I'll update them early next week (will take sick leave tomorrow).\n\n\nJianqiao"
        },
        {
            "timestamp": 1639092630,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 13:\n\n(7 comments)"
        },
        {
            "timestamp": 1639095088,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1639095948,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 13:\n\n(6 comments)"
        },
        {
            "timestamp": 1639585399,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1641496021,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 13:\n\n(1 comment)"
        },
        {
            "timestamp": 1642791736,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Uploaded patch set 14."
        },
        {
            "timestamp": 1642791900,
            "reviewer": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "message": "Patch Set 14:\n\n(15 comments)"
        },
        {
            "timestamp": 1642795487,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "81f7043855a023381fec22353bc8482f22797e1a",
            "parents": [
                "d55349e10ec2432886b26b00322ef0eaff2b919a"
            ],
            "ref": "refs/changes/42/47442/1",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1633288186,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 144,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 154,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "24b23f8eb1aec949308f8bceb566650446c2789e",
            "parents": [
                "d55349e10ec2432886b26b00322ef0eaff2b919a"
            ],
            "ref": "refs/changes/42/47442/2",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1633288876,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 144,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 154,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "fe104450037801b4e0aa2c9c2e5f37e05879ec9e",
            "parents": [
                "d55349e10ec2432886b26b00322ef0eaff2b919a"
            ],
            "ref": "refs/changes/42/47442/3",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1633289084,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 9,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "split all the paragraphs based on the line limit."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 9,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "*sigh*.  There are a hundred interfaces exactly like this.  They really had to go invent yet another one?  They couldn't reuse something modern like PLDM or even something ancient like IPMB?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lol........  if we don't invent new things we aren't innovating.... right?  \ud83d\ude0a"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 9,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 9,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Patrick, unifying industry standards produced by different communities is definitely something big and way beyond the scope of this change. I'll keep your suggestion in mind and share with the CMIS community when I got chance. Actually this doc is an attempt to fit the CMIS into the current OpenBMC design and explore how we can propose better system software design in the future."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "minor nit: whitespace"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You are proposing a new daemon here?  Put that up front.  Why can't it be handled by any existing daemons?  Are you expecting this to be in a new repository or an existing one?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "No.  It should use interrupts.  We should not keep going into this \"we're going to poll GPIOs\" mode."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit: Can you break this third and fourth sentence into its own requirement?  It seems distinct from \"must report presence\"."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  No polling unless there's a very good reason to do so (ie GPIO is not interrupt capable would be a good reason)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FWIW, we should add those questions to the template;  They come up a lot."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "The intent was to accommodate board designs where there is a GPIO expander that does not support triggering a pin on a GPIO edge transition or that GPIO interrupt notification pin is not connected to the BMC.\n\nAs an example, see TCA6408A - it has an interrupt pin but that doesn't mean that the pin is connected to a GPIO on the BMC."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "I mentioned in Line 11: \"This design doc is to propose a management daemon ...\"\n\nI apologize for not making this clear enough and have added an overview diagram for this design proposal. \n\n\"Why can't it be handled by any existing daemons\" -- As you can see, the CMIS doesn't follow any existing spec/design, especially the firmware upgrade part. So we plan to create a new repository."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Re-open this comment as Jason brought up a good point."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit: would it make more sense to just call the actual items \"identifier\" ect, in a list.  That would make a much more readable requirement."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 18,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Absolutely not.  There is zero need for any other process to know about CMIS.  Create existing, standardized dbus objects to abstract everyone else."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm really not following this Patrick.  What Item interface would we use for a CMIS module?  Granted, I wonder if we should be calling out each of the module types as their own inventory item. (ie Item.SfpModule, Item.qsfpmodule, ect) and not lumping all CMIS compliant modules into one would be better, but some of the module specific properties (OUI for example) I don't really see the problem with them being their own interface.  Obviously this interface overstepped into the Asset interface, and that should be fixed, but I don't think that entirely negates the need for this specific information."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 27,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Agree with Ed. I've moved the vendor_name/part_number/serial_number properties to existing interfaces, but there are still a couple of properties left. The \"xyz/openbmc_project/Inventory/Item/CmisModule/Module.interface\" seems to be necessary.\n\nWhat do you think, Patrick?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 38,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Should this be an enum?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 38,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for bring this up, Ed!\n\nAll contents in this code snippet are defined in CMIS 4.0 Section 8.3 Upper Memory -- Page 00h (Table 8-15). There are only two data types: integer and ASCII. I can see your point to make this as an enum, but isn't an integer more consistent with other fields?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 38,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not quite following here.  this is defined as an int, but has empty string as a default?  That's incorrect.\n\nThe table you mention has a description of \"Identifier - Type of Serial Module - See SFF-8024. \"\n\nFollowing up with SFF-8024, table 4-3 shows a list of identifiers that are generally used and would be put into the enum.   In general, we try to keep the dbus interfaces self-describing, and do our best to not tie them to a specification.  As you've defined it, I would have to reference SFF-8024 for the valid types that this int could produce, which would be counter to the end state of having this interface be self describing, even if the enum values were made to match the spec."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 38,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done. Replace this integer type with an enumeration type."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "OUIs are usually defined as a byte lookup table?  (sorry, haven't actually read the CMIS spec yet).  So should this be a byte/integer value?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 42,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for bring this up, Ed! Yes, the CMIS 4.0 Section 8.3 Upper Memory - Page 00h (Table 8-15) defines that this field should be \"3 bytes\". Changing this to \"integer\" now."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should go into the Asset interface, Manufacturer property."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 48,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Same, as above, goes into the asset interface, Model property."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 48,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Same as above, Asset.SerialNumber."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think we have an interface for this one, but it seems like something that might live in a generic version interface?  Patrick, thoughts?\n\nAlso, in CMIS is this a byte again?  Should this be represented as a byte on dbus?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Same as above, per CMIS 4.0 Section 8.3 Upper Memory -- Page 00h (Table 8-15), this should be \"two bytes ASCII\", so I used type \"string\" here. This is the field we frequently communicate with vendors, so a string like \"2C\" is much easier than an integer \"0x3243\".\n\nI take a second look into OpenBMC interfaces, it seems that we may be able to reuse the \"xyz/openbmc_project/Inventory/Decorator/Revision.interface.yaml\" interface..."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering that the spec also has \"A value of all zero in the field indicates that the vendor Rev is unspecified.\"  That's another good reason to rely on another interface."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "+1 Ed brings up good points on this.\nWhat about the Revision interface?\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Decorator/Revision.interface.yaml"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "I've already relocated this field in \"Patchset 6\"."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 63,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "minor nit: whitespace"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 63,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 78,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should really use some of the existing interfaces.  Also, it seems unlikely that \"UnderDebug\" would be needed here at an interface level.  The module is just \"Unavailable\""
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 78,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "The most relevant interface I can find is the \"xyz/openbmc_project/State/Decorator/OperationalStatus.interface.yaml\", but that one only supports a boolean variable. \n\nThe purpose of this enumeration is to provide finer granularities for module states. For example, uninitialized/firmware upgrade/debugging all can make the module \"unavailable\", but they have significant meaning to other systems (human intervention or not). Can we enrich the OperationalStatus interface to store those different state? Or should we merge this module-level status with the below lane-level staus?\n\n@Ed Tanous, @Patrick Williams"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 78,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The most relevant interface I can find is the \"xyz/openbmc_project/State/Decorator/OperationalStatus.interface.yaml\", but that one only supports a boolean variable. \n\nThe point here is that \"upgrading firmware\" \"ready\" and \"under debug\" are not states that are only present on CMIS interfaces, so they should be available through common interfaces, to ensure that we're reusing our interfaces where possible.\n\n> \n> The purpose of this enumeration is to provide finer granularities for module states. For example, uninitialized/firmware upgrade/debugging all can make the module \"unavailable\", but they have significant meaning to other systems (human intervention or not). Can we enrich the OperationalStatus interface to store those different state?\n\nThere's already discussions happening on this topic.  I would recommend removing status from this interface for the moment, and jumping in on those discussions in the other commit.\n\n> Or should we merge this module-level status with the below lane-level staus?\n\nI don't think so, but I'm not sure I understand the question.\n\n> \n> @Ed Tanous, @Patrick Williams"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 78,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "re \"Status\" discussion.. seems like there are two\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47756/6/yaml/xyz/openbmc_project/State/Decorator/Status.interface.yaml\n\nwhich aims to introduce a new decorator to map one-to-one with Redfish and\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/44711\n\nCouldn't one of these be used if they're proposed?\nIf the firmware is upgrading then you'd see\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/Activation.interface.yaml\n\nActivation=Activating?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 78,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for the pointers, Ed and Jason!\n\nYes, both of the above two proposals are relevant to this one, and either of them can serve the purpose. I'm removing the \"ModuleState\" enumerations from this interface."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 83,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think we should refrain from using the word Telemetry in this context.  There is something else called Telemetry which, based on the next paragraph, is not what you have in mind.  (See designs/telemetry.md).\n\nThis mostly looks like sensor readings."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 83,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1, Telemetry has a lot of overloads.  Lets call this sensors."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 83,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is this a different new daemon or the same one?  Can we get a summary at the beginning of all the new daemons if you have multiple?  Maybe an ascii-art picture?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1, I suspect this can just be changed to \"the daemon\" because you'll likely want all of the CMIS code in one spot."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "The proposal purpose was mentioned at Line 11. I add a couple of ASCII figures at the beginning of this doc. Please take another look."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just FYI, I don't think we have DBM set up as a sensor measurement unit yet, so we'll need to get that plumbed into PDI."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 95,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't think this is a good data abstraction.  Bits that somebody else has to pick apart isn't too useful.\n\n_Who_ is interested in this information?  I think you should identify the end-to-end flow of this information so we have a better idea how it should be modeled.\n\nCan we create a generic PHY interface (or something along those lines)?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I don't think this is a good data abstraction.  Bits that somebody else has to pick apart isn't too useful.\n\n+1\n\n> \n> _Who_ is interested in this information?  I think you should identify the end-to-end flow of this information so we have a better idea how it should be modeled.\n> \n> Can we create a generic PHY interface (or something along those lines)?\n\n+1, these should likely be called out per-PHY, with a \"link up\" or \"link down\" type interface.  We shouldn't be bitpacking on dbus in this way.\n\nAlso, functionally, as this interface is defined, there's no way to know how many bits of the enum are valid.  SFP+ will presumably have one lane.  QSFP will have 4.  From the dbus interface as defined there's no way to know the difference."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 95,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Patrick and Ed,\n\nThanks very much for keeping an eye on this! \n\nI agree that we should re-use the existing \"xyz/openbmc_project/Sensor/Value.interface.yaml\" for temperature and supply voltage. \n\nAfter taking another look at the CMIS register maps, I realize that my last version was inaccurate about the Tx/Rx power part: actually all the Tx/Rx power/loss-of-signal/loss-of-lock are per-lane sensor/flag. They are documented in CMIS-4.0 Section 8.8.2 Lane-Specific Flags and 8.8.3 Lane-Specific Monitors. \n\nAnd Ed has a very good point that different type of module may have different number of lanes. Is an array of struct a best fit for this:\n\nstruct PerLaneStatus {\n  int lane_id;\n  double tx_power;\n  double rx_power;\n  bool tx_loss_of_signal;\n  bool rx_loss_of_signal;\n  bool tx_loss_of_lock;\n  boll rx_loss_of_lock;\n}\n\nI also updated the below interface for this."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 95,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Hi, Patrick and Ed,\n> \n> Thanks very much for keeping an eye on this! \n> \n> I agree that we should re-use the existing \"xyz/openbmc_project/Sensor/Value.interface.yaml\" for temperature and supply voltage. \n> \n> After taking another look at the CMIS register maps, I realize that my last version was inaccurate about the Tx/Rx power part: actually all the Tx/Rx power/loss-of-signal/loss-of-lock are per-lane sensor/flag. They are documented in CMIS-4.0 Section 8.8.2 Lane-Specific Flags and 8.8.3 Lane-Specific Monitors. \n> \n> And Ed has a very good point that different type of module may have different number of lanes. Is an array of struct a best fit for this:\n> \n> struct PerLaneStatus {\n>   int lane_id;\n>   double tx_power;\n>   double rx_power;\nIMO still need to be sensors, with an association back to the module.\n\n\n>   bool tx_loss_of_signal;\n>   bool rx_loss_of_signal;\n>   bool tx_loss_of_lock;\n>   boll rx_loss_of_lock;\n> }\n> \n\nI wonder if we just need a \"LaneStatus\" schema.  In theory a CMIS module could have zero lanes, right?\n\n> I also updated the below interface for this."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 95,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "I'm proposing a new \"/xyz/openbmc_project/Inventory/Item/CmisModule/LaneStatus.interface.yaml\" here. Please take another look."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "To repeat the above, lets not call this Telemetry, as the term is already overloaded.  CmisModuleStatus maybe?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack. Changed this to CmisModuleLaneStatus.interface"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 113,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These should be sensors."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 113,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack. Please see my other comments."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 136,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What, if any, coordination is there with Entity Manager for these devices?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 136,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Per Ed's suggestion, I added a new item in the requirements section:\n\n\"CMIS module should be dynamically configured using Entity-manager reactor models to identify the location of GPIO pins.\""
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How is this done?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do BMCs generally have control of the reset pin on a phy module?  I thought that was up to the controller generally?  At the very least, this might need to be configurable."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Patrick and Ed,\n\nI added a system diagram at the beginning of the doc. The module reset and power model are controlled by GPIO pins."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "GPIO pins to the BMC isn't always the most common though."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Agree that direct GPIO pins to the BMC may not be available. I've already updated the text.\n\nAs of how we handle the direct GPIO/indirect configurable, I think that should be addressed by concrete code review (not this high level design), am I right?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The kernel has mutexes to block operations across subsystems all the time.  Why is this a problem?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is never justification for not writing a kernel driver.  Alternatively, you're providing an i2c driver in userspace and not reusing a bunch of the kernel subsystems that would allow you to easily present this information (ex. hwmon) so we're having to reinvent a bunch of pieces.  That isn't good either.\n\nI think we should have a bigger discussion with some kernel experts on where this belongs."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why would it be hard?  Isn't there firmware upgrade / microcode loading APIs already?\n\nWhat does \"support features like... debugging\" mean?  There isn't anything in this document about that."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is the first time in the whole doc that I've come to realize that this is connected over i2c.  Please put that earlier."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Why would it be hard?  Isn't there firmware upgrade / microcode loading APIs already?\n\nIs there examples of smbus devices that have this interface already?  I thought that was one of the primary issues with the pmbus kernel support, is that these kinds of things were significantly difficult features to add, but relatively trivial to add to userspace.\n\nI would be in support of a userspace implementation of this.\n\n> \n> What does \"support features like... debugging\" mean?  There isn't anything in this document about that."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You didn't read the whole CMIS spec cover to cover? \ud83d\ude0b"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "I probably used an imprecise word at Line 9: \"modules with host to module communication based on a Two-Wire Interface (TWI)\". Apologize for this and I've already made this more clear at the beginning."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Please see my comments below. I'm not saying kernel isn't able to make this, it's just a matter of ease of implementing and testing (especially firmware upgrade)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Patrick,\n\nI agree that both kernel driver and user space daemon can serve the same purpose. More input from kernel driver experts are definitely welcome!\n\n@Andrew Jeffery, @Jeremy Kerr"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 141,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Agree with Ed. Especially, the CMIS 4.0 proposed the new Command Data Block based firmware upgrade. I've seen it was used in other domains before, so there shouldn't be existing APIs for it.\n\nRegarding the \"support features like... debugging\": sorry for not making this more clear. I've added one more item in the \"Requirements\" section. Basically, we expect the management daemon to stop its access to the module and yield the raw i2c read/write access to human for debugging purpose. The debugging tools are likely vendor-specific and not going to be upstreamed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 146,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 156,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "148c2d6495ffe6cddbd15db6003e6b196438d765",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/4",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1633991603,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 255,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 265,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "11d0293e02e0a1b45efd6e83c98f109902a8a92b",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/5",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1633993810,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 235,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 245,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "7ac9a3aa3a6499fb255c508b2eb39caf92d2422e",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/6",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1633994206,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 79,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please look at and fix your whitespace issues.  They are highlighted in pink on gerrit."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 79,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for the reminding! I've reconfigured my Editor and it should take effect now."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 121,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "As I mentioned in another comment, the existing \"xyz/openbmc_project/State/Decorator/OperationalStatus.interface.yaml\" interface only carries a single boolean property. Is it possible to add an enumeration to store more states?\n\n@Ed Tanous, @Patrick Williams"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 121,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "There's a discussion going on in another review.  Please remove this from this interface, and we can follow up on that in the other thread."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 121,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for the pointer! Removing this field from the interface."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 237,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 247,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "31bfcd052761b847c11bec71fab86921b1ab8e84",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/7",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1636143949,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 150,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "unknown"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 150,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 231,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "phrasing? Should just state that xyz/openbmc_project/Sensor/Value.interface will be used to expose temperature, voltage and power."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 231,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 266,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "are there multiple lanes? Does this mean if a single Tx lane experiences loss of lock then TxLossOfLock=True?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 266,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Yes, each module may contain multiple lanes. I've added this in the description.\n\nWhen the lane 0 experiences loss of lock, the corresponding lane should have the flag set as True. Meanwhile, other lanes in the same module may remain unchanged."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 266,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "A bit confused here then.\nDoesn't this mean that there must now be lane dbus object paths, each one with their own \nxyz.openbmc_project.Inventory.Item.CMISModule.LaneStatus interface?\n\nSo something like\n\n/xyz/openbmc_project/inventory/item/CMISModule1 <=== this has xyz/openbmc_project/Inventory/Item/CmisModule/Module.interface.yaml, the sensors interface, status interface etc...\n\n\nthen there is\n\n/xyz/openbmc_project/inventory/item/CMISModule1/lane0\n/xyz/openbmc_project/inventory/item/CMISModule1/lane1\n/xyz/openbmc_project/inventory/item/CMISModule1/lane2\n/xyz/openbmc_project/inventory/item/CMISModule1/lane3\n/xyz/openbmc_project/inventory/item/CMISModule1/lane4\n\n?\n\nI think there are two ways to approach this.\nCreating a new dbus object for each lane with its own interfaces - like what is implied here.\nIn that case, in implementation you'll likely need to add org.freedesktop.DBus.ObjectManager interface so that the lanes can be discovered.\n\nOtherwise this interface can change and you could have the properties return an array of integers..and rename them to something like\n\nLaneNumbersWithTxLossOfLock = list out the lanes with a Loss of Lock\n\nI'm slightly partial to the latter approach unless the design mentions that the CMIS Module object shall implement org.freedesktop.DBus.ObjectManager\n\nEd, Patrick thoughts?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 266,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Talked with Jason and agreed with him on the performance concern.\n\nI've already updated the interface design. Please take another look."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 298,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 308,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "b54e5b85ae54f08378f5238c852cd15cb758c686",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/8",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1636147971,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 37,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "daemon (spelling)"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 37,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "communication (spelling)"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 39,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 92,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not sure if others agree, but I find the use of \"TWI\" throughout this document a bit jarring because it is so unusual.  Can we just call this i2c, since that is what it is?\n\n(I'd prefer this document is more consumable for BMC engineers who are use to 'i2c' and not for \"CMIS Spec Experts\" which might use \"TWI\" for some odd reason.)"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 92,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Patrick,\n\nThey used the TWI to avoid trademark issue. But I agree with you that this design doc is for BMC community so it's okay to use I2C directly.\n\nDone."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "human (spelling)\n\nSuggest running `aspell` or similar over this document.  There are probably spelling mistakes that I missed."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 101,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can we just `systemctl stop ...` in this case?  Do we really need a special debug API?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "The `systemctl stop ...` would stop the entire daemon. Note that the daemon manages multiple modules and we may want to debug only one of them. The main purpose here is to keep the daemon managing other modules while we're debugging a specific module.\n\nI can certainly modify if this doesn't align with BMC's design methodology. What do you think?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think it is reasonable to be able to ask the daemon to stop monitoring a particular module then (ie, not start/stop the whole daemon).\n\nDepending on how you detect the modules, you could potentially have a `cmis-monitor@<device>.service` who's 'start'/'stop' routines is something like 'cmis-cli start <device>'/'cmis-cli stop <device>'.  (I'm not suggesting cmis-monitor/cmis-cli is a good name or one you need to pick here; just using as an example)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "wouldn't the dbus path interface that allows enable/disable be suitable?\n\nsee\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Object/Enable.interface.yaml"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Yeah, it seems that the \"xyz/openbmc_project/Object/Enable.interface.yaml\" will serve the purpose.\n\nMarking this as resolved now."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Yeah, it can be done like that also.  I suspected you'd want some kind of CLI for humans as opposed to a difficult-to-contrive busctl invocation.  `systemctl` is slightly more straight-forward to get the right parameters."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Got it! Thanks for the suggestion!\n\nYes, a CLI tool will be super useful in deployment. I've already updated the ASCII diagram."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I mentioned before concern about having CMIS-specific APIs.  Previously, I understood CMIS to be a specific spec and we don't usually want to expose specs at a dbus level.  We don't expose IPMI, PLDM, MCTP, etc.\n\nIt would be nice if we could come up with some kind of abstraction for the underlying device that CMIS is representing and frame this in term of those kind of devices.  The hope would be if some device comes along that exposes those same concepts over PLDM that they can still plug right into the dbus model without major changes.\n\nI've reviewed the other properties on this interface but it seems like the only one that is unique is this \"Identifier\" property.  I have a few thoughts:\n\n- Is the way the module is connected to the board really all that interesting?  Is there a hard requirement to be able to expose it outside the BMC, and if so, what value does knowing it provide you?\n\n- This feels like maybe it belongs as a subclass of Inventory/Connector.\n\n- I wonder if we have some other Decorator already with a free-form string that could be used.  If we were talking about a 3-6 entry enumeration, then an enumeration seems fine, but I don't really like these enumerations where they are a carry forward of some 2 decade old spec with 25+ elements and only 1 or 2 of them are found in modern systems.  If you look at Inventory/Item/Cpu, what we did there in a similar problem, what we did is made them a free-form string where the string values are expected to come from \"DSP0134 Section x.y.z\"."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks very much for the detailed explanation, Patrick! It is a precious lesson for me to learn about BMC interface design.\n\nSince this comment requires quite some design refactoring, so I'd like to confirm the reviewer's opinion before I change the interface content (which is easy to do but less effective because it's just a translation of design purpose)\n\n1. \"Is the way the module is connected to the board really all that interesting?\"\nThis doc aims at designing all CMIS-compliant modules, which covers a wide range of forms, e.g. QSFP Double Density (QSFP-DD), OSFP, COBO, QSFP, SFP-DD as well as future forms. The \"Identifier\" would be the major property to differentiate those different forms. It's register address is Lower Page 00h Byte 0 (the first register in the module EEPROM).\n\n2. \"This feels like maybe it belongs as a subclass of Inventory/Connector.\"\nI fully understand the BMC community's intention to avoid exposing any specific spec at a dbus level. A subclass of Inventory/Connector seems good to me. But the current Inventory/Connector only contains two interfaces: the Embedded shall not be used for field-replaceable, and the Slot represents a PCIe slot connection. Should I create a new interface under Inventory/Connector?\n\n3. \"...a free-form string that could be used\"\nAgree that a string is more extensible. Previously I used an integer type to represent the Identifier and another reviewer suggested me switching to an enumeration. I can see values from both reviewers' suggestions. If we want to avoid exposing CMIS specific information in the interface, a string would be the best solution.\n\n\nMarking this as unresolved."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> 1. \"Is the way the module is connected to the board really all that interesting?\"\n> This doc aims at designing all CMIS-compliant modules, which covers a wide range of forms, e.g. QSFP Double Density (QSFP-DD), OSFP, COBO, QSFP, SFP-DD as well as future forms. The \"Identifier\" would be the major property to differentiate those different forms. It's register address is Lower Page 00h Byte 0 (the first register in the module EEPROM).\n\nThis still doesn't tell me if the connection method is interesting.  Who cares about if it is a QSFP-DD or microQSFP form-factor?  I can't really conceive of cases where this is interesting information to expose to another daemon, unless there is something fundamental in the Redfish API that needs this information.\n\n> Should I create a new interface under Inventory/Connector?\n\nYes, certainly we could add new interfaces under Connector if that's where it belongs.  Again, I think we'd need to make sure we're not making something specific to CMIS unless that is really appropriate and necessary."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "I can take a stab at the connector question. Feel free to chime in Jianqiao\n\n>1. \"Is the way the module is connected to the board really all that interesting?\"\n>This still doesn't tell me if the connection method is interesting.  Who cares about if it is a QSFP-DD or microQSFP form-factor?  I can't really conceive of cases where this is interesting information to expose to another daemon, unless there is something fundamental in the Redfish API that needs this information.\n\nI think it's useful and there is a use case..  Cable v1.1.0 specifies the connector type (no OSFP yet but we plan on raising an issue to amend it)\nhttps://redfish.dmtf.org/schemas/v1/Cable.v1_1_0.json\n\nSo the driving use case here is that Cable schema specifies connector type and so we'd like the dbus interface to provide enough information to more fully populate the cable resource.\n\nIf you're looking for a end-user use-case then a contrived example might be that your fleet may have a mixture of CMIS cable types. If there is a problem with a cable then your repair action might be different depending on the connector type.\ne.g we know that connector A is frequently seated incorrectly so the repair action would be to reseat the connector. Connector B never has this issue so maybe do something different."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Agree with Jason.\n\nI've already moved \"VendorOUI\" field to a new interface per reviewer's suggestion. I will also change the Identifier data type from enum to string and move it to \"Inventory/Connector\" once this discussion is closed."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Who cares about if it is a QSFP-DD or microQSFP form-factor? \n\nRedfish Cares and has enums for this.  In practice, it's good to know what type of module you're dealing with so you can do things like per-lane bandwidth monitoring.\n\n> I understood CMIS to be a specific spec and we don't usually want to expose specs at a dbus level.  We don't expose IPMI, PLDM, MCTP, etc.\n\nI'm not quite following this statement, are you saying we should rename this to something like \"network module\" to remove the specifics of the interface from the name?  I could see that being reasonable.\n\n> Is the way the module is connected to the board really all that interesting?\n\nKnowing that this is a module of a particular form-factor is very interesting to manageability software.  Knowing whether your server has an SFP+ connector or a QSFP connector is useful.\n\n> This feels like maybe it belongs as a subclass of Inventory/Connector.\nThe issue I have with that is that it's not a connector.  the SFP interface on the board is a connector, but the module is more akin to an add-in-card, so I worry that we're stretching the \"connector\" definition a bit by putting it there, given the connector and module that fits in the connector are distinct."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I think it's useful and there is a use case..  Cable v1.1.0 specifies the connector type (no OSFP yet but we plan on raising an issue to amend it)\n\nI don't know if CMIS and SFP are interchangeable in this context.  Can you have a SFP connector that is not attached to a CMIS module?  I would expect so.  If so, from an inventory perspective, the connector still isn't specific to CMIS and we may want to be able to define inventory objects that hold non-CMIS SFP connectors?  Please correct me here as my background knowledge is pretty limited."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Redfish Cares and has enums for this.  In practice, it's good to know what type of module you're dealing with so you can do things like per-lane bandwidth monitoring.\n\nIf we need it for Redfish, I guess we need it. ;)  I still don't really get _why_ Redfish puts a lot of these in there but whatever.  \"Per-lane bandwidth monitoring\" doesn't sound like something related to QSFP-DD vs microQSFP unless you're attempting to derive the amount of bandwidth based on the connector type, which is kind of poor on your part.\n\n> I'm not quite following this statement, are you saying we should rename this to something like \"network module\" to remove the specifics of the interface from the name?  I could see that being reasonable.\n\nYes, exactly.\n\n> The issue I have with that is that it's not a connector.  the SFP interface on the board is a connector, but the module is more akin to an add-in-card, so I worry that we're stretching the \"connector\" definition a bit by putting it there, given the connector and module that fits in the connector are distinct.\n\nThis could be lack of knowledge on my part and/or misinterpreting what was written before.  I'm not too stuck on if it is a \"Connector\" or not.\n\nYou have an SFP slot that you insert an SFP transceiver into.  QSFP is a form-factor?  Or is QSFP a speed?  The \"slot\" is the thing I'm considering to be a connector and what I would expect to say \"I am a QSFP-type Slot\".  The CMIS module then plugs into the QSFP slot (as a transceiver).  Do I have this right?  If so, it seems like the only debate is if there is a separate inventory object (and maybe path) for the \"slot\" vs the \"transceiver/module\" or they all go in one?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Redfish Cares and has enums for this.  In practice, it's good to know what type of module you're dealing with so you can do things like per-lane bandwidth monitoring.\n> \n> If we need it for Redfish, I guess we need it. ;)  I still don't really get _why_ Redfish puts a lot of these in there but whatever.\n\nThe main use case is inventory management and topology inspection over OOB interfaces.  Having the exact connector spec in a lot of cases allows techs to know exactly what cable/module/whatever type they need when something fails, without having to have a hardcoded list of every possible NICs connector type.\n\n>  \"Per-lane bandwidth monitoring\" doesn't sound like something related to QSFP-DD vs microQSFP unless you're attempting to derive the amount of bandwidth based on the connector type, which is kind of poor on your part.\n\nYeah, in that case, those two would be the same, but I know from the spec that SFP supports up to gigabit connections, SFP+ supports 10GB connections, and QSFP supports 40GB connections, so I can use that to determine overhead... With that said, yes, the example was contrived and not well thought out.  The topology and repair use cases in the previous paragraph are probably a better example.\n\n> \n> > I'm not quite following this statement, are you saying we should rename this to something like \"network module\" to remove the specifics of the interface from the name?  I could see that being reasonable.\n> \n> Yes, exactly.\n\nYeah, lets do that.\n\n> \n> > The issue I have with that is that it's not a connector.  the SFP interface on the board is a connector, but the module is more akin to an add-in-card, so I worry that we're stretching the \"connector\" definition a bit by putting it there, given the connector and module that fits in the connector are distinct.\n> \n> This could be lack of knowledge on my part and/or misinterpreting what was written before.  I'm not too stuck on if it is a \"Connector\" or not.\n> \n> You have an SFP slot that you insert an SFP transceiver into.  QSFP is a form-factor?  Or is QSFP a speed?\n\nQSFP defines both speed and lane count.  QSFP is 4GBPS, 4 serdes lanes.  QSFP+ is 4 serdes lanes, 40GBPS, ect.\n\n>  The \"slot\" is the thing I'm considering to be a connector and what I would expect to say \"I am a QSFP-type Slot\".  The CMIS module then plugs into the QSFP slot (as a transceiver).  Do I have this right?\n>  If so, it seems like the only debate is if there is a separate inventory object (and maybe path) for the \"slot\" vs the \"transceiver/module\" or they all go in one?\n\n\nGotcha, yep, I think you got it right, although I suspect this design doc is trying to avoid the differentiation between a connector and a module, because it's tough to model, and the distinction isn't that important.\n\nI really suspect a lot of this is going to be driven by the PCIe slot abstraction stuff, of which there is a lot more people looking into it.  I think for the moment we should just add the Item.Module abstraction, then once we nail down how PCIe is going to work, presumably this would be identical (with slightly different names)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 130,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for the insightful comments, Ed and Patrick!\n\nYeah, I was focusing on the module sensor reading/firmware upgrade parts and didn't notice the difference between \"Connector\" and \"transceiver\" before. I've already renamed the interface as \"/xyz/openbmc_project/Inventory/Item/Module.interface.yaml\" in the latest patch set. I agree with Ed's suggestion: let's revisit the connector/transceiver difference once the PCIe abstraction is figured out.\n\nClosing this thread for now."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 137,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Default should be 'Unknown', right?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 137,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 143,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "OUI sounds like a separate Decorator, not specific to CMIS?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 143,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for the suggestion! Just want to double check:\n\nThe current Decorator folder contains multiple interfaces:\n1. Asset: I can add a new property called \"VendorOUI\" here\n2. ManufacturerExt: I can (a) create a new property here, (2) use the existing ExtendedMFGData property, but it seems not designed for programmatic interrogation.\n3. VendorInformation: This seems applicable for vendor custom fields, so not a good fit for my case.\n4. Creating a new interface.\n\n\nPatrick, which one looks better to you? 1, 2(a) or 4?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 143,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "1 or 4 most likely.  Since not every asset has an OUI (only networking ones do) it seems like 4 is best."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 143,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 146,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I doubt you really have hardware designs for all of these.  Can we limit to the ones as you implement them?  It doesn't seem especially interesting to have this many of them, especially if many of them are obsolete technologies."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 146,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "This is a good point. Thanks for the suggestion!\n\nI can compress the number of enumeration values to 7~9. But please take a look at my reply to another comments -- probably a string is more suitable for this case."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 153,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Something clobbered this name."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 153,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 166,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why do we have them then?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 166,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 214,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "These don't seem interesting at a dbus level, even if the spec lists them.\n\n(And \"Vendor specific\" isn't a valid enumeration name anyhow)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 214,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 237,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we need to add dBm into the units?  \n\nIsn't dBm equivalent to volts, but just on a logarithmic scale?  If so, we've generally not created a new unit for these, but would represent them on dbus as volts.  If external interfaces are defined in terms of dBm we'd usually do the conversion at those points (even if in this case there is an awkward double conversion at device ingest and bmcweb)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 237,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "The CMIS module reports raw power in unit of dBm. I notice that the current Sensor/Value interface only support one unit per sensor type. I'm okay to change to Watts to simplify our future implementation."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 244,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Again, this seems like something we could make non CMIS specific.  And, it doesn't seem like Inventory (ie. it isn't relatively static)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 244,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "No objection to relocate the interface. I just took a look at \"openbmc_project/Network/\" folder but it seems specific to Ethernet. Could you please recommend a path?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 244,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Probably State sub-directory.\n\nCould these same indications be applied to any bus that trains, such as PCIe or DIMMs?  Or any connection that uses optics?\n\nWhatever ends up under 'State' could ideally be written in a way to generically apply to these other types of buses."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 244,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "I've already relocated this interface to \"/xyz/openbmc_project/State/Decorator/LanesStatus.interface.yaml\" and removed any CMIS specific details.\n\nThe Loss of Signal and Loss of Lock have been widely used in network devices. I haven't seen many cases in PCIe or DIMMs."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 266,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is it possible to have LossOfSignal without LossOfLock?  Should this be a boolean or a state (enum)?  It seems like L=False,S=True is invalid, so we probably shouldn't do booleans."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 266,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "LossOfSignal and LossOfLock are two independent properties. One lane in a module could have neither/either/both of them. So the boolean type seems like a good choice.\n\nActually Jason Ling has a good point about how we should associate a lane with a module. For example, a 1U front panel supports up to 36 OSFP (one type of CMIS-compliant set) modules, and each module has 8 lanes. In the current interface design, we need to perform 36 * 8 = 288 queries on dbus to get overall system status. That may cause performance pressure on dbus. So I'm updating the interface here."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 272,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is a statement and not a design.\n\nHopefully you are going to implement the OpenBMC update methods inside this daemon?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 272,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "yes the plan is to reuse the existing software interfaces to provide the firmware upgrade API.\n\nJianqiao - can you modify this paragraph to state this?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 272,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done.\n\nThe management daemon will definitely follow OpenBMC interfaces/methods. But I don't think OpenBMC community will be interested in those CMIS specific firmware upgrade logic so I will create another repository outside of OpenBMC."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 272,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> But I don't think OpenBMC community will be interested in those CMIS specific firmware upgrade logic so I will create another repository outside of OpenBMC.\n\nThis seems like a leap to make.  I don't see why we wouldn't make the repo under the OpenBMC org if it is fulfilling a design we've documented here."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 272,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Please see my replies in another thread.\n\nWe will pack those CMIS/CDB based firmware upgrade into a standalone library. That library will be used on multiple platforms, including the host, switch and BMC. It shouldn't contain any BMC specific logic like dbus."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 290,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\"Debugging\" is mentioned above via a vendor-specific tool.  This seems like it should be direct access to the raw i2c device, which is fine, but is there anything in this daemon itself?  If not, can we just drop it?\n\nYou mentioned in the previous commit some understanding that firmware upgrade was difficult to sequence in the kernel.  Can we point to references here?  My rationale is that if the kernel situation changes some day we should be able to reconsider this aspect of the design just as well.\n\nAt a kernel driver level you'd typically replace my `systemctl stop/start` above with sysfs unbind/bind calls.  Maintaining a lock to user-space isn't necessary."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 290,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Please see my reply in another comment. When a module is under debug mode, we expect that:\n1. this proposed management daemon stops its own access to the module, and inform any other services that the module isn't available. So human can have the full, raw access to the module without interrupts.\n2. this proposed management daemon manages other modules in the system as usual.\nFrom this perspective, firmware upgrade and debugging are equivalent. \n\nAs of reference to firmware upgrade difficulty and \"Maintaining a lock to user-space isn't necessary.\"-- Updated in the text."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 292,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think kernel developers would debate this sentence. :D  We should probably at least blunt the wording.\n\nUnless we can point to technical reasons, such as dealing with firmware upgrade (why doesn't power supply update have this issue w.r.t. pmbus though?), I think we have a difficult time accepting this as a non-driver.  I agree that even for me it would probably be easier to write this in user-space, but why do we bother writing anything in the kernel then?  I don't think \"it is easier to complete the feature\" is a reason we've typically accepted and it seems like it is just opening the door for everything device oriented to avoid kernel work whenever the associated developers feel like it."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 292,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": ">Unless we can point to technical reasons, such as dealing with firmware upgrade (why doesn't power supply update have this issue w.r.t. pmbus though?)\n\nwell dealing with firmware upgrades is one, reporting firmware version, surfacing things like lane based Loss-of-lock/loss-of-signal, CMIS module descriptors etc..\nHwmon doesn't have buckets that this fits nicely into. We could dump this stuff into debugfs - but that feels like we're forcing things to fit in the kernel.\n\n\n>but why do we bother writing anything in the kernel then?\nNot a kernel developer but I typically think of kernel drivers when I want tight performance or if I expect my driver to expose services to be used by subsystems.\n\n\nIs there a reason why we want all device interaction to be stuffed into the kernel?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 292,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Is there a reason why we want all device interaction to be stuffed into the kernel?\n\nI don't have a complete answer for you.  Could probably get some more feedback from others at a broad level to set better guidelines.\n\nWhen the device has a high percentage of overlap with existing kernel subsystems, we save ourselves a lot of code (and pain) by leveraging those kernel subsystems.  i2c, hwmon, iio, etc. have a good amount of code both in the kernel already and in our userspace daemons.  Often when I see someone try to replicate a \"i2c driver in userspace\" they miss out on many of the edge cases that the kernel subsystem already handles, plus they are having to re-implement all the dbus providers because they didn't leverage that subsystem.\n\nI know that firmware update is a rough edge in the kernel, so I understand why that isn't easily handled there.  We have a similar story with pmbus and not knowing how to do in-kernel firmware updates, but I think what we do in that case is bind the driver for the typical case (pmbus sensors and errors) and unbind it in the uncommon case of applying a firmware update.\n\nThe majority of what this driver has to do seems to me to have similar overlap with what iio and pmbus do.  You've got a heap of sensors, some error state, and a bit of fru-descriptor data.  We've already found that it was pretty easy to add iio support to dbus-sensors once we already had hwmon support, because they are so similar, and so I would anticipate a similar amount of overlap on an [in-kernel driver that looks a lot like pmbus or iio even if it doesn't exactly use those subsystems internally].\n\nI'm not saying this shouldn't go forward as a user-space driver but I think we need the rationale to be better articulated in the doc."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 292,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Thanks for your illuminating comments, Jason and Patrick! \n\nI've rewritten this paragraph per feedback from both reviewers.\n\nLet me make my point more clear: both user space daemon and kernel driver can serve the same purpose but neither of them is perfect (I've seen all three reviewers admitted this in the comment history). So there is no absolute right choice here. With that in mind, and from the perspective of implementation ease, I'm proposing the user space way and have already made my rationale more clear in the text.\n\nThere are already some kernel developers CC'ed in this change but I haven't heard any from them. I'm not sure whether there is a better way to consult them. Please let me know if you've any suggestions or want to have a wider discussion in weekly OpenBMC forum."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 298,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 308,
            "sizeDeletions": 0
        },
        {
            "number": 9,
            "revision": "8478bf0d9d0f40e9cdb1073112d881de46d51165",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/9",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1636683031,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 147,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Note that although I greatly compressed the number of values of this enumeration, I've already agreed that we should adopt a string type for the ModuleIdentifier in another comment. \n\nI'm just updating the content here to address Patrick's comments."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 251,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 261,
            "sizeDeletions": 0
        },
        {
            "number": 10,
            "revision": "9a00fecc1b054bdee553f01f6db855e3ddab81f9",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/10",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1637012286,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 259,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 269,
            "sizeDeletions": 0
        },
        {
            "number": 11,
            "revision": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/11",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1638237764,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Check line-wrapping throughout the document.  I see a number of issues."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 39,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Spelling."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is a design anti-pattern.  FWIW, our private things our our problem (we can talk more offline about how to design them) but splitting up control for a single piece of hardware among various daemons is a huge pain, and is the source of many reliability, performance, and interfacing bugs.  One daemon should be responsible for one piece of hardware.  If you want to share code between them for common stuff, put it in a library that both daemons can use, but being able to control a modules IO access all in one place helps a ton for use cases like firmware update, where the hardware itself is broken, and does crazy stuff like requires all firmware update payloads to be contiguous.\n\nFWIW, an upstream design doc shouldn't really mention \"private\" use cases, hence the word \"private\" \ud83d\ude0a"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 103,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Sentences shouldn't start with 'and'. ;)"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 103,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 105,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For the debug use cases, I'm not understanding why CMIS modules are special.\n\nsystemctl stop CMIS.service should allow all the debugging a person needs."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 105,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Patrick asked a similar question in PatchSet8:\n\n\"Patrick Williams\nNov 09\nCan we just `systemctl stop ...` in this case?  Do we really need a special debug API?\n\nJianqiao Liu\nNov 11\nThe `systemctl stop ...` would stop the entire daemon. Note that the daemon manages multiple modules and we may want to debug only one of them. The main purpose here is to keep the daemon managing other modules while we're debugging a specific module.\n\nI can certainly modify if this doesn't align with BMC's design methodology. What do you think?\n\nPatrick Williams\n2:13 PM\nI think it is reasonable to be able to ask the daemon to stop monitoring a particular module then (ie, not start/stop the whole daemon).\n\nDepending on how you detect the modules, you could potentially have a `cmis-monitor@<device>.service` who's 'start'/'stop' routines is something like 'cmis-cli start <device>'/'cmis-cli stop <device>'.  (I'm not suggesting cmis-monitor/cmis-cli is a good name or one you need to pick here; just using as an example).\n\nJason Ling\n3:46 PM\nwouldn't the dbus path interface that allows enable/disable be suitable?\n\nsee\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Object/Enable.interface.yaml\n\nJianqiao Liu\n7:56 PM\nYeah, it seems that the \"xyz/openbmc_project/Object/Enable.interface.yaml\" will serve the purpose.\n\nMarking this as resolved now.\n\nPatrick Williams\nDec 01\nYeah, it can be done like that also.  I suspected you'd want some kind of CLI for humans as opposed to a difficult-to-contrive busctl invocation.  `systemctl` is slightly more straight-forward to get the right parameters.\n\nDRAFT \n2:12 PM\nGot it! Thanks for the suggestion!\n\nYes, a CLI tool will be super useful in deployment. I've already updated the ASCII diagram.\"\n\n\nPlease feel free to let me know if this doesn't make sense to you."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 105,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Note that the daemon manages multiple modules and we may want to debug only one of them. \n\nThis seems super niche, but sure.  If you're in a debug context, who cares if the system stops managing all modules, or just one?  If that's really needed, ideally you'd use the entity-manager mechanisms for removing the configuration item from the particular node, which would in turn stop the device from scanning (given that it would now know nothing about that module).  Given that's already how most of dbus-sensors works, and phosphor-pid-control works, lets be consistent with that design, and not invent another way to stifle a reactor.\n\nWith all of this said, I'm bikeshedding at this point, and the existence of a debug interface shouldn't really hold up this review."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 105,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I still don't really know what \"export the raw i2c read/write access\" means.  Wouldn't the debugger just use the kernel APIs for the i2c device directly?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "I guess it's more about implementation details. \n\nAs the owner of this CMIS daemon, I hope people use my daemon as much as possible. But you're right, once the daemon stops it access to the module, it's purely up to the debugger to decide whether to use the kernel API or this CMIS daemon's interfaces."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 210,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I prefer 'set' based on the definition."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 210,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 228,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I disagree with this direction.  Having repositories outside the organization that are being included in machines maintained by the organization makes it really difficult for us to manage.  This code will be implementing OpenBMC dbus interfaces, using OpenBMC libraries, and being included in OpenBMC machines.  It probably belongs in the OpenBMC org.\n\nUnless, what you are suggesting is that the low-level update itself is a separate executable often provided by a module vendor.  Similar to how the 'flashcp' tool is used by some people to do the low-level flash programming but there is another daemon (phosphor-bmc-code-mgmt) that creates the dbus interfaces and sometimes calls 'flashcp' under the covers."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 228,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "The intention is to pack all CMIS logic, like firmware upgrade, PRBS (pseudorandom binary sequence) testing and EEPROM layout validation, etc, into a standalone library. This library would be used on multiple platforms, like the host, network switch and BMC. It shouldn't contain any OpenBMC specific code, like dbus or PLDM. According to the review process, OpenBMC community clearly isn't interested in CMIS specific logic, like these CDB commands:\n\nCMD 0100h: Get Firmware Info\nCMD 0101h: Start Firmware Download\nCMD 0102h: Abort Firmware Download\nCMD 0103h: Write Firmware Image LPL\n....\n\nThis proposed CMIS daemon will take care of all OpenBMC related stuff. As of firmware upgrade feature, it will call the above external library, pass in some firmware images and i2c interfaces, then wait until the library finishes. Certainly this CMIS daemon will handle errors reported by the library.\n\nLeaving this as unresolved just in case Patrick may want to have more discussion."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 228,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Having repositories outside the organization that are being included in machines maintained by the organization makes it really difficult for us to manage.\n\n+1.  There are other examples of libraries that are within the openbmc umbrella that are not openbmc specific (sdbusplus), so that shouldn't be an issue.  Unless you're planning on starting another LF foundation (or other multi-comany compatible) project, and figuring out all the licensing, code of conduct, CLA, patents, CI and other stuff that openbmc has, I'm guessing this isn't the right direction.\n\n> it will call the above external library,\n\nI don't really see why we can't have both the application and the library live in the openbmc repo.  At which point that another capable org (think LF or similar) wants to take it over, it's easy enough to move."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 262,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 272,
            "sizeDeletions": 0
        },
        {
            "number": 12,
            "revision": "8cef704468f3c74c9734d0cb5049e28985d24be5",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/12",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1638320141,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 87,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nitpick.  use of Interrupts aren't a requirement, CPU usage and latency might necessitate the use of interrupts, but those two should be requirements, interrupts is the solution."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 87,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Good point! Updated this sentence and the proposed design:\n\n\"We propose the mangement daemon to detect the module presence through GPIO pin\ninterrupts to save CPU usage and reduce latency. \""
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 87,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Again.....  The requirement is CPU usage and latency, which we should have requirements for.  \"Daemon should use less than 1% BMC CPU when idle, and cards should be detected with <30ms of latency\" might be a good starting place."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 87,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "For telemetry we already have the concept of unavailable.  I suspect this would just be a new implementation of it, or is there a reason to mark the whole module unavailable?  What is the use case that requires knowing the module is unavailable, as opposed to just knowing that the specific telemetry items are unavailable?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "No, I don't think \"marking a bunch of subsidiary sensors unavailable\" will be more clear than marking the whole module unavailable for this point. We can do them both for different purposes, but a module level flag is still needed. Think about we have an accelerator which connects with the CMIS module's data path (not I2C but some high speed path), it need to understand whether the module is fully up and ready for traffic during its initialization. Using some sensors' availabilities to infer the module availability doesn't make a lot of sense here."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> No, I don't think \"marking a bunch of subsidiary sensors unavailable\" will be more clear than marking the whole module unavailable for this point.\n\nTo meet the intent of the sensor interfaces, you have to do the above anyway.  It's not about clarity, it's about knowing the state of a sensor without having to backtrack it to a module.  This is also how we already handle this in other places, so I would expect this daemon to do the same.\n\n> We can do them both for different purposes, but a module level flag is still needed. Think about we have an accelerator which connects with the CMIS module's data path (not I2C but some high speed path), it need to understand whether the module is fully up and ready for traffic during its initialization.\n\n\"Fully up and ready to serve traffic\" isn't quite the same as unavailable.  I don't see anything in this design for that, so I'm assuming that's needed to be added still?\n\n> Using some sensors' availabilities to infer the module availability doesn't make a lot of sense here.\n\nAgreed, but you should set the sensors unavailable all the same, such that downstream telemetry daemons know the sensors aren't scanning."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 94,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Sure, we will implement both module level and sensor level availability.\n\nAs of module availability/status, there are already some on-going efforts in the openbmc community:\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47756\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/44711"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit: this isn't really an openbmc requirement.  Probably take out the word \"should\""
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ideally this would just link to the phosphor-dbus-interfaces review.  It doesn't make sense to duplicate the interface definitions here.  Could be done in another patchset I guess if you wanted, but we should avoid writing these definitions twice."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Acknowledged.\n\nI can fork these interface definitions into another patchset when all discussions are converged. Before that, it's still useful to keep them here to help reviewers understand the overall picture."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 177,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Does this name need to be specific to CMIS OUI?  I could see this accidentally getting used for PCIeOUI, or IPMI OUI, which if we're going to do we should do explicitly by calling out the registry we're using, but in this case, I suspect just making the naming specific would be enough."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 177,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there a difference?  Aren't these all owned by IEEE as the numbering authority?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 177,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "They're owned by IEEE, but I thought there were different lists for the various specs, ie PCIe had one list, USB had another, ect (not an expert, and I could very well be wrong).\n\nIf it's a common list, then this point is moot."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 177,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "The OUI list should be shared:\n\nhttps://en.wikipedia.org/wiki/Organizationally_unique_identifier\nhttp://standards-oui.ieee.org/oui/oui.txt\n\nAnd it should be a 24-bit number, not a string (although we usually parse it as a string). Already updated in the latest patchset."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 177,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Understood.  Fine as-is."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 207,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not really following what this table is saying.\n\nis this pointing out that there will be 4 sensors?  The sensor itself isn't of type double.  Maybe that column needs removed?  I suspect this whole thing could be boiled down to \"will implement sensor.Value interfaces for temperature, supply voltage, tx power, and rx power for a given module\""
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 207,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 222,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Generally we would split these into separate objects.  one object per lane, each with an enum for the various things you're trying to convey."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 222,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Please see my previous explanation in PatchSet 8:\n\n\"\nJianqiao Liu\nNov 11\nLossOfSignal and LossOfLock are two independent properties. One lane in a module could have neither/either/both of them. So the boolean type seems like a good choice.\n\nActually Jason Ling has a good point about how we should associate a lane with a module. For example, a 1U front panel supports up to 36 OSFP (one type of CMIS-compliant set) modules, and each module has 8 lanes. In the current interface design, we need to perform 36 * 8 = 288 queries on dbus to get overall system status. That may cause performance pressure on dbus. So I'm updating the interface here.\n\"\n\nLeaving this thread unresolved just in case you want to have more discussions."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 222,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Please see my previous explanation in PatchSet 8:\n> \n> \"\n> Jianqiao Liu\n> Nov 11\n> LossOfSignal and LossOfLock are two independent properties. One lane in a module could have neither/either/both of them. So the boolean type seems like a good choice.\n\nBoolean is a mediocre choice compared to an enum\n\n\"HasLock/LostLock\" is a lot more descriptive than true/false.\n\n> \n> Actually Jason Ling has a good point about how we should associate a lane with a module. For example, a 1U front panel supports up to 36 OSFP (one type of CMIS-compliant set) modules, and each module has 8 lanes. In the current interface design, we need to perform 36 * 8 = 288 queries on dbus to get overall system status.\n\nI have no idea how you got to that number, but GetManagedObjects, which we use all over the place for sensors, solves this in a single query.\n\n> That may cause performance pressure on dbus. So I'm updating the interface here.\n> \"\n> \n> Leaving this thread unresolved just in case you want to have more discussions."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 222,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "> \"HasLock/LostLock\" is a lot more descriptive than true/false.\n> Actually Jason Ling has a good point about how we should associate a lane with a module.\n\nYeah, Ed is right here. I completely forgot about GetManagedObjects - which returns all the sub-objects with all their properties. I'll also go on to say that the performance difference is roughly the same.\n\nTaking this into consideration, it's still worthwhile to discuss representing Loss of Lock (LoL) and Loss of Signal (LoS) as arrays attached to a single module object.\n\nTo me this is more usable both programmatically and through manual interaction\n\n* -script use- any scripts that want to check lane link health are trivial if you use an array but become more complex if you use GetManagedObjects\n\n* -interactive use- for those tooling around on the shell debugging things it's now a single busctl introspect to determine the link health\n\n* -programmatic use- relatively simple interface now. Just grab a property from an interface instead of GetManagedObjects and parsing through a bunch of strings. Likely not a significant performance difference; just easier to make coding errors and increases complexity of unit tests.\n\n* Also..doesn't this mean that lane objects would also need associations?\n\nI can't think of any compelling reasons to represent lanes as separate objects besides aesthetics (debatable) and precedence."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 222,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "ping! any thoughts on the response Ed?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 258,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Given that this is module-specific data, and I'm assuming has some common implementations, should this be called out in the entity-manager config data?  Do specific CMIS modules have an entity manager config?   (if there's specific logic that needs turned on per module, they probably should)."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 258,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Yes, we do plan to use entity manager config handle this. The EntityManager config file should include two pieces of information: 1) mandatory i2c location info 2) company-customized functionalities, like lane reversing, reporting additional module data\n\nIdeally, we will pack the main logic of company-customized functionalities in the daemon and only place some on/off flags in the config file. I'll share some examples later."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 258,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Yes, we do plan to use entity manager config handle this. The EntityManager config file should include two pieces of information: 1) mandatory i2c location info 2) company-customized functionalities, like lane reversing, reporting additional module data\n\nGotcha.  Just to be clear, you're going to have two config entries, one for the baseboard, that maps this GPIO to a \"has a cable module slot\" and a second one for the module itself, that instantiates the CMIS interface, right?\n\n> \n> Ideally, we will pack the main logic of company-customized functionalities in the daemon and only place some on/off flags in the config file. I'll share some examples later.\n\nYep, that's the intent of EM.  Just making sure that you're doing the probe in EM such that it's easily configurable in the future."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 258,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Ed,\n\nI just added an example for EM config file. Please take a look and let me know whether it makes sense to you. Note that I didn't put register level customization in the EM config file. Instead I planned to add them in the code."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 259,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Some things I see missing:\nWhat does the entity-manager config for a module look like?  What parameters does it give the user control over?\nAre there any requirements for inventory interfaces?  Ie, asset?  manufacturer?\nHow will modules avoid name collisions?  (if the answer is naming the devices after their entity-manager name, then this problem is solved already).\nAre there any requirements that these modules show up in redfish?  Which schemas?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 259,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, Ed,\n\nPlease see the example EM config file I just added. \n\n\"Are there any requirements for inventory interfaces?  Ie, asset?  manufacturer?\"\n[Jianqiao]: This is a good point. We currently reply on other services on the accelerator/NIC high speed data path to decide which types of module to accept, so EM config doesn't constrain this. But we can easily add such constrain in future design if needed.\n\n\u201cHow will modules avoid name collisions?\u201d\n[Jianqiao]: Yes, we will follow the entity-manager name.\n\n\"Are there any requirements that these modules show up in redfish?  Which schemas?\"\n[Jianqiao]: Redfish schema proposal: \nhttps://github.com/DMTF/Redfish/issues/4963"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 279,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 289,
            "sizeDeletions": 0
        },
        {
            "number": 13,
            "revision": "e827dd6c9d1bb67eebec2fa72dbbdc17e8331d52",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/13",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1638487796,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "FYI\n\nhttps://github.com/DMTF/Redfish/issues/4963\n\ntracks the DMTF discussion on adding CMIS support to Port.SFP"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 87,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: typo"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 87,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: able \"to\" conduct firmware upgrade\"s\""
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: configure\n\nIt does seem like \"configurate\" shows up in some dictionaries so technically correct I guess?"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Minor nit: this sentence reads a little funny. Maybe the following sentence instead (if it still holds the same meaning?)\n\nThere may be scenarios during initial platform bringup where full manual control of the module will be helpful for debugging purposes."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 110,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 166,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Question - do these interfaces exist on the DMTF Redfish Schema as well? If not, it'd be worth pursuing adding it to the schema early as it'll take a while to be added to the spec."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 166,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These are likely going to map to the Manufacturer field on the Resource interface, similar to what we do with PCIe cards."
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 166,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "https://github.com/DMTF/Redfish/issues/4963 tracks the DMTF discussion on adding CMIS support to Port.SFP"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 189,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "nit: a little awkward - maybe just:\n\nThese lane-specific flags"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 189,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 247,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "decided"
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "line": 247,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 254,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 264,
            "sizeDeletions": 0
        },
        {
            "number": 14,
            "revision": "8aa73d561b17c32c1b701a898ec004d38fa05767",
            "parents": [
                "2cbf57a8a0bb8d95b0e19b7fc27c4f95cbd8609a"
            ],
            "ref": "refs/changes/42/47442/14",
            "uploader": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "createdOn": 1642791736,
            "author": {
                "name": "Jianqiao Liu",
                "email": "jianqiaoliu@google.com",
                "username": "liu-jianqiao"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jianqiao Liu",
                        "email": "jianqiaoliu@google.com",
                        "username": "liu-jianqiao"
                    },
                    "message": "Hi, reviewers,\n\nSorry for the long delay. I've been busy with another emergent project so didn't get enough time on this one. Now I've addressed most of the remaining comments. Please take a look and let me know your thoughts. Thanks!\n\n\nJianqiao"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/cmis-compliant-module-manager.md",
                    "type": "ADDED",
                    "insertions": 277,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 287,
            "sizeDeletions": 0
        }
    ]
}