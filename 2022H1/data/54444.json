{
    "project": "openbmc/phosphor-inventory-manager",
    "branch": "master",
    "id": "I58b93a225ccf0b6b70317b2a2050a4dfa2b1b6f7",
    "number": 54444,
    "subject": "utils: Fix bad conversion for enumerations",
    "owner": {
        "name": "Santosh Puranik",
        "email": "santosh.puranik@in.ibm.com",
        "username": "santoshpuranik"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-inventory-manager/+/54444",
    "commitMessage": "utils: Fix bad conversion for enumerations\n\nWhen an interface contains both a string and an enumeration (or multiple\nof each), the variant visitor matches the wrong make specialization.\n\nThis is because a string is convertible to variant<string, enum, ...>.\nFix this by moving out all conversions from a string to the template\nspecialization that first checks if the string can be converted to\nan enumeration.\n\nThis still leaves a hole where trying to set a fully-qualified\nenumeration name to a string property will fail, but I am not sure what\nto do about that within the current PIM framework.\n\nTested: Tested Notify with enumerations on interfaces that contain both\na string and an enumeration.\n\nSigned-off-by: Santosh Puranik <santosh.puranik@in.ibm.com>\nChange-Id: I58b93a225ccf0b6b70317b2a2050a4dfa2b1b6f7\n",
    "createdOn": 1654799207,
    "lastUpdated": 1655206255,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1654799207,
            "reviewer": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1654799239,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1654799239,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1654799900,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/44736/ : SUCCESS"
        },
        {
            "timestamp": 1654803483,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1654833159,
            "reviewer": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1655106369,
            "reviewer": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1655106427,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1655106427,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1655107124,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/44868/ : SUCCESS"
        },
        {
            "timestamp": 1655138838,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1655206255,
            "reviewer": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "5483b94bcc5be7ca4ae6d8a95f1f2104c17333c7",
            "parents": [
                "07f94f0219e7c0c179ec136646aa5ea6af123b94"
            ],
            "ref": "refs/changes/44/54444/1",
            "uploader": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "createdOn": 1654799207,
            "author": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is this just an ordering problem?  Do we need to ensure that the strings all go to the end in variants?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Santosh Puranik",
                        "email": "santosh.puranik@in.ibm.com",
                        "username": "santoshpuranik"
                    },
                    "message": "Don't think so. A string is still std::is_convertible to variant<..., enum, string>.\n\nI think the real issue here is that PIM does not really know if the incoming property is an enum in sdbusplus (should it even?)\n\nSo it cannot distinguish between a string and an enum at *compile time*. I suppose we could add sometimg to the YAML parsing to create a lookup for enum type properties and use that to make this decision (on how to properly convert it to the sdbusplus variant) at runtime."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> So it cannot distinguish between a string and an enum at *compile time*.\n\nNothing can do this.  But why does it need to?\n\nThe sdbusplus code already has the ability to do message parsing into the variant based on the content.  If you order the variant parameters so that string is last it will always attempt conversion to the enum(s) first and then fall back to the string if the conversion is unsuccessful.\n\nI must be missing something on how PIM is using this specifically.  Doesn't it know the underlying type of the property based on the PDI class?  Doesn't it use something like `holds_alternative` to confirm the variant contains the desired type?  What is missing that explicitly needs to be known at compile time?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Santosh Puranik",
                        "email": "santosh.puranik@in.ibm.com",
                        "username": "santoshpuranik"
                    },
                    "message": "> Nothing can do this.  But why does it need to?\n\nLet's say we have a PDI with two properties, p1 and p2 - string and enum respectively. If one now does a `Notify` on the string property p1 with a value that is a valid enum string (\"xyz.openbmc_project.IF.p1.val1\"), the variant visitor would end up converting it to a std::variant<enum type>.\n\nWhen this is sent to the setPropertyByName sdbusplus binding, it promptly throws since the property is actually a string. Here's a snippet from a backtrace for this Notify call:\n\nbusctl call xyz.openbmc_project.Inventory.Manager /xyz/openbmc_project/inventory xyz.openbmc_project.Inventory.Manager Notify a{oa{sa{sv}}} 1 \"/xyz/openbmc_project/inventory/system/dev0\" 1 \"xyz.openbmc_project.Inventory.Item.PCIeDevice\" 1 \"DeviceType\" s \"xyz.openbmc_project.Inventory.Item.PCIeSlot.Generations.Unknown\"\n\n```\n(gdb) f 12\n#12 sdbusplus::xyz::openbmc_project::Inventory::Item::server::PCIeDevice::setPropertyByName (this=0x73fa30, _name=..., \n    val=std::variant<long, std::string, sdbusplus::xyz::openbmc_project::Inventory::Item::server::PCIeSlot::Generations> [index 2] = {...}, skipSignal=<optimized out>) at gen/xyz/openbmc_project/Inventory/Item/PCIeDevice/server.cpp:5502\n5502            auto& v = std::get<std::string>(val);\n(gdb) p val\n$1 = std::variant<long, std::string, sdbusplus::xyz::openbmc_project::Inventory::Item::server::PCIeSlot::Generations> [index 2] = {\n  sdbusplus::xyz::openbmc_project::Inventory::Item::server::PCIeSlot::Generations::Unknown}\n```\n\n> Doesn't it know the underlying type of the property based on the PDI class?\n\nNo, it only knows the incoming type from the Notify call and a variant containing all possible properties for the *interface* as a whole (<Interface>::PropertiesVariant from server.hpp for the interface). It relies on this visitor to properly convert the incoming value fro the Notify call to the right type in sdbusplus."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -7
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 7
        },
        {
            "number": 2,
            "revision": "336d4b336eec91386680d3acbb5ae0d0feed94bf",
            "parents": [
                "07f94f0219e7c0c179ec136646aa5ea6af123b94"
            ],
            "ref": "refs/changes/44/54444/2",
            "uploader": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "createdOn": 1655106369,
            "author": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -8
                }
            ],
            "sizeInsertions": 39,
            "sizeDeletions": 8
        }
    ]
}