{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I59f500a65e36c2504dfbb13d50673603c947873e",
    "number": 54292,
    "subject": "Restore AsyncResp in openhandler",
    "owner": {
        "name": "jkalinox",
        "email": "jakubx.kalinowski@intel.com",
        "username": "jkalinox"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54292",
    "commitMessage": "Restore AsyncResp in openhandler\n\nThe asyncResp class in openhandler has been introduced once again. It\nis necessary for the correct operation of the VM. This change was made\nin response to a defect that resulted from removing the asyncResp\nclass from openHandler. The problem was that when mounting images\nquickly, the mounting was not always successful. This was due to the\nfact that we started reading from the websocket even before it was\ninitialized. Handler can work asynchronously in many situations and at\nthis point there is no protection against data transfer to an empty\nhandler. Previously, in the asyncResp class destructor, the method\nresponsible for reading the websocket was run, this protected the\nwebsocket handler from reading the websocket before initialization.\nThis commit proposes to restore the asyncResp class and to use the\ncallback contained in crow::Response. This will ensure that the\nwebsocket handler is ready.\n\nCommit that introduced the defect:\nRemove AsyncResp from openHandler\n7772638ea777820234e6004ee63dc558e629e35e\n\nPrevious modification of asyncResp:\nChange the completionhandler to accept Res\n72374eb7fe42257e866dd088bc13520b0b28cffa\n\nBefore:\n\nApr 28 15:40:51 intel-obmc bmcweb[401]: (2022-04-28 15:40:51) [DEBUG \"nbd_proxy.hpp\":85] Connection opened --> Starts to read from websocket\nApr 28 15:40:51 intel-obmc bmcweb[401]: (2022-04-28 15:40:51) [ERROR \"nbd_proxy.hpp\":203] No data to write to UNIX socket --> No data on websocket\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [DEBUG \"nbd_proxy.hpp\":420] nbd-proxy.onclose(reason = '') --> Closing websocket\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [DEBUG \"nbd_proxy.hpp\":124] peerSocket->close()\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [DEBUG \"nbd_proxy.hpp\":127] std::remove(/run/virtual-media/nbd1.sock)\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [ERROR \"nbd_proxy.hpp\":163] UNIX socket: async_read_some error = Operation canceled\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [DEBUG \"nbd_proxy.hpp\":57] NbdProxyServer destructor\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [ERROR \"nbd_proxy.hpp\":135] DBus error: generic:13, cannot call unmount method\nApr 28 15:42:57 intel-obmc bmcweb[401]: (2022-04-28 15:42:57) [ERROR \"nbd_proxy.hpp\":135] DBus error: generic:13, cannot call unmount method\n\nAfter:\n\nMay 31 14:13:49 intel-obmc bmcweb[398]: (2022-05-31 14:13:49) [DEBUG \"nbd_proxy.hpp\":85] Connection opened --> Starts to read from websocket\nMay 31 14:13:49 intel-obmc bmcweb[398]: (2022-05-31 14:13:49) [DEBUG \"nbd_proxy.hpp\":423] nbd-proxy.onmessage(len = 20) --> Data exchange with websocket is successful\nMay 31 14:13:49 intel-obmc bmcweb[398]: (2022-05-31 14:13:49) [DEBUG \"nbd_proxy.hpp\":423] nbd-proxy.onmessage(len = 10)\n\nTested:\nMount image by legacy mode on slot_2\nUnmount image on slot_2\nMount image by legacy mode on slot_3\nUnmount image on slot_3\nMount image by proxy mode on slot_1\nCheck if mounted image is visible by the OS\nUnmount image on slot_1\n\nChange-Id: I59f500a65e36c2504dfbb13d50673603c947873e\nSigned-off-by: Jakub Kalinowski <JakubX.Kalinowski@intel.com>\n",
    "createdOn": 1654504503,
    "lastUpdated": 1656933347,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1654504503,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1654506001,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1654523621,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1655725897,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1655903824,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Uploaded patch set 3: Commit message was updated."
        },
        {
            "timestamp": 1656327518,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 4: Patch Set 3 was rebased"
        },
        {
            "timestamp": 1656327556,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1656327561,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1656327781,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/45892/ : FAILURE"
        },
        {
            "timestamp": 1656341552,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656415876,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656426185,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656584184,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656615515,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656687880,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1656933347,
            "reviewer": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "fced3bcc368e479c4c5758700fedf5b009f94141",
            "parents": [
                "f848367f45e16f715b1df8b07cc6747e2f4b5aba"
            ],
            "ref": "refs/changes/92/54292/1",
            "uploader": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "createdOn": 1654504503,
            "author": {
                "name": "Jakub Kalinowski",
                "email": "JakubX.Kalinowski@intel.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Follow rule 52/70, try to not break lines too early."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "jkalinox",
                        "email": "jakubx.kalinowski@intel.com",
                        "username": "jkalinox"
                    },
                    "message": "Fixed commit msg formatting to 52/70"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 402,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Do not pass shared_ptr by non const reference"
                },
                {
                    "file": "http/routing.hpp",
                    "line": 402,
                    "reviewer": {
                        "name": "jkalinox",
                        "email": "jakubx.kalinowski@intel.com",
                        "username": "jkalinox"
                    },
                    "message": "Changed to const shared_ptr"
                },
                {
                    "file": "http/websocket.hpp",
                    "line": 209,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "Considering how every openHandler works you don't need AsyncResp object. Something smaller that executed doRead in destructor should be enogh.\n\nAlso have you tried moving doRead() after executing openHandler? I mean something like this:\n\nvoid acceptDone()\n    {\n        BMCWEB_LOG_DEBUG << \"Websocket accepted connection\";\n\n        if (openHandler)\n        {\n            openHandler(*this);\n        }\n        \n        doRead();\n    }\n\nAsyncResp is not saved anywhere so it should be deleted in this scope."
                },
                {
                    "file": "http/websocket.hpp",
                    "line": 209,
                    "reviewer": {
                        "name": "jkalinox",
                        "email": "jakubx.kalinowski@intel.com",
                        "username": "jkalinox"
                    },
                    "message": "In this situation we can't move it behind openHandler because nbd_proxy works asynchronously. Moving toRead in this particular case will not fix this situation"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -5
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 90,
            "sizeDeletions": 15
        },
        {
            "number": 2,
            "revision": "c4f05e86c8092cece5bba907ed2ea6b1f42b025b",
            "parents": [
                "f848367f45e16f715b1df8b07cc6747e2f4b5aba"
            ],
            "ref": "refs/changes/92/54292/2",
            "uploader": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "createdOn": 1654523621,
            "author": {
                "name": "Jakub Kalinowski",
                "email": "JakubX.Kalinowski@intel.com",
                "username": ""
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 60,
                    "deletions": 0
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -5
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 15
        },
        {
            "number": 3,
            "revision": "145d1c4121bf164b46064eb4448f3769b0e1ed25",
            "parents": [
                "f848367f45e16f715b1df8b07cc6747e2f4b5aba"
            ],
            "ref": "refs/changes/92/54292/3",
            "uploader": {
                "name": "jkalinox",
                "email": "jakubx.kalinowski@intel.com",
                "username": "jkalinox"
            },
            "createdOn": 1655903824,
            "author": {
                "name": "Jakub Kalinowski",
                "email": "JakubX.Kalinowski@intel.com",
                "username": ""
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 60,
                    "deletions": 0
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -5
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 15
        },
        {
            "number": 4,
            "revision": "33cc48fe9ab2a20757d60c92a34e7f772762e379",
            "parents": [
                "3862cb1ddae1d44e41331c896d53d6852f545286"
            ],
            "ref": "refs/changes/92/54292/4",
            "uploader": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "createdOn": 1656327518,
            "author": {
                "name": "Jakub Kalinowski",
                "email": "JakubX.Kalinowski@intel.com",
                "username": ""
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you please go into more detail on what this issue is, using data structure and variable names from the code?\n\nReading from the websocket should be fully initialized when onconnect is called.  Normally I wouldn't take issue with this, but the issue here is that onconnect is called AFTER the connection is negotiated (ie after boost::beast::websocket::async_accept has been called) which means that the socket itself has already transitioned to websocket mode by the point that onconnect is called, so the only way to close the socket is to use close().  I'd be very surprised if errors in websocket libraries propogated properly when doing it this way.\n\nIf we must have an ability to do async operations as part of a connection operation, it should be a new method, something like beforeconnect(), so that we can modify the request before the negotiation is complete.  Does that make sense?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "jkalinox",
                        "email": "jakubx.kalinowski@intel.com",
                        "username": "jkalinox"
                    },
                    "message": "Sure, I'll try to explain from a code perspective. I'll just add that this is \na situation specific to nbd_proxy. Here we do the websocket upgrade \n\"// Perform the websocket upgrade\n        ws.async_accept(req, [this, self(shared_from_this())](\n                                 boost::system::error_code ec)\" \nThen we go to the acceptDone function, where the openHandler is started. \nBefore running the handler, we start the doRead() method which reads the \ndata for the websocket. In the case of nbd_proxy, openHandler has \nasychronous processes in it which are run in cascade. When the BMC is \nunder heavy load, the asynchronous processes in nbd_proxy do not \ncomplete their execution. In the meantime we start receiving data with \ndoRead which is aborted by an error due to the fact that the websocket \nis not yet ready to receive data (openHandler has finished its work but \nthe asynchronous processes in it haven't). To sum up upgrading to websocket can be \nasynchronous and we can't start handling data until openHandler \nfinishes. There is no mechanism here to prevent reading before the \nprocesses in nbd_proxy are finished.\nDoes that explain the problem a bit better?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> In the meantime we start receiving data with \ndoRead which is aborted by an error due to the fact that the websocket \nis not yet ready to receive data\n\nThe solution here is to put backpressure on the socket until the unix socket is opened.  We've really needed a websocket backpressure mechanism for a while now.\n\n\n> There is no mechanism here to prevent reading before the \nprocesses in nbd_proxy are finished.\n\nRight, we need to come up with one."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "jkalinox",
                        "email": "jakubx.kalinowski@intel.com",
                        "username": "jkalinox"
                    },
                    "message": "> The solution here is to put backpressure on the socket until the unix socket is opened.\n\nDid you mean here to block the webscoket until we finish the initialization? In our case this machanism that I proposed is quite sufficient. If in your opinion this is not a satisfactory solution do you have perhaps an idea or suggestion how else we can do it? Or do you see/can you apply more generic solution?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > The solution here is to put backpressure on the socket until the unix socket is opened.\n> \n> Did you mean here to block the webscoket until we finish the initialization?\n\nNo, not block, but don't accept messages callbacks (or maybe only accept the first one) until the socket is opened.  This same problem can be triggered if you reduce the bandwidth in certain portions of the code (either in the websocket or between the unix socket), you'll end up buffer overflowing because there's no ability to do backpressure.\n\nhttps://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7\n\n> In our case this machanism that I proposed is quite sufficient.\n\nIn the case where it disconnects with 404, it will return both a websocket handshake and a 404, which isn't right to do in the HTTP RFC.\n\n> If in your opinion this is not a satisfactory solution do you have perhaps an idea or suggestion how else we can do it? Or do you see/can you apply more generic solution?\n\nadd an onMessage handler that has a \"complete\" token, so backpressure can be applied on the websocket until the data has been forwarded to the unix socket.\n\n\nAlternatively, if you must have this feature, separating out a separate \"beforeOpen\" handler, that's distinct from \"onOpen\", so that we can call \"beforeOpen\" before the websocket handshake has completed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/51428\n\nIs the review where I started working on trying to add the ability to add socket backpressure on websockets.  Can you take a look?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "jkalinox",
                        "email": "jakubx.kalinowski@intel.com",
                        "username": "jkalinox"
                    },
                    "message": "The change you are working on should also apply to us. We can suspend my review for now. As far as I looked correctly in the review you mentioned above, you plan to use backpressure with a buffer?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 60,
                    "deletions": 0
                },
                {
                    "file": "include/nbd_proxy.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -5
                },
                {
                    "file": "include/vm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/dbus_monitor.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/obmc_console.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "http/routing.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "http/websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                },
                {
                    "file": "include/kvm_websocket.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 87,
            "sizeDeletions": 15
        }
    ]
}