{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I13b2fc942c9ce6c55cd7348aae1e088a3f3d7fd9",
    "number": 54945,
    "subject": "Add SSL support for http_client (EventService)",
    "owner": {
        "name": "AppaRao Puli",
        "email": "apparao.puli@intel.com",
        "username": "apuli1"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945",
    "hashtags": [],
    "createdOn": 1656372848,
    "lastUpdated": 1661293114,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1656372848,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1656372888,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1656372888,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1656373235,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/45981/ : FAILURE"
        },
        {
            "timestamp": 1656387810,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1656387864,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1656387864,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1656388394,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/45998/ : SUCCESS"
        },
        {
            "timestamp": 1656389129,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1656389243,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1656389937,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1656447077,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 2:\n\n(6 comments)"
        },
        {
            "timestamp": 1656447843,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1656609029,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1656633738,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1656705754,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657065073,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1657065142,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657065142,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1657065254,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/46431/ : FAILURE"
        },
        {
            "timestamp": 1657065855,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 3:\n\n(7 comments)"
        },
        {
            "timestamp": 1657067539,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1657067601,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657067601,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1657067917,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/46432/ : FAILURE"
        },
        {
            "timestamp": 1657130650,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1657130705,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657130705,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1657130850,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1657131064,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/46492/ : FAILURE"
        },
        {
            "timestamp": 1657132188,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(19 comments)"
        },
        {
            "timestamp": 1657132328,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1657647298,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 5:\n\n(6 comments)"
        },
        {
            "timestamp": 1657738135,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 5:\n\n(11 comments)"
        },
        {
            "timestamp": 1657740671,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1657742895,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1657742945,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 6:\n\n(8 comments)"
        },
        {
            "timestamp": 1657743344,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(4 comments)"
        },
        {
            "timestamp": 1657743595,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1657747832,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1657757438,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1657803566,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657803566,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1657804071,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/46971/ : FAILURE"
        },
        {
            "timestamp": 1658019274,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1658019308,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658019308,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1658019348,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 7:\n\n(15 comments)"
        },
        {
            "timestamp": 1658019655,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/47117/ : FAILURE"
        },
        {
            "timestamp": 1658020211,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1658020241,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658020241,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1658020733,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47118/ : SUCCESS"
        },
        {
            "timestamp": 1658075097,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(10 comments)"
        },
        {
            "timestamp": 1658092643,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1658165901,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659714454,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659718815,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659719427,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659719457,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659720165,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659722449,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659723132,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659958818,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 8:\n\n(11 comments)"
        },
        {
            "timestamp": 1659959153,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 8:\n\n(7 comments)"
        },
        {
            "timestamp": 1659960110,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1659960143,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659960143,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1659960489,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48726/ : FAILURE"
        },
        {
            "timestamp": 1659960760,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1659960818,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659960823,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1659961338,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48728/ : SUCCESS"
        },
        {
            "timestamp": 1659969316,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(5 comments)"
        },
        {
            "timestamp": 1659986592,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1659986602,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 10:\n\n(4 comments)"
        },
        {
            "timestamp": 1659986644,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659986645,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1659987240,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48753/ : SUCCESS"
        },
        {
            "timestamp": 1659991089,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 11:\n\n(7 comments)"
        },
        {
            "timestamp": 1659994952,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1660064879,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660672251,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660675405,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660685875,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660693958,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660701424,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1660726657,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1660839968,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n(2 comments)"
        },
        {
            "timestamp": 1660845612,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1660845641,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660845641,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: -Ok-To-Test"
        },
        {
            "timestamp": 1660845667,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1660845999,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/49391/ : FAILURE"
        },
        {
            "timestamp": 1660867844,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1660867883,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660867883,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: -Ok-To-Test"
        },
        {
            "timestamp": 1660868064,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 14: New patch set was added with same tree, parent, and commit message as Patch Set 13."
        },
        {
            "timestamp": 1660868097,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660868098,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/49439/ : ABORTED"
        },
        {
            "timestamp": 1660868103,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified-1 -Ok-To-Test"
        },
        {
            "timestamp": 1660868693,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49441/ : SUCCESS"
        },
        {
            "timestamp": 1660869369,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 15: Patch Set 14 was rebased."
        },
        {
            "timestamp": 1660869435,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660869435,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: -Ok-To-Test"
        },
        {
            "timestamp": 1660870740,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49447/ : SUCCESS"
        },
        {
            "timestamp": 1660872552,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 16: Patch Set 15 was rebased."
        },
        {
            "timestamp": 1660872600,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660872600,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: -Ok-To-Test"
        },
        {
            "timestamp": 1660873303,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49455/ : SUCCESS"
        },
        {
            "timestamp": 1660878135,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 17."
        },
        {
            "timestamp": 1660878195,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660878195,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: -Ok-To-Test"
        },
        {
            "timestamp": 1660878481,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/49466/ : FAILURE"
        },
        {
            "timestamp": 1660878770,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 18."
        },
        {
            "timestamp": 1660878817,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660878817,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: -Ok-To-Test"
        },
        {
            "timestamp": 1660879395,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49470/ : SUCCESS"
        },
        {
            "timestamp": 1660880866,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 19: Patch Set 18 was rebased."
        },
        {
            "timestamp": 1660880927,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660880927,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: -Ok-To-Test"
        },
        {
            "timestamp": 1660881521,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49479/ : SUCCESS"
        },
        {
            "timestamp": 1660932173,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20: Patch Set 19 was rebased"
        },
        {
            "timestamp": 1660932216,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660932216,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: -Ok-To-Test"
        },
        {
            "timestamp": 1660932738,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49531/ : SUCCESS"
        },
        {
            "timestamp": 1660933149,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(7 comments)"
        },
        {
            "timestamp": 1660933178,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1660933254,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1661190623,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1661233826,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 20:\n\n(1 comment)"
        },
        {
            "timestamp": 1661290804,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 21: Patch Set 20 was rebased"
        },
        {
            "timestamp": 1661290826,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1661290827,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: -Ok-To-Test"
        },
        {
            "timestamp": 1661291454,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 22: Patch Set 21 was rebased."
        },
        {
            "timestamp": 1661291530,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1661291530,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: -Ok-To-Test"
        },
        {
            "timestamp": 1661291531,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/49727/ : ABORTED"
        },
        {
            "timestamp": 1661292252,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49739/ : SUCCESS"
        },
        {
            "timestamp": 1661292279,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 22:\n\n(2 comments)"
        },
        {
            "timestamp": 1661293100,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 22: Code-Review+2"
        },
        {
            "timestamp": 1661293114,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "5a04094759196acedf9a3307af0bc4feccc55e6a",
            "parents": [
                "4d94272fe54c147974f86788092bbbdd950406aa"
            ],
            "ref": "refs/changes/45/54945/1",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1656372848,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 182,
                    "deletions": -56
                }
            ],
            "sizeInsertions": 214,
            "sizeDeletions": 57
        },
        {
            "number": 2,
            "revision": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
            "parents": [
                "4d94272fe54c147974f86788092bbbdd950406aa"
            ],
            "ref": "refs/changes/45/54945/2",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1656387810,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "More details needed:  How are certificates loaded?  What cipher suites are used?  Are ECC keys allowed?\n\nPlease provide more detail in your commit message."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "ED, I added more context in commit message.\n\nCurrently i checked with RootCA certificate(PEM) file and haven't checked other certificates. Also its set to default ciphers currently. I thought of checking with same cipher which we use for webserver(MozillaCiphers) and can be enhanced in future.\n\n            std::string mozillaModern = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"\n                                        \"ECDHE-RSA-AES256-GCM-SHA384:\"\n                                        \"ECDHE-ECDSA-CHACHA20-POLY1305:\"\n                                        \"ECDHE-RSA-CHACHA20-POLY1305:\"\n                                        \"ECDHE-ECDSA-AES128-GCM-SHA256:\"\n                                        \"ECDHE-RSA-AES128-GCM-SHA256:\"\n                                        \"ECDHE-ECDSA-AES256-SHA384:\"\n                                        \"ECDHE-RSA-AES256-SHA384:\"\n                                        \"ECDHE-ECDSA-AES128-SHA256:\"\n                                        \"ECDHE-RSA-AES128-SHA256\";"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "we need to do whatever the current owasp guidelines say."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Thank you Ed and Carson for comments. I will look into the comments and implementation associated changes by early next week. "
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 212,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This patchset has the same problem the last one did, it doesn't load root certificates, so there is no way to verify a client.\n\nIn the beast examples, there's a function called load_root_certificates that does this that you can look at."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 212,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "also set_verify_mode"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 212,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not to keep piling on, you're also missing this block of code (stolen from the examples)\n\n        // Set SNI Hostname (many hosts need this to handshake successfully)\n        if(! SSL_set_tlsext_host_name(...., host))\n        {\n            ...\n        }\n        \n        \nLots of webservers these days have SNI verification turned on, so you'll need this as well"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 212,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Thanks Ed for pointers. I addressed all ( Certificate load, verify mode setting and SNI hostname setting) the comments."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Why do we need to ignore this error in general? Why does it not matter when SSL is not enabled?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It's pretty common among https servers to just sever the connection when a request is complete, and not do the proper TLS shutdown.  Generally the error is benign, and can be ignored.  In theory we could log it, but so many servers do it that it's not really worth thinking about unless it caused a real error in the http request (which would have a different code)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 405,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Do we need the timer since we're not doing a read or write operation?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 405,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  Ideally we should be just using the timer here in all cases.  Also, not relying on tcp_stream makes it faster and saves a ton of binary space:\n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/51943"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 405,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Agree with both of you. This can be taken as separate commit( As Ed already started on it). If you are  ok, I can take 51943 commit forward and bring it out of WIP."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 405,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Agree with both of you. This can be taken as separate commit( As Ed already started on it). If you are  ok, I can take 51943 commit forward and bring it out of WIP.\n\nFeel free to take it over.  I believe the code is mostly correct, just needs some testing (and likely debugging)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 405,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 416,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Why do we not need to return when there's an error like we do below without SSL enabled?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 416,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Same as above. Just on safer side, close connection  is attempted in either case."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 416,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Leaving comment open to give Carson a chance to accept the statement."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 416,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I'm alright with removing the return here, but it's because I've found that the return statement in the code without SSL enabled can break the flow in certain situations."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 474,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Why do we not need to return when there's an error like we do below without SSL enabled?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 474,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Since we are closing the connection, If there is error in shutdown case also, We need to make sure connection is closed. So going ahead with close() call even in error cases(just on safer side)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 826,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "You're not accounting for the use of SSL when sending the message.  Connections stay in the pool after they are created and the same pool can be used by multiple entities.  It could be the case that a connection was previously created without SSL and now you are attempting to use it to send a message with SSL or vice-versa.\n\nWhen a connection is grabbed you need to make sure that it and the message match in terms of if SSL is enabled.  If they don't match then the connection needs to be reconfigured before the message is sent."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 826,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Connections remain in the pool once they've been created.  An existing connection could have been previously created without SSL enabled and now you're trying to send a message using SSL or vice-versa.\n\nYou need to make sure that the message to be sent and the connection grabbed agree in terms of using SSL.  If they don't then the connection needs to be reconfigured to match as part of the process."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 826,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Addressed."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 826,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Yeah, Good catch. I missed this case. Thank you.\nCorrected the code now."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 826,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Sorry, I'm not sure how I ended up flagging this same thing twice without realizing it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 182,
                    "deletions": -56
                }
            ],
            "sizeInsertions": 214,
            "sizeDeletions": 57
        },
        {
            "number": 3,
            "revision": "6913eab342dcc4bf4509ce1982abd11cdec7f339",
            "parents": [
                "514ce6802820226ff73eb230a890a0af9c276c0f"
            ],
            "ref": "refs/changes/45/54945/3",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1657065073,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Addressed all comments."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 38,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 218,
                    "deletions": -61
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 271,
            "sizeDeletions": 62
        },
        {
            "number": 4,
            "revision": "33b51e81be7c40521a4fe41f5e4adcb843b21af9",
            "parents": [
                "514ce6802820226ff73eb230a890a0af9c276c0f"
            ],
            "ref": "refs/changes/45/54945/4",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1657067539,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 38,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 219,
                    "deletions": -59
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 272,
            "sizeDeletions": 60
        },
        {
            "number": 5,
            "revision": "d739445adffb056cbb753730656f80ccc367b010",
            "parents": [
                "40d799e6fef1b39e35b4e0a0d1f5e44cb92a2de5"
            ],
            "ref": "refs/changes/45/54945/5",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1657130650,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "THis is using the DMTF server example?  If so, please call that out."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 27,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Updated commit message with more details."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 30,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You will need a test that adds both simultaneously;  As-written, I don't think this code will handle it properly."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 30,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "bmcweb_config.h.in",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please don't make this configurable, or, if it must be configurable, please call out the use case for why a platform would need to configure it in your commit message."
                },
                {
                    "file": "bmcweb_config.h.in",
                    "line": 18,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Its more than platform, Different OEM might look to store certificates in different area's. I can add same note in commit message."
                },
                {
                    "file": "bmcweb_config.h.in",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Different OEM might look to store certificates in different area's\n\nI'm not interested in supporting multiple locations.  If OEMs want to have custom certificates, integrate with phosphor-certificate-manager and have it own the cert."
                },
                {
                    "file": "bmcweb_config.h.in",
                    "line": 18,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Changed it to single location and removed compile option."
                },
                {
                    "file": "bmcweb_config.h.in",
                    "line": 18,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please just rely on // NOLINTNEXTLINE(error-type) for resolving this as we have in other places.  Having out own copy of this doesn't seem like it helps us here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "I tried multiple ways ways of using but no luck :( \n\nAdding \"// NOLINTNEXTLINE(cppcoreguidelines-pro-type-old-style-cast)\" and \"// NOLINTNEXTLINE(*)\" and \"// NOLINT(*)\" but still seeing same issue. Not sure whats wrong, any pointer?\n\nERROR: \nerror: use of old-style cast to 'void*' [-Werror=old-style-cast]"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Maybe try NOLINTBEGIN and NOLINTEND, which got added in clang-tidy-14.\n\nPS, please don't resolve comments if they haven't been resolved.  It helps maintainers to review."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "I tried that as well with no luck (Same error). For now, I left  the code with \"_local\" define. Can you please provide any further suggestion? Thanks for continuous support on this.\n\nSure, I will make sure its open till you agree on it."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Maybe just inline this then with a comment about the above?  #defines tend to be difficult to remove once in place."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 58,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 154,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "no tls 1.3?\n\nCan you please make sure this conforms to the owasp TLS recommendations (as the documentation asks for).\n\nAlso, please document these design decisions (including the links to the backing owasp recommendations) in your commit message."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 154,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Yeah, This is initial commit with tls1.2, I will look at the OWSAP and enhance the security as part of separate commit"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 154,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Per our coding standard, that commit will need to go in the same time.  If you're willing to maintain this patch series in the meantime, that would be fine, but I'm not going to merge a default behavior that is known to not obey the security rules.  If you disagree with the security rules, or owasp recommendations, I'm happy to have that discussion."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 154,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done, I added code to support only TLS v1.2 & TLS v1.3 and explicitly disabled SSLv2/v3/TLSv1/TLS v1.1\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html\nhttps://www.boost.org/doc/libs/1_73_0/doc/html/boost_asio/reference/ssl__context.html"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 154,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 193,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If we do this codepath in the constructor, we can remove the need for useSSL entirely, and just rely on\n\nif (sslConn)\n\nWe don't use any of the content from endpointList to construct the ctx, so that seems useful?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 193,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "We need to set the connection context with all required options and create ssl_stream with tcp_stream before doing every connection. Else we are ending up on asio.ssl error."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 193,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not sure what one has to do with another.  The context can be created in the constructor."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 193,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Moved prepare context section to constructor and used context for differentiating the SSL connection and to create ssl_stream."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 193,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 197,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Common error #5\n\nThere lots of error paths here.  Please account for them"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 197,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "common error #5"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 200,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 206,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "possible nullptr dereference if host is empty.\n\nalso, please use .c_str()."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 206,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If loading the ssl context fails, should we even retry?  There's no recovery that I'm aware of if the certs fail to load?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Yeah, ideally no recovery but i am just following fail safe path of retry after retry interval and set connection to suspended/terminate states."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Retrying is no more safe if the cert isn't available, so I don't understand your answer."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done, Set the state to sslInitFailed and correspondingly, state will be transitioned to suspended/terminated depending on subscription settings."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 282,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "not a problem in your patchset, but size_t is generally taken by value, not reference."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 282,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 294,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can this move to a member method instead of a lambda?  That's the pattern we've been trying to move to.\n\nSomething like\n\nvoid afterConnect(std::shared_ptr<ConnectionInfo> connection)\n\n\nthen you would use it with:\n\nboost::beast::http::async_write(*sslConn, req, std::bind_front(this, shared_from_this());"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 294,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "I think this is aligned with other patterns, like:\n\nOn success cases (In side lamda) -> doResolve()  calls  doConnect()  Calls -> doHandShake() -> sendMessage() -> recvMessage() -> Calls callback()"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 294,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Point still stands, this is a pattern that we're trying to get rid of because it leads to really confusing compile errors, log messages, and stack traces.  I'm not interested in supporting patchsets that make the problem worse.\n\nIf you need me to make this mod for you, I'm happy to if you're still willing to test."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 294,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "ED, Thanks for offering help, I misunderstood your first comment, my bad. \n\nNow its moved to member function. There is one more existing code which need to be moved doResolvee() which i can move it in separate patch( Since its not touched in this)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 294,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 467,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "once the async_shutdown is complete, you still need to call conn.socket().shutdown(boost::asio::ip::tcp::socket::shutdown_both,\n                                   ec);\n                                   \nas you do on the lines below."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 467,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 472,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "both of these code paths have very similar code;  Can they be combined?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 472,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 502,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This whole function is pretty much a duplicate of the above, which, when it was 10 lines of code duplicated was probably fine, but now that its much longer, is there any way to deduplicate the paths?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 502,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm a little confused the connection pool would have a single bool in it for \"useSSL\".  Isn't the SSL state per connection?  Do we need another vector of httpsConnections similar to the http connection poll we have on 584?\n\n\nSaid another way, if I have one subscription that uses SSL and one that doesn't, this will break.  PLease add that to your tests."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "+1 on the bool needing to be per connection instead of the pool as a whole.  Account for this in the testing.\n\n> Do we need another vector of httpsConnections similar to the http connection poll we have on 584?\nIs it common to have separate pools for http and https?  Also at that point we'd effectively have 8 connections to a single destination.  We had a discussion around limiting the pool size back on the refactoring CL https://gerrit.openbmc.org/c/openbmc/bmcweb/+/52281/comments/56c205dc_6fa6f52e"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "The subscriptions are maintained in different map that is connectionPools.\n\nEach subscription can have map entry in connectionPools with key as IP:PORT. So ideally speaking with this itself both http & https works fine( Reason: Since we are using IP:port as key to connectionPools which can't be same for both http & https - Either IP or port has be change)\n\nBut there is an issue what if two subscriptions has different paths on same IP:PORT ( example: Subscription 1: https://10.0.0.1:4000/path1 and subscription 2: https://10.0.0.1:4000/path2 - Note both can have there own filters) -  So i am planning to change logic in such a way that Key will be passed directly from EventServiceManager ( can use same subscription ID) as part of sendData(...) call. This way all key's will be unique. But planning to do this as separate commit."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sure, let me know when that commit is ready and we can stack it on top of this one, but they'll need to merge together.\n\nThe behavior you describe seems pretty likely to what a test script would do, or if A user mapped to localhost, so it's not something I'm comfortable living with in master for the moment."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> The subscriptions are maintained in different map that is connectionPools.\nNo we have a connection pool for each IP:PORT pair and each connection pool can have at most 4 connections.  This way we can have N different subscriptions using the same IP:PORT and now create unique connections or pools for each one.\n\n> But there is an issue what if two subscriptions has different paths on same IP:PORT\nThat should not be an issue.  The public sendData() function takes IP, Port, and destUri as arguments.  The IP:Port is used to choose the connection pool and then a conection within a pool sends to the destUri.  \n\n> So i am planning to change logic in such a way that Key will be passed directly from EventServiceManager ( can use same subscription ID) as part of sendData(...) call. This way all key's will be unique. But planning to do this as separate commit.\nDo not make this change.  In your example we want both subscriptions to use the same connection pool.  I don't think it's a good idea to let services like EventServiceManager create exclusive pools via a unique subscription ID.  We want these pools to be shared across different services.  Right now Redfish Aggregation is the only other entity that will send HTTP requests, but there could be more in the future.\n\nIf subscriptions are somehow being created as their own connection pool then that is a bug that needs to be fixed rather than standardizing that behavior."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "> > The subscriptions are maintained in different map that is connectionPools.\n> No we have a connection pool for each IP:PORT pair and each connection pool can have at most 4 connections.  This way we can have N different subscriptions using the same IP:PORT and now create unique connections or pools for each one.\n> \n> > But there is an issue what if two subscriptions has different paths on same IP:PORT\n> That should not be an issue.  The public sendData() function takes IP, Port, and destUri as arguments.  The IP:Port is used to choose the connection pool and then a conection within a pool sends to the destUri.  \n> \n> > So i am planning to change logic in such a way that Key will be passed directly from EventServiceManager ( can use same subscription ID) as part of sendData(...) call. This way all key's will be unique. But planning to do this as separate commit.\n> Do not make this change.  In your example we want both subscriptions to use the same connection pool.  I don't think it's a good idea to let services like EventServiceManager create exclusive pools via a unique subscription ID.  We want these pools to be shared across different services.  Right now Redfish Aggregation is the only other entity that will send HTTP requests, but there could be more in the future.\n> \n> If subscriptions are somehow being created as their own connection pool then that is a bug that needs to be fixed rather than standardizing that behavior.\n\nYeah, I see and looks like the code is fine as is even for SSL. As i said before, each IP:PORT will have its own pool of connections and in that pool we can't have SSL & Non SSL both together( Reason: Either IP or PORT one of it will change between http or https). So we are good in handling both connections pool. I checked a case where https://<IP>:<https_port> & http://<SameIP>:<http_port> and both works. Also tested with multiple subscription(different path) and that also works fine."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> Yeah, I see and looks like the code is fine as is even for SSL. As i said before, each IP:PORT will have its own pool of connections and in that pool we can't have SSL & Non SSL both together( Reason: Either IP or PORT one of it will change between http or https)\nI don't think we can rely on this by itself.  The connection pools are meant to be shared by entities beyond just EventServiceManager.  EventServiceManager might be using a specific IP:PORT pair as an SSL connection, but that does not mean something else will not attempt to use the same IP:PORT pair as non-SSL.\n\n>  I checked a case where https://<IP>:<https_port> & http://<SameIP>:<http_port> and both works. Also tested with multiple subscription(different path) and that also works fine.\nWhat about a case where a subscription is created for https://<IP>:<https_port> and then one is created for http://<IP>:<https_port>?  Maybe that shouldn't happen in practice, but I do not think it's a good idea to rely on that assumption rather than handling the possibility.\n\nFor example, let's say a subscription is supposed to be created as https, but for the first attempt it is accidentally created as http i.e (http://<IP>:<https_port>).  The subscription is deleted and then a new subscription is created using https (i.e. https://<same_IP>:<same_https_port>).  The connection pool was originally created without SSL so any messages sent by the subscription would not use SSL, even though the subscription was recreated as https."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "> > Yeah, I see and looks like the code is fine as is even for SSL. As i said before, each IP:PORT will have its own pool of connections and in that pool we can't have SSL & Non SSL both together( Reason: Either IP or PORT one of it will change between http or https)\n> I don't think we can rely on this by itself.  The connection pools are meant to be shared by entities beyond just EventServiceManager.  EventServiceManager might be using a specific IP:PORT pair as an SSL connection, but that does not mean something else will not attempt to use the same IP:PORT pair as non-SSL.\n>\nI agree connection pools can be beyond EventServiceManager( Even though its not today) but even then IP:PORT key can be unique for any such( Listeners can't run http & https with same IP:PORt combination). \n> >  I checked a case where https://<IP>:<https_port> & http://<SameIP>:<http_port> and both works. Also tested with multiple subscription(different path) and that also works fine.\n> What about a case where a subscription is created for https://<IP>:<https_port> and then one is created for http://<IP>:<https_port>?  Maybe that shouldn't happen in practice, but I do not think it's a good idea to rely on that assumption rather than handling the possibility.\n> \n> For example, let's say a subscription is supposed to be created as https, but for the first attempt it is accidentally created as http i.e (http://<IP>:<https_port>).  The subscription is deleted and then a new subscription is created using https (i.e. https://<same_IP>:<same_https_port>).  The connection pool was originally created without SSL so any messages sent by the subscription would not use SSL, even though the subscription was recreated as https.\n\nIdeally speaking when ever the subscription is created, it should be added to pool ( This is working fine) and when ever subscription is deleted, It should be removed form pool. But today, I don't see deleting subscriptions is removing entry from pool. So Its existing problem irrespective of this SSL support patch. So that will be addressed as separate commit."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> ( Listeners can't run http & https with same IP:PORt combination). \n\nThey can, although it's far less common."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Do you mean one can run http & https on same port number on same system? I don't think that is possible. Both requires its known port."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> I agree connection pools can be beyond EventServiceManager( Even though its not today) but even then IP:PORT key can be unique for any such( Listeners can't run http & https with same IP:PORt combination). \nEd already pointed out they can, but even if you disregard that, this client is supposed to play nice with multiple entities using it.  It does this in its current state.  This patch shouldn't impact that capability.\n\n> Ideally speaking when ever the subscription is created, it should be added to pool ( This is working fine) and when ever subscription is deleted, It should be removed form pool. \nWhen a subscription is created and it sends its first message a pool is created if one does not already exist for the associated IP:PORT.  Connections are added to the pool whenever we need to send multiple messages at a time to that IP:PORT.  You can have multiple subscriptions use the same IP:PORT so you wouldn't want to delete a pool unless you can verify that there is nothing else in the system using the pool.\n\n> But today, I don't see deleting subscriptions is removing entry from pool. So Its existing problem irrespective of this SSL support patch. So that will be addressed as separate commit.\nIt is currently not a problem if deleting subscriptions does not delete the pool.  A new subscription could later be created and reuse the pool.  There is no break in functionality.\n\nThis change does introduce the issue where a connection pool cannot be reused depending on the use of SSL.  That needs to be fixed as part of this patch by allowing a pool to contain both SSL and non-SSL connections."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "> > I agree connection pools can be beyond EventServiceManager( Even though its not today) but even then IP:PORT key can be unique for any such( Listeners can't run http & https with same IP:PORt combination). \n> Ed already pointed out they can, but even if you disregard that, this client is supposed to play nice with multiple entities using it.  It does this in its current state.  This patch shouldn't impact that capability.\n> \n> > Ideally speaking when ever the subscription is created, it should be added to pool ( This is working fine) and when ever subscription is deleted, It should be removed form pool. \n> When a subscription is created and it sends its first message a pool is created if one does not already exist for the associated IP:PORT.  Connections are added to the pool whenever we need to send multiple messages at a time to that IP:PORT.  You can have multiple subscriptions use the same IP:PORT so you wouldn't want to delete a pool unless you can verify that there is nothing else in the system using the pool.\n> \n> > But today, I don't see deleting subscriptions is removing entry from pool. So Its existing problem irrespective of this SSL support patch. So that will be addressed as separate commit.\n> It is currently not a problem if deleting subscriptions does not delete the pool.  A new subscription could later be created and reuse the pool.  There is no break in functionality.\n> \nNot connection pool when subscription is created can create the issue say if someone creates x (maxPoolSize i.e 4) subscriptions and delete them, Then connection pool is exhausted and will lead to add all request to queue and eventually fill up resources.\n> This change does introduce the issue where a connection pool cannot be reused depending on the use of SSL.  That needs to be fixed as part of this patch by allowing a pool to contain both SSL and non-SSL connections.\n\nI couldn't think of a case where http & https uses same IP:PORT combination and lead to above said issue. But I agree that its better to differentiate SSL & Non-SSL. One way to do so by using common connection pool( Not having separate pool for SSL) is expand the map key from IP:PORT to http/https://IP:PORT. Please do suggest if you thought of any other method."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> Not connection pool when subscription is created can create the issue say if someone creates x (maxPoolSize i.e 4) subscriptions and delete them, Then connection pool is exhausted and will lead to add all request to queue and eventually fill up resources.\nI don't entirely understand what you are trying to say.  We don't delete pools so there's a possibility of a bad actor being able to create enough subscriptions to unique IP:PORT that we run out of memory due to creating a new connection pool for each.  However, that issue is completely separate from my concerns about how this patch handle SSL and non-SSL for the same connection pool.\n\nA pool can hold up to 4 connections.  I can create 4 subscriptions using the same IP:PORT.  I can delete and recreate those subscription as many times as I want and I won't run out of resources between that same connection pool will get reused each time.\n\nWith your path I can create 4 subscriptions using non-SSL IP:PORT.  If I delete those subscriptions and then create 4 subscriptions using SSL with the same IP:PORT then none of those subscriptions will send correctly because the IP:PORT pool is already full of non-SSL connections and the pool itself only supports non-SSL connections.\n\n> I couldn't think of a case where http & https uses same IP:PORT combination and lead to above said issue. But I agree that its better to differentiate SSL & Non-SSL.\nIt might be unlikely, but it is a possibility.  With different entities able to share the client and connection pool we can't assume that they all coordinate to designate specific IP:PORT as SSL or non-SSL.\n\n> One way to do so by using common connection pool( Not having separate pool for SSL) is expand the map key from IP:PORT to http/https://IP:PORT. Please do suggest if you thought of any other method\nExpanding the map key would in fact do the opposite and create separate pools for SSL.\n\nMy thought is we still only want to support 4 simultaneous connections for each IP:PORT (i.e. connection pool).  You would make these changes:\n- Remove useSSL from ConnectionPool.  We only need it in the individual connections to track if it's to be used for SSL or non-SSL communication.\n- In ConnectionInfo it looks like there are already separate connection objects for SSL and non-SSL.  It should be straightforward enough to modify doConnect() to choose the appropriate connection depending on the state of useSSL.\n- All of the ConnectionInfo methods that are common to the SSL and non-SSL flow should rely on useSSL to decide which one to use.\n- When grabbing an idle connection to send a message you must make sure the connection and message agree in terms of using SSL.\n- If you can't find an idle connection that matches then take one of the idle connections and modify it to use the type of connection that matches the message.  Make sure you close out the existing connection first if it's active due to being \"keep alive\".\nI have pointed out the location for the latter two points in other comments."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "> > Not connection pool when subscription is created can create the issue say if someone creates x (maxPoolSize i.e 4) subscriptions and delete them, Then connection pool is exhausted and will lead to add all request to queue and eventually fill up resources.\n> I don't entirely understand what you are trying to say.  We don't delete pools so there's a possibility of a bad actor being able to create enough subscriptions to unique IP:PORT that we run out of memory due to creating a new connection pool for each.  However, that issue is completely separate from my concerns about how this patch handle SSL and non-SSL for the same connection pool.\n> \n> A pool can hold up to 4 connections.  I can create 4 subscriptions using the same IP:PORT.  I can delete and recreate those subscription as many times as I want and I won't run out of resources between that same connection pool will get reused each time.\n> \n> With your path I can create 4 subscriptions using non-SSL IP:PORT.  If I delete those subscriptions and then create 4 subscriptions using SSL with the same IP:PORT then none of those subscriptions will send correctly because the IP:PORT pool is already full of non-SSL connections and the pool itself only supports non-SSL connections.\n> \n> > I couldn't think of a case where http & https uses same IP:PORT combination and lead to above said issue. But I agree that its better to differentiate SSL & Non-SSL.\n> It might be unlikely, but it is a possibility.  With different entities able to share the client and connection pool we can't assume that they all coordinate to designate specific IP:PORT as SSL or non-SSL.\n> \n> > One way to do so by using common connection pool( Not having separate pool for SSL) is expand the map key from IP:PORT to http/https://IP:PORT. Please do suggest if you thought of any other method\n> Expanding the map key would in fact do the opposite and create separate pools for SSL.\nYes, It will have separate pools. Do you see any downside for having separate pools for SSL?\n> \n> My thought is we still only want to support 4 simultaneous connections for each IP:PORT (i.e. connection pool).  You would make these changes:\n> - Remove useSSL from ConnectionPool.  We only need it in the individual connections to track if it's to be used for SSL or non-SSL communication.\n> - In ConnectionInfo it looks like there are already separate connection objects for SSL and non-SSL.  It should be straightforward enough to modify doConnect() to choose the appropriate connection depending on the state of useSSL.\n> - All of the ConnectionInfo methods that are common to the SSL and non-SSL flow should rely on useSSL to decide which one to use.\n> - When grabbing an idle connection to send a message you must make sure the connection and message agree in terms of using SSL.\n> - If you can't find an idle connection that matches then take one of the idle connections and modify it to use the type of connection that matches the message.  Make sure you close out the existing connection first if it's active due to being \"keep alive\".\nThe issues in above two points is what i am trying to resolve by having separate pool for SSL instead of mixing SSL & non-SSL in single. In that case, We don't need to decide it during run time and have extra logic to grab idle connections and close them if not matches and start connection from begging.\n> I have pointed out the location for the latter two points in other comments."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Having a separate variable for SSL connections versus not seems reasonable to me.\n\nCarson?  Does that address your concerns?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> The issues in above two points is what i am trying to resolve by having separate pool for SSL instead of mixing SSL & non-SSL in single.\nHaving completely separate pools (i.e. ConnectionPool objects) for SSL and non-SSL feels very wasteful since each individual connection object will already have full support to be used as SSL or non-SSL.\n\n> In that case, We don't need to decide it during run time and have extra logic to grab idle connections and close them if not matches and start connection from begging\nI don't see this as much extra work.  We already have logic to grab idle connections from the vector and conditionally handle if the connection is keep alive or not.  This would just be adding another check when determining if a given connection is available to send a message.\n\nPlus we already have to open and close a connection as part of each message sending event when the destination is not keep alive enabled so closing and then opening an idle connection to swap between SSL and non-SSL doesn't seem too out of the ordinary.  Needing to swap between SSL and non-SSL is more of an edge case that we need to support rather than a regular usecase so the number of swaps should be relatively minor.\n\nWhen grabbing a new connection we could prioritize it so that we won't always take the first one we find.  Instead we'd prioritize one that matches in terms of SSL/non-SSL.  If one does not exist then we'll swap one of the idle connection in the pool.\n\n> Having a separate variable for SSL connections versus not seems reasonable to me.\n> \n> Carson?  Does that address your concerns?\nYes if you mean that in support of what I proposed in my previous comment.  I don't want to allow more than 4 active connections to a specific IP:PORT pair.  We'll double that number if have separate pools for SSL and non-SSL connections.  We avoid that if we have a single connection pool per IP:PORT pair and we can reconfigure individual connections as needed between SSL and non-SSL.\n\nPlease correct me if you meant that in a different way."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > The issues in above two points is what i am trying to resolve by having separate pool for SSL instead of mixing SSL & non-SSL in single.\n> Having completely separate pools (i.e. ConnectionPool objects) for SSL and non-SSL feels very wasteful since each individual connection object will already have full support to be used as SSL or non-SSL.\n\nI'm not following this.  A connection object is going to be either TLS or not.  It can't switch mid-stream.  The only difference is that some are going to have a cipher suite set up and have an ssl_stream object, and some wont.  I really don't want to be changing TLS to non on the fly, and realistically, each connection doesn't have that much state that it tracks, so constructing a new one is relatively cheap.\n\n> \n> > In that case, We don't need to decide it during run time and have extra logic to grab idle connections and close them if not matches and start connection from begging\n> I don't see this as much extra work.  We already have logic to grab idle connections from the vector and conditionally handle if the connection is keep alive or not.  This would just be adding another check when determining if a given connection is available to send a message.\n\nAlso not following this.  Isn't it better to just categorize these?  Realistically, a given url/port is going to support TLS or not, so it's not like we're losing out on anything in any \"normal\" case.  In theory I could have a hybrid port that supports both, but no bmc I'm aware of does that.\n\n> \n> Plus we already have to open and close a connection as part of each message sending event when the destination is not keep alive enabled so closing and then opening an idle connection to swap between SSL and non-SSL doesn't seem too out of the ordinary.\n>  Needing to swap between SSL and non-SSL is more of an edge case that we need to support rather than a regular usecase so the number of swaps should be relatively minor.\n\nThis!  This is for sure an edge case, so why take on the complexity of swapping?\n\nAlso, FWIW, I would expect a number of systems to compile with only HTTPS or only HTTP, so in the base case, this isn't really an issue.\n\n> \n> When grabbing a new connection we could prioritize it so that we won't always take the first one we find.  Instead we'd prioritize one that matches in terms of SSL/non-SSL.  If one does not exist then we'll swap one of the idle connection in the pool.\n\nBut...... if we do that, why not just make the keys on the connection map have that data, so we do the lookup once, instead of doing the lookup, then trying to hunt down a connection that meets our needs.  I don't think there's any case where we'd say \"either TLS or non tls\", right?\n\n> \n> > Having a separate variable for SSL connections versus not seems reasonable to me.\n> > \n> > Carson?  Does that address your concerns?\n> Yes if you mean that in support of what I proposed in my previous comment.  I don't want to allow more than 4 active connections to a specific IP:PORT pair.  We'll double that number if have separate pools for SSL and non-SSL connections. \n\nDouble is 8, which is still pretty reasonable, and the likelihood that a user has both HTTP and HTTPS running on the same port is essentially zero.\n\n> We avoid that if we have a single connection pool per IP:PORT pair and we can reconfigure individual connections as needed between SSL and non-SSL.\n> \n> Please correct me if you meant that in a different way.\n\nNo, I think you got it, but I'm still kind of with Appu here.  If we encode the connection \"requirements\" in the map we look stuff up on, in the worst case (which will probably never happen in the real world) we get 8 connections, which is still not that bad."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> > Plus we already have to open and close a connection as part of each message sending event when the destination is not keep alive enabled so closing and then opening an idle connection to swap between SSL and non-SSL doesn't seem too out of the ordinary.\n> > Needing to swap between SSL and non-SSL is more of an edge case that we need to support rather than a regular usecase so the number of swaps should be relatively minor.\n> This!  This is for sure an edge case, so why take on the complexity of swapping?\n>\n> Also, FWIW, I would expect a number of systems to compile with only HTTPS or only HTTP, so in the base case, this isn't really an issue.\nIf we don't handle this then we are introducing a bug where you can lock a IP:PORT as only being used for SSL or non-SSL.  W/o this patch there isn't a way to lock a user out of being able to correctly send a message to a destination.  I don't want the patch to introduce this bug. In its current state the is only using the IP:PORT as the key for creating new connection pools.\n\n> Double is 8, which is still pretty reasonable, and the likelihood that a user has both HTTP and HTTPS running on the same port is essentially zero.\n> ...in the worst case (which will probably never happen in the real world) we get 8 connections, which is still not that bad\nAlright so if Ed's good with 8 then the simplest way forward would be to just have separate pools for SSL and non-SSL.  Connection pools need to account for SSL when they are created.  This will also cover my earlier concerns around locking IP:PORT to be SSL or non-SSL.  I'll mark where to do that in a separate comment."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Thanks for agreement. This option, i tried in past and it works as expected. This way we will have isolated pool for SSL and Non-SSL. only down side is instead of 4 connections, we may have double connections but that too in corner cases( Only user errors - Ideally there won't be any Listener who work both SSL & Non-SSL on same IP:PORT combination).\n\nThanks Ed and Carson for inputs and having patience to respond on such long discussions."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> If we don't handle this then we are introducing a bug where you can lock a IP:PORT as only being used for SSL or non-SSL.\n\nI agree, we need to handle it, I'm just saying handle it in the connection pool.\n\nTo be more concrete, I mean taking this variable here:\nhttps://github.com/openbmc/bmcweb/blob/17dcc312e534b33c2ea18a1dbf287e30ea79cfb5/http/http_client.hpp#L627\n\nAnd splitting it into:\n    std::unordered_map<std::string, std::shared_ptr<ConnectionPool>>\n        httpConnectionPools;\n    std::unordered_map<std::string, std::shared_ptr<ConnectionPool>>\n        httpsConnectionPools;\n        \nThen using the TLS-ness of the request in the lookup here:\nhttps://github.com/openbmc/bmcweb/blob/17dcc312e534b33c2ea18a1dbf287e30ea79cfb5/http/http_client.hpp#L682\n\nAlternatively, on the aformentioned line, we could also just include the \"http/https\" as part of the clientKey, which would give the same result.  (note after I wrote this commment, I see you proposed the same below.  We're on the same page I think)\n\nI think that would mean that we can no longer get a mixup, right?\n\n\n> In its current state the is only using the IP:PORT as the key for creating new connection pools.\n\nCompletely agree, as-written, we have a bug that needs resolved.\n\n> only down side is instead of 4 connections, we may have double connections but that too in corner case\n\nTo reiterate, we go from 4 to 8 connections, and it's a corner case that will probably never be hit in practice.  I'm ok with this tradeoff."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 583,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 604,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "std::move on a bool does nothing.  Please remove."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 604,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "You first need to make sure the next message in the queue matches the current connection in terms of using SSL.  If they do not then you need to ignore if the server is keepAlive and close the connection before reconfiguring the connection and sending the next message."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Same as explained at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/8e9e1133_2df87256\n\nDo let me know if any disagreement."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "See my above response"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "See my response. https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/09060fca_d5151bb2\n\nModified code with parsing useSSL makes sslConn and existing connection pool works for both SSL & non-SSL cases."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Tracked in other comment which is mentioned above, So closing this."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> Modified code with parsing useSSL makes sslConn and existing connection pool works for both SSL & non-SSL cases.\nThe connection pool forces all connections to be either SSL or non-SSL.  It needs to allow a mix of the two such as through the ability to reconfigure individual connections to switch from SSL to non-SSL or vice versa.\n\nThe issue you linked to has not been resolved.  My initial comment in this thread directly depends on the outcome of that linked issue.  Please do not close this thread before that issue's been resolved."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 651,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think we solved this in the other comment thread, and the clientKey now includes ssl or not, so I'm going to close this.  Please reopen if this is still an issue."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 669,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why do we need a separate bool for this?  doesn't destUri contain http or https?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 669,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "destUri is contains the path not the full URI to extract it. It should have been name destPath instead of destUri.  I will correct name in separate commit."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 669,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "This is where you need to make sure the message and existing connection agree in terms of using SSL.  If they do not then you need to reconfigure the connection.  \n\nIf the connection is idle then you need to make sure you close it first"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Not clear on why we need to make check message and existing connection again here. Already we are adding entry for each subscription in connectionPool using IP & port . So only if the the send request is for specific subscription( Checked via unique key in connection pool) and its sent to the connections established(No mismatch of http-https there) for that specific subscription. So i don't see need for cross verification of SSL here.\n\nRegarding idle state checking, We are already doing this here as we mapped conn(tcp_stream) with ssl_stream during construction of sslConn, So using state from tcp_stream connection is enough that is we are already doing in this highlighted code."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "As explained above, a connection pool only exists for a given IP:Port pair.  Each connection within the pool is configured to send to that specific IP:Port pair. They just exist within the pool as a vector of connections.\n\nThere is no distinction made about what entity created the pool in the first place.  Different subscription that use the same IP:Port will share the same connection pool."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Same as above: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/09060fca_d5151bb2"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Tracked in above comment."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "The issue you linked to has not been resolved.  My initial comment in this thread directly depends on the outcome of that linked issue.  Please do not close this thread until it has been resolved."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 731,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think this is solved now that ConnectionInfo is unique to SSL vs non-ssl"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 743,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "You don't need to use move since this is a bool"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 743,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "meson_options.txt",
                    "line": 307,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think this is where phosphor-certificate-manager stores these, is it?"
                },
                {
                    "file": "meson_options.txt",
                    "line": 307,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "All SSL certificates are stored here so added it as default patch. I will change the default path."
                },
                {
                    "file": "meson_options.txt",
                    "line": 307,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 227,
                    "deletions": -59
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 284,
            "sizeDeletions": 60
        },
        {
            "number": 6,
            "revision": "540c28cc9baf3acf2af939b00c3bda90a867a50a",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/45/54945/6",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1657742895,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As documented, these default options don't match the security advisories that we use, and this patchset won't be able to merge until we follow those."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 17,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done, Updated code to support cipher which are documented in OWASP and update commit message accordingly."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why?  This cert should be in the same place in all cases, and should be using the phosphor-certificate-manager root cert, right?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done, removed option for configuring it during compile time."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 56,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "bmcweb_config.h.in",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 156,
                    "deletions": -50
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 227,
            "sizeDeletions": 51
        },
        {
            "number": 7,
            "revision": "cfe4a1877bd0dff9b9e5b10706d61b47991023f9",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/45/54945/7",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1658019274,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 296,
                    "deletions": -104
                }
            ],
            "sizeInsertions": 359,
            "sizeDeletions": 105
        },
        {
            "number": 8,
            "revision": "fd64ddb00ec8b4e59d5c3be7fd1e7b88a84fb19c",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/45/54945/8",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1658020211,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This patchset also causes 8 new cppcheck warnings compared to the prior commit.  Please worth through them and clean them up."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Appu, any responses to the questions raised here?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Ed, I didn't get time to address the given comments. Today i started looking into it and will try to load new patchset by tomorrow along with responding to comments."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It'd be nice to get this in ahead of the more complex aggregation stuff so we don't have to perpetually rebase it, but I understand if you're busy."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Will the aggregation stuff have that much of an impact?  There are almost no changes to http client in the patches and you'd just be adding a \"false\" argument where it calls the sendDataWithCallback() API."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Will the aggregation stuff have that much of an impact?\n\nConsidering that we'll need to work through \"how do you determine the root cert for an aggregated connection\" yeah, it's going to change some API stuff, which admittedly, doesn't apply in your case, but is important anyway.\n\nIt also means that bmcweb by default can talk to other bmcweb instances, which means it's a lot more likely that people actually test the aggregation stuff."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> It also means that bmcweb by default can talk to other bmcweb instances, which means it's a lot more likely that people actually test the aggregation stuff.\nAt least some of those those people would want to use https to talk to other bmcweb instances.  Support will need to be added for https with aggregation and that becomes a mess if the client itself doesn't support https.  Is that the issue with more people trying out aggregation?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  Is that the issue with more people trying out aggregation?\n\nEssentially."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 163,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we please put this in the same file as the other ssl context things so that when we update, we can update one location?  Also, can any of this be deduplicated with the server context construction?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 163,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "I thought so but later decided not to mix server settings with client because server will have different settings when compared with client ( Example: SSL context (client vs Server), Certificate store and files, some ciphers etc.. are different). So i think, Its better to maintain it as separate for client settings. In future, if multiple things comes up in http client, We can think of moving it to common place."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 163,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You don't have to \"mix\" them (you an still have a client cipher suite init and a server cipher suite init), but please make sure they're in the same file in code."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 163,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done, Move this to common file."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 166,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Could this just return the ssl context?  That would make it simpler to put outside of this class."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 166,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 182,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm assuming you meant to return here?\n\nAs written this seg faults on the next line when sslCtx->add_verify_path is called."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 182,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 207,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "owasp cheatsheet references mozilla, and this list doesn't seems to match either intermediate, modern, or old lists:\n\nhttps://wiki.mozilla.org/Security/Server_Side_TLS\n\nSomething I'm missing?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 207,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Ed, I used SSL configuration generator  with \"intermediate\" (recommended) settings. \nhttps://ssl-config.mozilla.org/\n\n    # intermediate configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n\nOne link which you mentioned also suggested the \"SSL configuration Generator\". But as part of TLS V1.3, There are extra cipher suggested which may need to be added? Can i add them?\nCipher suites (TLS 1.3): TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n\nAny specific reason above ciphers not added in bmcweb server settings?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 207,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">SSL configuration Generator\n\nThere's no boost or openssl init options in that tool, so I'm not sure how you would use it without doing some conversion;  Regardless, I can't explain the difference between them, so it's something we'll need to look into.\n\n\n> Any specific reason above ciphers not added in bmcweb server settings?\n\nThe current settings are based on mozilla compatibility I believe, and likely need updated."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 207,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 259,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You need to handle this error.  if sslCtx isn't filled in it means ssl ctx construction failed, so we need to error out."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 259,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "If In case of Non-SSL, sslCtx is null. So currently its the method used for differentiating the connection SSL vs Non-SSL. \nComing to error, if sslCtx isn't filled, Then connection will be set to sslInitFailed state and that connection will be abandoned during init it self."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 259,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  So currently its the method used for differentiating the connection SSL vs Non-SSL. \n\nShouldn't we be using sslConn, not sslCTx?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 259,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Depending on sslCtx, sslConn is set with appropriate context(Line no: 261)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 259,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Fixed in latest patchset."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 263,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If you keep the #define, you don't need this."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 263,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 273,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please handle your errors.  Just logging it doesn't solve the issue, you need to close the connection."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 273,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 348,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "please follow the convention we use elsewhere for unused variables.  Also, this variable doesn't appear to be unused."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 348,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't believe this has any effect on a shutdown"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 297,
                    "deletions": -103
                }
            ],
            "sizeInsertions": 360,
            "sizeDeletions": 104
        },
        {
            "number": 9,
            "revision": "3b38043df5224d9f481fb1df8c1c00df37a52c8d",
            "parents": [
                "d9f6c621036162e9071ce3c3a333b4544c6db870"
            ],
            "ref": "refs/changes/45/54945/9",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1659960110,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 293,
                    "deletions": -103
                }
            ],
            "sizeInsertions": 356,
            "sizeDeletions": 104
        },
        {
            "number": 10,
            "revision": "4d38c00985fbf28cfebafc041f9310765cb52df5",
            "parents": [
                "d9f6c621036162e9071ce3c3a333b4544c6db870"
            ],
            "ref": "refs/changes/45/54945/10",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1659960760,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 292,
                    "deletions": -103
                }
            ],
            "sizeInsertions": 355,
            "sizeDeletions": 104
        },
        {
            "number": 11,
            "revision": "6a3b0217334da68aa623471e9be5a4c971abfc4e",
            "parents": [
                "d9f6c621036162e9071ce3c3a333b4544c6db870"
            ],
            "ref": "refs/changes/45/54945/11",
            "uploader": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "createdOn": 1659986592,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Mentioned in a later comment that this case likely shouldn't be handled by waitAndRetry() considering where the SSL initialization occurs.\n\nIf we do hit an sslInitFailed state then we wouldn't want to print error messages saying that we instead exceeded the maximum number of retries.  We'd also want to return something like a 500 error rather than a 502."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Mentioned in a later comment that this case likely shouldn't be handled by waitAndRetry() considering where the SSL initialization occurs.\n> \n> If we do hit an sslInitFailed state then we wouldn't want to print error messages saying that we instead exceeded the maximum number of retries.  We'd also want to return something like a 500 error rather than a 502.\n\nI'm not following the above.  500 means \"internal to this bmc error\", 502 means \"something in the communication with the satellite failed\"  I would've thought this would include SSL issues?  Arguably, it's less likely that we'd be able to retry and succeed, but in theory if the SSL cert got updated in between the retries, it would work?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 387,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think this got covered already."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 454,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "It's confusing that you call close() inside of shutdownConn() and then later call async_shutdown() inside of doClose().  Is there a way to just combine shutdownConn() and doClose()?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 454,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Previous code is combined and when we did it, It has lot of duplicate code for SSL and Non-SSL. So brake the function to 2 parts.\n\ndoClose() does async_shutdown in case of SSL and then does the connection shutdown which is common.  I see your point and agree. Let me see if this can be renamed more appropriate."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 454,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think I fixed this in the latest patch?  (50% sure)."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 493,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "It's confusing that you call async_shutdown() inside of doClose() and then elsewhere you call close() inside of shutdownConn().  Is there a way to just combine shutdownConn and doClose() to make this easier to follow?"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 493,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think I resolved this (like 50% sure) in the latest patchset, which reorganizes the shutdown code.  Please reopen if this is still an issue."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 536,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "waitAndRetry() is meant to be called in response to one of the operations in the message sending flow failing.  We shouldn't be calling it here since we're just creating a new creation object.\n\nThis entire section should not be part of the constructor anyway since we also want to be able to reconfigure non-SSL connection object to become an SSL connection object and vice versa."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 536,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK  This might still be an issue on latest.\n\nIn general, if the Connection object fails to construct, we have bigger problems than executing a retry."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 536,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Fixed on latest."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 811,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "This key needs to also include useSSL.  This will create a separate pool for SSL and non-SSL connections to a given IP:PORT.  I say prepend either \"http://\" or \"https://\" based on the value of useSSL.\n\nThis change is in regards to https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/09060fca_d5151bb2"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 811,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Thanks for agreement. Yeah, This option i tried in past and it works as expected. This way, we will have isolated pool for SSL and Non-SSL.\nI will make changes and push it here."
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 811,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "http/http_client.hpp",
                    "line": 811,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This has been implemented in the latest patch."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 234,
                    "deletions": -103
                }
            ],
            "sizeInsertions": 361,
            "sizeDeletions": 104
        },
        {
            "number": 12,
            "revision": "92e12f5fd1adef104872c0ee3c9f4812ae314714",
            "parents": [
                "d9f6c621036162e9071ce3c3a333b4544c6db870"
            ],
            "ref": "refs/changes/45/54945/12",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660845612,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Fixed most of the issues in this patchset, but haven't tested yet.  The biggest functional change is changing the location of the certs, for which we should be using the linux defaults."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 62,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 266,
                    "deletions": -116
                }
            ],
            "sizeInsertions": 391,
            "sizeDeletions": 117
        },
        {
            "number": 13,
            "revision": "b25282054579d9e662cf1206b78dacef8af9cf77",
            "parents": [
                "9576939bf87b85a0b8ca90c581b8c572aa6fc9be"
            ],
            "ref": "refs/changes/45/54945/13",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660867844,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 14,
            "revision": "aea670239780fa3af6e7dabfe3bf54ed4706a3c5",
            "parents": [
                "6cd909304dcb6f584ad712f9a10368e13f5cc651"
            ],
            "ref": "refs/changes/45/54945/14",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660868064,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 15,
            "revision": "fc1146742b379d2a3576b6b55f18f03f6d793e50",
            "parents": [
                "f055ad311265ada61366033b1283e297a9748bfb"
            ],
            "ref": "refs/changes/45/54945/15",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660869369,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 16,
            "revision": "0c5d1380384d5aba6be7bc6945a2712a83046c5c",
            "parents": [
                "7a53056a9b6c4eba0bc33e777dfddc0efcd7d7a9"
            ],
            "ref": "refs/changes/45/54945/16",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660872552,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 17,
            "revision": "6060140c2fe9849d1d7dbb632989c3a52a25218e",
            "parents": [
                "27560b621c2dade54e4708392a4bb7325ac37aa3"
            ],
            "ref": "refs/changes/45/54945/17",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660878135,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": -2
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 423,
            "sizeDeletions": 125
        },
        {
            "number": 18,
            "revision": "806caea209c83f608a07a32777ce5de0d7b5a945",
            "parents": [
                "3514f2d1d791c20eed4a6eaa67099837786f778b"
            ],
            "ref": "refs/changes/45/54945/18",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660878770,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 19,
            "revision": "ac69b62a654784806371afa4c6566e033b1f943d",
            "parents": [
                "6a504b2a3d672468eb72bde1db9e3be4cdab9d3f"
            ],
            "ref": "refs/changes/45/54945/19",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660880866,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 20,
            "revision": "fbf1971ee394465eab45d91bbaa8abb7f14bb201",
            "parents": [
                "1a7de954e2a8c618229ac268b5085d6a3925fbb5"
            ],
            "ref": "refs/changes/45/54945/20",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660932173,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@intel.com",
                        "username": "apuli1"
                    },
                    "message": "Thanks Ed for making changes on this, I will check code, working state and update it by tomorrow. "
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "there\u2019s some certificate chain file location stuff that I think still needs work, but what\u2019s here does seem to be much closer, so I\u2019m thinking we get it merged and follow up on later patchsets as needed."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 21,
            "revision": "9b9a392ef65e442acd99b16d13e99c28a8dfb216",
            "parents": [
                "4943ef6165eed5363e5e4caf2f57dd6f44792f78"
            ],
            "ref": "refs/changes/45/54945/21",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1661290804,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        },
        {
            "number": 22,
            "revision": "e38778a5035eaccf642159c3ef3d70ce837d046a",
            "parents": [
                "ce9694379a3d495b8e0719990050856642a212fe"
            ],
            "ref": "refs/changes/45/54945/22",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1661291454,
            "author": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@intel.com",
                "username": "apuli1"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/event_service_manager.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 61,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 275,
                    "deletions": -122
                }
            ],
            "sizeInsertions": 405,
            "sizeDeletions": 127
        }
    ]
}