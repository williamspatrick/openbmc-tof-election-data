{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I49c539e3713e9d02d4584f305e4ced6d4b2ba572",
    "number": 56125,
    "subject": "tachsensor: Similar fixes from HwmonTempSensor",
    "owner": {
        "name": "Josh Lehan",
        "email": "krellan@google.com",
        "username": "Krellan"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/56125",
    "hashtags": [],
    "createdOn": 1659567237,
    "lastUpdated": 1660020537,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1659567237,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1659567291,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659567291,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1659567338,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1659567494,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48337/ : SUCCESS"
        },
        {
            "timestamp": 1659573064,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1659581336,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1659582887,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1659713692,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1659714247,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1659720316,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1659722748,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1659725233,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1659770877,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1659770910,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659770910,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1659770944,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1659771107,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48685/ : SUCCESS"
        },
        {
            "timestamp": 1659803152,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1659803379,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1659825610,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1660020535,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+2"
        },
        {
            "timestamp": 1660020537,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as 5170fe63cc84b96d67b33f2b7f9001c0ecfa7d1a"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
            "parents": [
                "d1c8f4433e981696d06e3c29006affd96624c89e"
            ],
            "ref": "refs/changes/25/56125/1",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1659567237,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "This fixes TachSensor similar to what was recently done for HwmonTempSensor.\n"
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "rm void"
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I copied this from HwmonTempSensor and wanted to maintain the consistent style. (And I prefer using \"void\" to indicate a function that takes no arguments.)"
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The coding standard is pretty clear on this one:\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rl-void"
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "nice."
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, you convinced me, I changed it, see next patchset. However, there are lots of places in the existing code (not touched by this patch) that use `(void)` to indicate a function that takes no arguments. Those should probably get an additional patch, to clean up all this usage."
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Feel free to push a patch so we can be more consistent, or I can add it to my list of things to clean up."
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 495,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "is this needed?\n\nI thought it would be implicit."
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 495,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "This ensures the order - old sensor destructs before creating new one.\nOtherwise, old sensor destructs after new sensor is created and there will be two objects with same name on the dbus, which can cause undefined behavior."
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 495,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The problem here is that:\n1. New sensor constructed\n2. Old sensor destroyed\n3. New sensor std::move()ed into map\n\nmeans that between 1 and 2, because there's shared resources between them (if it's the same object) stuff goes wrong in a hurry.  The order we have to have is\n\n1. Old sensor destroyed\n2. New sensor constructed\n3. New sensor std::moved()ed into map\n\nIn theory this is possible with emplace and std::piecewise, but getting that right is waaaaaaaay more subtle in code, and very likely to go wrong in non-obvious ways, so we do it explicitly like this so there's no way to make a mistake."
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 495,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "got it. Thanks."
                },
                {
                    "file": "src/FanMain.cpp",
                    "line": 495,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yes, this got me as well earlier. I like explicitly setting it to nullptr, to make sure the old is blown away first, before creating the new, as Ed said."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 117,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "rm for consistency"
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 117,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Same, I copied this from HwmonTempSensor and wanted to maintain the consistent style. Also, I think including \"std::\" is clearer."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 117,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I have no strong opinion here;  We have both, they're both pretty clear, and the coding standard says nothing about using one or the other.  Unless the author wants to change it, I'm fine with it."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 117,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "feel free to leave it as is."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "do we have to check the data length?"
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I don't believe so. readBuf is std::array<char, 128> and std::array is smart enough to know its own size (I think), unlike classic C arrays. The buffer is a boost::asio::buffer which is a view that also knows its own size, and it is passed into boost::asio::random_access_file::async_read_some_at() which fills in the buffer. The original code in HwmonTempSensor did not do this, so if it's a bug, it is a bug in both places."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> std::array is smart enough to know its own size (I think), unlike classic C arrays.\n\noperator[] on std::array does not enforce size limits.\n\nWith that said, josh is right, technically the size was already passed into boost, which does know the size, and will never return a value thats greater than 128.  With that said, in this context, that part isn't clear, because we're one function deep.\n\nI wonder if this function should be passed in a std::span from the calling function so that this pointer arithmetic is done in the caller, which is guaranteed to ensure that it can't run off the end.\n\nI'm probably fine with what's there;  it's unlikely to be used wrong, and the code itself is correct, ever if it's a little unweildy, and relies on boost to do the right thing."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, I will leave it unchanged, for now. (If we put in error-catching here, and we do encounter something that's over 128 bytes, how should it be handled? Immediately abort?) If we make a change here, we will need to change it in HwmonTempSensor also (and perhaps other places that have the same usage) to be consistent."
                },
                {
                    "file": "src/TachSensor.cpp",
                    "line": 170,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> OK, I will leave it unchanged, for now. (If we put in error-catching here, and we do encounter something that's over 128 bytes, how should it be handled?\n\nMy suggestion was to not do length checking here, move it to the calling scope, by changing the argument to a std::span, which, in the calling scope, doesn't need length checked, because we know the buffer we passed in.\n\n> Immediately abort?) If we make a change here, we will need to change it in HwmonTempSensor also (and perhaps other places that have the same usage) to be consistent.\n\nACK."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 47,
                    "deletions": -44
                },
                {
                    "file": "include/TachSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -6
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 85,
            "sizeDeletions": 54
        },
        {
            "number": 2,
            "revision": "d367b6fe63e513601cf18d53341c3d060a0b1552",
            "parents": [
                "88cb29d203b2c266eb246a4d9ac533566bd0d368"
            ],
            "ref": "refs/changes/25/56125/2",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1659770877,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/TachSensor.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Arguably this is \"less efficient\" than what was there previously just having the destructor order correct, but in terms of being consistent, this seems reasonable."
                },
                {
                    "file": "include/TachSensor.hpp",
                    "line": 63,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Yep, I followed the existing model from HwmonTempSensor."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -45
                },
                {
                    "file": "include/TachSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -6
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 55
        },
        {
            "number": 3,
            "revision": "5170fe63cc84b96d67b33f2b7f9001c0ecfa7d1a",
            "parents": [
                "1ff2e669db5eca302851e72a77d2cd608a7666ac"
            ],
            "ref": "refs/changes/25/56125/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1660020537,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -45
                },
                {
                    "file": "include/TachSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -6
                },
                {
                    "file": "src/FanMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 55
        }
    ]
}