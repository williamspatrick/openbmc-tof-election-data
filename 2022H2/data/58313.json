{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Ic34dff82df84b45967f0abff85f0109afbb0b5a2",
    "number": 58313,
    "subject": "docs: add a design doc for Redfish OAuth",
    "owner": {
        "name": "Nan Zhou",
        "email": "nanzhoumails@gmail.com",
        "username": "FighterNan"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/58313",
    "hashtags": [],
    "createdOn": 1667235535,
    "lastUpdated": 1671664450,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1667235535,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1667235596,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1667235596,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1667235614,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/54401/ : SUCCESS"
        },
        {
            "timestamp": 1667235621,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1667251779,
            "reviewer": {
                "name": "Richard-Hanley",
                "email": "rhanley@google.com",
                "username": "Richard-Hanley"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1667254797,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1667258848,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1667258874,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1667258909,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1667258909,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1667258929,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/54414/ : SUCCESS"
        },
        {
            "timestamp": 1668498412,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1668543359,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1668543377,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1668543487,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1668543487,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1668543509,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/55418/ : SUCCESS"
        },
        {
            "timestamp": 1668595775,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1668648116,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1671664450,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d0f165e2f62372c0a7b9917a7c096124740cedf3",
            "parents": [
                "1adafbb37e1325af7d62aea8589114e483204e53"
            ],
            "ref": "refs/changes/13/58313/1",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1667235535,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Let me know if you want me to add extra reviewers. "
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Richard-Hanley",
                        "email": "rhanley@google.com",
                        "username": "Richard-Hanley"
                    },
                    "message": "Overall I think this looks pretty good.\n\nThe main thing I'm wondering is if there is any more plowing we want to do to try enabling a remote authorization server."
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 249,
                    "reviewer": {
                        "name": "Richard-Hanley",
                        "email": "rhanley@google.com",
                        "username": "Richard-Hanley"
                    },
                    "message": "Section \"13.4.4.4 Redfish OAuth2.0 scope usage\" of the spec allows this to be a comma separated list of roles or privileges. \n\nIMO, having a list of roles is an undefined operations. As an example, I don't really know what a scope like \"Redfish.Role.ReadOnly, Redfish.Role.Operator\" would entail. My guess is that it would allow the union of both ACLS, but maybe that's a question for DMTF.\n\nDoes this design change much if we only allow roles in the scope, or is that not too serious of an issue?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 249,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "As implementation details, we can write codes so that it allows either a single role or a list of privileges.\n\nI can bring this up as a Github issue in DMTF."
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 254,
                    "reviewer": {
                        "name": "Richard-Hanley",
                        "email": "rhanley@google.com",
                        "username": "Richard-Hanley"
                    },
                    "message": "I think this makes a lot of sense for mTLS users, as it allows the resource server to ensure that client is definitively the subject of the OAuth token.\n\nHowever, I don't think there will be a username/password pair registered with the server"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 254,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Clients can still use one side TLS to connect to the resource server and claims their identity by username/password in the system. This is how BasicAuth and Session login currently work in BMCWeb.\n\nThese usernames have to be registered with the server"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 287,
                    "reviewer": {
                        "name": "Richard-Hanley",
                        "email": "rhanley@google.com",
                        "username": "Richard-Hanley"
                    },
                    "message": "This feels like a gap, but I haven't really had a chance to wrap my head around this.\n\nThere really doesn't seem to be any standard way in either DMTF or OAuth to describe the key management for the token signature.\n\nThat makes me think that there are one of two ways that the PKI can be managed:\n\n1) Distributed signing keys along with X.509 root certificates.\n2) Have the authorization server pre-register the signing key by hitting an endpoint in the resource server.\n\nWould it be future proof to just say that the signing key is in phosphor-cert-manager, and leave it to the next person to figure out how they want to wire it up?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 287,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "> 1) Distributed signing keys along with X.509 root certificates.\n> 2) Have the authorization server pre-register the signing key by hitting an endpoint in the resource server.\n\nGreat suggestion, I can add these two options in the next patchset.\n\n> Would it be future proof to just say that the signing key is in phosphor-cert-manager, and leave it to the next person to figure out how they want to wire it up?\n\nYes, I can mention this in the next patchset."
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 287,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "type": "ADDED",
                    "insertions": 329,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 342,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "6036d6ec12062f49c00d682a8a81884b97c21f08",
            "parents": [
                "1adafbb37e1325af7d62aea8589114e483204e53"
            ],
            "ref": "refs/changes/13/58313/2",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1667258874,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 86,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Duplicated \"valid time\""
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 86,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Thanks! Done"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 122,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "It is a bit complicated for expiration.\nWe have a requirement for 1 hour expiration for logged in users. So in Bytedance's SSO implementation, we do not check the expiration from the token, it is assumed as 1 hour that is configured in SessionStore"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 122,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "For the proposed workflow here, it's a pretty straightforward check: |local time| <= |create time| + |valid time|. |local time| can be get from std library, |create time| + |valid time| are just strings in the JWT.\n\nCould you elaborate why you think it's complicated here?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 122,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "By \"complicated\" I mean the session timeout, would this mean the session timeout is set every time when an SSO login is performed?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 122,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "I see where you are from now. I have two options here,\n\n1. not use the session codes at all in BMCWeb. This means every request will go to token verification. This might affect performance but I need to evaluate how slow it is. To my understanding, verifying a signature of short token should be fast.\n\n2. use session. Whenever we found there is no session for this token, we create a new session and set the session timeout to min(CurrTime + MaxSessionTimeout, CurrTime + TokenValidFor).\n\nMakes sense to you?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 178,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "In BMC the privileges are bound to a user group, how do you manage the user that is logged in to the BMC?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 178,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Yes, there are two flavors:\n\n1. Redfish Privileges in JTW claim. We might send a dbus call to phosphor-user-manager to check if these privileges are in the system. Or we just skip the check, and directly use these strings as is when performing intersection.\n\n2. Redfish Roles in JTW claim. We need to send a DBus query to phosphor-user-manager to check what privileges this role has.\n\nI understand privileges are stored as groups. I have an approved design doc to add OEM privileges and roles in https://github.com/openbmc/docs/blob/master/designs/redfish-authorization.md"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 178,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I still have the question about the user who logged in.\nWhen the user logged in via OAuth will the session be associated with a user in phosphor-user-manager?"
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "line": 178,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "No, there is no concept of \"user\" in authorization delegation. Only either \"Redfish Role\" or \"Redfish privileges\".\n\nFor mTLS connections, we might check if the peer's identity matches the subject role."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "type": "ADDED",
                    "insertions": 332,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 345,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "8057b14dd6656c7f32c9e80075f1fd3951c070e1",
            "parents": [
                "1adafbb37e1325af7d62aea8589114e483204e53"
            ],
            "ref": "refs/changes/13/58313/3",
            "uploader": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "createdOn": 1668543377,
            "author": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Any more comments?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/redfish-oauth.md",
                    "type": "ADDED",
                    "insertions": 332,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 345,
            "sizeDeletions": 0
        }
    ]
}