{
    "project": "openbmc/x86-power-control",
    "branch": "master",
    "id": "Ib9b89e07a348868d2f15ffda31b3dc9a47340873",
    "number": 58284,
    "subject": "Handle possible SdBus exceptions",
    "owner": {
        "name": "Michal Orzel",
        "email": "michalx.orzel@intel.com",
        "username": "morzelx"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/x86-power-control/+/58284",
    "hashtags": [],
    "createdOn": 1666970754,
    "lastUpdated": 1671507479,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1666970754,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1666970828,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1666970829,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1666970957,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/54372/ : SUCCESS"
        },
        {
            "timestamp": 1667181430,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1667205993,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1667933494,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1667964231,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1668023982,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1668042748,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1668079646,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1668482100,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1668505444,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1668508122,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1668508167,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1668508167,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1668508215,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1668508322,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/55401/ : SUCCESS"
        },
        {
            "timestamp": 1668635325,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1671187808,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1671187818,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1671187818,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1671187951,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/57923/ : SUCCESS"
        },
        {
            "timestamp": 1671507301,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1671507479,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1d42b5f91a201d467744a8b57aad50bbd858b89e",
            "parents": [
                "58e379d1bf271707733a595238530e2e2e77ad86"
            ],
            "ref": "refs/changes/84/58284/1",
            "uploader": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "createdOn": 1666970754,
            "author": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'm not necessarily opposed to this feature, but this example sounds like a problem with under-specified service dependencies -- i.e. x86-power-control starting before another service that provides the dbus object it's going to be looking for.  Are there cases of this sort of problem arising even with properly specified dependencies?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "I have tested that possibility. Unfortunately, even when x86-power-control is defined to run after service that creates needed DBus interfaces, I've observed problem with exception. The problem is that second service doesn't create all of its interfaces right away, and as result they don't exist yet when x86-power-control starts."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Hmm, in that case I'd think maybe the appropriate solution would be to add a mapper-wait dependency to the x86-power-control service definition instead?  That could be done entirely in bitbake even..."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "I have heard of issues in the past with using mapper-wait in the service.  I don't remember the details, but in this case, it creates a circular dependency with the application that is providing our POST Complete D-Bus property.  That service won't provide POST Complete status until it sees the correct host state from x86-power-control.\n\nI feel like we could implement the D-Bus handling better with matches on InterfacesAdded and PropertiesChanged to handle the signal change events as they come in.  But that is a larger effort to rework overall how D-Bus properties are managed.  Could this solution work for now until we can figure out a more robust solution to handle D-Bus properties?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> That service won't provide POST Complete status until it sees the correct host state from x86-power-control.\n\nI assume the other service involved here isn't in upstream OpenBMC?  \n\nI'm sort of curious about the details; from the brief description here it sounds a bit odd -- I'd have thought \"POST not complete\" would be a reasonable default value for it to provide unless/until it knows otherwise (to break the cyclic dependency)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "That's true.  The only issue with defaulting to \"POST not complete\" is that will trigger the \"InterfacesAdded\"/\"PropertiesChanged\" events on D-Bus with the incorrect state if POST is complete.  I don't know if that will result in unexpected behavior for the consumers of that signal."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "This looks okay especially as a starting point for this solution, so I'm giving +1 for now.  If there is no other feedback, I will promote to +2.\n\n@Zev, did you have any additional concerns?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 146,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "It may be good to also update the default JSON config file with this default value."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 146,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2519,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I might suggest putting \"exception\" instead of \"error\" in the log message here, mostly just to more clearly distinguish this case from the `reply.is_method_error()` case handled above."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2519,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2522,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Hmmm...looking at the various callers, it seems like they're not all necessarily set up to handle an error return here appropriately, but I suppose that's just a \"status quo\" problem and not really an issue with this patch per se."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2572,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "What if the retry still fails after the wait period -- do we need to re-arm the timer here?  Which I suppose also raises questions of if we should have a limit on how many times (or for how long) we'll retry..."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2572,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "For now timer is set to rearm only after DBus exception. Do You think that we should do that for other error cases as well? If so, I'll handle that. As of a limit of retries, we could handle it by adding a JSON option with some default value, would that be OK?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2572,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Oh, I had missed that the getProperty() call immediately above would re-arm on an exception...I guess one thing I'm not really clear on is what sorts of errors result in an exception vs. an error reply -- a comment providing some detail on that might help clarify?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2572,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "Exception: Call attempt failed (e.g. because of non-existent object path)\nError reply: Call succeeded, but called method has returned some error code"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2576,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Nit: looks like ordering this one before reschedulePropertyRead() would eliminate the need for the separate declaration of it above (though given the mutual recursion between that one and getProperty() I suppose the other will need to remain)."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2576,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2604,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I don't know if any of it might for some reason be mandated by our clang-format config (feel free to ignore me if so), but all the parenthesization here (aside from function calls and `if` conditions of course) seems a bit excessive to me...also, stylistically `readValue > 0` strikes me as a bit odd as a test; should we maybe just make it `bool state` or something instead?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2604,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "Unfortunately I don't see any way to make this sequence more generic, as hostIface properties are of different types and may contain different values depending on read status. I'll try to make it more readable though."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2604,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "The repetitive code is a bit unfortunate, yes, though I also don't see any obvious/easy better way of structuring it offhand -- what I was referring to in my comment was just dropping some extra parens, e.g. the ones around `readValue == 0` and the ternary expressions.  (Though I also still wonder if making the `readValue` parameter a bool instead of an int might make more sense.)"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2604,
                    "reviewer": {
                        "name": "Michal Orzel",
                        "email": "michalx.orzel@intel.com",
                        "username": "morzelx"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 118,
                    "deletions": -15
                }
            ],
            "sizeInsertions": 148,
            "sizeDeletions": 15
        },
        {
            "number": 2,
            "revision": "a1e8e6cb3fc538dfe906bd01b75750a8d7c678f4",
            "parents": [
                "fa2b6448a5169b5e981a24ae4ca0c03b80a07149"
            ],
            "ref": "refs/changes/84/58284/2",
            "uploader": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "createdOn": 1668508122,
            "author": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "config/power-config-host0.json",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 115,
                    "deletions": -15
                }
            ],
            "sizeInsertions": 147,
            "sizeDeletions": 16
        },
        {
            "number": 3,
            "revision": "c5f9be9d5d447404fba0baf8ff3068471f04dcd3",
            "parents": [
                "c4b85b7732aa98bb06295ff9cf863fae9f1a707f"
            ],
            "ref": "refs/changes/84/58284/3",
            "uploader": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "createdOn": 1671187808,
            "author": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "LGTM."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "BTW: I do think it is the common issue for all sensors. I do suggest to entity-manage to send complete signal for each device. The daemon just need wait the complete signal for its leveraged device."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "config/power-config-host0.json",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 115,
                    "deletions": -15
                }
            ],
            "sizeInsertions": 147,
            "sizeDeletions": 16
        }
    ]
}