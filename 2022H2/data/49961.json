{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I098fdfd2c75d8be6a7252a1258ce33b6a4edaa21",
    "number": 49961,
    "subject": "software: Add UpdateTarget interface",
    "owner": {
        "name": "Lei YU",
        "email": "yulei.sh@bytedance.com",
        "username": "mine260309"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/49961",
    "hashtags": [],
    "createdOn": 1640317916,
    "lastUpdated": 1665685003,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1640317916,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1640317932,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1640317970,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 1:\n\nThis interface is added to support the dual image code update.\nThe design doc is updated at https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/36407"
        },
        {
            "timestamp": 1640318434,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/32419/ : SUCCESS"
        },
        {
            "timestamp": 1641932803,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1641950703,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1642195422,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1642401955,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1642402335,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1642402347,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1642402347,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1642403027,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/35617/ : SUCCESS"
        },
        {
            "timestamp": 1642642575,
            "reviewer": {
                "name": "zhanghaicheng",
                "email": "zhanghch05@inspur.com",
                "username": "zhanghch05"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1642647803,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1642657870,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1642699892,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1642734104,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1643235324,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1643338305,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1643373669,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1643464364,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1643667727,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644213403,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644253337,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1644264266,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1646149233,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1647585440,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1665685003,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Abandoned\n\nclose due to inactivity"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "438747afc461827c92a1607a814ba46f1107d2b2",
            "parents": [
                "4f703341d9f9b1bf873d3aa93255573e9eb44bfa"
            ],
            "ref": "refs/changes/61/49961/1",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1640317916,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "There'll probably be some refactoring once multi-host is implemented (https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/48654) which will allow specification of bmc targets in addition to host targets, but for now this will allow us to add dual chip support to the static layout."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 163,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't understand why this is necessary.  Each slot has its own Activation instance.  Why can't you activate them directly?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 163,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The intention is to make it possible to specify the target of the uploaded image.\nWithout this interface, the user is not possible to tell which slot is to be updated.\n\nThe description may be a bit confusing, I will update it to make it clear that the interface is for the uploaded image only."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 163,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We're clearly missing something with what the other is describing.  See line 55."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/UpdateTarget.interface.yaml",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Software/UpdateTarget/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Software/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 80,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "22b87517136209c85002e98e41bfe5750c159e59",
            "parents": [
                "33c38cb266bf4fdc5a4aeb453d175763fd3bc9f8"
            ],
            "ref": "refs/changes/61/49961/2",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1642402335,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "zhanghaicheng",
                        "email": "zhanghch05@inspur.com",
                        "username": "zhanghch05"
                    },
                    "message": "Hope these can be merged soon."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The current design is that there can be multiple Activation interfaces from a single Version and those Activation interfaces are hosted at sub-paths.  The primary/secondary flash bank is one such example that is clearly identified here.  The Activation path might be something like `/xyz/openbmc_project/software/12345/bmc-primary` (for well-defined paths we should probably enumerate in this document what the expectations are).\n\nThis is why I don't understand why we need a new UpdateTarget interface.  There are already separate Activations that tell you which device you are updating.  The advantage of separate Activations is that it also handles other device types (than just dual flash banks of the BMC).  We are already implementing support for multi-host BIOS update (devices might be host-1, host-2, host-3).  You could also handle VRs, CPLDs, Xeon ME, etc. like this.  IMO separate Activation interfaces is far more flexible because it handles _all_ these cases and not just a dual flash BMC.\n\nSince the separate Activation interfaces _can_ handle a dual-flash BMC, like you are proposing, I don't see a reason to also have a different way to handle it (ie. your UpdateTarget proposal).  This makes additional work for external interfaces, like bmcweb/Redfish, to special case the BMC."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I did not realize this part.\nIs there any existing code that implemented the sub-path already?\n\n> This is why I don't understand why we need a new UpdateTarget interface. \n\nSay the user uploads a BMC image on a dual image system:\n1. image-manager will create the version interface on /xyz/openbmc_project/software/<id-to-be-updated>;\n2. itme-updater will create the activation/version interface on the same object as well.\nHow does the user tell which BMC slot is to be updated in the above case?\n\nWith the sub-path concept, the item-updater may need to create two activation objects for this:\n /xyz/openbmc_project/software/<id-to-be-updated>/bmc_primary\n /xyz/openbmc_project/software/<id-to-be-updated>/bmc_secondary\n\nIs the above expected?\n\nIf yes, if the user only wants to update the `<id-to-be-updated>/bmc_primary`, the user needs to set RequestedActivation on the `<id-to-be-updated>/bmc_primary` object, and delete the `<id-to-be-updated>/bmc_secondary`, it looks not so good that doing a code update needs to delete a DBus object...\n\nI see it could express the concept of the same image on multiple devices, but it is not clear to me how good it is to handle the code update case."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I did not realize this part.\n> Is there any existing code that implemented the sub-path already?\n\nNo.  Some team members from HCL are working on an implementation for the Yv2 BIOS as an example.  I believe they're going to do refactoring of phosphor-bmc-code-mgmt as well.\n\nTheir design, which I'm working through with them, is at:\n   https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/37950\n\n> With the sub-path concept, the item-updater may need to create two activation objects for this:\n>  /xyz/openbmc_project/software/<id-to-be-updated>/bmc_primary\n>  /xyz/openbmc_project/software/<id-to-be-updated>/bmc_secondary\n> \n> Is the above expected?\n\nYes, this is exactly what it expected.  The item-updater(s) will create slot/device specific sub-path elements.\n \n> If yes, if the user only wants to update the `<id-to-be-updated>/bmc_primary`, the user needs to set RequestedActivation on the `<id-to-be-updated>/bmc_primary` object, and delete the `<id-to-be-updated>/bmc_secondary`, it looks not so good that doing a code update needs to delete a DBus object...\n\nThe `bmc_secondary` does not get deleted directly, no.  I think you're asking about the concept of garbage collection.\n\nThe ImageManager currently (as implemented today) keeps the images which could be activated and is responsible for garbage collecting them.  A reboot would usually cause them to be remove automatically since we keep them in tmpfs.  Otherwise there are two options:\n\n1. The ImageManager is already expected to expose a Object.Delete interface to allow proactive garbage collection (removal of the unapplied image).\n\n2. The ImageManager is expected to monitor for all targets to be Activated or Staged and then automatically garbage collect.\n\nBoth of these options are documented here:\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/README.md#image-clean-up"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> No.  Some team members from HCL are working on an implementation for the Yv2 BIOS as an example.  I believe they're going to do refactoring of phosphor-bmc-code-mgmt as well.\n\nThis is unfortunate, is it OK for HCL to submit what they have now so that we could work together to support the dual image and multiple host images?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@Naveen / Velu,\n\nIs there anything you can share here?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Adriana and I are working on a different approach to make software-manager to support same image on different slots, the approach is mostly done, see series at:\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-bmc-code-mgmt/+/50473/2\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-bmc-code-mgmt/+/50271/1\n\nWith that approach, the description here will not be valid anymore and we will update the doc here with the new approach.\n\nWithout implementation, the design doc here is not valid anyway.\n@Patrick what do you think?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Without implementation, the design doc here is not valid anyway.\n\nI don't necessarily agree with this statement.\n\nThis design was written with the intent that it covers both multi-slot (BMC) and multi-device (ex. multi-host BIOS).  If you're doing something that deviates from that I'll need to see what it looks like to make sure it still covers the other intended use cases.  I don't want to see a divergence."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> This design was written with the intent that it covers both multi-slot (BMC) and multi-device (ex. multi-host BIOS). \n\nThe design is written, but the implementation is not.\n\n> If you're doing something that deviates from that I'll need to see what it looks like to make sure it still covers the other intended use cases.  I don't want to see a divergence.\n\nI do not want to do divergence too.\nBoth Adriana and I are going to support multi-slot BMC by:\n* Create multiple DBus object for each slot;\n* For static-layout, reuse the RedundentPriority to represent slot, it scales if we have 3 or more BMC slots.\n* For ubi/emmc, it has dynamic RedundentPriority anyway so it works fine.\n\nThe code described above is implemented and under review.\nWhat we need to do here is to update this doc and describe the multi-slot support accordingly.\n\nI think HCL guys could weight in here and see if the above implementation works for multiple BIOS as well.\nI think it should be working as expected.\n\nWhat does not scale is the interface here that it currently defines \"primary\", \"secondary\" and \"both\".\nTo support multiple BIOS (that may have 3 or more), this property could changed to a value to indicate which slot to update, and it needs a special value to represent to update all slot.\n\n@Patrick you could check series at https://gerrit.openbmc-project.xyz/q/topic:bmc-dual-image for the above implementation."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> The design is written, but the implementation is not.\n\nI don't really know what you expect here.  Don't we usually write the design proposal, get consensus on it, and then start implementation?  This isn't a design that has been sitting around for 6 months; it was literally agreed to in 2022.\n\nThe team has a pending request to get the repository created for the multi-host update procedures: https://github.com/openbmc/technical-oversight-forum/issues/11\n\n> I do not want to do divergence too.\n> Both Adriana and I are going to support multi-slot BMC by:\n\nThen _why_ are you diverging?  Nobody has worked on multi-slot / multi-device update for years.  Me and the HCL team spent a bunch of time getting it proposed, reviewed it with Adriana, etc.  And now you're coming around and doing something different, which doesn't work for multi-devices, and has no written design.\n\nIs there a reason that the agreed to design here doesn't work for BMC update?\n\n> I think HCL guys could weight in here and see if the above implementation works for multiple BIOS as well.\n\nIt does not.  The RedundancyPriority has no bearing when you have 4 devices that all are updated independently.\n\n> @Patrick you could check series at https://gerrit.openbmc-project.xyz/q/topic:bmc-dual-image for the above implementation.\n\nThe primary enhancement here appears to be that we're using a position indicator to create a separate hash ID.  We could take that position indicator to create the separate Activate object, which is literally the design.  Is this hard to do with this code series?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> I don't really know what you expect here.  Don't we usually write the design proposal, get consensus on it, and then start implementation?  This isn't a design that has been sitting around for 6 months; it was literally agreed to in 2022.\n\nIt was proposed on Nov 5 2021, merged on Dec 1 2021, and now we do not see any code at all. I was expecting some POC or WIP code at least. Otherwise how do we know if the design is going to be implemented or not?\n\n> Then _why_ are you diverging?  Nobody has worked on multi-slot / multi-device update for years.  Me and the HCL team spent a bunch of time getting it proposed, reviewed it with Adriana, etc.  And now you're coming around and doing something different, which doesn't work for multi-devices, and has no written design.\n\nMy proposal is for dual image support for BMC. The design is at https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/36407 and here.\nThe implementation is submitted as well https://gerrit.openbmc-project.xyz/q/topic:bmc-dual-image\nIt is not diverging at all because there were no implementation at all.\n\n> The primary enhancement here appears to be that we're using a position indicator to create a separate hash ID.  We could take that position indicator to create the separate Activate object, which is literally the design.  Is this hard to do with this code series?\n\nThe proposal here is more straight forward to indicate which target to update.\nThe proposal in \"define multi-slot/multi-device update\" solves the problem as well, but not so clear and it requires extra cleanup."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "The main concern seems to be to be able to identify which bmc module to update. In the multi-host proposal at some point there was a Redfish \"Update\" property proposed which has been eliminated in the latest patches. It seems that the information of which item to update is on the MANIFEST, where it'd have BIOS.# image type entry, or in this case BMC.1, or BMC.2, or both, although does that mean we need to build an image that has a MANIFEST for BMC.1, and another for BMC.2, and another that has both? I just posted that question in the multi-host review."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "I think for this dual bmc case we can go ahead and implement the WriteProtected property: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/43427/\n\nThis property has not been implemented yet, and its role is to identify if the software can be written or not, such as a BMC with two static-layout flash banks where NOR-0 is locked with a write-protect resistor.\n\nThe item updater would create the new subpath interfaces for each bmc (the Activation interfaces can stay under <id> for simplicity and updated as part of the multi host work), Activation would then update according to each layout's policy (ubi and emmc update the backup as long as write protected is false and fail the update otherwise, static update updates the ones where WriteProtected is set to false):\n\n/xyz/openbmc_project/software/<id>\n  |- Activation\n/xyz/openbmc_project/software/<id>/bmc-primary\n  |- WriteProtected - Default to false\n/xyz/openbmc_project/software/<id>/bmc-alternate\n  |- WriteProtected - Default to false\n\nThis property can be read and written via Redfish: https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43979"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> It seems that the information of which item to update is on the MANIFEST, where it'd have BIOS.# image type entry, or in this case BMC.1, or BMC.2, or both, although does that mean we need to build an image that has a MANIFEST for BMC.1, and another for BMC.2, and another that has both? I just posted that question in the multi-host review.\n\nIt is not based on MANIFEST fields but dbus paths.\n\n> I think for this dual bmc case we can go ahead and implement the WriteProtected property: \n\nI agree with this.\n\n> The item updater would create the new subpath interfaces for each bmc (the Activation interfaces can stay under <id> for simplicity and updated as part of the multi host work), \n\nSounds good.  You wrote \"as part of the multi-host work\" but keep in mind that the majority of the multi-host work being proposed for Yv2 (as an implementation) needs to go through a separate micro-controller.  There is a design being worked for a separate daemon to manage that micro-controller since it handles much more than just code-update.  So the work would not naturally touch this code in phosphor-bmc-code-mgmt."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> > I think for this dual bmc case we can go ahead and implement the WriteProtected property: \n> \n> I agree with this.\n\nSo we could create WriteProtected interface for each activation and make it true by default.\nWhen we want to update primary, set false to primary's activation's `WriteProtected`, something like this?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/UpdateTarget.interface.yaml",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Software/README.md",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Software/UpdateTarget/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Software/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 80,
            "sizeDeletions": 0
        }
    ]
}