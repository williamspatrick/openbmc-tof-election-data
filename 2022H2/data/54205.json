{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "design",
    "id": "If0c0193b6bc2eae79d82756462d23ef7084f9fc1",
    "number": 54205,
    "subject": "Physical topology design",
    "owner": {
        "name": "Benjamin Fair",
        "email": "benjaminfair@google.com",
        "username": "BenjaminFair"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/54205",
    "hashtags": [],
    "createdOn": 1654128649,
    "lastUpdated": 1664533085,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1654128649,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1654128806,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654129821,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654187207,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654282850,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1654282949,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1656521814,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1657228203,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1657228216,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Topic set to design"
        },
        {
            "timestamp": 1657228226,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Unset private"
        },
        {
            "timestamp": 1657228337,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1657258333,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1657298100,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1657536986,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1657645319,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1657648980,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1657651893,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657666817,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657688947,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1657771220,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1657771350,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1658192649,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1658602688,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1658957164,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658961611,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659376419,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1659403184,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1660066362,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1660261695,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1660261759,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660261759,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1660261775,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49048/ : SUCCESS"
        },
        {
            "timestamp": 1660262477,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 4:\n\n(6 comments)"
        },
        {
            "timestamp": 1660265672,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660345663,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1660567203,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1660608421,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660619456,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1660687082,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1660747746,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660747855,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660767226,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1660767371,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1660767432,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660767432,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1660767447,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49327/ : SUCCESS"
        },
        {
            "timestamp": 1661276902,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 5:\n\n(3 comments)"
        },
        {
            "timestamp": 1661379919,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1661379948,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1661379992,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1661379992,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1661380004,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49824/ : SUCCESS"
        },
        {
            "timestamp": 1662005451,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1662036330,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1663190711,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1663276567,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1663277098,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1663277464,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1664533055,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1664533085,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully rebased and submitted as e12059ab5668f3aecff18b38d53a4613351af014"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "7ea725047e67d8dffb8bbae55e4a24ffa7e087a2",
            "parents": [
                "ac5d544553934f8083c61c5986a1420261bc8a4c"
            ],
            "ref": "refs/changes/05/54205/1",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1654128649,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "WIP of the physical topology design (currently private). Still need to fill out the \"alternative considered\" section"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Also I was surprised to learn that core maintainers can see changes marked as private. Maybe that is common knowledge. "
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "adding Nan b/c related to go/obmcl/41468"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I don't think they can. I believe only people added as reviewers can see private changes"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "for a relationship between A and B, do we need to define the relationship in both A and B. Or is just one fine... since the definition is a two way relationship."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "The object mapper takes care of generating the reverse association for you"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 77,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "In the past Patrick as advocated hierarchies. There are internal tooling that model resources as a hierarchies. I would expect a health discussion around viability of path hierarchies.\n\nEd claims there are degenerate cases, that will not work in a hierarchical modeling such as \"backplanes\". The claim is back plans are (1)both contained by the chassis and (2)plugged into the motherboard. Making the hierarchical modeling difficult. \n\nThere are more examples of challenges created by hierarchical modeling, and it might save time to address them in this section."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 77,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I've filled out the section discussing path hierarchies as an alternative"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 93,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 103,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "8fd63293659c49b919bb80ca1ca0b5847ea4211b",
            "parents": [
                "6147515382bb95237725d0e40e02f51e47c7a8af"
            ],
            "ref": "refs/changes/05/54205/2",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1657228203,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Does it make sense to provide an example config here to help readers understand how this dynamic probe works?"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I'll include an example in the next revision"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  An example would be good.  I'm pretty sure I'm ok with this, and it solves the problem, but one or two examples, (even an example in review) might be helpful to show a real system."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Added a simple example with 2 chassis"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Same here; it will be great if we can get an example query (e.g., how Fans are connected to a chassis).\n\nAlso, I have the same concerns as Patrick: the association will contain as list of object paths, right? How will we parse that path? If we only use filename, then we will have the problem of nested names, for example, say we have two chassis, one contained by the other\n\n```\n/a/b/c/chassis0\n/a/b/c/chassis0/chassis0\n```\n\nhow do know which chassis0 an inventory maps to? Maybe we assume all filenames are unique?"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "> Same here; it will be great if we can get an example query (e.g., how Fans are connected to a chassis).\n\nSure, I can add an example response from the mapper\n\n> \n> Also, I have the same concerns as Patrick: the association will contain as list of object paths, right? How will we parse that path? If we only use filename, then we will have the problem of nested names, for example, say we have two chassis, one contained by the other\n> \n> ```\n> /a/b/c/chassis0\n> /a/b/c/chassis0/chassis0\n> ```\n> \n> how do know which chassis0 an inventory maps to? Maybe we assume all filenames are unique?\n\nYes, all D-Bus paths should be unique"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "> Yes, all D-Bus paths should be unique\n\nNo, I was asking the filename (the last piece of the path), not the entire DBus path."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Associations are based on the entire D-Bus path, so this should be fine"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 74,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Added mapper calls based on the example JSONs"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This feels a bit hand-wavy in the way it is worded.  Is it really \"significant...complexity\"?\n\nIs there any case where certain types of associations (such as contained-in) would always be hierarchy and other types of association (ex. powered-by) would not be?  This doesn't seem more complex on the part of the client and it more intuitive to humans."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "It would at least double the complexity since the clients need to understand both ways of encoding topology.\n\nChassis contains relationships should always be hierarchical, so the paths could work for that, but I'd prefer avoiding a special case for one type of relationship.\n\nAnother potential issue: could we ever have multiple inventory providers at once? In that case, coordinating paths across multiple daemons would be much more difficult than just using associations."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This feels a bit hand-wavy in the way it is worded.  Is it really \"significant...complexity\"?\n\nHaving been party to several people attempting it.... Yes. It really does add significant complexity given there are now two paths to any architecture.\n\n\n> Is there any case where certain types of associations (such as contained-in) would always be hierarchy and other types of association (ex. powered-by) would not be?\n\nI can't really think of any.\n\n> Chassis contains relationships should always be hierarchical, so the paths could work for that, but I'd prefer avoiding a special case for one type of relationship.\n\nThis is the key, you can pick ONE definition for paths, be it contained by, socketed into (which are different relationships than contained by) powered by, Drives for, ect.  EVERYTHING else needs to use associations, so doing something different for the one case just makes things more complex."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "So just to be clear, I'm in the associations camp, but why can't we do both? Say the path is always defined by chassis contains/contained-by, but *also* provide that relationship as an association? That way generic code can always use associations but for quick informal hacks we can use path as a proxy for chassis location.\n\nThe thought doesn't address the concern of path collisions between daemons"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "> So just to be clear, I'm in the associations camp, but why can't we do both? Say the path is always defined by chassis contains/contained-by, but *also* provide that relationship as an association?\n\nI addressed that later in this section: \"Additionally,\nphosphor-inventory-manager configurations can organize their D-Bus objects in\nwhatever way makes sense to the author of those configurations, but the\nAssociation properties would still need to be present in order for inventory\nconsumers to understand the topology.\"\n\nI'd prefer not to force a particular organization of D-Bus objects, but if we want to go that route it could be added as a feature directly to entity-manager without impacting any of the other parts of the system mentioned in this design.\n\nphosphor-inventory-manager already lets you organize objects however you choose, but there could be a feature added in the future that generates Associations based on the path hierarchies that the configuration specifies\n\n> That way generic code can always use associations but for quick informal hacks we can use path as a proxy for chassis location.\n\nIf we really want this, I also mentioned a proposal for a tool that could generate hierarchical views of different types of relationships to help humans understand them. Scripts could presumably use this tool too.\n\nNote that this isn't planned for the initial implementation however."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "For `combination of path hierarchies and associations` support, does that mean some daemon will use both the path and associations to do its thing. Does that really affect anything else?\n\nI guess I was just thinking that as long as the associations relationship exist, the if some daemon wants to still use `path hierarchies` if they want to since everyone else will still have associations support."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "In my proposal, the inventory providers can use whatever hierarchy they want, but consumers shouldn't infer any information from that hierarchy - they would still need to rely on associations as the source of truth. These associations could be generated by phosphor-inventory-manager automatically based on what path hierarchies are specified in the configuration files, but that wouldn't be part of the initial implementation.\n\nFor the alternative design, inventory consumers would need to get information about certain types of relationships (e.g. Chassis contains/contained by) from inspecting the path hierarchy and other types of relationships (e.g. powers/powered by) from D-Bus associations. Particular types of relationships would always need to be encoded as one or the other to avoid confusion and conflicting information."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't see a great section to write this.\n\nIn effect, you've taken just the \"connections\" part of the inventory design and used that as justification why using associations is better, but by leaving out the rest of the design you've implicitly simplified away all the other issues.  A few issues that associations cause in my initial thinking:\n\n* Naming becomes a harder problem and should probably be specified.\n\nWhere you previous might be able to name an inventory object /chassis0/proc0 and /chassis1/proc0, you now need to either name them chassis0-proc0 and chassis1-proc0 or proc0 and proc8.  Both of these are a bit clumsy and the second is much less intuitive for humans.\n\n* How are \"building blocks\" defined?\n\nThis might be somewhat due to my own ignorance of the details of EM (and this is also somewhat related to 'naming').  It is much more obvious to me how you would go about specifying a building block of your system, such as a compute card, in a hierarchical design.  \"I detected compute card X in slot Y, so all of its stuff is named /slotY/stuff\".  How you go about specifying (and generating the name) of duplicative entities, and creating all the appropriate associations back to parents, isn't obvious to me.  Is there anything in the EM design already that handles this?\n\n* Implicit information vs explicit information.\n\nUsing hierarchy means you get a good view into the inventory relationships for free (implicit due to path assignments).  That means system designers don't need to do anything [special] to get a huge part of their Redfish data exposed.  Using associations means that all of it needs to be expressed explicitly and anything that is missed is missing.  This increases the work necessary.\n\nSome might argue that explicit expression is less bug-prone because it is all obvious and I can sympathize with that argument.  I think it is mostly only true when you are writing your system *after* all the association features have been done.  The minute we add a new association, all old systems are going to be missing it, and likely most of them will never get it added.  Implicit definitions, at least wherever possible, allow us to keep most systems on parity with each other much easier."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "> I don't see a great section to write this.\n> \n> In effect, you've taken just the \"connections\" part of the inventory design and used that as justification why using associations is better, but by leaving out the rest of the design you've implicitly simplified away all the other issues.  A few issues that associations cause in my initial thinking:\n> \n> * Naming becomes a harder problem and should probably be specified.\n> \n> Where you previous might be able to name an inventory object /chassis0/proc0 and /chassis1/proc0, you now need to either name them chassis0-proc0 and chassis1-proc0 or proc0 and proc8.  Both of these are a bit clumsy and the second is much less intuitive for humans.\n\nYou can technically still use whatever path names you want, you'd just also need the associations for clients to understand this information.\n\nMaybe we could have the inventory providers automatically create these associations? This would only really apply to PIM though since EM doesn't let you use more complex paths for chassis items\n\n> \n> * How are \"building blocks\" defined?\n> \n> This might be somewhat due to my own ignorance of the details of EM (and this is also somewhat related to 'naming').  It is much more obvious to me how you would go about specifying a building block of your system, such as a compute card, in a hierarchical design.  \"I detected compute card X in slot Y, so all of its stuff is named /slotY/stuff\".  How you go about specifying (and generating the name) of duplicative entities, and creating all the appropriate associations back to parents, isn't obvious to me.  Is there anything in the EM design already that handles this?\n\nYes, EM already lets you customize names based on the \"index\" or bus number of an item that was detected:\n\nexample: https://github.com/openbmc/entity-manager/blob/master/configurations/nvme_p4000.json\n\ndocumentation: https://github.com/openbmc/entity-manager/blob/394ea2b48699cfed8807e61720b78b5a88027366/CONFIG_FORMAT.md#configuration-syntax\n\nDuplicate items will all have the same \"Connections\" field so they'll all get associated back to whatever they're connected to automatically. In the future, we could do this dynamically based on I2C topology (which would allow generic items to connect to other generic items), but that's not necessary for this initial design and would be an EM-specific feature.\n\n> \n> * Implicit information vs explicit information.\n> \n> Using hierarchy means you get a good view into the inventory relationships for free (implicit due to path assignments).  That means system designers don't need to do anything [special] to get a huge part of their Redfish data exposed.  Using associations means that all of it needs to be expressed explicitly and anything that is missed is missing.  This increases the work necessary.\n> \n> Some might argue that explicit expression is less bug-prone because it is all obvious and I can sympathize with that argument.  I think it is mostly only true when you are writing your system *after* all the association features have been done.  The minute we add a new association, all old systems are going to be missing it, and likely most of them will never get it added.  Implicit definitions, at least wherever possible, allow us to keep most systems on parity with each other much easier.\n\nOpenBMC has existed so far without this information being exposed on Redfish at all, so most users haven't needed this functionality. I'd much rather keep this the same unless system designers explicitly enable it and make sure that it's exporting correct information.\n\nMissing information is better than incorrect information"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Naming becomes a harder problem and should probably be specified.\n\nPretty sure the duplication issue has been a solved problem in EM for a while, and in phosphor-inventory, there's an implicit requirement that names don't collide.  I don't think this design makes it any harder.\n\n\n> Both of these are a bit clumsy and the second is much less intuitive for humans.\n\n1. If we need to build tooling around this to help humans, we can.\n2. Nothing about this design precludes placing things in a hierarchical path if A, the software can support it, B. it's useful enough to humans that it makes sense, but in a design that supports add in cards, we weren't able to make it work in a reasonable way;  Happy to see review code that can do A+B though, but in the general rules of \"is it hard to unwind if we make the wrong decision\", we could certainly have a patchset that adds the associations support (some of which already exists) THEN we could set things up in patch hierarchies to make them useful to humans when we figured out the hard problems with them.\n\n\n> \"I detected compute card X in slot Y, so all of its stuff is named /slotY/stuff\"\n\nPer the fact that we can only represent ONE atom of the graph, all of its stuff can't go in sloty/stuff.  only the stuff contained within it can go in it (assuming containment is the graph association you choose), otherwise we can't tell the difference between \"Contained by\" and \"Associated with port\", or \"cabled to\".\n\n\n>  Is there anything in the EM design already that handles this?\n\nYup.  The naming problem has been solved, and yeah, it's clumsy, but it does function in a way that avoids collisions.\n\n\n> OpenBMC has existed so far without this information being exposed on Redfish at all, so most users haven't needed this functionality.\n\nUsers have needed this functionality.  Most have ended up hardcoding it in their downstream forks for a given system."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "> > Both of these are a bit clumsy and the second is much less intuitive for humans.\n> \n> 1. If we need to build tooling around this to help humans, we can.\n\nAdded a note about tooling to help with this\n\n> 2. Nothing about this design precludes placing things in a hierarchical path if A, the software can support it, B. it's useful enough to humans that it makes sense, but in a design that supports add in cards, we weren't able to make it work in a reasonable way;  Happy to see review code that can do A+B though, but in the general rules of \"is it hard to unwind if we make the wrong decision\", we could certainly have a patchset that adds the associations support (some of which already exists) THEN we could set things up in patch hierarchies to make them useful to humans when we figured out the hard problems with them.\n\nThis should be handled by the inventory managers themselves. In the future, if phosphor-inventory-manager wants to generate chassisContains/chassisContainedBy associations based on path hierarchies, that feature could be added.\n\n> \n> > OpenBMC has existed so far without this information being exposed on Redfish at all, so most users haven't needed this functionality.\n> \n> Users have needed this functionality.  Most have ended up hardcoding it in their downstream forks for a given system.\n\nUnderstood. I still believe that leaving this information missing if it hasn't been explicitly encoded is better than reporting possibly incorrect information based on how someone happened to organize their inventory configurations."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 110,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 125,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
            "parents": [
                "cdf04a3e7fb786e291e9e722a5910bc5875065c4"
            ],
            "ref": "refs/changes/05/54205/3",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1657771220,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Do we have proof-of-concept patches implementing this design somewhere? I'd like to understand the mechanics of (conceptually) plugging things into a port."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't believe so.  The goal here was to get consensus before going off and implementing something that only met a subset of the community needs."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Right, but we don't need a production implementation. Proof-of-concept implementations are useful to inform the design proposal."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "There was a bmcweb patch here: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/44570\n\nI only have a few hardcoded hacks to entity-manager that I used to get the example busctl invocations, but you could add the associations to phosphor-inventory-manager today to get a working proof of concept."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 42,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Is this strictly for relationships between Chassis and the mentioned objects (power\nsupplies. etc) or can it include relationships between objects that are under chassis ?\nFor example associations between Cpu and CpuCore ?\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/56395"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 42,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I originally wanted to focus this initial design on topology involving Chassis objects from EM and PIM, but I can add a note about other associations too"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "typo*"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Fixed"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "While I understand what you were trying to do here, This probably needs to go in the exposes section.\n\nThe physical device \"exposes\" a port interface.  The dbus interfaces themselves should be generated internally.  This keeps our principal of \"EM config files are writable by someone without experience with dbus\" intact.  Even with what you've written there, I'd have to go look up PDI to know what needs to go in those.\n\nAlso, FWIW, I suspect that we're going to need to append information to this at some point, with things like presence GPIO pins that we'll need implementations to fill in\n\nwhat about\n\nExposes: [\n   {\n       PortType: BackplaneConnector,\n       I2cLaneIndex (optional): $BUS,\n       PresencePinName (optional): PortAGPIO,\n       Type: PhysicalPort,\n       Name: BackplanePortA.\n   }\n]\n\nThen that gets us:\n1. An extension point where we can handle arbitrary ports on a device, just by adding new \"PortType\" options.\n2. As we find new exciting use cases, we can add properties\n3. A way for a user to provide a sane name for their entry that makes sense for their system, and can differentiate this topology from another.  For example, a baseboard is going to have PCIeSLots, sata connectors, U.2 connectors, and a bunch of other stuff.  This solves most of the use cases."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Seems reasonable. So the port would show up on D-Bus just like any other Exposes record, but e-m would still internally parse it and generate the proper Associations?\n\nPresumably other daemons might care about the other properties that could be added too, like those handling cable presence.\n\nWe'd still only match on the PortType and never the name, right?"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Seems reasonable. So the port would show up on D-Bus just like any other Exposes record, but e-m would still internally parse it and generate the proper Associations?\n\nYep.  Pretty similar to how it does it for doing the device instantiation.\n\n> \n> Presumably other daemons might care about the other properties that could be added too, like those handling cable presence.\n\nI think I had cable presence covered with the PresencePinName above, so the daemon polling for that presence pin would go create a \"Presence\" object and associate it back.\n\n> \n> We'd still only match on the PortType and never the name, right?\n\nCorrect.  Name is freeform and under the control of the user.\n\nAs i'm looking at the above, we probably want to just stick stuff in Type, so the above example would be:\n\nType: <SystemName>BackplaneConnector\n\nRather than having a PortType.  This means that as we evolve, in theory we could have U.2 ports serviced by a different daemon than backplane ports, or sata ports, which as we evolve seems like a good idea."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "We shouldn't need to include the system name in the type, so I'll just have it be Backplane here.\n\nThe other Chassis configurations are only probed if they're relevant (either found by FRU EEPROMs or based on the other Chassis being present), so we shouldn't have conflicts.\n\nIn any case, we can figure out the details internal to entity-manager once the general architecture is finalized here."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 99,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think this linking is good.\n\nPer the previous comment, I think this becomes\n\nExposes: [\n   Type: DownstreamPort\n   PortType: BackplaneConnector\n}\n\n\nWhich, in theory if we have the i2c bus information from the previous exposes, IN THEORY, we could just implicitly generate one if we find an Entity on a declared bus number, because we know that the parent is a \"port\", so if this thing is plugged into that i2c device, we don't need any additional information about the port type on the device, we know from the parent resource.\n\nWith that said, in terms of initial implementation, this is fine."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 99,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Changed it so the D-Bus association types will just be inferred based on the inventory object types. e.g. two Chassis objects would get contains/containedBy, a Chassis and PowerSupply would get powers/poweredBy, etc\n\nFor I2C, let's defer that for later since it's only relevant to entity-manager and not the wider architecture of this design."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 114,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Note, it's been brought up in recent days that we need to make a more efficient mapper call for this.  Just FYI, what we have today works, but it's not the fastest;  Implementation detail (please don't add it to your doc) but just something to consider"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 164,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 179,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "e6418bc601c8c8848a6d9ed5625f31ec8a8a1f2f",
            "parents": [
                "0b7780b5af82300012e6141a0b3614e6c84029e0"
            ],
            "ref": "refs/changes/05/54205/4",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1660261695,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/physical-topology.md",
                    "line": 26,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "I guess we also need to change this? Or does everyone know what this means."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 26,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Reworded to \"changes\""
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 50,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Can we also mention \"Cores have threads\" ?"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 50,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Sure, I'll add this in the next version"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 50,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 67,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Do we want to mention the runtime detection that can be integrated with entity-manager?\n\nSince right now it seems like EM will only support via the Json config."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 67,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "I wanted to keep this design focused on the wider architecture and how it impacts other components of the system, so I only documented the simplest use case in entity-manager.\n\nRuntime detection features would only affect entity-manager, so we can figure those out later after the basic functionality is in place."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 67,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "ack, sounds good. yeah, that make sense."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 179,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 194,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "f12bc532fa27e49276cdabac7ec4c7d93273bf52",
            "parents": [
                "0b7780b5af82300012e6141a0b3614e6c84029e0"
            ],
            "ref": "refs/changes/05/54205/5",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1660767371,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/physical-topology.md",
                    "line": 43,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "maybe or here to indicate that some implementation might not have runtime detection."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 43,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 180,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 195,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "685dac7cbd3c6466af691e02bf9a49c40ab214de",
            "parents": [
                "0b7780b5af82300012e6141a0b3614e6c84029e0"
            ],
            "ref": "refs/changes/05/54205/6",
            "uploader": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "createdOn": 1661379919,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Not sure that we can leave the path hierarchy thing to later, but otherwise I'd like to see this proposal put into action."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Based on the TOF discussion/decision, I don't have any additional feedback on this design.  I'll leave it open until Friday afternoon for any additional feedback from the community (on details and/or editorial remarks) and then merge it."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 35,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Should board inventory objects be allowed as an alternative to chassis inventory objects?  In the example json configs you can instead use \"Board\" as the \"Type\" and BMCWeb will still recognize them as Chassis resources."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 35,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets discuss this in implementation patchsets;  I think the question is important in an implementation, but the distinction isn't super important at a design level."
                },
                {
                    "file": "designs/physical-topology.md",
                    "line": 35,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "SGTM"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 180,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 195,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "e12059ab5668f3aecff18b38d53a4613351af014",
            "parents": [
                "40d4c066d2bb852a5ea0c7feb98750d1deae791a"
            ],
            "ref": "refs/changes/05/54205/7",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1664533085,
            "author": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/physical-topology.md",
                    "type": "ADDED",
                    "insertions": 180,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 195,
            "sizeDeletions": 0
        }
    ]
}