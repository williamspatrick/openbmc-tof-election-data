{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "Ic771e218f2b61f8bde728027e808c7eab190d25c",
    "number": 56073,
    "subject": "Add KVM screenshot dbus interface",
    "owner": {
        "name": "Xie Ning",
        "email": "xiening.xll@bytedance.com",
        "username": "XieNingll"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/56073",
    "hashtags": [],
    "createdOn": 1659433091,
    "lastUpdated": 1670449999,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1659433091,
            "reviewer": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1659433147,
            "reviewer": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "message": "Uploaded patch set 2: Commit message was updated."
        },
        {
            "timestamp": 1659433157,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659433158,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1659433187,
            "reviewer": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1659433532,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48191/ : FAILURE"
        },
        {
            "timestamp": 1659434124,
            "reviewer": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1659434162,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659434167,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1659434536,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48192/ : SUCCESS"
        },
        {
            "timestamp": 1659444426,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1659493577,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659554702,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1659562747,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1659564105,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659578208,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659579351,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659579551,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659584888,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659586009,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659646995,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659667798,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659734840,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1661809579,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1661831478,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1662539772,
            "reviewer": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1662539853,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1662539853,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1662540106,
            "reviewer": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1662540248,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/50430/ : SUCCESS"
        },
        {
            "timestamp": 1662626144,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1662629173,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1662630564,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1662666590,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663173923,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663299200,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663304762,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663364687,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663365309,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663622112,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1663624204,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663632072,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663641192,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663642698,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663642824,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1663774789,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1670414485,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1670449999,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 4: Code-Review-1\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "cb44d3a032ca0e76c1960e0cf9a60f87caf8de7e",
            "parents": [
                "7a8b8d40bbb22c51aa25d9a8c9be94a364e54e42"
            ],
            "ref": "refs/changes/73/56073/1",
            "uploader": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "createdOn": 1659433091,
            "author": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/ScreenShot/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 56,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "dc94c4d8954f49776bf0ecbf1958b746d75b6bf3",
            "parents": [
                "7a8b8d40bbb22c51aa25d9a8c9be94a364e54e42"
            ],
            "ref": "refs/changes/73/56073/2",
            "uploader": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "createdOn": 1659433147,
            "author": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Xie Ning",
                        "email": "xiening.xll@bytedance.com",
                        "username": "XieNingll"
                    },
                    "message": "Add interface for KVM screenshot, https://gerrit.openbmc.org/c/openbmc/obmc-ikvm/+/56007"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/ScreenShot/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 56,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "eb9ff1506d6ab8b372d8493c29744d3a0c12e1b9",
            "parents": [
                "7a8b8d40bbb22c51aa25d9a8c9be94a364e54e42"
            ],
            "ref": "refs/changes/73/56073/3",
            "uploader": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "createdOn": 1659434124,
            "author": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Which repositories are you expecting to implement this interface?  I'd like to get one of the maintainers of those repos to weigh in since this is outside my domain expertise."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "This is implemented in https://gerrit.openbmc.org/c/openbmc/obmc-ikvm/+/56007\n\nIt looks like eajames@linux.ibm.com is not in gerrit, and Jae have two emails in gerrit now..."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Zev / Lei / Xie, is there any additional discussion here?  What do we want to do with this commit."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I would like to merge this if we get more +1s.\n\nThe implementation is in review at https://gerrit.openbmc.org/c/openbmc/obmc-ikvm/+/56006/1 and @XieNing will send feedback to the comments."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How do you expect a user to access these screenshots?"
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/meson.build",
                    "line": 2,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "\"Screenshot\" is in practice one word, so I'd suggest not capitalizing the second \"s\" (here and elsewhere)."
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/meson.build",
                    "line": 2,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\ud83d\udc4d"
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/meson.build",
                    "line": 2,
                    "reviewer": {
                        "name": "Xie Ning",
                        "email": "xiening.xll@bytedance.com",
                        "username": "XieNingll"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please move this under Control/KVM.  I'd prefer not to make new top-level directories."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Hopefully the author noticed this is still unresolved..."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Xie Ning",
                        "email": "xiening.xll@bytedance.com",
                        "username": "XieNingll"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'd suggest \"Capture\" as the name for this, as a slightly clearer verb describing exactly what it does."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Xie Ning",
                        "email": "xiening.xll@bytedance.com",
                        "username": "XieNingll"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "As I commented on the obmc-ikvm patch, I think it would be cleaner to return a file handle for a tempfile containing the screenshot instead of a path."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How does the screenshot get deleted?  Or is it already deleted but just an open fp passed around?\n\nWhatever we're doing, please be sure to document this behavior here in the interface."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "On the other patch I suggested using O_TMPFILE; if the implementation uses that it would get automatically released once the last open file descriptor referring to it is closed (not so much \"already deleted\" as \"never had a name to start with\")."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "In practice, we are using a shell script to call the service's method, and copy the screenshot file to somewhere else as needed.\nBy returning a fp, it could be difficult in such usage.\n\nThat's why it returns a file name path.\nAnd in implementation (in obmc-ikvm), it's using a same file path, so that if user is doing a lot of screenshots, it will create only one file instead of creating too many files."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I see...yeah, I suppose returning a file descriptor would require a somewhat more sophisticated client program.\n\nIn that case though, how about instead we have the path passed as a parameter from the client instead of the server determining it and returning it?  (i.e. client says \"please write a screenshot to /tmp/foobar.jpg\", server then opens that path and writes it.)  That way the question of whether we're overwriting an old screenshot or creating a new one becomes the client's decision and the server doesn't have to worry about it."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "(And if we go that route I'd also suggest renaming the method to something like `CaptureToPath`, in case we later want to add a fancier version that does the file-descriptor business or something.)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> In that case though, how about instead we have the path passed as a parameter from the client instead of the server determining it and returning it? \n\nThis is our internal's first implementation, but we realize that it's a security issue, what if the user says capture to /etc/xxx or /usr/bin/xxx?\nThat's why we change it to let the service to capture and save to a known path, and return to the client."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "In a hypothetical scenario where OpenBMC services were running under different UIDs, yes, that could be a problem, but in that case wouldn't the client be unable to access the service's dbus interface anyway?  Currently as far as I know all OpenBMC dbus communication is between processes that are all running as root, so a client could just as easily directly overwrite a sensitive file by itself instead of going through obmc-ikvm.\n\nIf we're considering usage that would have separate UIDs sharing the system bus, I think there would be a lot of other existing things that would need to be restructured to make that not trivially exploitable (e.g. xyz.openbmc_project.User.Manager, for one simple example)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Generally we let the service control where it writes to, and not be directed by outside.  This also ensures a lot less issues with garbage collection.\n\nIdeally this object would actually be more like a ScreenshotManager, which returns you a dbus-path to the freshly created Screenshot object.  xyz.openbmc_project.Common.FilePath and xyz.openbmc-project.Object.Delete would be implemented on the returned dbus object."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> Ideally this object would actually be more like a ScreenshotManager, which returns you a dbus-path to the freshly created Screenshot object.  xyz.openbmc_project.Common.FilePath and xyz.openbmc-project.Object.Delete would be implemented on the returned dbus object.\n\nRight, ideally it should. But this adds unnecessary complication to obmc-ikvm to manage the DBus objects.\nThis repo obmc-ikvm was intented to serve as KVM vncserver and there were no DBus interfaces at all.\nWe just want to add a simple DBus method to do the screenshot, and return a file that the client could access.\n\nIt is possible to implement a standalone service to manage the screen shot files and let it implement the interfaces. However, the process that does the actual screenshot has to be obmc-ikvm in OpenBMC scenario, that provides the most efficient behavior. We tried to use vncsnapshot as the screenshot client, it has various issues that we could not fix.\n\nEventually, we reach the implementation of current design, that let obmc-ikvm provide a simple method and return a filename."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ack."
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Xie Ning",
                        "email": "xiening.xll@bytedance.com",
                        "username": "XieNingll"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1 to patricks concern.  I don't see the lifetime of this file being documented in the latest patchset anywhere?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/ScreenShot/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/KVM/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/KVM/ScreenShot.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 57,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "19293c984473cd1e7ff883fe85dc80327bb4fca6",
            "parents": [
                "9f2fee821a19da9382a4aee09d8b5079bd03b8e3"
            ],
            "ref": "refs/changes/73/56073/4",
            "uploader": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "createdOn": 1662539772,
            "author": {
                "name": "Xie Ning",
                "email": "xiening.xll@bytedance.com",
                "username": "XieNingll"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'll give this until sometime Monday GMT for additional feedback."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@Zev, are you satisfied with this proposal for now?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I think we should iron out the blocking-vs-polling interface question (and hopefully come to some sort of consensus w.r.t. Ed's comments on passing file paths around) before proceeding with this.  I don't think it should be merged as is, so I'll mark it -1 for the time being."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "One other thing that occurs to me is the issue of the image format.  Currently obmc-ikvm (AFAIK) only deals in JPEGs, but that's largely just a side-effect of some implementation details -- PNG, for example, is in most cases a much more natural format for screenshots (and we might want to support it at some point).\n\nSome possibilities:\n - Add an enum argument to request a specific format (though the only implementation for the foreseeable future will likely just return an error for anything but JPEG)\n - Leave it as is without an argument, but change the name to reflect a specific format, e.g. CaptureJPEG\n - No change at all, leaving it implicit/undefined (up to the caller to inspect the file header, I guess)\n\nThoughts?  I think the first would be the most \"thorough\" and extensible, if a bit more work; the second might be a reasonable compromise."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I would prefer \"No change\", the format of the captured screenshot is implementation details, a service could produce jpeg, and another service (in case there is) could produce another format.\nThe interface requires the service to return the picture path, the caller could potentially know the file format from the file's extension."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> the format of the captured screenshot is implementation details\n\nHm?  I'd say it's exactly the opposite of an implementation detail -- it's the format of the data returned to the caller, and hence very much a part of the interface IMO.\n\n> the caller could potentially know the file format from the file's extension\n\nPerhaps, but it seems pretty ad-hoc and prone to messiness, because filename extensions are merely a convention, and not even a terribly consistent one at that -- JPEG files, for example, are sometimes named *.jpg and sometimes *.jpeg."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "For the time being should we just change the 'returns' description to say \"in JPEG format\"?  If someone wants to enhance this to do other types we figure that out when someone wants to implement it and then we adjust the API accordingly."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "My thinking with leaning toward specifying the format explicitly in either the method name or a parameter was that it would be easier to introduce another format with minimal (or no) changes to existing code.  If the format isn't explicit anywhere in the code and we later add (say) PNG support then we need to go back and change already-written code to change the method name or add a parameter (or just live with the ugly inconsistency of the PNG operation being `CapturePNG` but the JPEG operation just being `Capture`).  While that might not be a _huge_ amount of work, it would involve multiple repos, and adding four characters to the method name seems like a pretty trivial change to make now so that it's zero work instead."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I do not like the idea of putting the image format into method name.\nWhat if someone wants other image format, say webp, should we add `CaptureWebp` method for such case? I do not think so.\nIt could be better for the user to convert the image into other format by the application, instead of asking the service to provide the needed format."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I guess I just disagree?  Putting format conversion in the client application also isn't great if the source format provided by the service is already lossily compressed, as in JPEG -- converting that to a PNG doesn't restore the lost image quality."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> My thinking with leaning toward specifying the format explicitly in either the method name or a parameter was that it would be easier to introduce another format with minimal (or no) changes to existing code.\n\nWe regularly refactor dbus interfaces and add new properties / method parameters / etc.  This is all internal to the BMC, so there should be no issue with this.\n\n> Putting format conversion in the client application also isn't great if the source format provided by the service is already lossily compressed, as in JPEG -- converting that to a PNG doesn't restore the lost image quality.\n\nI agree with you, but we can add a new parameter when someone wants to add support for PNG.  We'll have someone add a new enumeration ( { PNG, JPEG } ) and require that enumeration passed to the Capture method.\n\n@LeiYU / @Xie - Please update the description to be clear that this returns a path of a file in JPEG format for now and let's move on."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These kinds of \"pass a filesystem path\" APIs aren't something we really want to propagate going forward.  They have really awkward concerns around permissions and cleanup.  We use them in some cases where the ownership of the file in question is clear, but in this case, given it's temporary, I don't think just passing the path works.\n\nI'm assuming the eventual goal is to make this available through a web/ipmi API?  I think to do that we'll need to figure out the race conditions around ownership of this file.\n\nHas it been discussed just sending the image here as an array of bytes?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> Has it been discussed just sending the image here as an array of bytes?\n\nNope, but this makes the method blocking.\nIn real world, the screenshot requires some frames to determine the image's height/width and it takes times. If we ask the method to return the array of bytes, the method has to be blocked for a while until a screenshot could be done.\n\nIn current implementation (see https://gerrit.openbmc.org/c/openbmc/obmc-ikvm/+/56007), the method simply set a flag and return the path, the file is polled by the caller.\nBe noted that this interface is expected to be used internally (in BMC), we do define ipmi oem cmd and Redfish oem method to trigger a screenshot, poll the file, , download the content, and clear the file.\n\n> I'm assuming the eventual goal is to make this available through a web/ipmi API?  I think to do that we'll need to figure out the race conditions around ownership of this file.\n\nYup, as described above, the file is polled by the caller, and it depends on the caller to \"use\" the file correctly. As long as the caller does not use the file while it's doing the screenshot, that's OK."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> the file is polled by the caller.\n\nOog, I hadn't realized that.  Is there some reason client-side polling is preferable to a blocking call?  That seems backwards to me.\n\n> Yup, as described above, the file is polled by the caller, and it depends on the caller to \"use\" the file correctly. As long as the caller does not use the file while it's doing the screenshot, that's OK.\n\nI assume what you're describing here is essentially:\n\n```\npath = call_dbus_method()\nwhile !exists(path):\n  wait()\nuse(path)\n```\n\nIf so, that's still racy, since there's no easy way for the client to know that the screenshot file's actually been fully written out, and isn't still mid-write (short of a format-aware parser that can distinguish a complete JPEG or whatever from a truncated one)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Okay, I suppose in principle you could avoid that race by renaming the file instead of writing to it directly, but it still doesn't seem like a good design to me."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Nope, but this makes the method blocking.\n\nWhy does this matter?  Do we expect generating a screenshot to take more than a second or two?  A \"Blocking\" dbus method also doesn't mean that the calling-daemon event loop blocks, so in this case, I don't think it would change anything to just return the data, aside from removing the usages of files?\n\n\n> Redfish oem method to trigger a screenshot\n\nI'm not in charge of IPMI, so I can't speak for Vernon or Tom, but in bmcweb, I'm not going to allow code that runs a command then tries to poll the filesystem until the file exists after running a dbus call when the data could be just returned as part of the call like we do for every other API.  Both phsophor-ipmid and bmcweb use non-blocking reactors, so some amount of blocking should be fine.  If capturing the screenshot takes more time than the timeouts on those interfaces, there's mechanisms for that too.\n\nUnrelated to this patch, but if you plan on doing Redfish OEM, be sure to read bmcweb/OEM_SCHEMAS.md and follow the guidelines we have for them.\n\n\n> Yup, as described above, the file is polled by the caller, and it depends on the caller to \"use\" the file correctly.\n\nNone of this is described in the DBus API description about how the file needs handled, and I think is part of the source of confusion."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Looks like there's a final trailing '\\n' missing on this file."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Are those necessary here?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I don't know if any of the automation processing these files cares, but I think including it is a nice human-friendly convention to follow (and all but three of the other *.yaml files in the repo do so).  And for what pedantry-points are worth, by the letter of the POSIX law, in order to qualify as a text file a non-empty file is required to end with a '\\n'."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> but I think including it is a nice human-friendly convention to follow\n\n+1"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Control/KVM/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Control/KVM/Screenshot/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/KVM/Screenshot.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 57,
            "sizeDeletions": 0
        }
    ]
}