{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I38e9d6ae929bbff0719429ed7422353801e46e5a",
    "number": 46922,
    "subject": "Inventory: Item: Add CpuThread.interface",
    "owner": {
        "name": "Brandon Kim",
        "email": "brandonkim@google.com",
        "username": "brandonkimbk"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/46922",
    "hashtags": [],
    "createdOn": 1631746823,
    "lastUpdated": 1665425071,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1631746823,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1631746838,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1631746896,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 1:\n\nHoping to use this interface to distinguish when we have a Subprocessor Core vs Thread object in bmcweb at https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/processor.hpp"
        },
        {
            "timestamp": 1631747212,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/26413/ : FAILURE"
        },
        {
            "timestamp": 1631749097,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1631749108,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1631749491,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/26415/ : SUCCESS"
        },
        {
            "timestamp": 1631792627,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\nI see we have an empty CpuCore interface already, but I don't really see a utility for it when we don't have any attributes and we already have Cpu's property CoreCount (and ThreadCount).  Why do we need to individually enumerate each core and thread in the Inventory model, distinctly from the generic counts provided? \n\nThe original CpuCore interface was added back in 2016 (\"Add inventory interfaces for OpenBMC\") and we don't currently have any real users of it (https://github.com/search?q=org%3Aopenbmc+CpuCore&type=code).  It seems like it should be removed and not add CpuThread unless you can describe a concrete workflow that utilizes it.\n\nLarge systems in this generation are going to have almost 2k threads.  That seems to be a potential problem for us to represent all of those on dbus if there isn't a practical purpose and without any properties I don't see a strong purpose."
        },
        {
            "timestamp": 1631814095,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> I see we have an empty CpuCore interface already, but I don't really see a utility for it when we don't have any attributes and we already have Cpu's property CoreCount (and ThreadCount).  Why do we need to individually enumerate each core and thread in the Inventory model, distinctly from the generic counts provided? \n> \n> The original CpuCore interface was added back in 2016 (\"Add inventory interfaces for OpenBMC\") and we don't currently have any real users of it (https://github.com/search?q=org%3Aopenbmc+CpuCore&type=code).  It seems like it should be removed and not add CpuThread unless you can describe a concrete workflow that utilizes it.\n> \n> Large systems in this generation are going to have almost 2k threads.  That seems to be a potential problem for us to represent all of those on dbus if there isn't a practical purpose and without any properties I don't see a strong purpose.\n\nThanks for the quick response Patrick.\n\nOne purpose that was described to me was that each thread / core may be reporting a different Microcode than others within the same package - which should not happen and is therefore a sanity check for us to detect a bad core / thread. Agreed on this possibly spawning hundreds / thousands of D-Bus interfaces which may not be desirable (I'm pushing back on the requirement for this as we speak)."
        },
        {
            "timestamp": 1648518412,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1648518698,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1648518710,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1648518710,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1648518746,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648519151,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/39973/ : SUCCESS"
        },
        {
            "timestamp": 1648529609,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648672044,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648693360,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648767854,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648813930,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648838056,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1648842017,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1651609689,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1651697581,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1657902585,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1657902599,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658189263,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659548004,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 4: Published edit on patch set 3."
        },
        {
            "timestamp": 1659548007,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1659548049,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659548049,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1659548342,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48303/ : FAILURE"
        },
        {
            "timestamp": 1659548453,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 5: Patch Set 4 was rebased"
        },
        {
            "timestamp": 1659548474,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659548474,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1659548853,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48304/ : FAILURE"
        },
        {
            "timestamp": 1659549382,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1659549434,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659549434,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1659549718,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1659549774,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659549774,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1659549775,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48306/ : ABORTED"
        },
        {
            "timestamp": 1659550144,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48307/ : SUCCESS"
        },
        {
            "timestamp": 1660001354,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Patch Set 7: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1660240402,
            "reviewer": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1664969288,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1665425071,
            "reviewer": {
                "name": "John Broadbent",
                "email": "jebr@google.com",
                "username": "jebr224"
            },
            "message": "Removed Code-Review+1 by John Broadbent <jebr@google.com>\n"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "6c1119e446e391fdbbd55dfa6fb021fc5d087d5b",
            "parents": [
                "3a665b28dcc0d9f6926a1f5eb20bc0d9d768418d"
            ],
            "ref": "refs/changes/22/46922/1",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1631746823,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 15,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "7dcf6ea402a86bf4b0306cfa0a4bdfa56aa603b2",
            "parents": [
                "3a665b28dcc0d9f6926a1f5eb20bc0d9d768418d"
            ],
            "ref": "refs/changes/22/46922/2",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1631749097,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "> Patch Set 2:\n> \n> I see we have an empty CpuCore interface already, but I don't really see a utility for it when we don't have any attributes and we already have Cpu's property CoreCount (and ThreadCount).  Why do we need to individually enumerate each core and thread in the Inventory model, distinctly from the generic counts provided? \n> \n> The original CpuCore interface was added back in 2016 (\"Add inventory interfaces for OpenBMC\") and we don't currently have any real users of it (https://github.com/search?q=org%3Aopenbmc+CpuCore&type=code).  It seems like it should be removed and not add CpuThread unless you can describe a concrete workflow that utilizes it.\n> \n> Large systems in this generation are going to have almost 2k threads.  That seems to be a potential problem for us to represent all of those on dbus if there isn't a practical purpose and without any properties I don't see a strong purpose.\n\nTurns out, we would like to have the option of representing individual threads, as thread level subprocessor is better defined in DMTF/Redfish https://github.com/DMTF/Redfish/issues/5008.\n\nI would like to bump this for review."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How do you intend to solve the scaling concerns?\n\nCan we add properties onto Cpu or CpuCore to get the same information available for Redfish?  Do we really need/want 2k dbus objects just to represent threads?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Apologies for the late response - was stuck in meetings all day yesterday and didn't get back to this.\n\nWould it be possible to get a reference of where we would see ~2k threads (if it's not under NDA or what not)? We currently have many sensor objects and are able to handle them fine with GetManagedObjects (and they are probably more complicated than the simple / small thread dbus-objects). \n\nAs mentioned in another comment from earlier - we have to map the micrcode information at the thread level granularity. Do you have suggestions on how we would do that if we don't have this thread level d-bus interface?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Would it be possible to get a reference of where we would see ~2k threads (if it's not under NDA or what not)? \n\nThe IBM E1080 has 1920 threads per https://www.ibm.com/downloads/cas/MMOYB4YL .\n\n> Do you have suggestions on how we would do that if we don't have this thread level d-bus interface?\n\nIf you really have per-thread microcode information, I think the best bet to minimize scaling is some kind of interface on a socket basis that contains the thread information you need in a structure of some sort.\n\nmap[string , set[size]] which maps \"microcode version\" -> set of thread_id seems like it would be the most efficient.  If we pick something like array[string] or map[size, string] the dbus property itself is going to become so large that I think it'll be fairly slow on its own, especially for applications which use the XML interfaces for introspection."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Thank you for giving me the datasheet for a possible system that has that many threads.\n\nAlthough I believe you're aware, this is just the context for this change:\n\nWe are hoping to have Micrcode information per thread level granularity in D-Bus for BMCWeb to expose over Redfish. The reason why Microcode information at thread level is important is because there may be some errors with a core / thread where some threads are at a different Microcode version than all others.\n\nWith `map[string , set[size]]`, I guess we would \"expect\" the map should have 1 entry for 1 microcode -> threads (which bmcweb then would be in charge of creating the thread object), but if there's a problematic case, we would have 2 (or more) key-value pairs in the map that maps the different microcode that some other threads may have.\n\nLet me know if my understanding is correct. Thanks!"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> With `map[string , set[size]]`, I guess we would \"expect\" the map should have 1 entry for 1 microcode -> threads (which bmcweb then would be in charge of creating the thread object), but if there's a problematic case, we would have 2 (or more) key-value pairs in the map that maps the different microcode that some other threads may have.\n\nI'm not really understanding what you're asking; it feels like you're saying \"there might be bugs\".  There _can_ be bugs in any data arrangement, can't there?\n\nIf you do it as map[size, string] you can be certain each thread-id only has a single string associated with it, but it's still going to be a really big dbus property (since would expect tons of duplication in the micrcode version).\n\nIf you really wanted to be succinct you could do `map[string, set[pair[size,size]]]` where the pair is a range of thread-ids (or maybe you could even flip the map around in that case with the pairs being the keys).  In the typical case you're going to end up with a single entry of `[\"version A\" -> [ [0, 239] ]`."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Just to be clear - I was talking about \"bugs / problematic case\" where all the threads are not reporting the same microcode, either due to them actually being different OR them reporting the microcode wrongly.\n\nSo yes, we EXPECT all threads to have the same microcode, so your idea of having `[\"version A\" -> [ [0, 239] ]`. would be the most succinct way to capture all the threads to micrcode. I guess mapping it to bmcweb could be tricky.. let me see if Ed could ring in to this discussion since in the end, the threads will have to expose through bmcweb.\n\nNoting, we have the same thing at the core level currently (cores report microcode). Do you propose we change the core dbus as well? Otherwise, could it make sense to have this dbus interface as an optional one that people could use if their core / thread count isn't very large (in the thousands) and the map could be used as an alternative for when there is a very large number (or would duplication cause issues)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Just to be clear - I was talking about \"bugs / problematic case\" where all the threads are not reporting the same microcode, either due to them actually being different OR them reporting the microcode wrongly.\n\nThis in itself doesn't seem like a problem; that's why it is a map.  What is a problem is if an implementation has an internal bug like [ \"version A\" -> [ 1 ], \"version B\" -> [ 1 ] ].  Doing a map[size_t, string] prevents this kind of bug, but it's just a bug and should be fixed if it is discovered.\n\n> Noting, we have the same thing at the core level currently (cores report microcode). Do you propose we change the core dbus as well?\n\nConsidering this is currently the only information in CpuCore, I'd tend to say we should remove that interface and do per-socket microcode information:\n\n    /.../socket_0/microcode/cores\n    /.../socket_0/microcode/threads\n\n(or microcode_cores could be workable)\n\nWe don't have as much scaling issues on cores, but we might as well make the interrogation consistent.\n\n> Otherwise, could it make sense to have this dbus interface as an optional one that people could use if their core / thread count isn't very large \n\nI don't think we want two ways to present the same information.  That just makes it more expensive to consume in applications like bmcweb because they have to implement both and we're going to end up with 2 different companies that prefer one over the other and one of the implementations will be broken half the time."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "About a month ago, we finalized on \"I think the map of version to set of threads is the most simple solution\"\n\nhttps://discord.com/channels/775381525260664832/960653386523488296/961015043514834955\n\nI'm thinking again about how this will look like from the BMCWeb side - when we try to enumerate .../Processors/cpu0/SubProcessors/core0/SubProcessors, how would we able to list that there are \"thread0\" and \"thread1\" under core0 ?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Hmm, looks like that link didn't work. It's a thread named \"phoshpor-dbus-interface for thread level microcode information\" under #bmcweb-and-redfish channel"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Just wanted to revive this review - Nikhil has worked on the bmcweb side change on how the threads DBus object would be used to expose it on bmcweb (which is what will use this DBus object): https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54900\n\nBecause we have to expose what subprocessors are available for each core and each threads may even have ProcessorMetrics attached to them - I believe we need a per thread DBus object."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Gentle ping on this"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Ping on this threads PDI review"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I'm thinking again about how this will look like from the BMCWeb side - when we try to enumerate .../Processors/cpu0/SubProcessors/core0/SubProcessors, how would we able to list that there are \"thread0\" and \"thread1\" under core0 ?\n\nI don't see any effort to solve the scaling issues with this commit.\n\nThere is an architecture for inventory associations now and I have documented rules for them here: https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/57604\n\nPlease see if associations help you solve the interrogation issues."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/CpuThread/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 43,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "7eedb54f36aec8ad336116f334b04bcfc894e2c4",
            "parents": [
                "f79b7226a316508ae886dc87547ecf4469b76bee"
            ],
            "ref": "refs/changes/22/46922/3",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1648518698,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "This is following what we discussed in Core as well https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47207"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "nit: are the two empty lines indented?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "line": 9,
                    "reviewer": {
                        "name": "Brandon Kim",
                        "email": "brandonkim@google.com",
                        "username": "brandonkimbk"
                    },
                    "message": "Ah thanks, let me take this out."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/CpuThread/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 50,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "d0d6cb724e0a99e4909e810a8d6c328f6cba1b61",
            "parents": [
                "f79b7226a316508ae886dc87547ecf4469b76bee"
            ],
            "ref": "refs/changes/22/46922/4",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1659548004,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/CpuThread/meson.build",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 48,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "774688026f5ad0a91ea25674e022ba63fbc2cc0d",
            "parents": [
                "7a8b8d40bbb22c51aa25d9a8c9be94a364e54e42"
            ],
            "ref": "refs/changes/22/46922/5",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1659548453,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/CpuThread/meson.build",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 48,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "2ef22a93a3a0168aed1f678230625ce87aeda679",
            "parents": [
                "7a8b8d40bbb22c51aa25d9a8c9be94a364e54e42"
            ],
            "ref": "refs/changes/22/46922/6",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1659549382,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/CpuThread/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 50,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "935149ed8be7ad1f1271cbbbb302066e96ea4320",
            "parents": [
                "7a8b8d40bbb22c51aa25d9a8c9be94a364e54e42"
            ],
            "ref": "refs/changes/22/46922/7",
            "uploader": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "createdOn": 1659549718,
            "author": {
                "name": "Brandon Kim",
                "email": "brandonkim@google.com",
                "username": "brandonkimbk"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "John Broadbent",
                        "email": "jebr@google.com",
                        "username": "jebr224"
                    },
                    "message": "Looks reasonable to me, but I would like to here what others think"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/CpuThread.interface.yaml",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Item/CpuThread/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 49,
            "sizeDeletions": 0
        }
    ]
}