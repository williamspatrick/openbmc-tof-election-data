{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "I6665c4c13a97e294a07cbbaf48d7d85938da43c9",
    "number": 36407,
    "subject": "code-update: Add design proposal for dual image for static layout",
    "owner": {
        "name": "Lei YU",
        "email": "yulei.sh@bytedance.com",
        "username": "mine260309"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/36407",
    "hashtags": [],
    "createdOn": 1599808524,
    "lastUpdated": 1665657926,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1599808524,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1599812148,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 1:\n\n(9 comments)"
        },
        {
            "timestamp": 1599814030,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1599814030,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 1:\n\n(9 comments)\n\n@Deepak Thanks for the quick review!"
        },
        {
            "timestamp": 1599858077,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 2:\n\n(7 comments)"
        },
        {
            "timestamp": 1600029200,
            "reviewer": {
                "name": "Alexander Amelkin",
                "email": "a.amelkin@yadro.com",
                "username": "AlexanderAmelkin"
            },
            "message": "Patch Set 2:\n\n(7 comments)"
        },
        {
            "timestamp": 1600088493,
            "reviewer": {
                "name": "Ivan Mikhaylov",
                "email": "i.mikhaylov@yadro.com",
                "username": "fr0st61te"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1600250973,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1600251013,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(12 comments)"
        },
        {
            "timestamp": 1600256271,
            "reviewer": {
                "name": "Ivan Mikhaylov",
                "email": "i.mikhaylov@yadro.com",
                "username": "fr0st61te"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1600257525,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1600375178,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1600789321,
            "reviewer": {
                "name": "Ivan Mikhaylov",
                "email": "i.mikhaylov@yadro.com",
                "username": "fr0st61te"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1600842695,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1600884017,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(9 comments)"
        },
        {
            "timestamp": 1600884110,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1600884282,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1600932868,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1600932878,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 3:\n\n(11 comments)"
        },
        {
            "timestamp": 1600948100,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1600961517,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(7 comments)"
        },
        {
            "timestamp": 1601013536,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 4:\n\n(8 comments)"
        },
        {
            "timestamp": 1601014175,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1601014243,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1601102211,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 5:\n\n(1 comment)\n\n> Patch Set 4:\n> \n> (8 comments)"
        },
        {
            "timestamp": 1601104589,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1601278128,
            "reviewer": {
                "name": "Ivan Mikhaylov",
                "email": "i.mikhaylov@yadro.com",
                "username": "fr0st61te"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1601379598,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1601393814,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1614072339,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "miltonm@us.ibm.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 5:\n\n(11 comments)\n\nHi.  Sorry I have not been participating in this review.\n\nI wrote a set of comments, then went back and read the prior comments (without refering to the prior drafts at this point in time).   I then went back over the comments and the current draft, and made some changes as I think I start to understand the proposal."
        },
        {
            "timestamp": 1639034208,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1639034213,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Patch Set 5:\n\n(11 comments)"
        },
        {
            "timestamp": 1640252974,
            "reviewer": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1641932518,
            "reviewer": {
                "name": "Adriana Kobylak",
                "email": "anoo@linux.ibm.com",
                "username": "anoo1"
            },
            "message": "Patch Set 7: Code-Review+1"
        },
        {
            "timestamp": 1642196243,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7:\n\n(7 comments)"
        },
        {
            "timestamp": 1665657926,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Abandoned\n\nclose due to inactivity"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "00f1c6659fddbdb389e12c3d3fe5f7bbfdfca507",
            "parents": [
                "f6ebb02fe8998ed6f0c71dde355008bcb382af30"
            ],
            "ref": "refs/changes/07/36407/1",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1599808524,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "nit: not"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 31,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Not following this, could you please elaborate?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 31,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Right, it's a bit unclear.\nThe idea is that the BMC running on golden image should be able to flash the primary flash, instead of its own flash.\nWill re-word."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 31,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "The re-word is good. This assumes that it should be able to program the flash, but may not necessarily have a full image, maybe it's stripped down with minimum logic to be able to boot and flash the primary flash."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 43,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Why is this the case? Why do we want to exclude the ubifs layout (for eg what happens if secondary flash is ubifs as well)?\n\nAlso, is it possible to have the primary as ubifs and secondary/golden as static?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 43,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Because ubifs already uses the two flash chips at the same time, it is not possible to put a static, un-changed image in the golden image."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 43,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "We could if the flash chips were bigger but we don't have the space to have 2 versions plus a golden one. On eMMC we have the space, but that'd be a slightly different approach, where all the versions are in the same chip."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "is this a u-boot env read?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Nope, in aspeed, the watchdog driver puts `access_cs0` in sysfs when wdt2 expires and BMC boots into the golden image.\n\nI did not use other BMC SoC (like nuvoton) but I believe there is a way to check the wdt status.\n\nI did not mention aspeed because this design should be natural and not depend on the BMC SoC."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 53,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Are the steps below for a code udpate case or when bmc-code-mgmt starts up?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 53,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "It is for the behavior of phosphor-bmc-code-mgmt."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Do you mean this is already performed today by the bmc-code-mgmt app?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Nope, this is something new and to be implemented.\n\nFor UBI I think there is a similar implementation to sync the rwfs"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "It can be re-used. It's enabled via the sync-bmc-files compile option and uses rsync to copy files from the 'synclist' file from current bmc to a specified directory (in this case the other flash's rw filesystem), it may just need to get the other flash mounted on the static layout."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 56,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yup, that's the plan."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Does this mean we lose persisted settings etc?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "This makes sure the BMC running on golden image does not mount any partition of the primary flash, so that it is safe to do the update.\nWill add some details here to explain why."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "This seems contradictory to the bullet point above for the 'If BMC is running on the golden image' case."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 69,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yup, the above wording is a bit confusing, the idea is to not mount before the programming primary flash, but it needs to sync the rwfs back to primary flash, so it needs to mount here.\nWill update the wording."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 86,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "single BMC flash?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 86,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "type": "ADDED",
                    "insertions": 112,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 125,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "27f343125e32027c81c5a508ec979d109a29f18f",
            "parents": [
                "f6ebb02fe8998ed6f0c71dde355008bcb382af30"
            ],
            "ref": "refs/changes/07/36407/2",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1599814030,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Are you interested in a secondary golden flash to address hw failures on the primary chip, or are you looking to having a golden image even if it's in the same flash chip if size permits like in an eMMC? Sounds like we want to have a backup in case the primary image fails to boot? If that's the case we can mention that this is a design in general for having a secondary golden image that is not updated but as a backup to failover if primary fails to boot, but the implementation will begin with a dual flash configuration running the static layout."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yup, the golden image is a full-functional BMC as well, it's just that we do not update it in the field.\nIn case the primary chip is broken and can not be fixed, it could provide the BMC functions as well, as described in below step 7 in \"The code update when BMC is running in the golden image\""
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 30,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "In fact in some systems (e.g. YADRO VESNIN) it may even be made read-only in hardware or it's write-ability may be controlled via a dedicated GPIO."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 30,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "So the wording is OK here, is it?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 34,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "I wouldn't put this as a requirement. It kind of defeats the purpose of Golden flash. See comments below."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 34,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "OK, got it.\nHow about making it an optional requirement?\n\nIn our case, the BMC gets IP from DHCP when it's first-time deployed, and after that it's using the static IP in the life time. That's why we want to sync the networking settings.\n\nI agree that the \"default\" behavior should not sync anything to the golden image."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 46,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "This is for ASPEED chips only. That must be noted somewhere in this document. There are still BMC chips from other vendors that may use a different mechanism."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 46,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Right.\nNot sure how other vendors do. Will update the wording and take wdt2 in aspeed as an example."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "This may not be needed, would other applications besides code update use this value? It's already exposed, so it can be queried when the bmc starts up, ex on ast2500:\nroot@romulus:~# cat /sys/class/watchdog/watchdog1/bootstatus\n0\n\nIf booted on the secondary chip the value would be 32.\n\nRegardless if we add it or not, it may be useful to log an error if we boot from the golden flash unexpectedly. This commit is proposing an error if the bmc didn't boot from the version specified by the user but could be adapted to be logged if the bmc booted from the gold flash as well: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-bmc-code-mgmt/+/36309"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> If booted on the secondary chip the value would be 32.\n\nGood to know.\n\n> Regardless if we add it or not, it may be useful to log an error if we boot from the golden flash unexpectedly. This commit is proposing an error if the bmc didn't boot from the version specified by the user but could be adapted to be logged if the bmc booted from the gold flash as well: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-bmc-code-mgmt/+/36309\n\nSomehow, the commit is slightly different. With UBI design, there are *always* two *different* versions, and there is a config to tell which image to boot, so the interface is applicable.\nWith golden image concept, it *is* possible that the two versions in primary and golden are the same, but we still want to know which flash the BMC is booted from.\n\nMaybe we could come up with an interface to fit for both cases."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> With UBI design, there are *always* two *different* versions, and there is a config to tell which image to boot, so the interface is applicable.\n\nIt doesn't seem like this is necessary though and would be a reasonable enhancement.  We could have the same image pushed to both the chips.  That is a different problem from the desire to have a golden image though.\n\nSome people seem to like a golden image so that they can easily restore back to entirely factory conditions.  We use a golden image because it is the way we implement verified boot pre-AST2600's hardware root of trust."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yup, we do want to use golden image because it makes sure the BMC could be restored when something bad happens on the primary flash (assuming the golden flash is not broken).\n\n> We use a golden image because it is the way we implement verified boot pre-AST2600's hardware root of trust.\n\nGood to know. However, I doubt it is not really a trusted root-of-trust, e.g. the u-boot in primary chip could be compromised by a root user, is it?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There are only physical attacks that would compromise our verified-boot implementation, not remote.  It is not a hardware ROT in the sense that the chip itself isn't checking the initial code, but we have protection mechanisms to ensure that the initial code cannot ever be written by a user.\n\nWe have two flavors of how we implement this but both use the same u-boot code.\n1. We use a physical resistor to lock the NOR.\n2. In the u-boot SPL we send a command to the NOR to disable writes to the first N kb of the NOR.\n\nThe flow is:\n1. Chip boots from the primary (golden) chip's u-boot SPL.\n    a. In flavor 1 this is guaranteed to have only been written at MFG.\n    b. In flavor 2 this is protected by step 2.\n2. U-boot SPL sends command to disable writes to the first N kb of the NOR, which contains the entire SPL code.\n3. U-boot SPL checks secondary (non-golden) chip for a valid u-boot image.\n4. If found, perform signature check and switch to u-boot.\n5. If not found, or signature check fails, repeat for primary (golden).\n6. If still not found, hang.\n7. We are now running a valid, signature-checked u-boot.\n8. Do normal u-boot things.\n9. Load kernel/userspace FIT from the same chip we are running on and check signatures.\n10. Switch to kernel.\n\nAt this point, we're running code that has been digitally signed and verified, except for the u-boot SPL.  We protect the u-boot SPL by the two mechanisms mentioned above, so that no user can re-write the SPL.  The only attack is to be physically present and either de-pop the resistor and use a flash programmer."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Good to know this design.\nI did not know the write protection could be implemented that way."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "For us this is an undesired behavior. The golden flash must stay intact by definition. Booting from golden flash is an emergency situation and the customer is warned in the user manual that if they can't reach the BMC after update, then they must look for it at the default settings (which is by the way DHCP for us, so in most cases the network settings will remain the same)."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "OK.\nMake this an optional step."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "Sounds we end up in this scenario if there was an error. Maybe we need to specify that if BMC is running on the golden image because it failed to boot from the primary image. Also we could add the trigger to switch on kernel panics for example."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 59,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Will update this info"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 61,
                    "reviewer": {
                        "name": "Adriana Kobylak",
                        "email": "anoo@linux.ibm.com",
                        "username": "anoo1"
                    },
                    "message": "By \"full image\" you mean that we use the golden image and we copy it to the primary flash, or does a user still need to upload an image to update?\nAlso do you see this update being done automatically if BMC detects it booted from the golden flash or would this be user initiated?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 61,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "In our implementation, it just boots into Golden image and lets the user to update the primary flash."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 61,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "For now I think let the user (e.g. system admin) to update the primary flash manually, by uploading the full image that will erase and program the whole primary flash."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "This is achieved for us by modification of the u-boot environment on the golden flash chip."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "OK"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Alexander Amelkin",
                        "email": "a.amelkin@yadro.com",
                        "username": "AlexanderAmelkin"
                    },
                    "message": "This is not needed if the golden flash chip is r/o."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ivan Mikhaylov",
                        "email": "i.mikhaylov@yadro.com",
                        "username": "fr0st61te"
                    },
                    "message": "I'm not sure, why do we need to update/sync settings? Are we talking about static network settings or which one?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Let's make it an optional step."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Ivan Mikhaylov",
                        "email": "i.mikhaylov@yadro.com",
                        "username": "fr0st61te"
                    },
                    "message": "It can be done just by reboot, it will be switched automatically into primary without setting anything."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "From aspeed doc:\nIn the 2nd flash booting mode, the address mapping to CE0 and CE1 would be swapped. To restore\nthe address mapping, firmware should clear the 2nd boot mode register in the WDT2 status register WDT30.bit[1].\n\nThat's why I think it is necessary to clear that by writing bit0 of WDT34.\n\nBut I will re-word this anyway since it's too aspeed specific."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Ivan Mikhaylov",
                        "email": "i.mikhaylov@yadro.com",
                        "username": "fr0st61te"
                    },
                    "message": "It's already done by aspeed driver with restart handler -> \nhttps://elixir.bootlin.com/linux/v5.9-rc5/source/drivers/watchdog/aspeed_wdt.c#L158"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "hmm... That part of code is not to clear the WDT30 bit0/1, but make SoC to boot from primary after the watchdog times out.\nSo I think we still need to clear the WDT30 bit0/1 by writing 1 to WDT34 bit0, according to the datasheet."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Ivan Mikhaylov",
                        "email": "i.mikhaylov@yadro.com",
                        "username": "fr0st61te"
                    },
                    "message": "Watchdog driver makes it possible with restart_handler to switch to the primary side without any additional writes to anything.\n\nIt is ast2400/2500 specific that you're talking about, we made this one for our needs - https://lkml.org/lkml/2019/8/28/387 and we using this for switch back into to the normal address mapping on ast2400 before reflashing primary side."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yup. The updated patch describe this as \"it shall clear the setting that is related to booting to the golden image\", and I think that should be OK and it is not aspeed specific anymore.\n\nThanks for the above info though."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There is some subtlety between the AST2400 and AST2500 that I recall Milton explaining to me once.  Might need his feedback on how to do this in a portable way."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 73,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The wording here is updated, so there is not need for SoC specific details in the design doc here."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 127,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
            "parents": [
                "919d5958cf859a7e753cc48ea1278ff4f122e0b4"
            ],
            "ref": "refs/changes/07/36407/3",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1600250973,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why did you choose to make the secondary flash the golden image?\n\nFor verified-boot reasons we make the primary flash the golden, so that we are always running the U-boot SPL from the fixed/golden image.  The SPL switches to the secondary flash chip as necessary/available.\n\nI think you need to propose how verified-boot can be supported if the secondary flash is the golden."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "This document does not resolve the problems related to secure/verified boot.\nOn ast2500, there is no \"real\" secure boot (e.g. in your case, a root user is able to modify the u-boot SPL on the primary flash, and compromise the verified boot).\nSo we accept the fact that there is no secure boot in this design."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> e.g. in your case, a root user is able to modify the u-boot SPL on the primary flash, and compromise the verified boot\n\nI mentioned this in response to another comment but this is not true.\n\nWe have implemented and publicly available code for a static-layout + golden-image + secure/verified boot.  I don't really think we should pursue a *different* design if it has obvious shortcomings.  There are learnings we've already accomplished so why not leverage that?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Thanks for the information, we did not know there is such a design because it's not mentioned in the upstream doc/code...\n\nDoes the implementation depend on specific hardware (e.g. some resistor to lock NOR)?\nIf there is no dependency, would you kindly upstream the implementation so that we could share the same design in the upstreamed code?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We have this assumption for any image, don't we?\n\nWhat I can't tell (and I've not read fully through) is if this implies the golden image will always use the default.  What we do in our golden image is still mount the RW-FS from the non-golden image to get these settings."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "In this design, we do want to use the default username/password, it's meant to be used only for disaster recovery."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would suggest we keep that as an option then.  You can check the integrity of any file system as you mount it, so I don't know why we wouldn't attempt to mount the rwfs.\n\nYou said it is meant for disaster recovery but we also have part of the design indicating that the WDT will be used to switch over to it, so certain crashes can also cause a failover."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "OK, will update this part to make it optional."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why is this the case?  This seems not be required."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "With UBI, there is only u-boot on primary flash and alt-u-boot in the secondary flash. The UBI's ro/rw fs could reside in either primary or secondary flash.\nSo it does not really have the golden concept."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "But that is just an implementation of how we're using UBI now.  There isn't any reason why you couldn't use UBI and define a golden image (or make one of the devices hardware read-only), right?\n\nMaybe this is a subtlety of the way this sentence is structured.  There is UBI as an underlying technology and there is the current openbmc flash layout that utilizes UBI.  I think you're referring to the later but my question is why the technology can't still be used to accomplish what you desire."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yes, the wording does mention it as \"UBI flash layout\" which is how the current OpenBMC's implementation using UBI and dynamic flash layout.\n\nI want to add the note that this design does not work with the above UBI (and dynamic) flash layout."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 46,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is this Linux dts or U-boot dts?  I think you need to clarify where the responsibility lies."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 46,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The unfortunate side-effect of this proposal seems to be that the version of the non-golden image cannot be displayed by the golden side because the dts doesn't seem to have the layout of the other chip.  That means we get none of the xyz/openbmc_project/Software objects created for the opposite side.\n\nIs this something that can be resolved?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "It is intended.\nIn this design, the BMC only sees a single version on the running flash.\n* When it's the primary flash, the BMC does not manage the golden flash at all (except it could optionally sync networking settings);\n* When it's the golden flash, the BMC only shows the running version, and the code update will program the primary flash.\n\nIn any case, the bmc software object is created only for the running version."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> It is intended. In this design, the BMC only sees a single version on the running flash.\n\nWhy is that a good thing?  We have a utility in fb-openbmc's golden image implementation to be able to read the version of the golden and we use it quite frequently.  It is good to know what vintage of firmware you have on your systems for the cases where they do fail back to the golden side, so that you know what versions you need to support and test."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> Why is that a good thing?\n\nIt is easier to implement, really just that :)\nAnd I think Yadro uses a similar design as described in this doc.\n\nIf you could upstream fb-openbmc's golden image implemention, I would love to try it and possibly use it that way."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think that there were some properties added for PFR support by Intel recently (or maybe me) that should cover what you need here without defining a new property.  Let me know if it doesn't and we can discuss."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The PFR is a different story, it adds the StandbySpare part.\n\nA candidate dbus change is https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/36587, and we are discussing there."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "My relation to PFR was that they had an 'Active', 'Backup' and 'Staged' image locations.  The golden image is, effectively, a form of 'Backup', right?\n\nAlternatively, I think that the RedundancyPriority could equally be used to represent an image which is in the golden flash bank, couldn't it?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> My relation to PFR was that they had an 'Active', 'Backup' and 'Staged' image locations.  The golden image is, effectively, a form of 'Backup', right?\n\nYes, the PFR requires 3 parts, and the \"Backup\" is something like golden image. But I do not really want to mention that, because it requires special CPLD/FPGA to program the 'Active', it's too specific.\n\n> I think that the RedundancyPriority could equally be used to represent an image which is in the golden flash bank, couldn't it?\n\nYes, it's a good idea. I will update the doc to suggest to use a read-only RedundancyPriority to represent the status."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 54,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Done"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You could take care of this by copying the rwfs into a ramfs before mounting it."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "It's a good point.\nBut when the BMC is running on the golden image, it could mean the primary flash is broken, and the rwfs could be broken too.\nThe idea is really to not touch the primary flash, and just do a full erase and program.\nUpdated this part to describe why the golden image should not mount the primary's rwfs."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You keep mentioning networking settings, but why are networking settings the only ones which are special enough to do this with?\n\nGenerally we would not want the machine to automatically go to the default username and password unless there is serious file system corruption.  Otherwise, rooting a machine is as simple as triggering the WDT."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> You keep mentioning networking settings, but why are networking settings the only ones which are special enough to do this with?\n\nThis is a requirement of our BMC that fits our usage.\n\n> Generally we would not want the machine to automatically go to the default username and password unless there is serious file system corruption.  Otherwise, rooting a machine is as simple as triggering the WDT.\n\nAs previously noted, the golden image is meant to be used for disaster recovery, so (in production) it does mean there is a serious corruption of the primary flash."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The data we have suggests that it isn't always due to a flash corruption that we're ending up running on the golden image.\n\nBut, wouldn't the 'mount' operation and/or fsck tell you if the flash+filesystem are good?\n\n> This is a requirement of our BMC that fits our usage.\n\nWe need to be careful about this kind of direction.  If this is a Bytedance-only design, we should be clear about that.  Ideally if you have specific requirements that are not generally applicable we should be able to PACKAGECONFIG that in/out."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Yes, that's why it's mentioned as \"Optional\", and it could be enabled by PACKAGECONFIG.\nBy default it does not sync anything like how Yadro uses the golden image.\nWe want to sync the networking settings because it's required for our BMC to have the static IP when it's running on golden image."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I suspect you're going to need u-boot changes as well."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I think no need for u-boot changes, but not 100% sure...\n@Joel @Ivan Mikhaylov could you kindly help to check if this would involve u-boot changes?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The u-boot changes I am suggesting would be necessary to accomplish verified boot correctly.  We have the code available for that but I don't think it is upstreamed.\n\nWould you like me to set up some time with our verified boot developer to discuss what we have implemented already?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "> Would you like me to set up some time with our verified boot developer to discuss what we have implemented already?\n\nPlease do!\nAnd if possible, please upstream the implementation if it does not require specific hardware.\nThanks!"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "Our verified-boot provides 2 strong guarantees, (1) the BMC CPU will RESET into a state we control, (2) the BMC will always recover into a known-good state for catastrophic errors. The second reliability guarantee is a primary motivation for having a \"golden image\" which will never been changed after manufacturing.\n\nVerified-boot leverage a feature of U-boot \"second phase loader\" (SPL), which is designed to enable vendor-specific method for generating ROM code that bootstrapped a larger, field upgradable, firmware. Essentially verified-boot is: the SPL will verify the image before it load it. If the verify failed, it fall back to load the golden image. \n\nThus, all the verified-boot logic was implement in SPL. We have up-streamed several changes to U-boot to allow verified-boot implemented in the SPL. Those changes are simple and extend the container for public keys, cryptographic hashing and signature checking algorithms into the SPL build framework."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "The verified-boot's main job is detecting those \"catastrophic errors\", i.e. the main image is corrupted, is not trusted, is known compromised or is too old etc. It is verified-boot that decide when and how to boot into \"golden image\" in a more comprehensive and hardware independent way.  \n\nSo we suggesting a design which proposes deploy a golden image, also considering when and how the system boot into this golden image."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Ivan Mikhaylov",
                        "email": "i.mikhaylov@yadro.com",
                        "username": "fr0st61te"
                    },
                    "message": "Lei, Patrick, in our case, we can safely dive into second side from linux kernel without any proxies or u-boot settings. I've described that mechanism in conversation with Lei in openbmc list. \n\n> The second reliability guarantee is a primary motivation for having a \n\"golden image\" which will never been changed after manufacturing.\n\nBut what happens if you want to put some critical fixes into \"golden\" side?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Thanks Dan Zhang and Ivan. They are valuable information.\n\n@Dan Zhang would you please upstream the design and code?\n\n> But what happens if you want to put some critical fixes into \"golden\" side?\n\nIn this design, it is still possible to program the golden side if necessary, e.g. manually copy the image and program the golden spi flash. I expect that is rare though"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 102,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> @Dan Zhang would you please upstream the design and code?\n\nLei, I think you asked me this earlier also.  \n\nKeep in mind that all of our code is in facebook/openbmc for our current production systems and is an entirely different codebase than openbmc/openbmc.  Remember that facebook/openbmc predates openbmc/openbmc and the community was fractured about 4-5 years ago.  We're working to migrate over to openbmc/openbmc (see Tiogapass and YosemiteV2 efforts) but it is a slow moving process.\n\nI say this because there isn't an \"upstream\" in the sense of this code.  It isn't like we forked openbmc and are keeping this code to ourselves.  But also it isn't high on our priority right now to have Dan port our verified-boot implementation to openbmc/openbmc.\n\nHaving said that, if there are pieces you think would be useful to have us work together, we can discuss that and see what our ability is to assist.  Dan has a lot of expertise in the changes done in u-boot for verified-boot and I agree it would be great to get those upstreamed into u-boot proper (and then back down into openbmc)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "type": "ADDED",
                    "insertions": 119,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 132,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "de2f49bec58c31417122fa969201eb0b2cb2c8cb",
            "parents": [
                "919d5958cf859a7e753cc48ea1278ff4f122e0b4"
            ],
            "ref": "refs/changes/07/36407/4",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1600932868,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "type": "ADDED",
                    "insertions": 120,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 133,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "58c2f25c5e1cc48bb06167821c7a78858d2c1a21",
            "parents": [
                "919d5958cf859a7e753cc48ea1278ff4f122e0b4"
            ],
            "ref": "refs/changes/07/36407/5",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1601014175,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Is there a reason to change from the current bmc label?\n\nThis would allow the base image to continue to be include in the dts, and the redundancy would\njust add the additional golden flash with optionally designated label for the golden rwfs if that is to be updated."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The intention is to describe that it shall add a new \"flash\" for the secondary flash chip. Typically it's described as `flash@1`, and the label could be `alt-bmc`.\nThe wording here is updated."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Actually coming back to this after reading some history, is flash1 the second chip select?   \nIf so why would we not label this flash \"golden\"?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "As explained as above, it's labeled as `alt-bmc`."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "to avoid loss of control, I suggest syncing to the golden rwfs be a separate api that proves the settings are usable (eg the network is accesable and the/a password was used to authenticate)"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Do you think this is a mandatory function?\nIf yes, we could describe it here and remove the \"Optional\"."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 65,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Be more specific, same as single static image?"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 65,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Ack"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Does the update use the new user/password or the user/password of the current image?\n\nWhat if one flashes a new image and doesn't know the password for  the new image?\n\nThis points out that the sync should be from the current image, but not the on being loaded."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The sync happens when the BMC is running on the primary flash, but not during the code update.\nUpdate the wording here to be more clear."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "in my proposal to update after using the image, this would not be true"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The sync is happening in primary flash's runtime, not during code update.\nSo the settings are \"always\" in-sync."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 83,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "is there a reason not to sync?\n\nWe should probably have an option to clear the primary rwfs and then sync the network settings.\n\nIs there ever a case to sync the golden password to the primary image?   If the golden is factory and known to an attacker it can be propaged to a \"newer\" image.  However, if the primary is a vendor distribution then we would like to set a customized password before booting into it."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 83,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "As explained above, the \"golden\"'s settings are always synced. (Because we do not know when the primary one will be broken).\nSo the case here is to sync the settings from golden back to the primary.\n\nLet me update the wording here to make it more clear."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 86,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "If this was triggered from the reboot, its not a bootloader flag but a hardware latch that is cleared by triggering the side switch watchdog again, which can be made a reboot parameter."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 86,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Ack"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "once the image is written a hardware cycle will revert to the primary even if some of these later steps are incomplete unless the bootloader somehow checks some signature written late in this validation."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 89,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "The wording here means that if the \"recovery\" steps get failure, it should stay in golden image before the hardware cycle, and wait for manual fix."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 111,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "Actually its a bit more nuanced with the aspeed.\n\nIf the watchdog has selected the alternate flash, the hardware either forces chip select 0 to be 1 (ast2400) or swaps chip 0 and 1.\n\nThe state of the watchdog can be read, but\n- for the 2400 the kernel will need to choose second image and clear the latch to access the first, and in addition there are concerns that chip 0 is not tuned\n- for 2500 and 2600 the code has to know to change behavior, but the dts can be the same"
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 111,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "I have no experience on other chips than aspeed, hopefully other chips could have similar design.\n\nFor ast2400, I give up because we do not have any products using it.\nFor ast2500/2600, we need to update the dts to enable the secondary flash and the wdt2."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 122,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "The robot can force the watchdog at u-boot if enabled."
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "line": 122,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "yulei.sh@bytedance.com",
                        "username": "mine260309"
                    },
                    "message": "Good to know!\nAdded the info."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "type": "ADDED",
                    "insertions": 129,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 142,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "4dbb2f5f619d2b0724be0ccee931498950af098e",
            "parents": [
                "b5cddbb2c96cca6ae055575fa6580f06b9a1a844"
            ],
            "ref": "refs/changes/07/36407/6",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1639034208,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/dual-flash-with-golden-image-design.md",
                    "type": "ADDED",
                    "insertions": 133,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 146,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "2f974938e25af0e37e192c57965211a37afa851c",
            "parents": [
                "b5cddbb2c96cca6ae055575fa6580f06b9a1a844"
            ],
            "ref": "refs/changes/07/36407/7",
            "uploader": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "createdOn": 1640252974,
            "author": {
                "name": "Lei YU",
                "email": "yulei.sh@bytedance.com",
                "username": "mine260309"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 20,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there conflict between what \"primary\" and \"secondary\" means between here and 33?"
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This should probably be an option?  We never mount the rw file system if we're not running on the primary flash."
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How are you going to handle secure boot with this design?  What you're proposing here seems exactly the opposite of what secure boot does.\n\nFor secure boot you always want to boot off flash0 (which is locked as R/O) and then early on in u-boot it verifies that flash1 is good and loads the kernel/initramfs from there.  If flash1 is bad, then it proceeds with the content in flash0."
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ah, so you are maintaining two completely separate R/W volumes.  Interesting."
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think you should make sure you are exposing the multi-slot design for this.  RedundancyPriority is maybe not relevant then?\n\nWe might need an explicit state still to know which one is \"Active\" but I'd have to dig into it more."
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 62,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I left comments on your dbus-interface as well, but I don't see why this is necessary if you implement the multi-slot design correctly.\n\nDo you really have cases where you want your users to update both images at the same time?  I don't think we should have an explicit dbus interface for it, but just have them activate one after another.  Otherwise someone doing multi-host (or multiple-PSUs) will ask for another interface to activate all them at once too."
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "line": 100,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think you need to specify how this feature is enabled.  I assume you're adding some kind of machine-feature for it?  Lets document that."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "architecture/code-update/static-layout-dual-flash-design.md",
                    "type": "ADDED",
                    "insertions": 120,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 135,
            "sizeDeletions": 0
        }
    ]
}