{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "I143cff526cf461be5824358bf19fa460fa4b5815",
    "number": 56967,
    "subject": "fru-device: add options to set the probing addresses",
    "owner": {
        "name": "Tom Tung",
        "email": "shes050117@gmail.com",
        "username": "chihweitung"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/entity-manager/+/56967",
    "hashtags": [],
    "createdOn": 1662336001,
    "lastUpdated": 1665605359,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1662336001,
            "reviewer": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1662336037,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1662336042,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1662336639,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/50340/ : FAILURE"
        },
        {
            "timestamp": 1662429429,
            "reviewer": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1662429517,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1662429517,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1662429750,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/50358/ : SUCCESS"
        },
        {
            "timestamp": 1662432808,
            "reviewer": {
                "name": "Jiaqing Zhao",
                "email": "jiaqing.zhao@intel.com",
                "username": "jiaqingz-intel"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1662477835,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1662517717,
            "reviewer": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1662651177,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1662978739,
            "reviewer": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1664388500,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1665605359,
            "reviewer": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "ef275a88a197c59fb1bee24e91fd6a0a7a71e45d",
            "parents": [
                "53f84ca26e949115d805d4f2834347df3238145e"
            ],
            "ref": "refs/changes/67/56967/1",
            "uploader": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "createdOn": 1662336001,
            "author": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "src/fru_device.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 38,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "cecba6deb7492f5daf265c82e253d2bcc056a2f8",
            "parents": [
                "53f84ca26e949115d805d4f2834347df3238145e"
            ],
            "ref": "refs/changes/67/56967/2",
            "uploader": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "createdOn": 1662429429,
            "author": {
                "name": "Tom Tung",
                "email": "shes050117@gmail.com",
                "username": "chihweitung"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Per the design of EM, this would go into the config files, not as a configure time option.  Take a look at benjamins design doc, which proposes the idea of a \"port\" abstraction for a given i2c bus.  That's the object that would take in a list of addresses to poll."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Tom Tung",
                        "email": "shes050117@gmail.com",
                        "username": "chihweitung"
                    },
                    "message": "Thanks for the feedback!\n\n> Per the design of EM, this would go into the config files, not as a configure time option.\n\nAssuming you meant it's preferred using runtime config files instead of compile time config. I will move this to use runtime config.\n\n> Take a look at benjamins design doc, which proposes the idea of a \"port\" abstraction for a given i2c bus.  That's the object that would take in a list of addresses to poll.\n\nJust to ensure I check the right one as you mentioned. Is it https://gerrit.openbmc.org/c/openbmc/docs/+/54205?\n\nI took a quick look and have a question: Would that be described in board json files? I mean that we don't know which board config to be used when we are at probing addresses stage in fru-device.cpp. Such that, I don't understand how do we know the bus/address to be probed if the abstraction is decribed in board config files. Could you maybe shed some lights on this? Thanks!"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Thanks for the feedback!\n> \n> > Per the design of EM, this would go into the config files, not as a configure time option.\n> \n> Assuming you meant it's preferred using runtime config files instead of compile time config. I will move this to use runtime config.\n\nNot quite, what I mean is that this is not a global firmware policy, but a policy based on what hardware you're on, which means it needs to go into the config files.\n\n> \n> > Take a look at benjamins design doc, which proposes the idea of a \"port\" abstraction for a given i2c bus.  That's the object that would take in a list of addresses to poll.\n> \n> Just to ensure I check the right one as you mentioned. Is it https://gerrit.openbmc.org/c/openbmc/docs/+/54205?\n\nYou got it.  This data might be attached to the port object.\n\n> \n> I took a quick look and have a question: Would that be described in board json files?\n\nAssuming the port you're trying to limit is on the board, yes.\n\n> I mean that we don't know which board config to be used when we are at probing addresses stage in fru-device.cpp. Such that, I don't understand how do we know the bus/address to be probed if the abstraction is decribed in board config files. Could you maybe shed some lights on this? Thanks!\n\nYou've seen this feature?\n\nhttps://github.com/openbmc/entity-manager/blob/3b13fb4b7f6b3dee5db2966b444d61c11f84153a/src/fru_device.cpp#L487"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Tom Tung",
                        "email": "shes050117@gmail.com",
                        "username": "chihweitung"
                    },
                    "message": "Thanks for shedding the light on! However, I still have a question and I put it with other replies below.\n\n> Not quite, what I mean is that this is not a global firmware policy, but a policy based on what hardware you're on, which means it needs to go into the config files.\n\nI see. So, we want something similar to `blacklist.json` since we would like a run time config if possible.\n\n> You've seen this feature?\n> https://github.com/openbmc/entity-manager/blob/3b13fb4b7f6b3dee5db2966b444d61c11f84153a/src/fru_device.cpp#L487\n\nGot it. I want something simliar to blacklist. In my case, I might want to have an opposite approach (an allow list or an allow map). So that we can only probe the addresses per bus based on the map.\n\n> > Just to ensure I check the right one as you mentioned. Is it https://gerrit.openbmc.org/c/openbmc/docs/+/54205?\n> You got it.  This data might be attached to the port object.\n> > I took a quick look and have a question: Would that be described in board json files?\n> Assuming the port you're trying to limit is on the board, yes.\n\nI still have a question: fru-device starts from probing the devices to see if there are FRU devices. Then, entity-manager determines which config to use base on the results.\n\nIn my case, I want to restrict the probing addresses in fru-device (at that moment, entity-manager doesn't know which board configs to use). In this case, I don't understand how does port object decribed in board configs fit into my case. One way is to parse all the board configs before starting probing the addresses per bus in fru-device. So that we know which addresses can be probed from the board configs. However, I am not so sure if it's the right direction.\n \nI guess I might misunstand something. Could you help to elaborate on that?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I see. So, we want something similar to `blacklist.json` since we would like a run time config if possible.\n\nblacklist.json lists specific bus numbers tied to the DTS.  What is proposed above would be in the EM config files, which would have similar information, but wouldn't have a fixed set of bus numbers.\n\n>  In my case, I might want to have an opposite approach (an allow list or an allow map)\n\nHappy to have a discussion about how that would work.\n\n> (at that moment, entity-manager doesn't know which board configs to use). \n\nThis is the key thing that needs solved here, and I think part of it would involve adding a feature to Probe that allows for compile time selection of a baseboard file, in the cases where you know what baseboard you're on.  Something like Probe MachineType EQUALS my_machine.\n\n> One way is to parse all the board configs before starting probing the addresses per bus in fru-device.\n\nYep, I think this is the right approach."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Tom Tung",
                        "email": "shes050117@gmail.com",
                        "username": "chihweitung"
                    },
                    "message": "> This is the key thing that needs solved here, and I think part of it would involve adding a feature to Probe that allows for compile time selection of a baseboard file, in the cases where you know what baseboard you're on.  Something like Probe MachineType EQUALS my_machine.\n\nI might misunderstand something still. Only knowing what baseboard I am on and what can be the connected boards might still be not enough. Since there are boards which might be or might not be connected, we still need to find the fru for all the addresses and buses. Unless, we decribe this information on the baseboard. However, I am not sure if we should decribe this on the baseboard or the possible connected board seperately. \n\nI am thinking if this could be something like:\n- For each board config file, there is attribute/field to describe its adderss and/or possible buses.\n- In fru_device code, we check all the board config files first to get the possible buses and addresses. Then, instead of iterating all addresses (0x03~0x77) for all buses, we iterate the possible bues and addresses only."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jiaqing Zhao",
                        "email": "jiaqing.zhao@intel.com",
                        "username": "jiaqingz-intel"
                    },
                    "message": "LGTM"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems like an excellent starting point for a discussion around how to make this work, but as written, I don't think is expressive enough to solve the generalized problem except in a few very unique circumstances.  Lets discuss and see if there's a solution that solves all the cases."
                },
                {
                    "file": "config.h.in",
                    "line": 5,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As-written, this is an excellent start, but is nowhere near expressive enough to meet the needs.  Some things it's missing:\n\n1. Per bus addresses\n2. multiple Address ranges\n3. Single addresses."
                },
                {
                    "file": "config.h.in",
                    "line": 5,
                    "reviewer": {
                        "name": "Tom Tung",
                        "email": "shes050117@gmail.com",
                        "username": "chihweitung"
                    },
                    "message": "To meet these requirements, I guess it can be handled by an allow list that defined the bus and addresses as key value pairs to probe the address. In the code, we transform that in to a hash map and run the loop base on the map.\n\nThe config would look like:\n```\n{3, 80-87}, {5, 0x40-0x40}, {*, 55-66}, {8, *}\n```\nAnd this would be parsed to be:\n- bus 3, address from 80 to 87.\n- bus 5, address from 64 to 64.\n- all the buses, address from 55 to 56.\n- bus 8, address from 3 to 119. \n\nAnd then being transfromed to be a `vector<set<pair<int, int>>>` map. Also, we can handle the overlap issues in this step if needed.\n\nDoes this sonud good to you?"
                },
                {
                    "file": "config.h.in",
                    "line": 5,
                    "reviewer": {
                        "name": "Tom Tung",
                        "email": "shes050117@gmail.com",
                        "username": "chihweitung"
                    },
                    "message": "If this becomes something similar to blacklist.json, the example would be like:\n```\n// allowList.json\n{\n  \"addresses\":\n  [\n    {\n      \"bus\": 3,\n      \"fromAddress\": 80,\n      \"toAddress\": 87,\n    },\n    {\n      \"bus\": 5,\n      \"fromAddress\": 40,\n      \"toAddress\": 40,\n    },\n    {\n      \"bus\": *,\n      \"fromAddress\": 55,\n      \"toAddress\": 66,\n    },\n    {\n      \"bus\": 8,\n      \"fromAddress\": 3,\n      \"toAddress\": 119,\n    }\n  ]\n}\n```"
                },
                {
                    "file": "config.h.in",
                    "line": 5,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think a fixed allowlist solves the generalized problem."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "config.h.in",
                    "type": "ADDED",
                    "insertions": 6,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "src/fru_device.cpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 2
        }
    ]
}