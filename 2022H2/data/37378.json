{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "design",
    "id": "I02d4fd70557c5c32a81b820b92be2faa1a555585",
    "number": 37378,
    "subject": "design: Provide D-Bus Mocking for Integration Test",
    "owner": {
        "name": "Ramin Izadpanah",
        "email": "iramin@google.com",
        "username": "iramin"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/37378",
    "hashtags": [],
    "createdOn": 1602629142,
    "lastUpdated": 1660242261,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1602629142,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1602629608,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 1:\n\nHello Team,\n\nI added a document that discusses the solution for D-Bus mocking for integration testing.\nI would appreciate it if you could provide your feedback on this document.\n\nThank you,\nRamin"
        },
        {
            "timestamp": 1602630188,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Topic set to design"
        },
        {
            "timestamp": 1602704344,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(6 comments)\n\nThanks for writing this up Ramin! I def see some potential here with expanding on our automated testing."
        },
        {
            "timestamp": 1602707088,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Uploaded patch set 2: New patch set was added with same tree, parent, and commit message as Patch Set 1."
        },
        {
            "timestamp": 1602707328,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1602707935,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 3:\n\n(3 comments)\n\n> Patch Set 1:\n> \n> (6 comments)\n> \n> Thanks for writing this up Ramin! I def see some potential here with expanding on our automated testing.\n\nThanks for your feedback Andrew!\nI addressed the nit comments and responded to your questions. Let me know if you have further questions."
        },
        {
            "timestamp": 1602710454,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(4 comments)\n\nLoving this idea;  only minor comments."
        },
        {
            "timestamp": 1602883793,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(7 comments)\n\nRamin,\n\nThanks for showing some interest here in improving testing.  I left some comments throughout.\n\nI think my biggest hang-up on it is understanding the added value of mocking out dbus services.  To me, it seems like quite a bit of extra work over mocking at the \"just before I call dbus\" level, but not a significant value add.  This may give you issues with limited adoption.\n\nHaving said that, it looks like you're primarily focused on the dbus-client side of things.  We don't currently have generated client-bindings for sdbusplus like we do for the server side but I'm working on that.  Without the generated client-bindings there is some amount of manual formulation of dbus parameters that could maybe benefit from testing, but I'm hoping that that goes away over the next year.\n\nFeel free to catch me on IRC sometime next week if you want to have some back and forth."
        },
        {
            "timestamp": 1603125959,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 3:\n\n(4 comments)\n\n> Patch Set 3: Code-Review+1\n> \n> (4 comments)\n> \n> Loving this idea;  only minor comments.\n\nThank you for your comments, Ed. I responded to them. That would be great if you could clarify some of them that I couldn't understand completely."
        },
        {
            "timestamp": 1603126243,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 3:\n\n(7 comments)\n\n> Patch Set 3:\n> \n> (7 comments)\n> \n> Ramin,\n> \n> Thanks for showing some interest here in improving testing.  I left some comments throughout.\n> \n> I think my biggest hang-up on it is understanding the added value of mocking out dbus services.  To me, it seems like quite a bit of extra work over mocking at the \"just before I call dbus\" level, but not a significant value add.  This may give you issues with limited adoption.\n> \n> Having said that, it looks like you're primarily focused on the dbus-client side of things.  We don't currently have generated client-bindings for sdbusplus like we do for the server side but I'm working on that.  Without the generated client-bindings there is some amount of manual formulation of dbus parameters that could maybe benefit from testing, but I'm hoping that that goes away over the next year.\n> \n> Feel free to catch me on IRC sometime next week if you want to have some back and forth.\n\nThank you for your feedback, Patrick. \nI responded to your comments. Please let me know what you think."
        },
        {
            "timestamp": 1603126907,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1603188030,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1604519800,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1604520165,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 4:\n\nThank you everyone for your comments. Based on your feedback, I revised the document. We are now planning to use sdbusplus instead of a python based approach.\nPlease take a look and let me know if you have any comments."
        },
        {
            "timestamp": 1604672735,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1605038376,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 5: Code-Review+1"
        },
        {
            "timestamp": 1605042434,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(3 comments)\n\nMinor changes suggested, but overall seems like a reasonable direction."
        },
        {
            "timestamp": 1605043702,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1605043801,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 6:\n\n(3 comments)\n\nthanks for the feedback. Just addressed your comments."
        },
        {
            "timestamp": 1605045249,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1605652468,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1605652767,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 6:\n\n(1 comment)\n\n> Patch Set 6: Code-Review+1\n> \n> (1 comment)"
        },
        {
            "timestamp": 1605652768,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Removed reviewer Joel Stanley."
        },
        {
            "timestamp": 1605652768,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Removed reviewer Matthew Barth."
        },
        {
            "timestamp": 1605652768,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Removed reviewer Brad Bishop."
        },
        {
            "timestamp": 1605652768,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Removed reviewer Andrew Jeffery."
        },
        {
            "timestamp": 1605910663,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 6: Code-Review+1\n\n(1 comment)\n\nThis is a great piece of work, thanks Ramin!"
        },
        {
            "timestamp": 1605910952,
            "reviewer": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1606144460,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1606200085,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1606205179,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 6: Code-Review+1"
        },
        {
            "timestamp": 1607728021,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n@Ramin - Is this good to go?  I can't tell if there is any unresolved discussion in the last few comments."
        },
        {
            "timestamp": 1636551970,
            "reviewer": {
                "name": "Deepak Kodihalli",
                "email": "deepak.kodihalli.83@gmail.com",
                "username": "dkodihal"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1636647842,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1637113316,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1660242261,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Abandoned\n\nSeems dead."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "4a75c29ed82da65c06f8604f77cdb04e03eacfa1",
            "parents": [
                "919a7b6816a5f16aa72d298e81e0756d95d5031e"
            ],
            "ref": "refs/changes/78/37378/1",
            "uploader": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "createdOn": 1602629142,
            "author": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Just a few nitpicks. \n- There's a few extra spaces at the ends of some lines (like 20, 22).\n- We've tended to line wrap at 80 chars in the design docs (similar to coding guidelines)"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 26,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "nit: Use bullets for this section?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Are you thinking this will also be docker container based?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "Yes, the docker container will have the required libraries, and dependencies to run the tests."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 42,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "So daemon repos would have something like a integration-test folder where they could put their mock code and the test infrastructure will auto load and run it all?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 42,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "We hope that most of the common mock objects and services will be implemented in a separate and new shared repository, and daemon repos only implement the actual integration test and only change the default behavior of the mock services if necessary.  \nThe plan is that the test infrastructure, (docker/python script), prepare the environment and when the tests are run, the in-repo build system will decide what tests to run according to the configuration (e.g., what 'make check' runs in pid-control)."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 45,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "nit: Anything with a date becomes old quickly. I'd just strike this line."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 48,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "I'd be interested in what the meta data looks like in the daemon repos. How do you define what tests are run? How do you define if they pass? Are we using a standard test suite to execute the tests?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 48,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "So, our main contribution is to enable the users to run a mock d-bus and and run mock services on it and interact with the services on their daemon tests. \nThe integration test part can be planned by the users. However, we plan to provide examples of integration tests that use the mock services and this is how it would look like:\n\nFor example, consider swampd (https://github.com/openbmc/phosphor-pid-control/blob/master/test/Makefile.am). Developers listed the unit tests in this make file, e.g., \"sensor_manager_unittest\", etc. They can add integration tests to the list of files that should be run with a 'make check'. And, it only will be run if it is enabled. Standard python (c++) test suits can be used that will print the details of the test results in a log file (similar to unit tests)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "type": "ADDED",
                    "insertions": 68,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 81,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "11a1f51d2a4b8a8b19421656658901df97c5bd6c",
            "parents": [
                "919a7b6816a5f16aa72d298e81e0756d95d5031e"
            ],
            "ref": "refs/changes/78/37378/2",
            "uploader": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "createdOn": 1602707088,
            "author": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "type": "ADDED",
                    "insertions": 68,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 81,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
            "parents": [
                "919a7b6816a5f16aa72d298e81e0756d95d5031e"
            ],
            "ref": "refs/changes/78/37378/3",
            "uploader": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "createdOn": 1602707328,
            "author": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 2,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Generally speaking we use the words as follows on this project:\n\n\"unit test\" - tests ran at a repository level when a piece of code is checked into a repository.\n\n\"integration test\" - tests ran on a whole image level on a real piece of hardware to indicate that the whole image \"integrates well\".\n\nMy casual reading here suggests to me you're talking about \"unit test\" and not \"integration test\".  Amirite?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 2,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "My understanding is that, currently, in openbmc, there are mainly two categories of tests:\n- Unit testing:  a single function/module of a program is separated and its interface to rest of the program will be tested. For example, this one on the pid-control repository (https://github.com/openbmc/phosphor-pid-control/blob/ca791156e2594ce7d25b42793a0a1b60d922fefd/test/pid_fancontroller_unittest.cpp#L89) verifies if the correct value is selected from multiple fan inputs. And, these tests in openbmc, are not necessarily run on a real BMC or simulator. There are docker scripts that can setup the environment and build images to run those tests. These tests are handled by this repository: https://github.com/openbmc/openbmc-build-scripts\n- End to end testing: where the entire system is run to make sure it functions correctly as a whole. I believe this repository is mainly responsible for these kinds of tests: https://github.com/openbmc/openbmc-test-automation\n\n\nBy \"integration testing\", we mean something in between of these two levels. Particularly, we want to run a single OpenBMC daemon (e.g., swampd) and make sure it operates as expected. These tests are intended to be run similar to unit tests, i.e., use a docker script to prepare the environment and build a container that can run the integration tests against a single daemon. We don't expect it to be run on a real/simulated BMC.\n\nMaybe an example would help clear things up. Let's say we want to run swampd and see if it operates as expected in response to its environment. We can have arbitrary initial values for sensors (i.e., temperature, fan RPM, fan PWM, etc.) and see how swampd operates in this environment. This will probably involve multiple functions inside this daemon. e.g., configuring zones, sensors, etc., interactions with dbus, tuning algorithms, deciding about how to change PWM, etc. And, in the test, we would probably check multiple things. For example, was the fan PWM set as intended according to the algorithm?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 2,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "I agree with the above and somewhat like this use of terminology. It separates most current unit tests from these tests where we stand up the entire unit and make sure it behaves correctly. We can think of mosts tests being unit of unit tests given how OpenBMC might define a unit. These tests are end2end for a single unit of the OpenBMC system. I guess the unit / integration / end2end terminology doesn't really fit all that well in describing this."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would contest that this is not a true statement.\n\nIt is trivial to take a phosphor-dbus-interface defined-YAML file and mock up a service to implement it using the sdbus++ generated bindings.  We have examples here: https://github.com/openbmc/sdbusplus/blob/master/example/calculator-server.cpp"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 17,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "Thanks for pointing this out. Yes, this seems to be helpful in building mock services, especially with unit tests. I'm hoping that the proposed solution would make it more convenient to test a daemon that just needs a few services around it and you want to set it up in different states for each test."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 17,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "+1. You could do the above work one off for every single project, but we want to provide convenient tooling to make it easier for any given project to do that."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Martin definitely uses \"integration tests\" in a different way than we do in this project.  I think we should be careful about that."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "I put this reference to clarify what we meant by \"integration testing\": \"They test the integration of your application with all the parts that live outside of your application.\" Probably, I should emphasize that, here, by \"application\" we mean \"a single daemon\" within OpenBMC and not the \"whole  OpenBMC OS image\"."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 26,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "nit: still got a few extra spaces at ends of lines. In gerrit there's an option to turn this on so you can easily see them."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 26,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "I think this is fixed in the latest patchset(6)."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm having trouble understanding what the value of this becomes.  If most of the time we cannot run the real daemon(s) we are interacting with, why are we bothering to mock at a dbus level?  The fact that you went across dbus to talk to a fake daemon doesn't really seem to hold any more testing value than simply mocking the call before it enters the dbus libraries."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 39,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "I think \"mocking the call before it enters the dbus libraries\" would work very well mainly in unit tests that we want to test a single function/unit/module. For example this one verifies a single functionality without calling dbus (https://github.com/openbmc/phosphor-pid-control/blob/ca791156e2594ce7d25b42793a0a1b60d922fefd/test/pid_fancontroller_unittest.cpp#L149). Probably, some of the functionalities that can be tested by integration testing, are already verified by various unit tests. But the goal of integration testing is to verify that the daemon as a whole functions as expected. I would expect that it will add more values to the testing infrastructure and improves the software quality.\n\nFor example, in my prototype, it helped reveal an issue that happened because of an inconsistency between the versions of different repositories that I used. I created a mock sensor using an older spec (https://github.com/openbmc/phosphor-dbus-interfaces/blob/05375b14e5a68ac249da6a8cd68e3d522a7ed022/xyz/openbmc_project/Sensor/Value.interface.yaml) and used int64 type for values, but when I tested it with swampd, it expected a double value and that resulted in unexpected behaviors.\n\nI'm optimistic that having integration testing similar to this, would help find more issues in OpenBMC daemons and improves their quality."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 39,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Another part of the value is a sanity check that the daemon actually works at presubmit time, which we don't typically do today even with pretty good unit test coverage. We can also avoid non-trivial mocks of the sd_bus API that end up being convoluted for the reader and pretty rigid."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Could we also add that the example be a non-trivial (or maybe even trivial) daemon that already runs on OpenBMC?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "Do you mean run the tests on a real/simulated OpenBMC? What kinds of examples do you have in mind specifically?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Do you mean run the tests on a real/simulated OpenBMC? What kinds of examples do you have in mind specifically?\n\nNo, I mean rather than creating an \"example\" service from scratch, it would be great if you could take a service that already follows the openbmc best practices (I'm thinking phosphor-networkd, certificate service, or something else \"simple\") and mock that out, so we can show the changes needed to accomplish the mocking."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Don't we already have that?  I thought CI runs unit tests already?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "Yes we do have that for the current unit tests. I just wanted to emphasize that we resolve the new dependencies related to the mock library."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 70,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "can you rephrase \"configure, build, and run integration tests\" then?  That makes it sound like you're adding new features."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is there an opportunity here to include this by default with something like sdbusplus or phosphor-dbus-interfaces?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is the first time you've said *where* this code will run and to me you're not really describing anything above unit testing except that you're providing a method to launch mock-daemons?\n\nThere are a few serious issues with launching anything dbus-related in the unit-test environment:\n\n- Most of our dbus applications use the system bus but that requires root permissions.  You said it wouldn't require root permissions in the requirements above.  So, that means you now have to switch the application-under-test to use the user bus in these special test cases.\n\n- Service names need to be unique per-bus.  We have had problems with applications spawning dbus services in testing because we run the builds in parallel.  You can get a machine with multiple jobs running at the same time, some of which expect to use (or mock) the same service name.  We've fixed that in test-cases by often adding some random number to the reserved service name, but now you're again not testing the real connection between the applications-under-test.\n\n- The most widely used dbus service is mapper.  You will want a \"real\" mapper for your test environment because that is how many applications get to the service they really want and we don't want duplicate copies of mapper mocks in every repository."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "I couldn't understand this question. Do you mean that we include the common functionalities in an existing repository such as \"sdbusplus\" or \"phosphor-dbus-interfaces\" and not add a new repository?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "- The dbusmock library allows us to start a \"local system bus\". (see https://github.com/martinpitt/python-dbusmock/blob/a2cbc43ade19d265ad9fd2301599f44162ce8d07/dbusmock/testcase.py#L51) and daemons can interact with it similar to a real system bus. Also, it does not interfere with system services, because it is a separate local bus.\n- I didn't see this issue in my quick prototypes, because each process that \"starts a fake system bus\", will start on a unique address. So, this means that, for example, we can run two tests at same time. swampd interacts with its own bus that has sensors and other services and impid interacts with another bus that separate sensors and services customized for its specific tests. We can have services with the same name on these two tests, because they are running on separate buses.\n- You are right, it doesn't make sense to fake the mapper service. We will use the \"real mapper\" and it is available in the docker environment. It will operate on the fake bus that we create, so it can find objects on each bus that it connects to."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 75,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I mean, rather than creating a new repository, is there an existing repository that could be used instead?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 75,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Between the build-scripts repository and phosphor-dbus-interfaces we can probably find a good home for most of the changes."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 80,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We do not run python on the BMC.  If you choose to do this with python you're significantly limiting the value of this framework.\n\nI again would suggest looking at what sdbusplus already provides for quickly creating objects and interfaces from our existing definitions.  I glanced at the python-dbusmock homepage and I'm not seeing much it provides that sdbus++-generated server bindings don't already.  (If there are features you need, I might even be convinced to develop them for you.)"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 80,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "I think the main goal is to run these tests similar to unit tests, i.e., provide the environment, e.g., using a docker container. We are not planning to run this on a real/simulated BMC. The python-dbusmock allows for running an arbitrary bus for the duration of the test that does not interfere with other services. It also provides some convenience functions to deal with dbus and mock services on it. I think it is convenient for writing quick mock services with just the minimal required functionalities with desired properties/behaviors."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This assumes that the build infrastructure has a dbus-broker running, and the CI infrastructure has the ability to spin up new dbus session buses, or connect to the system bus, which might not always be the case.  If that's an expected constraint, you might want to call it out explicitly."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "I'm not sure if I understood your questions correctly. When I use the build-script repo to create the environment, I can run dbus in the docker container and I can use the mock library to start session/system buses. see (https://github.com/martinpitt/python-dbusmock/blob/a2cbc43ade19d265ad9fd2301599f44162ce8d07/dbusmock/testcase.py#L51).\nAre you saying that I should tell the user that if they are not using the docker script from the build-script repo, how they should prepare the environment?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 84,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Patrick did a better job of summarizing the issues on line 75.  Lets continue that discussion."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Need to add sdbus++/sdbusplus here if you rule it out. ;)"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 96,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "Thanks for mentioning this. I will add it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "type": "ADDED",
                    "insertions": 131,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 144,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "89ccf1640dbf2d42af7880dfc22d3d2782b700a8",
            "parents": [
                "919a7b6816a5f16aa72d298e81e0756d95d5031e"
            ],
            "ref": "refs/changes/78/37378/4",
            "uploader": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "createdOn": 1604519800,
            "author": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "type": "ADDED",
                    "insertions": 223,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 236,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "7d17487a88f4b85ae1740ae63050f941d3bfc62e",
            "parents": [
                "919a7b6816a5f16aa72d298e81e0756d95d5031e"
            ],
            "ref": "refs/changes/78/37378/5",
            "uploader": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "createdOn": 1604672735,
            "author": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 20,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "minor: the formatting here leads me to not know if this is suppose to be a set of bullets or a single paragraph."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 20,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "yeah it looks confusing here, given the 80 characters rule, I had to add extra new lines when necessary, but it looks fine in the compiled markdown. I meant it to be 2 different paragraphs. Just changed it to 2 bullet points. Let me know if it looks better now."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 132,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "minor: I hesitate at using this term here.  \"dbus-broker\" is a particular implementation and nothing we're doing should preclude using an alternative implementation.  It seems like the specification uses \"dbus message bus\"."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 132,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "Fixed this."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 164,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there anything new that needs to be done here?  phosphor-dbus-interface is an existing server library using our standard interfaces and generated from the sdbus++ YAML.  Wouldn't the gMock pieces just be an implementation of the virtual functions found in P-D-I?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 164,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "It's not a significant change. We are thinking of generating headers like this: https://github.com/openbmc/phosphor-pid-control/blob/master/test/sensor_mock.hpp\njust for convenience and we can also give the user options to mock specific methods and getter/setters."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "type": "ADDED",
                    "insertions": 226,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 239,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "fdc140904a189fd595b9e338c1f30a41750cafa6",
            "parents": [
                "919a7b6816a5f16aa72d298e81e0756d95d5031e"
            ],
            "ref": "refs/changes/78/37378/6",
            "uploader": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "createdOn": 1605043702,
            "author": {
                "name": "Ramin Izadpanah",
                "email": "iramin@google.com",
                "username": "iramin"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 20,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I thought these were the bullets. :)"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 121,
                    "reviewer": {
                        "name": "Deepak Kodihalli",
                        "email": "deepak.kodihalli.83@gmail.com",
                        "username": "dkodihal"
                    },
                    "message": "Curious why this in not a goal - the proposed design could work for solving the unit test problem (where the unit being tested is making D-Bus calls to another service and its reaction to the D-Bus response needs to be tested) as well?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 121,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "My understanding is that this was an intern project that hasn't been worked on in over a year now.  I suspect you're not going to get any answer to this question."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 121,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Yes, this was an intern project and we haven't found someone to take it over yet, although I do still think it would be useful to the community.\n\nTo answer the question, the initial focus was on testing entire daemons rather than individual functions, since this would allow writing tests without having to modify the internals of any of the daemons, significantly reducing complexity. After that it could be expended to serve more needs"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 191,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "I don't understand this.  What do systems with or without python support have to do with this kind of testing?"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 191,
                    "reviewer": {
                        "name": "Ramin Izadpanah",
                        "email": "iramin@google.com",
                        "username": "iramin"
                    },
                    "message": "There were some concerns about the dependency on python.\nThis comment: https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/37378/3/designs/dbus-mocking-integration-testing.md#80"
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 191,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "There isn't any problem adding python as a dependency to a container image....in fact it is already a dependency in the container images we build to run the unit tests.\n\nPatrick did you intend to run these \"almost\" unit tests on the BMC itself?  If enabling that was the motivation for choosing sdbusplus over python-dbusmock then that is what we should write down here."
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "line": 191,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "That seemed like the concern. Or at least to run the unit tests in a simulated environment similar to your intended device. Presumably all with something like openembedded ptest."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/dbus-mocking-integration-testing.md",
                    "type": "ADDED",
                    "insertions": 227,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 240,
            "sizeDeletions": 0
        }
    ]
}