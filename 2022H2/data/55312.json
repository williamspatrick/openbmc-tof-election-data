{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ie931382ee5cf2e47675e32a8d3583b8d7b597b04",
    "number": 55312,
    "subject": "utility: Add support for microsecond timestamps",
    "owner": {
        "name": "Claire Weinan",
        "email": "cweinan@google.com",
        "username": "daylight22"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55312",
    "hashtags": [],
    "createdOn": 1657673794,
    "lastUpdated": 1660164196,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1657673794,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1657673851,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657673851,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1657674010,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 2: Commit message was updated."
        },
        {
            "timestamp": 1657674320,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/46887/ : SUCCESS"
        },
        {
            "timestamp": 1657691431,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657728923,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657732035,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657738477,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657738521,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1657741583,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 3: Commit message was updated."
        },
        {
            "timestamp": 1657741718,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1657846012,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1657910034,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 4: New patch set was added with same tree, parent, and commit message as Patch Set 3."
        },
        {
            "timestamp": 1657910090,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1"
        },
        {
            "timestamp": 1657910096,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1657910096,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1657911644,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4:\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47070/ : SUCCESS"
        },
        {
            "timestamp": 1658172716,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1658172788,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658172788,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1658173190,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/47173/ : FAILURE"
        },
        {
            "timestamp": 1658173981,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1658174049,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658174049,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1658174716,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/47176/ : FAILURE"
        },
        {
            "timestamp": 1658175673,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 7: Patch Set 6 was rebased."
        },
        {
            "timestamp": 1658175721,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658175726,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1658176272,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47177/ : SUCCESS"
        },
        {
            "timestamp": 1658177466,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 7:\n\n(6 comments)"
        },
        {
            "timestamp": 1658185414,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 7:\n\n(5 comments)"
        },
        {
            "timestamp": 1658189678,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1658189737,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658189738,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1658190204,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47180/ : SUCCESS"
        },
        {
            "timestamp": 1658190547,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1658190691,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1658190736,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1658190967,
            "reviewer": {
                "name": "Nan Zhou",
                "email": "nanzhoumails@gmail.com",
                "username": "FighterNan"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1658190986,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1658191153,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1658191231,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658191231,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1658191696,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47181/ : SUCCESS"
        },
        {
            "timestamp": 1658192196,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1658192257,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658192257,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1658192726,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47183/ : SUCCESS"
        },
        {
            "timestamp": 1658193264,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1658254600,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(3 comments)"
        },
        {
            "timestamp": 1658254971,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(4 comments)"
        },
        {
            "timestamp": 1658255450,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1658255540,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(1 comment)"
        },
        {
            "timestamp": 1658285850,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 10:\n\n(2 comments)"
        },
        {
            "timestamp": 1658452512,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1658452553,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658452553,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1658452883,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/47397/ : FAILURE"
        },
        {
            "timestamp": 1658459967,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1658459993,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658459993,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: -Ok-To-Test"
        },
        {
            "timestamp": 1658460454,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47400/ : SUCCESS"
        },
        {
            "timestamp": 1658463567,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 10:\n\n(9 comments)"
        },
        {
            "timestamp": 1658514681,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(7 comments)"
        },
        {
            "timestamp": 1658635451,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1659035296,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 12:\n\n(3 comments)"
        },
        {
            "timestamp": 1659454411,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(3 comments)"
        },
        {
            "timestamp": 1659485256,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1659485270,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1660164174,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1660164196,
            "reviewer": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "message": "Abandoned\n\nAbandoning in favor of https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55836 and https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55837, which have now been merged."
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "c1c95d75263ff33057e6336b6c2eb49a3c6e272d",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/12/55312/1",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1657673794,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 90,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 92,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 226,
            "sizeDeletions": 6
        },
        {
            "number": 2,
            "revision": "eebb4ca88f6b057ba353ed56d68194fc04d23a07",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/12/55312/2",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1657674010,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 8,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Can you add a sentence or two on why we need microsecond timestamps ?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 8,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  Please try to answer why this is needed, and which changes a user would expect to see to the tree.  Which endpoints will now return microsecond timestamps?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 8,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "+1"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 8,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Updated the commit message -- please have a look."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "@nan, considering you wrote most of this, can you please take a look?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Will do once Claire clarified why this is needed"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 90,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 92,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 226,
            "sizeDeletions": 6
        },
        {
            "number": 3,
            "revision": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/12/55312/3",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1657741583,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 97,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "For new codes, could we get better test names? Please take a look at the https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55142"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 97,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 554,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "If we don't error out if the input is not valid (beyond 6), could you help at least document the behavior explicitly just like the other function here?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 554,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 556,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "if the max is 6, why do you use uint64_t? Is a normal `int` just working?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 556,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Reduced to uint_8"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 556,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sorry to get here late, generally if we don't have a specific reason to use a specific size, we try to use int, or size_t, because that will generate the most efficient code for that processor, using the native type."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 556,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Changed to size_t"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "What does <SSS> mean? Does it mean if it exists, it should return exactly 3 digits?\n\nThis is probably the outstanding question we need to figure out."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "To me, the following sentence explains it clearly: \"Shall be one or more digits where the number of digits implies the precision.\" In other words, <SSS> does not necessarily return exactly 3 digits -- it depends on the precision that we are intending to express. \n\nCapping it to 6 fraction digits is just a limitation of the current implementation. From what I understand, the spec does not limit the number fraction digits -- there could be 100 digits if a system is able to actually track time with that much precision. \n\n(Side note: I tried to modify getDateTime() to receive boost::posix_time::nanoseconds instead of boost::posix_time::microseconds but got some build errors along the way -- perhaps because it needs 96 bits of storage: https://stackoverflow.com/questions/19769795/how-to-enable-nanoseconds-in-boostposix-time)"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Reasonable to me.\n\nEd and Gunner, any objections?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Capping to 6 digits for the moment seems reasonable to me.  I don't think we have use cases beyond that."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 90,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 92,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 240,
            "sizeDeletions": 6
        },
        {
            "number": 4,
            "revision": "e638dd6cae1d69f142de674e467edd40a82bcac6",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/12/55312/4",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1657910034,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "NO_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 90,
                    "deletions": -2
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 92,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 240,
            "sizeDeletions": 6
        },
        {
            "number": 5,
            "revision": "65466d2c36486ce222a12512320de940e733feea",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/12/55312/5",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658172716,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 147,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 124,
                    "deletions": -60
                }
            ],
            "sizeInsertions": 329,
            "sizeDeletions": 66
        },
        {
            "number": 6,
            "revision": "a21506437c048fd439d0601788fc277d15e4f7e5",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/12/55312/6",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658173981,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 147,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 94,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 299,
            "sizeDeletions": 10
        },
        {
            "number": 7,
            "revision": "47e730a06157c21ddf60036c8572c8c4db519ab2",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/12/55312/7",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658175673,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Thanks for fixing existing codes. But generally we prefer separate codes. I am fine with it this time."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Acknowledged."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Question on this pre-existing test case:\nI find it surprising that the date-time string from the \"PreEpoch\" test case above (year 1969) is earlier than the min date-time string here (year 1970, at the epoch). I would expect the \"min\" argument would result in getDateTimeStdtime() producing the earliest date-time string it supports. Anyone understand the behavior and can explain it?"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "This is really good question. Here this basically means `std::numeric_limits<std::time_t>::min()` gets zero somehow in the unit test environment somehow. I did some research but didn't find a clue.\n\nI wrote the initial test IIRC, but I didn't dig into too much.\n\nOther maintainers, any opinions?"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "When I tried printing the min in this unit test function (std::cout << std::numeric_limits<std::time_t>::min() << std::endl;) it output -9223372036854775808, which matches with the expected INT64 min.\n\nAnyways, this is not a blocker for this code review, but just wondering if others have insights."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "wait, then how does this end up with 0?"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "That's what makes me confused too \ud83d\ude1c"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "std::time_t on a 32 bit linux system is int32_t.  std::numeric_limits<std::time_t>::min() returning 0 is really surprising.....\n\nMaybe somehow we're getting time_t as uint32_t?"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "It seems like it's using INT64 for time_t, since when I printed std::numeric_limits<std::time_t>::min() from within getDateTimeStdtime() it gave a value matching the INT64 min, and printing sizeof(std::time_t) gave a value of 8.  But now I have a feeling the value is getting stored into a smaller data type in an underlying function, causing the most significant bits to be chopped off and the value to become 0."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 99,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, that might make sense."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 106,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "I believe as a general guideline, we don't unit test internal interfaces but public interfaces.\n\nCan it be covered in other tests against public interfaces?"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 106,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Oh I see. Is it a strict or a soft guideline? Fraction digit testing is indirectly included in other tests (GetDateTimeUint(), GetDateTimeMs(), and GetDateTimeUs() output 0, 3, and 6 fraction digits respectively), but not with such a fine-grained approach (e.g. 0-7 fraction digits individually requested here)."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "These numbers are chosen because:\n\n1. 1638312095: some time in the past\n2. 41638312095: some time in the future beyond 2038\n3. 253402300799: maximum"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Added comment for #1."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "Thanks"
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 208,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Is uint64_t{} needed? Seems to build and run okay without it (here and throughout the various GetDateTime-related test cases)."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 208,
                    "reviewer": {
                        "name": "Nan Zhou",
                        "email": "nanzhoumails@gmail.com",
                        "username": "FighterNan"
                    },
                    "message": "I believe I just want to make types explicit. Without uint64_t, you end up with a signed int."
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "line": 208,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "I removed it in patchset 9 and the compiler still seemed to figure out the correct type, as unit tests still passed. Anyways, I restored the explicit types in Patchset 10."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 147,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 94,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 299,
            "sizeDeletions": 10
        },
        {
            "number": 8,
            "revision": "9fd038ba040d3dcb0112bf6fcf5f8b383c96be7c",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/12/55312/8",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658189678,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 148,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 94,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 300,
            "sizeDeletions": 10
        },
        {
            "number": 9,
            "revision": "84ab29583c5ef68b76a10d6fe018c04ab5cc7fba",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/12/55312/9",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658191153,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 136,
                    "deletions": -13
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 94,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 288,
            "sizeDeletions": 17
        },
        {
            "number": 10,
            "revision": "4270c234f1d8575ec9388892bd3da9c28e50f779",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/12/55312/10",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658192196,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Overall, I'm really surprised we're having to write this ourselves.  Is there nothing in boost, or std::chrono that can generate what we need?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm taking a look at the to_iso_extended_string implementation here, and it looks like it's entirely implemented using public methods.\n\n\nhttps://github.com/boostorg/date_time/blob/acbee0dc6a168289c398041e91e053b3684083fc/include/boost/date_time/posix_time/time_formatters_limited.hpp#L196\n\n\n\nIt looks like we've implemented more code than to_simple_string:\n\nhttps://github.com/boostorg/date_time/blob/acbee0dc6a168289c398041e91e053b3684083fc/include/boost/date_time/posix_time/time_formatters_limited.hpp#L27\n\n\nShould we just:\n\nCopy/paste the above code, remove the things we don't need (MSVC IFDEF for example), adapt the error conditions (We should never return \"infinity\" for example), then just modify the call to num_fractional_digits() to just use the parameter we have here?\n\n\nThat seems like it would be less code, and faster than what we're doing below."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Wait.... I'm looking at this further, num_fractional_digits is determined by the underlying type.....  Is the answer that we just need to cast the 3 digit to posix_time::milliseconds, and 6 digit to posix_time_microseconds, and the rest will just work?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "https://stackoverflow.com/questions/9157816/fixed-precision-for-boostposix-timeptime#comment11517711_9158177"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "In patchset 11 I am taking the copy-paste approach. If we go with it, does any Boost license text need to be added or do we have it somewhere already?\n\nFrom what I read and observed with bench testing, num_fractional_digits() is based on the max resolution configured by compile options (microseconds in our case), and casting doesn't help.\n\nPrint output:\nboost::posix_time::time_duration::num_fractional_digits(): 6\nboost::posix_time::milliseconds::num_fractional_digits(): 6\nboost::posix_time::microseconds::num_fractional_digits(): 6"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "There are two issues in existing code that I'm trying to solve as part of this patchset:\n\n1) Nonzero value fraction digits: too many fraction digits are output for timestamps intended to be millisecond-precision\n2) All-0 value fraction digits: they are truncated, which isn't what we want for timestamps that are intended to be higher precision than seconds\n\nIt looks like boost::date_time::time_facet can help us solve the second problem but not the first. Still, thanks for finding and sharing this post."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 553,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think this works, given that there are optional fields, and I don't beleive <MM>-<DD> are required to be zero padded."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 553,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "It's a moot point now with the latest patchset, but padding is required and there aren't optional fields to the left of the decimal (well maybe the 'T', though in practice to_iso_extended_string() always gives it to us). But it'd be fair to say this kind of code is brittle."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 563,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "BTW, it looks like there's a constructor for ptime that does this for us\n\nptime(date,time_duration)"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 563,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Updated to use the constructor."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 584,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This should just be a range check.  If there's code that's requesting > fractionDigitsMicroSeconds, it's arguably incorrect, we should just return empty string."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 584,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Done"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 586,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems a little error prone;  Is there a way we can just generate the struct we need upfront, rather than generating the wrong one, and then trying to turn it into the one we need?  It seems odd there's not a boost::posix_time overload that can do this.\n\n\nAlso, this is really odd.... if we know decimalPosition, can't we just check string[decimalPosition] == '.' ?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 586,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Moot point with the latest patchset, but indeed checking string[decimalPosition] would have been more straightforward. The benefit of find() is that it can tell us whether a decimal was found in an unexpected position (invalid) vs. not present at all (valid), so it depends if we need to differentiate between those cases."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 148,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 94,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 300,
            "sizeDeletions": 10
        },
        {
            "number": 11,
            "revision": "cac40caa0c99f3d0a5ded5e063c7144de6d49b57",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/12/55312/11",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658452512,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 148,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 161,
                    "deletions": -7
                }
            ],
            "sizeInsertions": 367,
            "sizeDeletions": 13
        },
        {
            "number": 12,
            "revision": "d6c79cf12a83f279e558cdf0c44f084d281e4a76",
            "parents": [
                "07c8c20d371aae85611738ca61015fc6a8caa16a"
            ],
            "ref": "refs/changes/12/55312/12",
            "uploader": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "createdOn": 1658459967,
            "author": {
                "name": "Claire Weinan",
                "email": "cweinan@google.com",
                "username": "daylight22"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Moving to WIP (to eventually abandon). We will move forward with Ed's patchsets for  dropping the boost::posix_time dependency and adding microsecond timestamp support (see https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55836 and https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55837)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Abandoning in favor of https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55836 and https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55837, which have now been merged."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 563,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Given that now we have code to do the direct string conversions, can this move back to using std::chrono, per our coding standard? (legitimately asking, I'm not sure) Previously we allowed boost because std::chrono didn't have a mechanism for printing iso timestamps for non, time_t based things, but if we're now writing it ourselves, I think that point might be moot, and the coding standard would say to use std::chrono?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 563,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55837"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 563,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Looks like you got around to it sooner than me \ud83d\udc4d. Your approach looks good, so let's move forward with yours."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 563,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d  I got bored on a plane...."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why do we need this limitation?  If a user requests femtosecond precision, shouldn't we just give it to them?\n\nIf we really want to limit to milliseconds and microseconds (which might be reasonable) can this just be an\n\nenum class Precision {\n   Seconds\n   Milliseconds,\n   microseconds\n\n}\n\nto keep the type safety?"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 574,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Duplicated check  Remove."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 576,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "just put\n\nreturn \"\" here\n\nand move the ostringstream construction to below.  return early is a pattern we use all over to handle this case."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 596,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm assuming you copied and pasted this, but looking at it, any idea why we can't just call setw on the existing stringstream?  It seems wasteful to construct a whole new stringstream just to then load in a value and call str() on it to load into the next stringstream."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 596,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "This part wasn't copy pasted. setw sets a min width but does not set a max, so we could still get too many digits. I was trying to get numFractionalDigits as a string and use substr to truncate it to the desired number of digits. A separate stringstream was a (perhaps inefficient) means to get numFractionalDigits converted to a string and zero padded."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 596,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "http/utility.hpp",
                    "line": 635,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Same as above.  A, do we want to limit this, and B, this check I think is now duplicated between handlers."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 635,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "I had added this based on your previous comment at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55312/comments/07aab98f_252e7a77, but wasn't sure whether to put it only at the top level (getDateTime()) or at all levels."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 635,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In my series we just define it based on the resolution of the input, which I think is the right thing to do."
                },
                {
                    "file": "http/utility.hpp",
                    "line": 635,
                    "reviewer": {
                        "name": "Claire Weinan",
                        "email": "cweinan@google.com",
                        "username": "daylight22"
                    },
                    "message": "Sounds good."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "http/ut/utility_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 169,
                    "deletions": -6
                },
                {
                    "file": "http/utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 161,
                    "deletions": -7
                }
            ],
            "sizeInsertions": 388,
            "sizeDeletions": 13
        }
    ]
}