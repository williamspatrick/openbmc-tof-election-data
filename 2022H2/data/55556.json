{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "Ice1d363a6149607bd149b89f70f2a23812df999d",
    "number": 55556,
    "subject": "NVMeBasicContext: Catch FileHandle out-of-range exception",
    "owner": {
        "name": "Chau Ly",
        "email": "chaul@amperecomputing.com",
        "username": "chaul-ampere"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/55556",
    "hashtags": [],
    "createdOn": 1658387533,
    "lastUpdated": 1660201538,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1658387533,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1658387597,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658387597,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1658387790,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47361/ : SUCCESS"
        },
        {
            "timestamp": 1658417947,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658452798,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658460818,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658462274,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658469043,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased."
        },
        {
            "timestamp": 1658469060,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658469060,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1658469260,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47407/ : SUCCESS"
        },
        {
            "timestamp": 1658478682,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658479448,
            "reviewer": {
                "name": "Vikash Chandola",
                "email": "vikash.chandola@intel.com",
                "username": "vikash-chandola"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658480141,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658549131,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Uploaded patch set 3: Patch Set 2 was rebased."
        },
        {
            "timestamp": 1658549166,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658549166,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1658549532,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47681/ : SUCCESS"
        },
        {
            "timestamp": 1658707961,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1658719124,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658719598,
            "reviewer": {
                "name": "Vikash Chandola",
                "email": "vikash.chandola@intel.com",
                "username": "vikash-chandola"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1658910084,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659050119,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659071815,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659140874,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659585832,
            "reviewer": {
                "name": "Thang Tran",
                "email": "thuutran@amperecomputing.com",
                "username": "thangtran-ampere"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659633852,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659669827,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659706429,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659768415,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1659768470,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659768470,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1659768652,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48684/ : SUCCESS"
        },
        {
            "timestamp": 1659769159,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1660106040,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1660107879,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660121015,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660180786,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1660192634,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1660192670,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660192670,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1660192866,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48979/ : SUCCESS"
        },
        {
            "timestamp": 1660192965,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1660193083,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1660193904,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(4 comments)"
        },
        {
            "timestamp": 1660194504,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1660194554,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660194555,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1660194756,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48980/ : SUCCESS"
        },
        {
            "timestamp": 1660197187,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1660197201,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Change has been successfully merged"
        },
        {
            "timestamp": 1660197224,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1660201538,
            "reviewer": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "5e75815ec4a435ea34224b44ea97c2cad483d375",
            "parents": [
                "715e815183576d697595e1fb926e2949c3392a55"
            ],
            "ref": "refs/changes/56/55556/1",
            "uploader": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "createdOn": 1658387533,
            "author": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we do this in the constructor for the class?  If the i2c bus disappears while we're running, that probably should be a fatal error.\n\n\nAlso, generally in these cases we'd use std::optional to we don't have to malloc.\n\n\n\n@arj, do you recall why we're opening the i2c handle every time here?  Can't we just open it once and leave it open?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Because I was lazy and it was the easiest approach to reason about in terms of being the least stateful.\n\nI'm fine if we refactor it."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Which class's constructor were you mentioning? If it's FileHandle, is that a normal thing that the user of this class should be the one catching the exception before further processing?\n\nAbout i2c handle open all the time, will it cause the bus to be busy and not be able to be used by others?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> About i2c handle open all the time, will it cause the bus to be busy and not be able to be used by others?\n\nNo. You can see how open() is implemented here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/i2c/i2c-dev.c?h=v5.19-rc7\n\nIn particular, it doesn't prevent multiple-open.\n\nThe only time you're using the bus is when you issue a command to the endpoint, and any other fds open for the device will block until your command is complete. Once it completes any other commands on other fds are processed immediately by the i2c subsystem.\n\nThe behaviour is described in more depth here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/i2c/dev-interface.rst?h=v5.19-rc7"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Yes, thanks a lot for helpful info @arj. So with the scope of the issue mentioned in this patch, a catching is an inevitable action since there is a possibility the exception will be thrown anyway. Or should I simply check if the /dev/* path exists before doing any file handling? Please gimme some advice on how I should go further with this patch."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> Which class's constructor were you mentioning? If it's FileHandle, is that a normal thing that the user of this class should be the one catching the exception before further processing?\n\nI think Ed meant in the NVMeBasicContext constructor.\n\n> So with the scope of the issue mentioned in this patch, a catching is an inevitable action since there is a possibility the exception will be thrown anyway.\n\nNot if we already have a file descriptor embedded in the NVMeBasicContext instance. If you try to access a file descriptor associated with a device that's been removed you'll get something like EBADF. Please test this and confirm.\n\n> Or should I simply check if the /dev/* path exists before doing any file handling?\n\nNo, that's racy. The device could disappear between the stat() and the open(), so you have to handle the open() error anyway."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Which class's constructor were you mentioning? If it's FileHandle, is that a normal thing that the user of this class should be the one catching the exception before further processing?\n> \n> I think Ed meant in the NVMeBasicContext constructor.\n\nThis is indeed what I meant.  The intent is that an i2c bus isn't going to just suddenly exists or de-exist (or if it does, there's another EM reinit that happens), so we should only throw the exception once, instead of once per loop.\n\n> \n> > So with the scope of the issue mentioned in this patch, a catching is an inevitable action since there is a possibility the exception will be thrown anyway.\n> \n> Not if we already have a file descriptor embedded in the NVMeBasicContext instance. If you try to access a file descriptor associated with a device that's been removed you'll get something like EBADF. Please test this and confirm.\n\n+1\n\n> \n> > Or should I simply check if the /dev/* path exists before doing any file handling?\n> \n> No, that's racy. The device could disappear between the stat() and the open(), so you have to handle the open() error anyway.\n\n\n+1"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "I got your points, thank you, an i2c bus disappearing during runtime is fatal and rare. About the set of file descriptors used along the process, can I define it as a static map in NVMeBasicContext class, so that it can also be shared between the class and those global functions? I think there won't be any bus number conflict between context objects, so it needn't be separate for each NVMeBasicContext object. Or should I use rootBus to separate them in the static map? Otherwise, I'm currently not able to think of another.\n\nFor the first implementation, I'll save those filehandle objects and busnumber to the map everytime we do addSensor() to the context, which is not in the NVMeBasicContext's constructor because we construct the object before having a complete set of buses. Please leave some advice. It goes something like this:\n\nIn NVMeContext class:\nvoid addSensor(const std::shared_ptr<NVMeSensor>& sensor)\n    {\n        sensors.emplace_back(sensor);\n        addSensorBusHandler(sensor->bus);\n    }   \n....\n\nIn NVMeBasicContext class:\n\nprivate: static std::map<int, std::optional<std::shared_ptr<FileHandle>>> busHandleM;\n\nvoid NVMeBasicContext::addSensorBusHandler(int bus) //override\n{\n    //create a FileHandle object for bus and do try-catch\n    //save bus and std::optional object pointer to busHandleM viaa static setter\n}\n\n....\nIn execBasicQuery:\n{\n  //get optional object pointer fileHandle from NVMeBasicContext::busHandleM[bus] \n                                                        via a static getter\n  if (!fileHandle) \n  {resp.resize(0); return;}\n  ...\n  further process\n}"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "There's one NVMeBasicContext per root bus, so we should only need a single file descriptor per instance. That might not be clear from the code, but I think it removes the need for any static maps."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "But I wonder how we can use a single fd for the rootBus to read all the channel buses behind it along the process? We are opening fd for each channel bus every loop in execBasicQuery function, so I thought we aimed to open them at the beginning instead. Please help clarify this a bit Andrew."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> But I wonder how we can use a single fd for the rootBus to read all the channel buses behind it along the process?\n\nWe can but we shouldn't, see my next comment:\n\n> We are opening fd for each channel bus every loop in execBasicQuery function,\n\nYes, sorry, we seem to have sent you off on the wrong track here.\n\nThe whole basic management command thing isn't optimal to begin with. Previously nvmesensor also supported MCTP for NVMe-MI, but it was a bunch of out-of-tree patches against libmctp and the kernel and wasn't maintainable. We've since moved MCTP into the kernel ( https://codeconstruct.com.au/docs/mctp-on-linux-introduction/ ) and added MI support to libnvme ( https://codeconstruct.com.au/docs/nvme-mi-with-libnvme/ ). With these two pieces we have a much better architecture in place to add MCTP support back to nvmesensor. Further discussion of doing so is over here:\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/53809\n\nWe could refactor things to get rid of NVMeBasicContext entirely, and just have a list of NVMeSensors that we monitor, each with their own thread for performing the ioctl(). However, that's a bunch of work that could be better spent reintegrating MCTP support through the solutions outlined above.\n\nI feel like we add a comment along these lines and take the patch as it is now.\n\nWhat do you think about that Ed?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Thang Tran",
                        "email": "thuutran@amperecomputing.com",
                        "username": "thangtran-ampere"
                    },
                    "message": "It seems that we have to refactor the NVMesensor. It maybe takes more time to complete, therefore I think we can merge this patch to fix the current issue (the constructor throws an exception).\nWe should make another patch to refactor NVMesensor in the future."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sure, feel free to stack as many patches as you'd like in the series, but we probably can't merge the series until it results in a correct implementation."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "I don't understand much reading the proposed design and the comment section, but I got Arj's point about the idea of refactoring and I think I should leave this here as you said until I can put it somewhere along the refactoring process. Thank you."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> Sure, feel free to stack as many patches as you'd like in the series, but we probably can't merge the series until it results in a correct implementation.\n\nMy understanding of what Ed's saying here is you still need to address the remaining comments:\n\n1. Use std::optional to avoid the allocation\n2. Fix the error handling noted below"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "I updated the patch following your comments, thank you a lot."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 3
        },
        {
            "number": 2,
            "revision": "15076d45ec714c18acdfb2ade41b59fc302b4c39",
            "parents": [
                "4aa6b8d1275e327fcf592fbd99f571a4a959886c"
            ],
            "ref": "refs/changes/56/55556/2",
            "uploader": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "createdOn": 1658469043,
            "author": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Vikash Chandola",
                        "email": "vikash.chandola@intel.com",
                        "username": "vikash-chandola"
                    },
                    "message": "This will log size as UINT8_MAX not `size`. Is that intended ?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "I thought they already put size variable in the message?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> This will log size as UINT8_MAX not `size`. Is that intended ?\n\nSorry, what are you referring to here? Which log message? The one above is written in terms of `size`, not `resp.size()`, so it will tell us how large the message is."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 108,
                    "reviewer": {
                        "name": "Vikash Chandola",
                        "email": "vikash.chandola@intel.com",
                        "username": "vikash-chandola"
                    },
                    "message": "Got it, thanks"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 3
        },
        {
            "number": 3,
            "revision": "d8bde55002b0e21fde03996d4bd1b833798d7563",
            "parents": [
                "2a5e2dca54271949da3e2caa6e073d5361ec2687"
            ],
            "ref": "refs/changes/56/55556/3",
            "uploader": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "createdOn": 1658549131,
            "author": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This is an error path so you'll need to add `resp.resize(0);` before returning."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 78,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Updated"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I guess we should fix this one too (add `resp.resize(0);` before the return)."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 88,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Updated"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 3
        },
        {
            "number": 4,
            "revision": "bb78597c26b719fda9b8f61e1db3d5fb855661c7",
            "parents": [
                "2a5e2dca54271949da3e2caa6e073d5361ec2687"
            ],
            "ref": "refs/changes/56/55556/4",
            "uploader": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "createdOn": 1659768415,
            "author": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Couple of quick comments"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "No, this isn't right. The suggestion was it should be std::optional<FileHandle>> to avoid the heap allocation."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 66,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Perhaps put this in the try block? And if we do that can we can get rid of the std::optional as well?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "What I mean by that is put the body of the `if (fileHandle)` conditional in the try block and get rid of the `if (fileHandle)` condition, as you'll bail out with an exception if we can't create the FileHandle (AIUI)."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 80,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Thank you Andrew. Is out-of-range exception enough to cover all fail cases of constructing FileHandle object, if so, we can remove the if(fileHandle) condition and directly process further when it passes the try. \nAnd I think we should only try-catch where the exception may happen, and should not put all the below processing inside try, do you think so? \nAbout std::optional, do we necessarily have to use it instead of just a normal object for this case. I think the object being null here is an error, not an option, so can we just use a normal unique pointer for it? I don't get it much about the allocation advantage of an optional pointer, can you please give some advice?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> Is out-of-range exception enough to cover all fail cases of constructing FileHandle object\n\nIt appears so, see:\n\nhttps://github.com/openbmc/dbus-sensors/blob/master/src/FileHandle.cpp#L12-L17\n\n> if so, we can remove the if(fileHandle) condition and directly process further when it passes the try.\n\nYep, so let's remove the condition now that we've verified the exception behaviour\n\n> And I think we should only try-catch where the exception may happen, and should not put all the below processing inside try, do you think so? \n\nGenerally no. But in this case we're returning from the exception clause which prevents the rest of the code from executing in an invalid state even though it's outside the try-block, so in this case it's fine.\n\nBut without the reasoning above about the behaviour of the FileHandle constructor, you eliminate the condition by moving this code inside the try-block, as an exception would then cause execution to jump over it. That is, in general, the code should be structured as follows:\n\n try {\n  auto foo = might_throw_bar();\n  compute_something(foo);\n } catch (const bar& ex) {\n  handle_bar(bar);\n }\n\n> About std::optional, do we necessarily have to use it instead of just a normal object for this case. I think the object being null here is an error, not an option, so can we just use a normal unique pointer for it? I don't get it much about the allocation advantage of an optional pointer, can you please give some advice?\n\nJust to clarify, no-one was suggesting using an \"optional pointer\". What we were suggesting was an _optional object_ via std::optional, so std::optional<FileHandle>.\n\nWith that out of the way, I think there might be some confusion about objects, storage location, pointers and the general behaviour of std::optional here.\n\nSome documentation for std::optional is here:\n\nhttps://en.cppreference.com/w/cpp/utility/optional/optional\n\nGenerally, objects live in one of two storage locations, the heap or the stack. Using std::unique_ptr forces object allocation on the heap and returns us a pointer. As we have a pointer, we have the ability for the pointer to not point to anything, which we can exploit to indicate a failure state as you've done in the patch.\n\nBy contrast, by allocating an object directly on the stack (e.g. via a function temporary) the lack of a pointer means there's no opportunity to express the state of the object being invalid (instead the code would fail to compile or an exception would be thrown).\n\nstd::optional is the solution for this latter case. Along with the object it contains it can be allocated on the stack, and gives us the property of the contained object being valid or not. It doesn't require the storage for a pointer as it instantiates the contained object in place, which eliminates the heap allocation.\n\nWe want to avoid unnecessary heap allocations like those required by std::unique_ptr because they are expensive. Here's a benchmark which demonstrates that std::unique_ptr is 44x worse in terms of performance than std::optional:\n\nhttps://quick-bench.com/q/MMBhm0YvYtH22ak_XTeJlO7dlfQ"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 80,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Hi Andrew, I'm very thankful for your kind and detailed answers to my questions. I have updated the patch to what it should be."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 80,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 47,
                    "deletions": -24
                }
            ],
            "sizeInsertions": 66,
            "sizeDeletions": 24
        },
        {
            "number": 5,
            "revision": "9cb0a8195f1b715ae97613ad5d2ebbf97a1a7a73",
            "parents": [
                "5170fe63cc84b96d67b33f2b7f9001c0ecfa7d1a"
            ],
            "ref": "refs/changes/56/55556/5",
            "uploader": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "createdOn": 1660192634,
            "author": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "The final piece of the puzzle is that with the change in exception handling we don't actually need the std::optional any more, as the exception skips over the code that requires fileHandle be properly initialised in the event of a failure. We can just use\n\n FileHandle fileHandle(devpath);\n\nSorry that my waffle about std::optional behaviour and performance distracted from the changes I was asking you to make. And apologies ongoing back-and-forth.\n\nI think with this last adjustment we can get it merged."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Chau Ly",
                        "email": "chaul@amperecomputing.com",
                        "username": "chaul-ampere"
                    },
                    "message": "Sorry, I was slow at putting things together =.=. Anyway,thank you a lot Andrew."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 40,
                    "deletions": -28
                }
            ],
            "sizeInsertions": 59,
            "sizeDeletions": 28
        },
        {
            "number": 6,
            "revision": "0fe0229497e2029901b9c807cff624013e0f1a58",
            "parents": [
                "5170fe63cc84b96d67b33f2b7f9001c0ecfa7d1a"
            ],
            "ref": "refs/changes/56/55556/6",
            "uploader": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "createdOn": 1660194504,
            "author": {
                "name": "Chau Ly",
                "email": "chaul@amperecomputing.com",
                "username": "chaul-ampere"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Thanks"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 39,
                    "deletions": -28
                }
            ],
            "sizeInsertions": 58,
            "sizeDeletions": 28
        }
    ]
}