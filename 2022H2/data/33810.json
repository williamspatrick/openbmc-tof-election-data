{
    "project": "openbmc/libmctp",
    "branch": "master",
    "topic": "routing",
    "id": "I71c20d48e0947261f5127d62721d80712f54a6c3",
    "number": 33810,
    "subject": "core: Add basic routing infrastructure",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@aj.id.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libmctp/+/33810",
    "hashtags": [],
    "createdOn": 1592481510,
    "lastUpdated": 1658709849,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1592481510,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1592481535,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1592481688,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 1:\n\nBuild Started https://openpower.xyz/job/openbmc-repository-ci/52275/"
        },
        {
            "timestamp": 1592481730,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://openpower.xyz/job/openbmc-repository-ci/52275/ : FAILURE"
        },
        {
            "timestamp": 1592482662,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1592482688,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1592482699,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 2:\n\nBuild Started https://openpower.xyz/job/openbmc-repository-ci/52285/"
        },
        {
            "timestamp": 1592482749,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://openpower.xyz/job/openbmc-repository-ci/52285/ : SUCCESS"
        },
        {
            "timestamp": 1592556256,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1592556293,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1592556313,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 3:\n\nBuild Started https://openpower.xyz/job/openbmc-repository-ci/52368/"
        },
        {
            "timestamp": 1592556531,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://openpower.xyz/job/openbmc-repository-ci/52368/ : FAILURE"
        },
        {
            "timestamp": 1592564933,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 4: Patch Set 3 was rebased."
        },
        {
            "timestamp": 1592564964,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1592565009,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 4:\n\nBuild Started https://openpower.xyz/job/openbmc-repository-ci/52389/"
        },
        {
            "timestamp": 1592565134,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://openpower.xyz/job/openbmc-repository-ci/52389/ : SUCCESS"
        },
        {
            "timestamp": 1592812697,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 5: Patch Set 4 was rebased."
        },
        {
            "timestamp": 1592812739,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1592812757,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 5:\n\nBuild Started https://openpower.xyz/job/openbmc-repository-ci/52615/"
        },
        {
            "timestamp": 1592813015,
            "reviewer": {
                "name": "Jenkins",
                "email": "openbmc-ci-admin@ozlabs.org",
                "username": "jenkins-openbmc"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://openpower.xyz/job/openbmc-repository-ci/52615/ : SUCCESS"
        },
        {
            "timestamp": 1592918303,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 5:\n\n(4 comments)"
        },
        {
            "timestamp": 1593387890,
            "reviewer": {
                "name": "Iwona Winiarska",
                "email": "iwona.winiarska@intel.com",
                "username": "iklm"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1593392423,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(5 comments)"
        },
        {
            "timestamp": 1593396607,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(4 comments)\n\nGoing ahead with +1.\nNote: 1. This patch handles all the intent in the commit message\n2. Other things can be handled in separate commit, but will recommend to add a TO-DO, so that it can be re-visited."
        },
        {
            "timestamp": 1593422891,
            "reviewer": {
                "name": "Sumanth Bhat",
                "email": "sumanth.bhat@linux.intel.com",
                "username": "sumbhat90"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1593463348,
            "reviewer": {
                "name": "Iwona Winiarska",
                "email": "iwona.winiarska@intel.com",
                "username": "iklm"
            },
            "message": "Patch Set 5: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1593619971,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1593619984,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1593619990,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/306/"
        },
        {
            "timestamp": 1593620042,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/306/ : SUCCESS"
        },
        {
            "timestamp": 1594019566,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 6:\n\n(5 comments)\n\nI've made some comments on this and 33865 in parallel; it might be better to introduce the basic routing and its consumer as a single change, so we can see how the route table is queried in the same patch.\n\nAs usual, code looks good, but I figure we're more looking at structural reviews at this stage - I just have a few queries on those areas inline (as well as on 33865).\n\nNice work though, all reads well."
        },
        {
            "timestamp": 1594099300,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1594101048,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(5 comments)\n\n> Patch Set 6:\n> \n> (5 comments)\n> \n> I've made some comments on this and 33865 in parallel; it might be better to introduce the basic routing and its consumer as a single change, so we can see how the route table is queried in the same patch.\n\nYes, I think this is generally the right approach, however I had decided against it in this instance for two reasons:\n\n1. The change to implement routing via the route table may break some callers who now need to insert routes before using the interface, and they can't do this before the APIs exist. I think doing it all at once might make it more irritating to upgrade the library, as the newer version may still link for existing consumers but might not work. My intent with the split was to tag a release that contained all the new routing APIs but didn't exploit them internally, and then do a subsequent release that exploited them, which would give an easier upgrade path. But maybe this is overthinking it (I'm good at that).\n\n2. The patch becomes much larger.\n\n> \n> As usual, code looks good, but I figure we're more looking at structural reviews at this stage - I just have a few queries on those areas inline (as well as on 33865).\n> \n> Nice work though, all reads well.\n\nThanks."
        },
        {
            "timestamp": 1594678196,
            "reviewer": {
                "name": "Iwona Winiarska",
                "email": "iwona.winiarska@intel.com",
                "username": "iklm"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1594805166,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1595821885,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1603886097,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(4 comments)"
        },
        {
            "timestamp": 1604449541,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(4 comments)"
        },
        {
            "timestamp": 1604624683,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1604886252,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 6:\n\n(11 comments)"
        },
        {
            "timestamp": 1605067417,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1605067441,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1605067510,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/7640/ : SUCCESS"
        },
        {
            "timestamp": 1607324320,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 7:\n\n(8 comments)"
        },
        {
            "timestamp": 1607324597,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1607560361,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 7:\n\n(9 comments)"
        },
        {
            "timestamp": 1610349756,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 7:\n\n(3 comments)"
        },
        {
            "timestamp": 1610946107,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 7:\n\n(7 comments)"
        },
        {
            "timestamp": 1611016056,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1611016068,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1611016115,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/11056/ : SUCCESS"
        },
        {
            "timestamp": 1612774974,
            "reviewer": {
                "name": "Richard Marian Thomaiyar",
                "email": "richard.marian.thomaiyar@linux.intel.com",
                "username": "rthomaiy"
            },
            "message": "Patch Set 8:\n\n(3 comments)"
        },
        {
            "timestamp": 1612832241,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1612942883,
            "reviewer": {
                "name": "Jeremy Kerr",
                "email": "jk@ozlabs.org",
                "username": "jk-ozlabs"
            },
            "message": "Patch Set 8: Code-Review+2\n\n(6 comments)\n\nLGTM, as the API components of a route implementation.\n\nA few comments, but that's mostly bikeshedding.\n\nI can't (currently) see any need for distinction between bridge routes and endpoint routes; unless Richard has a case where we need to treat those differently, I'm fine for this as-is."
        },
        {
            "timestamp": 1658709849,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Abandoned\n\nSeries captured here for posterity: https://github.com/amboar/libmctp/tree/routing"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "dd95928d9db6de80100bb5ca0c6956d1523f0347",
            "parents": [
                "8536cfcfbcdbbaef8a3eb1556be50e2c76a11f5d"
            ],
            "ref": "refs/changes/10/33810/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1592481510,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 336,
                    "deletions": 0
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": -5
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 405,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 863,
            "sizeDeletions": 7
        },
        {
            "number": 2,
            "revision": "d623349e3bc0159ea66d265985ec63de09f36fbc",
            "parents": [
                "8536cfcfbcdbbaef8a3eb1556be50e2c76a11f5d"
            ],
            "ref": "refs/changes/10/33810/2",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1592482662,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 335,
                    "deletions": 0
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 50,
                    "deletions": -5
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 405,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 866,
            "sizeDeletions": 7
        },
        {
            "number": 3,
            "revision": "96ac6415b08e1f35c9fef5640b19f848b8b9aba2",
            "parents": [
                "79c3eff1dc401f553f71a1d16e9063ac5b3f9f41"
            ],
            "ref": "refs/changes/10/33810/3",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1592556256,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 361,
                    "deletions": -9
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -6
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 460,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 949,
            "sizeDeletions": 17
        },
        {
            "number": 4,
            "revision": "025d34d9da23b9438fe76b93b30016565c409f5b",
            "parents": [
                "fe80a66c776f5f0d4e4b9cb6e15edfbf7c73b34d"
            ],
            "ref": "refs/changes/10/33810/4",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1592564933,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 361,
                    "deletions": -9
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -6
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 460,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 949,
            "sizeDeletions": 17
        },
        {
            "number": 5,
            "revision": "aaf60312cf8dda74a4092e4dab6459deddc65596",
            "parents": [
                "8737538e56ec53b2da5e25f04b77dbca8c70b3e8"
            ],
            "ref": "refs/changes/10/33810/5",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1592812697,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Agree here, as this is way to maintain the neighbor information which has proper Endpoint ID (I don't disagree here for the same maintenance), but we don't want to use this entries till the EID's are properly assigned. i.e. Provisional EID stuff is not explained here."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "The provisional EID concept isn't explained here because I haven't yet introduced support for it. The intent of this change is to only implement the routing infrastructure required by DSP0236 but I felt it might be useful to hint at the motivation."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "One more point to add. I think handling provisional EID, through routing table, will bring unnecessary complexity, as maintenance of the same needs to be done. Instead maintaining an extra Address variable (binding private) in the pkt will be easier to maintain & directly linked to the packet. This can also serve the purpose of implementing any security related to the packet. \nThoughts?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I'm not sure I completely follow your last point. Can you explain it another way? Also can you expand on the security concern?\n\nAs for the concern about the impact on the routing table, have you reviewed the top patch in the series that introduces the provisional endpoint IDs? Hopefully that's informative. The bulk of the change is to do with widening the mctp_eid_t type."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I'm considering this resolved with no further changes."
                },
                {
                    "file": "core.c",
                    "line": 49,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "I don't see it being used anywhere. Leftover?"
                },
                {
                    "file": "core.c",
                    "line": 49,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yep, this is cruft, will remove it."
                },
                {
                    "file": "core.c",
                    "line": 49,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "According to \"Table 2 - Special Endpoint IDs\" MCTP_EID_NULL and MCTP_EID_BROADCAST are \"assigned to specific functions for MCTP\" so shouldn't they be considered *not* valid? Or am I missing something?"
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Right, I'm defining valid as \"not reserved\". EIDs 1-7 are reserved, but others have a defined behaviour even if they may not be assignable to a specific endpoint.\n\nSee mctp_eid_is_special() below."
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Agree with Andrew here, is_special is there to handle the same."
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "Ok, but I'm wondering how this function is supposed to be used, because right now it is called just in the mctp_eid_range_is_valid(), where we also need to filter if the given eid is not special."
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> Ok, but I'm wondering how this function is supposed to be used, because right now it is called just in the mctp_eid_range_is_valid(), where we also need to filter if the given eid is not special.\n\nSo mctp_eid_is_valid() is asking a general question about the provided EID; mctp_eid_is_special() is asking a specific question about whether it's unassignable, and using both in combination allows you to derive whether an EID is assignable. What would you like to see done?"
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "I was just wondering whether this is something that's just supposed to be used for routing, or something general. For a general \"anything that's not reserved\" that's fine. If it was just for routing (but I get it, it's not), NULL eid is not valid, since need to route by physical address (and probably need a separate API for that), I think similar thing applies for broadcasts (MCTP network-wide broadcasts are not supported). So nothing in particular to be done - just this discussion is fine :)"
                },
                {
                    "file": "core.c",
                    "line": 85,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "core.c",
                    "line": 108,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "Why is it not \"bool\"? Same for the next two."
                },
                {
                    "file": "core.c",
                    "line": 108,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yeah, I think that's probably a better idea :)"
                },
                {
                    "file": "core.c",
                    "line": 108,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "libmctp.h",
                    "line": 112,
                    "reviewer": {
                        "name": "Sumanth Bhat",
                        "email": "sumanth.bhat@linux.intel.com",
                        "username": "sumbhat90"
                    },
                    "message": "Is this for our own endpoint ?"
                },
                {
                    "file": "libmctp.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Clarification: Usage of this one here?\n\nAlso, how the type is mapped to the Entry type of the Get routing table\nTable 27 of routing table format.\n\nThe way i see it, if we are the bridge, then we will just push all the downstream entries. Will skip LOCAL, and maintain it for own purpose right?"
                },
                {
                    "file": "libmctp.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> Clarification: Usage of this one here?\n\nLargely covered by Section 9.1.6, with the exception of MCTP_ROUTE_TYPE_ENDPOINT which will be used to deliver packets destined for ports attached to the libmctp context.\n\n> Also, how the type is mapped to the Entry type of the Get routing table\nTable 27 of routing table format.\n\nI hadn't yet looked at Table 27, so thanks for the pointer. I'll integrate the information necessary to satisfy `Get Routing Table Entries`.\n\n> The way i see it, if we are the bridge, then we will just push all the downstream entries. Will skip LOCAL, and maintain it for own purpose right?\n\nAs explained in 9.1.6, the \"local\" concept is so we can send the target physical address in response to a `Resolve Endpoint ID` query."
                },
                {
                    "file": "libmctp.h",
                    "line": 118,
                    "reviewer": {
                        "name": "Sumanth Bhat",
                        "email": "sumanth.bhat@linux.intel.com",
                        "username": "sumbhat90"
                    },
                    "message": "is this unique id to represent bus ? If yes, shouldn't we handle auto allocation/de-allocation of new bus id when a user adds/removes route ?"
                },
                {
                    "file": "libmctp.h",
                    "line": 118,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This is unique to the bus instance attached to the mctp context. It's not unique to the network."
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "yes, but wouldn't be better to make this as uint8_t address[MAX_PHYSICAL_ADDRESS_SIZE]\nReason: Still the code will support vendor defined with a flag."
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "routing table is common for all buses right?, so plan is to find the binding type based on the binding_struct ? or shall we maintain a struct variable here?"
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "So I guess this comes from your Table 27 comment above. I hadn't thought about it as mentioned, but I think using the bus index to look through struct mctp_binding to find the type information is the right approach. Lets a) keep together things that are together (i.e. the binding implementation and its type), and b) not duplicate information unnecessarily."
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yes this might be a better idea if we can determine MAX_PHYSICAL_ADDRESS_SIZE."
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Agree, As binding information based on bus number is not dynamic field, and there is no need to maintain a 1:1 match.\n\nAdd a todo - to define a helper to get binding information based on bus number must be more than enough."
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "No need to change in this patchset, to keep this patchset simple"
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Well, except that it changes the public interface of the library. If we can agree to go one direction or the other, it would be best to implement whichever we choose in the patch that introduces the member."
                },
                {
                    "file": "libmctp.h",
                    "line": 119,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I'll keep it as it is for the moment, we'll bump the major version if we eventually decide to break it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 56,
                    "deletions": -1
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 361,
                    "deletions": -9
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -6
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 460,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 949,
            "sizeDeletions": 17
        },
        {
            "number": 6,
            "revision": "8270e936a5484e77d817e6459bec3de530a54659",
            "parents": [
                "7fcf274e15a3185746023783520d41ed36a4eb0f"
            ],
            "ref": "refs/changes/10/33810/6",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1593619971,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "core.c",
                    "line": 51,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Can we use a generic list type here? or even ccan/list.h?\n\nThis would mean you don't need to reimplement list traversal/manipulation over again."
                },
                {
                    "file": "core.c",
                    "line": 51,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yeah, I definitely had ccan/list.h on my mind, but I figured I'd explore exactly what we needed with a bespoke implementation.\n\nHaving read the patch(es), you think we should switch?"
                },
                {
                    "file": "core.c",
                    "line": 51,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Leaving it as-is for the moment. Happy to rework it after I have this series submitted if there are strong feelings about it."
                },
                {
                    "file": "core.c",
                    "line": 357,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "If I could put memes in gerrit comments, one would go here \ud83d\ude00"
                },
                {
                    "file": "core.c",
                    "line": 357,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Haha, well there's no locking elsewhere in libmctp currently, so if you're using it multi-threaded you're (probably) already broken. Maybe we shouldn't make it worse, but that's not something I wanted to worry about in this series. At least there's note :P\n\nDo you think I should do something different?"
                },
                {
                    "file": "core.c",
                    "line": 357,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Obviously this needs some more thought about the wider context. Hopefully it doesn't come back to bite me in subtle ways, but I think it's okay for the moment."
                },
                {
                    "file": "core.c",
                    "line": 535,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "Since it is the exported function, isn't it better to return error to client?\nWe should probably avoid letting users trigger asserts inside library, in other words, asserts should be something internal for libmctp."
                },
                {
                    "file": "core.c",
                    "line": 535,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yep."
                },
                {
                    "file": "core.c",
                    "line": 535,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Actually, this is really similar to an up-cast operation. Returning an error complicates the interface (we'd need to introduce an out-parameter pointer). I think it might be better to leave the asserts, document the pre-conditions that must be met, and implement a mctp_route_is_local() implementation that callers can use to check they've satisfied the conditions before invoking mctp_route_as_eid()."
                },
                {
                    "file": "core.c",
                    "line": 568,
                    "reviewer": {
                        "name": "Iwona Winiarska",
                        "email": "iwona.winiarska@intel.com",
                        "username": "iklm"
                    },
                    "message": "Same here."
                },
                {
                    "file": "core.c",
                    "line": 568,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yep."
                },
                {
                    "file": "core.c",
                    "line": 568,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "core.c",
                    "line": 586,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Fix these too."
                },
                {
                    "file": "core.c",
                    "line": 586,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Actually, this is an internal function, so the asserts are fine. I've added guards to the public functions."
                },
                {
                    "file": "libmctp.h",
                    "line": 114,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "It's not super clear on which entity is responsible for manipulating the routing table. For example, should a caller be at the \"application layer\" of a MCTP stack? (in which case, doing routing table manipulation would appear odd). Can you either expand on this section of the API, or provide an example or two in a separate doc?"
                },
                {
                    "file": "libmctp.h",
                    "line": 114,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Right, so the answer is two entities:\n\n1. The application where the application is the entity setting up the network - we need to add routes as the network is initialised and then both add and remove routes as dynamic devices come and go.\n2. Bindings: when certain packets are received or packets are received from certain addresses, bindings need to manipulate the route table. This actually ends up taking place in core.c with the binding providing the physical address information for the packet to the core in the form of the `struct mctp_device` that you're querying below."
                },
                {
                    "file": "libmctp.h",
                    "line": 114,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I intend to do a documentation series for the public API and write something up about the theory of operation. I'll include the responsibility details in that if I don't end up introducing them beforehand."
                },
                {
                    "file": "libmctp.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "What does this represent?"
                },
                {
                    "file": "libmctp.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "The physical address of a device on a local bus. In the case of a bridge there will be more than one bus, so we need the bus index represented as well. This information is stored in the route table and is also passed between bindings and the core (mctp_bus_rx) for each packet received. In the case of NULL EIDs, it's the struct mctp_device associated with the packet that allows us to determine the appropriate provisional route."
                },
                {
                    "file": "libmctp.h",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "libmctp.h",
                    "line": 127,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Need to understand this particular type ? and when it will be used ?\nOther route types are as per the spec"
                },
                {
                    "file": "libmctp.h",
                    "line": 127,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Discussed the same in WG, and thanks for the clairifcation, that this will be used for internal EID management."
                },
                {
                    "file": "libmctp.h",
                    "line": 127,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "libmctp.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "These could do with some explanation of the values (what's upstream & downstream?), which might work better as an enum."
                },
                {
                    "file": "libmctp.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yes, I should put a comment in here as Richard and Iwona were discussing it on previous revisions of the patch. It's mostly covered by DSP0236 v1.3.1 9.1.6. The type MCTP_ROUTE_TYPE_ENDPOINT refers to a locally owned EID. We need MCTP_ROUTE_TYPE_LOCAL to correctly reply to `Resolve Endpoint ID` queries (i.e. have the source device send packets directly to the destination device rather than force the bridge to route all packets for each device on the bus).\n\nAs for enum, I agree, but they have an ambiguous type size. For public interfaces I think we should use well-defined type sizes to make it easier to interface with the APIs (it makes it more obvious when you break the ABI)."
                },
                {
                    "file": "libmctp.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "what about other routing entry details, esp. EntryType related, dynamic / static Entry. \nFine if this is going to covered in separate patchsets"
                },
                {
                    "file": "libmctp.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I've added a lengthy comment explaining the types and where to look in the base spec for further details."
                },
                {
                    "file": "libmctp.h",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "We might need to rework that when implementing Routing Information Update support. I'd prefer it to leave it to then when the motivation will give us a better grasp of possible implementations in the context of the requirements."
                },
                {
                    "file": "libmctp.h",
                    "line": 139,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Also, are we planning to introduce API to get the Routing table entry based on the bus lookup. \nThis is needed as we may need to send / cleanup routing table accordingly."
                },
                {
                    "file": "libmctp.h",
                    "line": 139,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Hmm, I'll think about that."
                },
                {
                    "file": "libmctp.h",
                    "line": 139,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I think we can leave this until after we get this series submitted? It seems like a fairly well-defined concept that shouldn't result in an API incompatibility down the track."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 450,
                    "deletions": -14
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -3
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 53,
                    "deletions": -6
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 456,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 985,
            "sizeDeletions": 24
        },
        {
            "number": 7,
            "revision": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
            "parents": [
                "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c"
            ],
            "ref": "refs/changes/10/33810/7",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1605067417,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Maybe mention that the route table isn't actually used yet?"
                },
                {
                    "file": "core.c",
                    "line": 53,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "I understand the benefit it provides, such that route_entry is never freed when in use, but usage like that itself is problem. Once entry is deleted there is no point in holding the entry and we should not use that entry itself. In other words, when we receive routing table update from a bus owner, it is necessary to drop the same, just because someone is holding the entry doesn't mean they should use it. \nin short, entry search must happen everytime, else if caching / re-use is used, then it is necessary to introduce the validity of the entry, such that stale is not used."
                },
                {
                    "file": "core.c",
                    "line": 53,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> In other words, when we receive routing table update from a bus owner, it is necessary to drop the same, just because someone is holding the entry doesn't mean they should use it. \n\nHow are you going to tell them to stop?\n\n> in short, entry search must happen everytime, else if caching / re-use is used, then it is necessary to introduce the validity of the entry, such that stale is not used.\n\nDespite your effort here, the race still remains. You can't have global consistency of the route table with respect to the network when we can only be locally aware of the network state. The races are fundamental to the network. You just have to live with the timeouts.\n\nAs such I don't plan on changing this implementation. The point of the reference count is for *memory* correctness, nothing further."
                },
                {
                    "file": "core.c",
                    "line": 53,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "It is necessary to indicate the entry is invalid. Yes, invalid entry will be used by already cached modules, but any new query will result in matching the entry (which is not valid), and still end up in using the same, which must be avoided.\n\nIf it is required only from memory management, then it's better to introduce the validity flag (to indicate the same), so any new query, even if matched, will be forfeit, due to validity flag.\n\nNote: I am fine to address the same in separate commit too (can track the same using TO-DO or issue list)"
                },
                {
                    "file": "core.c",
                    "line": 53,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> but any new query will result in matching the entry (which is not valid), and still end up in using the same\n\nThis assertion is false, and seems to be the source of your confusion. The value of the `refs` member is *separate* from whether the entry appears in the route table. The only requirement while the entry is in the table is that `refs` is greater than zero. However it is valid for `refs` to be greater than zero and for the entry to *not* be present in the route table.\n\nTo remove an entry from the table, the `next` and `prev` pointers of the entries adjacent to the one being removed are updated to point to each-other's entry, removing the current entry from the table. At this point, future queries of the table will not see the removed entry, even though it is still a valid object in memory. Only once `refs` has been decremented to zero do we free the memory, but the entry has been removed from the list (potentially) well before this point.\n\nTo demonstrate, this test passes and does not invoke undefined behaviour:\n\n static const struct mctp_route test_add_one =\t{\n        .range = { .first = 8, .last = 8 },\n\t.device = { .bus = 0, .address = 0, },\n\t.type = MCTP_ROUTE_TYPE_LOCAL,\n\t.flags = 0,\n };\n\n\n static void test_mctp_route_table_remove_referenced(void)\n {\n\tconst struct mctp_route *before_remove, *after_remove;\n\tstruct mctp *mctp;\n\tint rc;\n\n\tmctp = mctp_init();\n\tassert(mctp);\n\n\trc = mctp_route_add(mctp, &test_add_one[0]);\n\tassert(!rc);\n\n\tbefore_remove = mctp_route_match(mctp, &test_add_one[0],\n\t\t\t\t \t MCTP_ROUTE_MATCH_ROUTE);\n\tassert(before_remove);\n\n\trc = mctp_route_remove(mctp, &test_add_one[0]);\n\tassert(!rc);\n\n\tafter_remove = mctp_route_match(mctp, &test_add_one[0],\n\t\t\t\t \tMCTP_ROUTE_MATCH_ROUTE);\n\tassert(!after_remove);\n\n\tmctp_route_put(before_remove);\n\n\tmctp_destroy(mctp);\n }\n\nI will add it to the test suite included in this patch to capture the behaviour."
                },
                {
                    "file": "core.c",
                    "line": 53,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Ok Got it now, guess i thought you have implemented in the different style. \nIn this case line @418 needs to be updated accordingly."
                },
                {
                    "file": "core.c",
                    "line": 327,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Please add null check for a & b else, better be static"
                },
                {
                    "file": "core.c",
                    "line": 327,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Thanks for catching that."
                },
                {
                    "file": "core.c",
                    "line": 327,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "core.c",
                    "line": 398,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "assert(entry);"
                },
                {
                    "file": "core.c",
                    "line": 398,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "core.c",
                    "line": 398,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "core.c",
                    "line": 421,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "With the flows explained above\n1. After insert\n2. Do a match\n3. Do a put --> then as per the code it will be freed, and next match will fail\n\nSame will end-up in assert when there are multiple entries with prev or next pointing to valid entries."
                },
                {
                    "file": "core.c",
                    "line": 421,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Can you please write the code that you think will trigger the assert using the public (non-static) interfaces? That way I can add it as a test case. Right now I'm not immediately following what you're outlining.\n\nHaving said that, maybe the implementation of __mctp_route_remove() addresses your concern? mctp_route_entry_put() is static and can't be directly called by user code. libmctp users must call through mctp_route_remove() (which calls __mctp_route_remove()).\n\n__mctp_route_remove() deletes the entry from the route table via mctp_route_list_remove(), and then drops the reference added in the route's initialisation in __mctp_route_add(). If anyone has done an interim match and still holds the a reference the entry won't be freed, but its next and prev pointers will have been NULL'ed by mctp_route_list_remove()."
                },
                {
                    "file": "core.c",
                    "line": 439,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "what's a mode? you've called this 'flags' in the public API. Can you add some detail here (or on mctp_route_match) about how these are used (ie, that the route matches are OR-ed)?"
                },
                {
                    "file": "core.c",
                    "line": 452,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "How about:\n\n    if ((mode & MCTP_ROUTE_MATCH_EID) && (mode & MCTP_ROUTE_MATCH_RANGE))"
                },
                {
                    "file": "core.c",
                    "line": 649,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "How we will make sure, that entry is removed and not used. There can be some code which holds, the entry refs. How we can avoid it using that entry."
                },
                {
                    "file": "core.c",
                    "line": 649,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Hence the reference count. Whenever the other chunk of code stops using the entry, it also does the put, at which point the entry will be freed."
                },
                {
                    "file": "core.c",
                    "line": 649,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "This is same as @53, It is ok to use stale entry, but not ok to continuously use it, just because someone doesn't put the reference entry."
                },
                {
                    "file": "core.c",
                    "line": 649,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Can you clarify your comment here with respect to my explanation of the refs behaviour (and test case) above?"
                },
                {
                    "file": "core.c",
                    "line": 839,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "this needs to be removed"
                },
                {
                    "file": "core.c",
                    "line": 839,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "libmctp.h",
                    "line": 98,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Returns the bus ID of the registered binding greater or equal to 0, and negative error code for any error."
                },
                {
                    "file": "libmctp.h",
                    "line": 98,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "libmctp.h",
                    "line": 98,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Done"
                },
                {
                    "file": "libmctp.h",
                    "line": 141,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "ENDPOINT_SELF or \nSELF"
                },
                {
                    "file": "libmctp.h",
                    "line": 141,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I wish I could s/local/neighbour/ on the spec!"
                },
                {
                    "file": "libmctp.h",
                    "line": 141,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I've changed this to MCTP_ROUTE_TYPE_SELF"
                },
                {
                    "file": "libmctp.h",
                    "line": 143,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "can we add --> delivered to the context (self) rather than routed to another"
                },
                {
                    "file": "libmctp.h",
                    "line": 143,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "libmctp.h",
                    "line": 161,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "Another thing which is missing is to differentiate Endpoint & Bridge devices. Planning to address it separately  ?"
                },
                {
                    "file": "libmctp.h",
                    "line": 161,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Can you please outline why you think that's necessary?"
                },
                {
                    "file": "libmctp.h",
                    "line": 161,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "As discussed in OpenBMC PMCI WG, this is needed so that we can update all the bridge devices, when routing table update happens"
                },
                {
                    "file": "libmctp.h",
                    "line": 161,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Sorry, I've forgotten the argument. We must write these things down rather than handwave them away with \"as verbally discussed\" (that doesn't mean we can't verbally discuss them, just that the arguments need to be written down regardless).\n\nI still can't see why this distinction is necessary - all devices should become aware of changes to the network."
                },
                {
                    "file": "libmctp.h",
                    "line": 161,
                    "reviewer": {
                        "name": "Richard Marian Thomaiyar",
                        "email": "richard.marian.thomaiyar@linux.intel.com",
                        "username": "rthomaiy"
                    },
                    "message": "It was documented. We discussed that as BO, we need to send Routing table update to Bridge devices, and hence need to store that info\n\nExcerpt from OpenBMC PMCI WG \n\nRichard - Other clarification required is, in the entry we don't have a mechanism to tell whether EID is endpoint device or bridge etc. \nAndrew - For what purpose it may be needed. \nRichard - This is needed so that we will be able to indicate any routing table update to any bridge devices etc.\nAndrew - Need to investigate on this."
                },
                {
                    "file": "libmctp.h",
                    "line": 161,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "It still doesn't explain why bridges need special handling. The route tables in all devices need updating, right?"
                },
                {
                    "file": "libmctp.h",
                    "line": 182,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "Even though the route argument is marked const, you may want to specify that the route data is copied (and hence route may be free()d by the caller immediately on return)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 494,
                    "deletions": -20
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -3
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 79,
                    "deletions": -3
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 456,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1055,
            "sizeDeletions": 27
        },
        {
            "number": 8,
            "revision": "3ed0e4e7a296aa73b7aa287f04fab397dec3c0c0",
            "parents": [
                "a289513a9692ab3f597133f25250a59c79dcf3df"
            ],
            "ref": "refs/changes/10/33810/8",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1611016056,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "core.c",
                    "line": 77,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "I'm guessing this should be nul-terminated - might be worth a comment."
                },
                {
                    "file": "libmctp.h",
                    "line": 172,
                    "reviewer": {
                        "name": "Jeremy Kerr",
                        "email": "jk@ozlabs.org",
                        "username": "jk-ozlabs"
                    },
                    "message": "I think the other new functions are fairly self-explanatory, but this one may need a comment - from the context here: it takes a route and returns... a route?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "tests/test_eid.c",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "Makefile.am",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "CMakeLists.txt",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "core.c",
                    "type": "MODIFIED",
                    "insertions": 499,
                    "deletions": -20
                },
                {
                    "file": "tests/test_bridge.c",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -3
                },
                {
                    "file": "libmctp.h",
                    "type": "MODIFIED",
                    "insertions": 80,
                    "deletions": -4
                },
                {
                    "file": "tests/test_route.c",
                    "type": "ADDED",
                    "insertions": 485,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 1090,
            "sizeDeletions": 28
        }
    ]
}