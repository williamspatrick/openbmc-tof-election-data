{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I39fcd0de2c70cd58b4d132cdcae5f82319732dbb",
    "number": 56126,
    "subject": "Add device-management infrastructure",
    "owner": {
        "name": "Zev Weiss",
        "email": "zev@bewilderbeest.net",
        "username": "zevweiss"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/56126",
    "hashtags": [],
    "createdOn": 1659569721,
    "lastUpdated": 1662517792,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1659569721,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1659569769,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659569769,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1659569785,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48341/ : FAILURE"
        },
        {
            "timestamp": 1659569855,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1659569880,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659569881,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1659570038,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48346/ : FAILURE"
        },
        {
            "timestamp": 1659570307,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1659570335,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659570336,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1659570508,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48348/ : FAILURE"
        },
        {
            "timestamp": 1659570726,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1659644602,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 4: Patch Set 3 was rebased."
        },
        {
            "timestamp": 1659644629,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659644630,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1659644644,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48544/ : FAILURE"
        },
        {
            "timestamp": 1659644707,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 5: Patch Set 4 was rebased."
        },
        {
            "timestamp": 1659644755,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659644755,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1659645068,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48550/ : FAILURE"
        },
        {
            "timestamp": 1659646938,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 6: Patch Set 5 was rebased."
        },
        {
            "timestamp": 1659646975,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659646975,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1659647697,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48558/ : FAILURE"
        },
        {
            "timestamp": 1659662503,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(7 comments)"
        },
        {
            "timestamp": 1659662579,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1659667795,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6:\n\n(6 comments)"
        },
        {
            "timestamp": 1659671655,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1659675774,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1659727615,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1659727662,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659727662,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1659728028,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/48644/ : FAILURE"
        },
        {
            "timestamp": 1659728073,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1659728102,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659728103,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1659728308,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48648/ : SUCCESS"
        },
        {
            "timestamp": 1659728392,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 8:\n\n(4 comments)"
        },
        {
            "timestamp": 1659736525,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659736652,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(3 comments)"
        },
        {
            "timestamp": 1659736691,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1659737238,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1659745810,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 8: Code-Review+1"
        },
        {
            "timestamp": 1659749875,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(2 comments)"
        },
        {
            "timestamp": 1659803722,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 8:\n\n(5 comments)"
        },
        {
            "timestamp": 1660003180,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1660003213,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660003214,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1660003422,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48765/ : SUCCESS"
        },
        {
            "timestamp": 1660004179,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 9:\n\n(5 comments)"
        },
        {
            "timestamp": 1660193528,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(3 comments)"
        },
        {
            "timestamp": 1660193725,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 9:\n\n(2 comments)"
        },
        {
            "timestamp": 1660213715,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 9:\n\n(3 comments)"
        },
        {
            "timestamp": 1660221645,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1660254558,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 10."
        },
        {
            "timestamp": 1660254598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660254598,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1660254617,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/49038/ : FAILURE"
        },
        {
            "timestamp": 1660254776,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1660254817,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660254817,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1660255061,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49042/ : SUCCESS"
        },
        {
            "timestamp": 1660255113,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660608707,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1660608713,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 11: Code-Review+1"
        },
        {
            "timestamp": 1662511397,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1662511461,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1662511461,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: -Ok-To-Test"
        },
        {
            "timestamp": 1662511668,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/50405/ : SUCCESS"
        },
        {
            "timestamp": 1662517780,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1662517783,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12: Code-Review+2"
        },
        {
            "timestamp": 1662517792,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d9fb0757d91f08db28ab228b569f38b8b463c0cc",
            "parents": [
                "d64b9e0c774bdb84963b0399abe8143c67cfe991"
            ],
            "ref": "refs/changes/26/56126/1",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659569721,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 135,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 196,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "d7b54d4d564abce74c02910a44c2a2feb0a2fef3",
            "parents": [
                "d64b9e0c774bdb84963b0399abe8143c67cfe991"
            ],
            "ref": "refs/changes/26/56126/2",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659569855,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 135,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 199,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "3a69fbef80125ead07e81bd3e0f4441e134202f9",
            "parents": [
                "d64b9e0c774bdb84963b0399abe8143c67cfe991"
            ],
            "ref": "refs/changes/26/56126/3",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659570307,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Sigh...CI doesn't like the `I2CDevice()` macro, but from some brief research the only alternatives I've been able to find for compile-time string concatenation are giant gobs of incomprehensible template crap...is there a way to achieve this that's both (a) reasonable for a human to read and (b) appeases the robot gods?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Sigh...CI doesn't like the `I2CDevice()` macro, but from some brief research the only alternatives I've been able to find for compile-time string concatenation are giant gobs of incomprehensible template crap...is there a way to achieve this that's both (a) reasonable for a human to read and (b) appeases the robot gods?\n\nSorry, missed this before I left the other comment. \n\nstd::string view is constexpr these days.  you can write constexpr functions that do string concatenation for you and return a string_view."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ack, thanks -- I'll see if I can wrangle up something tolerable using that."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Hmm, after some searching I haven't found anything that seems like it would be applicable to this -- happen to have a link or a sketch/pseudocode of what that would look like?\n\nThe tricky part is the `devname \" $Address\"` bit...which I guess also sort of makes me wonder if it's really worth trying to maintain the generality of the current approach as used in E-M (where every single existing instance fits the same pattern, because they're all i2c devices).  In practical terms, is there much real chance of us wanting to support device types that both (a) aren't i2c and (b) also happen to work via a similar-enough sysfs interface that the E-M approach could support it?  (I don't know of any such subsystems in the kernel offhand.)  So basically I'm thinking it might make sense to just have it be something like:\n\n```\nstruct I2CDeviceMgmt\n{\n  const char* driverName;\n  uint64_t bus, addr;\n}\n```\n\nand just have methods that have the i2c-specific sysfs logic hardcoded into them.  Thoughts?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ah, I take it (partially) back -- I see there is a lone exception in the E-M list for GPIOs, but considering that's now a deprecated interface I figure we probably want to move away from it anyway (and even so, a single exception like that seems like something that might be simpler to handle with a little special-case conditional logic instead of introducing a whole generalized mechanism just to accommodate it)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "...alright, current patch takes the de-generalized approach instead; let me know what you think."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I agree with your comment and suggestion above, lets make it simpler and more targetted to what we're trying to do."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 135,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 199,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "b2a8b5e3237709595a0a4ee786e022e3baddc639",
            "parents": [
                "b2a0d5b2b7f07b1f85043e0def3fcccc94235501"
            ],
            "ref": "refs/changes/26/56126/4",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659644602,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 135,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 199,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "c84c56d1a61ed10810deefaa29b906624f39f6c4",
            "parents": [
                "bf55edad5350dfab15554273cc6c24478a2d8cb1"
            ],
            "ref": "refs/changes/26/56126/5",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659644707,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 135,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 199,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "782de896f128a59dfd13e34bed39b0fd593b8daa",
            "parents": [
                "09f2226ddbd3a2c63e355540258f7974d8ddf8b0"
            ],
            "ref": "refs/changes/26/56126/6",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659646938,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "include/Utils.hpp",
                    "line": 364,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Technically in the coding standard macros aren't allowed.  We would generally rely on extra constructors for providing default parameters like this in the DeviceTemplate class."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 364,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Obviated by alternate approach."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 369,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FWIW, these days now that we have c++20, we would declare this as boost::container::flat_map<std::string_view, DeviceTemplate, std::less<>>\n\n\nWith that said, I realize you just copied this from EM, so up to you if you want to change."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 369,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ah, thanks for the tip -- might as well tidy it up while I'm messing with it..."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 711,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Up to you if you want to change it, but this can probably just be inlined in the 3 places it's used."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 711,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Yeah, might as well -- done."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 795,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why not just return a DeviceMgmt object?  or return a std::optional to denote failures?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 795,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "This was carried over from the previous version, and I now no longer remember exactly why I did it that way...possibly just a habit of avoiding passing/returning non-trivial structs by value?  But yeah, returning it might make more sense..."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 795,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 803,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Pretty sure you copied this, so find if you don't want to fix, but this is duplicating a lookup\n\ncfg.find(\"Type\") will do a single lookup.  contains() followed by at() will do 2."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 803,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> cfg.find(\"Type\") will do a single lookup\n\nAh, _that's_ the API I can never remember the name of, thanks.  (Looked for it a bit in the docs but gave up trudging through the mountain of overloads and such...)"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 831,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Could we just do this operation in the constructor, and omit the bus and address members from the structure itself?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 831,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I considered doing it that way; going this route was a semi-arbitrary choice I made on the space-time tradeoff spectrum.  This way does the template-substitution on each create/destroy call (time cost); doing it once in the constructor means every object allocates and carries around its own set of per-device paths (space cost).  In practice the frequency of creation/deletion and the number of objects are I suspect both plenty small enough that it's not a big deal either way; if you'd prefer the other way I'm fine doing that instead."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 831,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 840,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "same as above."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 840,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Likewise here."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 135,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 199,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "552f32daeeb4bb8973a32a97b94f95447afd848b",
            "parents": [
                "c2c3fc06f80419c215f84634e9204f950e565f1a"
            ],
            "ref": "refs/changes/26/56126/7",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659727615,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 104,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 144,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "9c4bd3bb4f4702644fa87576daabb593759cfd5f",
            "parents": [
                "c2c3fc06f80419c215f84634e9204f950e565f1a"
            ],
            "ref": "refs/changes/26/56126/8",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1659728073,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Only one pretty minor naming/convention thing.  Other than that, looks good to me."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Some RAII best practices, but looking pretty good."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 343,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As written, this has lifetime issues (I think).  I suspect this needs to be a std::string, so you're not relying on a pointer to the rvalue type on line 738."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 343,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "The only I2CDevice objects that should ever exist should be statically allocated with a string-literal name (values in a static I2CDeviceTypeMap), so I'm fairly confident it should be safe as-is.  That said, if that seems too subtle or an assumption that's likely to break I can change it to allocate & copy.  (Yearning for `&'static str` to have that compiler-enforced...)"
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 343,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The only I2CDevice objects that should ever exist should be statically allocated with a string-literal name (values in a static I2CDeviceTypeMap), so I'm fairly confident it should be safe as-is.\n>  That said, if that seems too subtle or an assumption that's likely to break I can change it to allocate & copy.  (Yearning for `&'static str` to have that compiler-enforced...)\n\nI guess I kind of buy that.  I could see the argument a lot better if \nI2CDeviceTypeMap were a constexpr std::array, so there's no question there about lifetime.  In theory the main I2CDeviceTypeMap could go out of scope which would invalidate any I2CDeviceType classes in a subtle way.\n\nI'm on the fence here.  Do whatever is in your best judgement."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 343,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Given that the struct in question is a description of a device _type_ about which we require ahead-of-time knowledge (and not a device instance), I'm having a somewhat hard time picturing a scenario in which we could end up instantiating a new one at runtime, so I'd feel fairly comfortable leaving it as it is.  (I'll just set these words aside on a platter in case I have to eat them later...)"
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not for this patchset, but in a perfect world, this would be a constexpr sorted array, so we don't take up memory all the time to host it.\n\nProblem for another patchset though."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Do you mean like something that would allow it to be in the executable .rodata section instead of heap space that's initialized by pre-main() code?  If so, yeah, that'd be neat, though I don't know the necessary C++ magic offhand to make it happen..."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Do you mean like something that would allow it to be in the executable .rodata section instead of heap space that's initialized by pre-main() code?\n\nYep\n\n>  If so, yeah, that'd be neat, though I don't know the necessary C++ magic offhand to make it happen...\n\nIf you want an example somewhere else we do this:\n\nhttps://github.com/openbmc/bmcweb/blob/5907571df69a5e1a6f3e0633ad42f2dc7fa6ba25/redfish-core/include/registries/openbmc_message_registry.hpp#L73\n\nThen doing a lookup on the structure:\n\nhttps://github.com/openbmc/bmcweb/blob/80f595e7c00dc5b82e1aba8828c3a8205f9a4332/redfish-core/include/event_service_manager.hpp#L99\n\nArguably we could've used std::binary_search to make it faster, because it's sorted, but you get the idea.\n\nAgain, doesn't need to be this patch."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ah, I see -- I had thought you were alluding to some fancier trickery to automate the sorting at compile-time or something, but yeah, that certainly seems tractable."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nope..... Just a comment that \"Please keep this list alphabetized\" seems to do the trick.  Also, if we're that worried, a linear search on startup isn't the end of the world."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "should this just be the destructor?"
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "It's called explicitly from an error-handling path in the ::create() method (to handle the scenario where the new_device write succeeds but the driver initialization fails and doesn't set up the hwmon stuff), which AFAIK necessitates it remaining a regular method."
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 360,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not quite following, if create() fails, won't the object go out of scope almost immediately and get the same behavior?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit, rather than explicitly call close, please just rely on raii, and wrap line 779-786 in a scope with braces so that ctor is closed when leaving the scope."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ack, though looking back it now I think due to the buffering involved it should probably be an explicit flush followed by a `ctor.good()` test to check for write errors?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "doesn't the ifstream flush on close?  Are you seeing actual functional issues?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "The docs I was looking at said it does (as one would certainly hope) flush on close, yes, but if we were to rely on the dtor to do that closing would we have any way of doing the .good() test after it for the error check?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not sure."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 792,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is what you were talking about, right?  in theory when this returns -1, the calling code is going to destroy it, and run the destructor, right?"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 792,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Yeah, this is the call I was referring to previously -- the lifetime of the I2CDevice object isn't really tied to the instantiation and removal of the underlying kernel hwmon device though, it's created and destroyed as part of the HwmonTempSensor object.  We might close our file descriptors and remove the device without destroying the sensor object, e.g. so that we can maintain the sensor's presence on dbus with its Available property set to false when it goes offline.\n\n...and actually, I see now it's not even just that -- at least in the current implementation (https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/56023/12), the instantiateDevices() function creates temporary local I2CDevice instances that aren't even a part of a sensor object, which would break entirely if the destructor ran and removed the hwmon device."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 792,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We might close our file descriptors and remove the device without destroying the sensor object\n\nBut..... if we want that we can still do that, right?  Just do something like\n\nstd::optional<MyI2cDevice>\n\nif you want to create one, use emplace, if you want to destroy one, call reset().  The advantages of this pattern are that if we throw an exception, the device gets removed appropriately."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 792,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Possibly my understanding of destructors and std::optional<> is off, but I had thought that in a situation like:\n\n```\nfor (...)\n{\n  std::optional<I2CDevice> dev = getI2CDevice(...);\n  ...\n}\n```\n\nthat at the end of each iteration of the loop the dtor for `dev` would be run, which would in turn run the dtor for the contained I2CDevice (if it's not nullopt), and hence close the device?  If so that would completely break `instantiateDevices()` in the later patch.\n\nI guess maybe I should clarify that as I've implemented things thus far, the I2CDevice struct is really more just a structured representation of the device's i2c config parameters than a representation of the instantiated device itself.  It's basically just acting as a cache of the tedious work of taking a SensorBaseConfigMap (a {string:variant} dict, essentially), verifying that it has all the right keys and that they're of the right types, and then pulling the corresponding values out into an easily-accessible form.  (Possibly its name could be changed to better reflect that...)"
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 792,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Possibly my understanding of destructors and std::optional<> is off, but I had thought that in a situation like:\n> \n> ```\n> for (...)\n> {\n>   std::optional<I2CDevice> dev = getI2CDevice(...);\n>   ...\n> }\n> ```\n> \n> that at the end of each iteration of the loop the dtor for `dev` would be run, which would in turn run the dtor for the contained I2CDevice (if it's not nullopt), and hence close the device?\n\nYep.\n\n>  If so that would completely break `instantiateDevices()` in the later patch.\n\nMaybe as it exists, but in the ideal, if the I2CDevice object was owned by the class in question, and had appropriate move semantics, it would have an identical lifetime, and would ALWAYS be cleaned up on the sensor destroying, which I think makes it less complex.\n\n> \n> I guess maybe I should clarify that as I've implemented things thus far, the I2CDevice struct is really more just a structured representation of the device's i2c config parameters than a representation of the instantiated device itself.  It's basically just acting as a cache of the tedious work of taking a SensorBaseConfigMap (a {string:variant} dict, essentially), verifying that it has all the right keys and that they're of the right types, and then pulling the corresponding values out into an easily-accessible form.  (Possibly its name could be changed to better reflect that...)\n\nYeah.  I guess I had hoped that it would be a little more than that, actually representing an RAII instantiation of a kernel device.  Oh well."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 810,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Don't need an explicit close here.  RAII will give you the same behavior without it."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 810,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ack, though changed to the same .flush()/.good() pattern here as well."
                },
                {
                    "file": "src/Utils.cpp",
                    "line": 810,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done.  Lets follow up in the other comment."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 104,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 144,
            "sizeDeletions": 0
        },
        {
            "number": 9,
            "revision": "25fd66c23f25be9435297dd7e14c3b07482c97cc",
            "parents": [
                "f8ba299135598de0a45a2884e11238a2e58853cb"
            ],
            "ref": "refs/changes/26/56126/9",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1660003180,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/Utils.hpp",
                    "line": 340,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This all looks coherent enough to be in a header that isn't called 'Utils.hpp' IMO. Can we start trying to organise things so we don't grow the junkyard?"
                },
                {
                    "file": "include/Utils.hpp",
                    "line": 340,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Fair enough, now moved to DeviceMgmt.{c,h}pp."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "include/Utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 118,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 159,
            "sizeDeletions": 0
        },
        {
            "number": 10,
            "revision": "057f7cfe519e1174ce75f46f0e42364ffdfa3dbc",
            "parents": [
                "5b2cb587b58b7fd8c63ebf78b9f4ff036ea89ec0"
            ],
            "ref": "refs/changes/26/56126/10",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1660254558,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/DeviceMgmt.cpp",
                    "type": "ADDED",
                    "insertions": 124,
                    "deletions": 0
                },
                {
                    "file": "include/DeviceMgmt.hpp",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 188,
            "sizeDeletions": 0
        },
        {
            "number": 11,
            "revision": "e3f66a49ace348d0470d46817f44c97ce5ff63a5",
            "parents": [
                "5b2cb587b58b7fd8c63ebf78b9f4ff036ea89ec0"
            ],
            "ref": "refs/changes/26/56126/11",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1660254776,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Looks like a bunch of the code I wrote in platform-fru-detect \ud83d\ude0a e.g.\n\nhttps://github.com/ibm-openbmc/platform-fru-detect/blob/main/src/sysfs/i2c/bus.cpp"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/DeviceMgmt.cpp",
                    "type": "ADDED",
                    "insertions": 124,
                    "deletions": 0
                },
                {
                    "file": "include/DeviceMgmt.hpp",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 187,
            "sizeDeletions": 0
        },
        {
            "number": 12,
            "revision": "dabd48dd9ad9c05b1ad67e3540385bd69fe20239",
            "parents": [
                "054aad8f80ca83b93123c495befe03dafaf63cc0"
            ],
            "ref": "refs/changes/26/56126/12",
            "uploader": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "createdOn": 1662511397,
            "author": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/DeviceMgmt.cpp",
                    "type": "ADDED",
                    "insertions": 124,
                    "deletions": 0
                },
                {
                    "file": "include/DeviceMgmt.hpp",
                    "type": "ADDED",
                    "insertions": 41,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 215,
            "sizeDeletions": 0
        }
    ]
}