{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "topic": "nvmesensor-destruction",
    "id": "I63d0e7eb3318c209b08551072a3cb7279da21269",
    "number": 55423,
    "subject": "NVMeBasicContext: Properly cleanup resources, allowing destruction",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@aj.id.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/55423",
    "hashtags": [],
    "createdOn": 1658108758,
    "lastUpdated": 1658354665,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1658108758,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1658108851,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658108851,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1658109519,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47136/ : SUCCESS"
        },
        {
            "timestamp": 1658114834,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1658120393,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1658157065,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658187487,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658204252,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1658204300,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658204300,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1658204756,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47189/ : SUCCESS"
        },
        {
            "timestamp": 1658347236,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(4 comments)"
        },
        {
            "timestamp": 1658350150,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1658354614,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658354661,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review+2"
        },
        {
            "timestamp": 1658354665,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Change has been successfully rebased and submitted as 3cbd5a14c4fd9564da33890075400495c9ffccc6"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "61048b0b562b8315e5628ab63681d28d0e27ea58",
            "parents": [
                "bce0f038383c54dc3da515610893abeefe3be045"
            ],
            "ref": "refs/changes/23/55423/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1658108758,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We generally solve this by capturing by weak_ptr, then calling lock in the callback."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Okay. I'll re-implement it that way so I'm not swimming against the current \ud83d\ude0a"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 328,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "make this weakSelf{weak_from_this(){\n\nthen within the handler do\n\nstd::shared_ptr<NvmeContext> self = weakSelf.lock();\nif (self == nullptr){\n   return;\n}\n\n\nand I think your ownership problem goes away;  I've been slowly going through and trying to audit these, and other sensors have run into this too;  Clearly I haven't gotten to nvme yet."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 328,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yeah okay. TBH I kinda just slashed my way through the problem in the way that made the most sense to me in the most explicit way I could reason about. I'll rework it to not swim against the current :)"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 263,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Just use std::jthread if you want an raii thread?"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 263,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Oh, I wasn't aware of it. I'll think about this a bit more. If the option falls neatly out of the weak_ptr rework then I'll take you up on that."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 263,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think this code still wants jthread regardless.  Why jthread wasn't the default for std::thread.... I will never understand."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 263,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack on both fronts."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 263,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 378,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "yeah, capturing by \"this\" is super error prone dependent on how you order your method members (You have to declare all asio members last to make sure their destruction are called first before any resources the callback might use are destroyed).  FWIW, the weak_ptr/lock() pattern is a lot easier get right, and doesn't seem to add much overhead.\n\n\n(note, I haven't looked if this class gets the order right, it might)"
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 378,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Yeah, I realise that, but the destructor implementation is explicit and should handle the ordering correctly."
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "line": 378,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/NVMeBasicContext.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -1
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 27,
                    "deletions": -11
                },
                {
                    "file": "src/NVMeSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": -14
                },
                {
                    "file": "include/NVMeContext.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -8
                }
            ],
            "sizeInsertions": 86,
            "sizeDeletions": 34
        },
        {
            "number": 2,
            "revision": "bba872c7f621453c15e63ffcf0e8aba50484b710",
            "parents": [
                "bce0f038383c54dc3da515610893abeefe3be045"
            ],
            "ref": "refs/changes/23/55423/2",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1658204252,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FYI, since you wrote this, the asio folks came up with boost::asio::concurrent_channel\n\nhttps://www.boost.org/doc/libs/master/doc/html/boost_asio/reference/experimental__basic_concurrent_channel.html\n\nFor passing event messages between threads.  Probably not worth looking at over just porting to io_uring, but something for the toolbox for sure."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Bah. But yeah, io_uring all the way."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/NVMeBasicContext.hpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -17
                }
            ],
            "sizeInsertions": 84,
            "sizeDeletions": 17
        },
        {
            "number": 3,
            "revision": "3cbd5a14c4fd9564da33890075400495c9ffccc6",
            "parents": [
                "a4d2768c83c04b8f9a640858b7343c44e7deea6d"
            ],
            "ref": "refs/changes/23/55423/3",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1658354665,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "include/NVMeBasicContext.hpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeBasicContext.cpp",
                    "type": "MODIFIED",
                    "insertions": 21,
                    "deletions": -17
                }
            ],
            "sizeInsertions": 84,
            "sizeDeletions": 17
        }
    ]
}