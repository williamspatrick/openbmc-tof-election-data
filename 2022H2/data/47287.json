{
    "project": "openbmc/x86-power-control",
    "branch": "master",
    "id": "Icf1fd61c5ad9f8cce7f76f5e73f76c5f4a4753c0",
    "number": 47287,
    "subject": "Add helpers to request GPIOs as asserted or deasserted",
    "owner": {
        "name": "Jason Bills",
        "email": "jason.m.bills@linux.intel.com",
        "username": "jmbills"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/x86-power-control/+/47287",
    "hashtags": [],
    "createdOn": 1632860756,
    "lastUpdated": 1665685743,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1632860756,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1632860782,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1632860826,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/27115/ : SUCCESS"
        },
        {
            "timestamp": 1632861395,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\nI am not sure this change provides much benefit but I thought I'd put it up to get others' thoughts.  Please let me know your thoughts."
        },
        {
            "timestamp": 1632931551,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1632962439,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nI think it looks like an improvement -- makes it easier to get things right when making changes.  My one bikesheddy quibble would be with the function naming; the \"request\" nomenclature is currently used with `requestGPIOEvents`, which is more of an \"open\" operation than a \"set\" operation, so I think distinguishing the naming of these functions a bit more from that might be good.  Maybe just `assertGPIO()` and `deassertGPIO()`?"
        },
        {
            "timestamp": 1633028283,
            "reviewer": {
                "name": "Naveen Moses ",
                "email": "naveen.mosess@hcl.com",
                "username": "naveenmosess"
            },
            "message": "Patch Set 1: Code-Review+1\n\nchanges looks good to me"
        },
        {
            "timestamp": 1633129930,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> (1 comment)\n> \n> I think it looks like an improvement -- makes it easier to get things right when making changes.  My one bikesheddy quibble would be with the function naming; the \"request\" nomenclature is currently used with `requestGPIOEvents`, which is more of an \"open\" operation than a \"set\" operation, so I think distinguishing the naming of these functions a bit more from that might be good.  Maybe just `assertGPIO()` and `deassertGPIO()`?\n\nI struggled with naming this, too.  I had thought about just assertGPIO() and deassertGPIO(), but I felt like that was hiding the fact that the function does a request() call on the GPIO to claim ownership of it.  However, I see that it's confusing when it calls the \"set\" function instead of a \"request\".  I will change it."
        },
        {
            "timestamp": 1633130148,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1633130473,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > (1 comment)\n> > \n> > I think it looks like an improvement -- makes it easier to get things right when making changes.  My one bikesheddy quibble would be with the function naming; the \"request\" nomenclature is currently used with `requestGPIOEvents`, which is more of an \"open\" operation than a \"set\" operation, so I think distinguishing the naming of these functions a bit more from that might be good.  Maybe just `assertGPIO()` and `deassertGPIO()`?\n> \n> I struggled with naming this, too.  I had thought about just assertGPIO() and deassertGPIO(), but I felt like that was hiding the fact that the function does a request() call on the GPIO to claim ownership of it.  However, I see that it's confusing when it calls the \"set\" function instead of a \"request\".  I will change it.\n\nOh, well now I feel a bit silly -- I actually hadn't realized that those were (indirectly) calling gpiod::line::request().  Dumb question time: what's the reason we re-open those every time we set them instead of opening them during initialization and holding on to them?"
        },
        {
            "timestamp": 1633130609,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1633130621,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1633130800,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 2:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > (1 comment)\n> > > \n> > > I think it looks like an improvement -- makes it easier to get things right when making changes.  My one bikesheddy quibble would be with the function naming; the \"request\" nomenclature is currently used with `requestGPIOEvents`, which is more of an \"open\" operation than a \"set\" operation, so I think distinguishing the naming of these functions a bit more from that might be good.  Maybe just `assertGPIO()` and `deassertGPIO()`?\n> > \n> > I struggled with naming this, too.  I had thought about just assertGPIO() and deassertGPIO(), but I felt like that was hiding the fact that the function does a request() call on the GPIO to claim ownership of it.  However, I see that it's confusing when it calls the \"set\" function instead of a \"request\".  I will change it.\n> \n> Oh, well now I feel a bit silly -- I actually hadn't realized that those were (indirectly) calling gpiod::line::request().  Dumb question time: what's the reason we re-open those every time we set them instead of opening them during initialization and holding on to them?\n\nIt depends on the GPIO.  For generic GPIOs like the NMI Output pin, we can request and hold those permanently.  For the Power and Reset Output pins, those are pass-through pins where the underlying pinctrl driver is configured to automatically disconnect the pass-through when the pins are claimed.  So, to manually control the pins, we have to claim them.  But to allow them to be controlled by the front-panel power and reset buttons, we have to release them to re-enable the pass-through."
        },
        {
            "timestamp": 1633130890,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/27332/ : SUCCESS"
        },
        {
            "timestamp": 1633318420,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1665685743,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Abandoned\n\nclose due to inactivity"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "285850f679d5bc12b97f6bb5481c60c427bc5039",
            "parents": [
                "4bb83fa695f9df5281c5c6eaf327e4bd0b84efd6"
            ],
            "ref": "refs/changes/87/47287/1",
            "uploader": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "createdOn": 1632860756,
            "author": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "power-control-x86/src/power_control.cpp",
                    "line": 3096,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "This call site looks like it didn't get updated for the configurable polarity changes or something?  In any case, converting this one as well should take care of that too..."
                },
                {
                    "file": "power-control-x86/src/power_control.cpp",
                    "line": 3096,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "I had left this one because I don't have this GPIO in my config file, so I don't know if it's AssertHigh or AssertLow to set the right polarity.  If someone can tell the polarity, I will update this call, too."
                },
                {
                    "file": "power-control-x86/src/power_control.cpp",
                    "line": 3096,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ah, true -- Naveen, could you perhaps shed some light there?  (Looks like the default config file in the repo could use a corresponding update to add that entry too.)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "power-control-x86/src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 11
        },
        {
            "number": 2,
            "revision": "79034e8755faf8f296299d12fa8ceaa079f34ac1",
            "parents": [
                "418ce11fce57cecce7d26a3dc368db824998926c"
            ],
            "ref": "refs/changes/87/47287/2",
            "uploader": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "createdOn": 1633130609,
            "author": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "power-control-x86/src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 34,
            "sizeDeletions": 11
        }
    ]
}