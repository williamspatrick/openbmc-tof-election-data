{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "I9141e1875ee99bfe1e7abdc616fb5ea2446e40ba",
    "number": 56372,
    "subject": "Replace ExportTempate createsHWMon boolean with an enumeration type",
    "owner": {
        "name": "Johnathan Mantey",
        "email": "johnathanx.mantey@intel.com",
        "username": "Howitzer105mm"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/entity-manager/+/56372",
    "hashtags": [],
    "createdOn": 1659989816,
    "lastUpdated": 1661470264,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1659989816,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1659989851,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659989852,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1659990102,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48755/ : SUCCESS"
        },
        {
            "timestamp": 1660066214,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Removed reviewer Chen, Yugang <yugang.chen@linux.intel.com>."
        },
        {
            "timestamp": 1660066218,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Removed reviewer Klaudia Jablonska <klaudia.jablonska@intel.com>."
        },
        {
            "timestamp": 1660066276,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Removed reviewer Suryakanth Sekar <suryakanth.sekar@linux.intel.com>."
        },
        {
            "timestamp": 1660066279,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Removed reviewer Gokul Sanker V G <gokul.sanker.v.g@intel.com>."
        },
        {
            "timestamp": 1660082551,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1660131429,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1660131480,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660131480,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1660131577,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1660131694,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48926/ : SUCCESS"
        },
        {
            "timestamp": 1660149878,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1660193104,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1660211583,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1660574562,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1660578882,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1660580266,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1660580497,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1660591859,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1660591876,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660591876,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1660591886,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1660592105,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/49162/ : SUCCESS"
        },
        {
            "timestamp": 1660598871,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1661452446,
            "reviewer": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1661470236,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1661470264,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully rebased and submitted as 7b21ef21a35ea1736058f89bb05be049ff4ab1ac"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "276f6b3fbec457d2331f64de79a708db6cab9cfb",
            "parents": [
                "f7fc47472367bb4080862bf33c6c203eb38584b0"
            ],
            "ref": "refs/changes/72/56372/1",
            "uploader": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "createdOn": 1659989816,
            "author": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "Updated the enum as you suggested.\nThanks Zhikui."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: hasHWMonDir\nMy first thought is that hasHWMonDir makes is more obvious and works well with noHWMon. But I do see that hasHWMon is also a good name for the parameters below @ line57 etc.\nI am ok with the current name."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "Change mad.e"
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "nit: we can keep the rest of the code same by using (hasHWMonDir == HWMonDir)."
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "I prefer using an explicit parameter instead of implied behavior."
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 284,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/overlay.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -14
                },
                {
                    "file": "include/devices.hpp",
                    "type": "MODIFIED",
                    "insertions": 179,
                    "deletions": -100
                }
            ],
            "sizeInsertions": 218,
            "sizeDeletions": 114
        },
        {
            "number": 2,
            "revision": "6650e6df3bb8d322885ec3e8b818f2c53860916c",
            "parents": [
                "f7fc47472367bb4080862bf33c6c203eb38584b0"
            ],
            "ref": "refs/changes/72/56372/2",
            "uploader": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "createdOn": 1660131429,
            "author": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "LGTM"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Adding Zev, who's looking at porting this stuff out of EM.  Giving him some time to review."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Thanks Ed, hadn't been aware of this patch."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "My observations."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "I'll perform the manual rebase and submit it."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 47,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is sooooo much better."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 47,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Agreed, exportTemplates is a lot more self-explanatory this way, definite clarity win."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "seems unlikely that a compiler would start with true, but should we do = false here just to be explicit and not have technical UB?"
                },
                {
                    "file": "include/devices.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "The potential UB being that the value for hasHWMonDir would then be \"true + 1\", exceeding the range of the bool type assigned for the enum, or something more subtle?\n\nIn any case, while I'm not a C++ expert, C at least guarantees that in the absence of an explicitly-provided value enums will start from zero, and I'd be fairly surprised if C++ diverged from that..."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The potential UB being that the value for hasHWMonDir would then be \"true + 1\", exceeding the range of the bool type assigned for the enum, or something more subtle?\n> \n> In any case, while I'm not a C++ expert, C at least guarantees that in the absence of an explicitly-provided value enums will start from zero, and I'd be fairly surprised if C++ diverged from that...\n\n\nFound this in the standard:\n\"If the first enumerator has no initializer, the value of the corresponding constant is zero. An enumerator-definition without an initializer gives the enumerator the value obtained by increasing the value of the previous enumerator by one.\"\n\nTIL.\n\nWith that said.....  As I look at this again, there's nowhere it's used as a static_cast<bool> so it should be fine as-written.  I think the ideal case would be to remove the \" : bool\" from the class, and just let the compiler pick the type, but that's not that important."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "One of my significant problems with programming in C++, is determining what kind of data the code is working on. Any time I can be explicit about the data type I'm going to apply that information for the unfortunate soul following after me (which may be me for all I know). I understand \"auto\" helps the compiler generate code that is more likely to follow C++ rules, and in theory be correct. It doesn't, OTOH, help the programmer determine what kind of \"thing\" \"var\" refers. I find this especially frustrating with async D-Bus calls. Thus if I can provide even a Burma Shave signpost guidance I'm going to favor doing so."
                },
                {
                    "file": "include/devices.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "As a preface, my opinion here is very weak, and what you have is fine.\n\nTo the above, I would argue that the enumeration values themselves provide the complete information on what this is intended to be used for.  inheriting from bool implies that there is a case where the user might do a static_cast<bool>() to get a boolean value out of the enum, which in this case they shouldn't do.\n\nAgain, what's there is fine if you don't want to change it."
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 239,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "This part (and similar changes in the callee functions) I'm slightly less enthused about -- the variable name still sort of sounds like it's a boolean, but it no longer really is, or at least can't (comfortably, IMO) be used as one even if that's the underlying type of the enum.\n\nIn the exportTemplates map the booleans do get sorta lost amongst all the other stuff and end up a lot less readable and a lot more error-prone, so I do think this is a good change to make there.  I don't think the existing overlay.cpp code has any of the same clarity problems though, so propagating the enum through these paths seems like added verbosity for slightly less overall readability IMO.  (Perhaps this is the same thing Zhikui commented on previously?)\n\nOne possibility that occurs to me would be to expand the enum to something like\n\n```\nenum DeviceKind\n{\n  hwmon,\n  iio,\n  mux,\n  eeprom,\n  gpio,\n};\n```\n\nand then just pass that through and have the code that cares about it do `if (kind == DeviceKind::hwmon) path /= \"hwmon\"`.  Arguably overkill if there's currently really only one kind we ultimately care about though...I dunno.\n\nAnyway, with all that said it's not a strenuous objection, so I'll leave it up to the author & maintainers."
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 239,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "I gave this idea some consideration prior to submitting the first commit. My main reason for not doing something like this is there has been no evidence of a similar failure in another device driver. \n\nDoing what you suggest is additional work that appears to have limited payoff. As the author I am obligated to iterate >70 template entries and categorize the type of each only for the work to devolve to \"HWMon\"/\"noHWMON\". I'm not enthusiastic about expending time to do that.\n\nThe enum you suggest is a little weird. What kind of device is a \"hwmon\"? Is it better to enumerate on device type, or sensor initialization model? Presently it's the model. The device type, at this stage, only cares about temperature devices.\nPerhaps this model works:\nenum sensorInitRequirment {\n  norequirement,            // mux, eeprom, gpio, etc...\n  temperatureWithHWMon,     // the one we need to retry\n  temperatureWithoutHWMon,  // author considered init rqmt\n};\n\nThis covers the current situation without undue burden in updating the Export table. It still leaves room for handling undiscovered initialization problems."
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 239,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> enum DeviceKind\n> {\n>   hwmon,\n>   iio,\n>   mux,\n>   eeprom,\n>   gpio,\n> };\n\nI like this as a concept, but in the efforts to keep THIS patch small, self contained, and an incremental improvement, lets push the above to a later patchset.\n\n> I gave this idea some consideration prior to submitting the first commit. My main reason for not doing something like this is there has been no evidence of a similar failure in another device driver. \n> \n> Doing what you suggest is additional work that appears to have limited payoff. As the author I am obligated to iterate >70 template entries and categorize the type of each only for the work to devolve to \"HWMon\"/\"noHWMON\". I'm not enthusiastic about expending time to do that.\n\nSure.  Considering the old code didn't do that, it seems reasonable, although I do think in the end we will need something closer to what Zev is proposing, but I don't think anyone is requiring that you be the one to do it.\n\n> \n> The enum you suggest is a little weird. What kind of device is a \"hwmon\"? Is it better to enumerate on device type, or sensor initialization model? Presently it's the model. The device type, at this stage, only cares about temperature devices.\n> Perhaps this model works:\n> enum sensorInitRequirment {\n>   norequirement,            // mux, eeprom, gpio, etc...\n>   temperatureWithHWMon,     // the one we need to retry\n>   temperatureWithoutHWMon,  // author considered init rqmt\n> };\n> \n> This covers the current situation without undue burden in updating the Export table. It still leaves room for handling undiscovered initialization problems.\n\n\n\nAs written, IMO, this patchset has hit the barrier to merge in that it's:\n1. Incrementally better\n2. Self contained in that it follow the \"spirit\" of the old code (which was a bool)\n3. Tested.\n4. Doesn't actively make the above suggestion more difficult to execute on in the future.\n\nI'm happy to discuss other possible changes to this enum either in other patches, the mailing list, or on discord, and I definitely think there's a lot of improvement to happen there, but in terms of this patch, I think we've hit escape velocity."
                },
                {
                    "file": "src/overlay.cpp",
                    "line": 239,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "If there are no other objections, I'd like this to merge."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/overlay.cpp",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": -14
                },
                {
                    "file": "include/devices.hpp",
                    "type": "MODIFIED",
                    "insertions": 171,
                    "deletions": -84
                }
            ],
            "sizeInsertions": 210,
            "sizeDeletions": 98
        },
        {
            "number": 3,
            "revision": "f41052cc03a9c4a39bbba7039bb43a3cc2322e6e",
            "parents": [
                "ab3acb7b3a59ba950ac591befc074ec10e0dd1ea"
            ],
            "ref": "refs/changes/72/56372/3",
            "uploader": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "createdOn": 1660591859,
            "author": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "Rebase, resolving rebase conflict."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Agree with the discussion. It is an improvement over current code."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Johnathan Mantey",
                        "email": "johnathanx.mantey@intel.com",
                        "username": "Howitzer105mm"
                    },
                    "message": "I'd like to get this applied before it gets out of date.\nKeeping this lingering asks for a merge conflict from someone adding a new device."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "No inputs in a week.  Happy to discuss, but this has hit escape velocity from where I sit."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/overlay.cpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -13
                },
                {
                    "file": "include/devices.hpp",
                    "type": "MODIFIED",
                    "insertions": 173,
                    "deletions": -85
                }
            ],
            "sizeInsertions": 211,
            "sizeDeletions": 98
        },
        {
            "number": 4,
            "revision": "7b21ef21a35ea1736058f89bb05be049ff4ab1ac",
            "parents": [
                "3446cbad0427f04afce762f34f1e42062857d610"
            ],
            "ref": "refs/changes/72/56372/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1661470264,
            "author": {
                "name": "Johnathan Mantey",
                "email": "johnathanx.mantey@intel.com",
                "username": "Howitzer105mm"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "src/overlay.cpp",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": -13
                },
                {
                    "file": "include/devices.hpp",
                    "type": "MODIFIED",
                    "insertions": 173,
                    "deletions": -85
                }
            ],
            "sizeInsertions": 211,
            "sizeDeletions": 98
        }
    ]
}