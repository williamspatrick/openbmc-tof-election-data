{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Icbc1268903204f0417b2962c3b4c37c57eb4d208",
    "number": 53723,
    "subject": "bmc-boot-ready: ensure power on dependencies",
    "owner": {
        "name": "Andrew Geissler",
        "email": "andrew@geissonator.com",
        "username": "geissonator"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/53723",
    "hashtags": [],
    "createdOn": 1652447479,
    "lastUpdated": 1666644445,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1652447479,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1652478295,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1652792520,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(3 comments)"
        },
        {
            "timestamp": 1652815749,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1652957579,
            "reviewer": {
                "name": "ankita prasad",
                "email": "ankita.prasad@intel.com",
                "username": "ankitaprsad22"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1653327231,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1653354101,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658780822,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1659377845,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1659377845,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1659377869,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1659377869,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1659377885,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48144/ : SUCCESS"
        },
        {
            "timestamp": 1659454275,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1659462821,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1660060916,
            "reviewer": {
                "name": "Corey Hardesty",
                "email": "corey.hardesty@icloud.com",
                "username": "NodeMan97"
            },
            "message": "Patch Set 3: Published edit on patch set 2."
        },
        {
            "timestamp": 1660060935,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1660060936,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1660060951,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/48797/ : SUCCESS"
        },
        {
            "timestamp": 1660240862,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1661880116,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1661880116,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "message": "Patch Set 4:\n\n(7 comments)"
        },
        {
            "timestamp": 1661880129,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1661880129,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1661880144,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/50109/ : SUCCESS"
        },
        {
            "timestamp": 1666644442,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4: Code-Review+2"
        },
        {
            "timestamp": 1666644445,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully rebased and submitted as e87bd81d5faaab18f787791fe73ae1d437af4665"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d1a72d0da3a4cee65a87b682e0f57231749a4805",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/23/53723/1",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "createdOn": 1652447479,
            "author": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ah, I think this proposal helps solve my old stuff too: https://gerrit.openbmc-project.xyz/q/topic:bmc-boot-indicator"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "ankita prasad",
                        "email": "ankita.prasad@intel.com",
                        "username": "ankitaprsad22"
                    },
                    "message": "do we really need a new state? Rather we can just check for necessary services and either boot or not boot."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "From the discord conversation:\n\n'''\nI think the options are between:\n1. Objects don't exist until the backend is prepared to handle them (in which case they don't appear in Redfish)\n2. If a user tries to do something that you're not in the proper state for, return an error code. (in which case bmcweb will transform into a retry-after and preconditionfailed message)\n3. If a user tries to do something you're not in the proper state for, queue it until it can be processed, which is the most user friendly (the thing you asked for just happens, response code is 200 OK, but the action might not happen the moment you asked for it.)\n\n... \n\nand I'm kind of of the opinion that we push that to the power-control daemons themselves to decide.\n'''\n\n(off discord)\n#1 in bmcweb, the implementation for, and we have to do regardless (the power state interfaces might not exist).\n#2 is maybe 3 lines of code extra to add the message and set the return code, and we have to agree on a dbus response code for \"not yet ready\" which seems doable.\n#3 is the most user friendly, and bmcweb only has to implement the golden path.\n\nThe ideal priority would IMO be #3 (because it's most user friendly) then #1 (because the user is required to check for an action anyway, and presumably handle the error), then #2 (which requires the most sophisticated client implementation).\n\nOnce we have that, it's on each system to decide what it can and can't do in its backend, and the redfish tree is correct and standards compliant in all cases.\n\nOne thing to consider is that we have multi-host coming, and it seems likely that there's one host thats backend services fail, while the others don't.  Being flexible here means we can in those cases pick the best possible implementation the backend is able.\n"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, seems general feedback here has been to just do 3. One goal we have is to get Tasks implemented for power on operations in bmcweb. This would provide some feedback to the user on the status of their request and could potentially show the queued-up nature of the request."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 21,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not sure I agree with it.  Yes, there are implementations that have undefined behavior, but the normal practices of:\n1. Declare your dependencies.\n2. Only list the objects that have dependencies on dbus once those dependencies have been met.\n\nI think resolve this?"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 21,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, I think this is another alternative solution. It would have similar complexity on client apps to wait for the interface. One complexity here is that you could provide the read-only state earlier, it's only the action that is not permitted. We don't have an easy way though with sdbusplus to only implement certain properties on d-bus but not others."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 21,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Yeah, I think this is another alternative solution. It would have similar complexity on client apps to wait for the interface.\n\nAgreed;  I'm not a fan of the client complexity there.\n\n> One complexity here is that you could provide the read-only state earlier, it's only the action that is not permitted. We don't have an easy way though with sdbusplus to only implement certain properties on d-bus but not others.\n\nsdubplus asio has support for that FWIW, although it technically breaks the dbus intent, so probably best to avoid it.  In theory having a read-only interface up before the read write doesn't help anything though?"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 21,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": ">  In theory having a read-only interface up before the read write doesn't help anything though?\n\nThe main scenario I was thinking of are when the BMC is reset and the chassis power is on and/or the host is running. Early startup apps have different behavior based on the chassis and host states so being able to just read these properties early in the BMC boot allows them to make their needed logic decisions. They don't necessarily need the ability to change the state, just read it. But without some code and prototyping it's difficult for me to quantify the impacts of just waiting before putting everything on D-Bus."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 21,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Going with the plan to queue up the request."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, interfaces, not objects.  There could be multiples of Chassis or Host."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 29,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 58,
                    "reviewer": {
                        "name": "ankita prasad",
                        "email": "ankita.prasad@intel.com",
                        "username": "ankitaprsad22"
                    },
                    "message": "do we really need a new state? Rather we can just check for necessary services and either boot or not boot."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, I think a new state provides a mechanism for external clients (using Redfish) to know whether they can request a power on. If we go with an approach where we just queue up the request, we may not need it.\n\nThe state-manager design is to monitor for systemd targets to reflect state. This allows a layer of abstraction in that different system owners can put different services in the corresponding target. If we hard code state-manager to monitor specific services, we're hamstringing out ability to support a multitude of system types."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Went with queue design"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This isn't really a state of the BMC though.  It is a state about the Chassis/Host, isn't it?  How do you handle multi-host designs?  Maybe there is a VRM in each compute blade that needs its data collected, but only to block the single compute blade from booting."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, basically all chassis/host instances have to wait for the basic BMC services to be started. We have a basic issue that certain BMC services are required to power on and boot your system. So this design is saying you have to wait for those base services to be started before any chassis or host operation is valid."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Not quite understanding this statement.  If the bmc never reaches boot ready, no action is ever taken.  Does that even require code?\n\n\n1 request can either be queued, or dropped with a \"conflicting requests\" response, at the decision of the implementation.  \"queue one power request\" probably covers the 99% use case, but even if that's imperfect, it seems like there's reasonable behavior that could be defined."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, it feels like the general feedback here in this review is that just queuing it is better and something the user (and client apps) would appreciate."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 85,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't really follow this.  What errors are there?  \n\nThis seems like the most obvious solution.  We already have:\n\n- obmc-power-start-pre@.target\n- obmc-host-start-pre@.target\n\nWhy wouldn't you have any service that needs to insert itself as \"required before boot\" into the Wants/Required of these existing targets?  I'm not convinced that a new target (+ state) is warranted."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "This leads into your next question. I think there are two options here. Either we have a clear way to tell the user when the required BMC services have started and the system can be powered on, or we go with what you're leaning towards which is we queue up the request from the user, have the required services block around the target you indicate here, and have it power on once the services are done.\n\nThe issue I have with the queue option is that what happens when the services never complete? Or one fails and the BMC gets stuck in the Quiesced state (which is what started this whole design for IBM). We don't want to try and power on if a critical service has not started or failed, and we have no way to asynchronously tell the caller we've failed and will not be honoring their queued power on request. This design is leaning towards just failing the call and letting the user deal with the retry/error handling logic because they're going to know the behavior they want best. Otherwise what do we say to the clients? Make the request, start some arbitrary timeout, and wait for the system to actually power on? What do they do when the timeout hits? It just seems more clear to give them a \"NotReadyToBoot\" error code at the time of the request."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 91,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This also seems much worse.  We're pushing this off into all the users of the power on sequence rather than just automatically queuing it up into the normal power on sequence.  I mentioned in your first code review that you'd be making external interfaces like the power button have to implement some kind of queueing behavior or otherwise inform the user that \"you can't actually power on yet\".  It is much better from a user experience, to me, to keep the current \"start the sequence\" path that I\"m recommending because we can insert LED behavior into that sequence to clearly inform the user \"I heard you and am working on it\".  This goes for post codes + op-panel displays too."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "More details above, but yes, the power button either handles it or they just throw away the error and the lack of powering on is a clear sign to the user something is up. But the alternative...the system never powers on anyway, or just starts at some random time in the future seems worse to me. Someone hits the button, it's not ready, so they go fiddling with the power supplies or something and it randomly turns on a few minutes later??"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'd agree that a lengthy, silent delay between pushing the power button and it actually taking effect isn't great.  It sounds like Patrick's suggestion is that we could make it less silent via LED feedback, but I'm not sure how likely it is that trying to convey \"I heard you and am working on it\" via an LED would really be achievable in a clear, self-explanatory way; anything I can think of seems like it would be more likely to be completely cryptic or misinterpreted as buggy behavior by someone not already intimately familiar with OpenBMC.  Conveying \"sorry, no can do\" via an LED seems a lot more tractable (though the implicit \"try again in a minute or two\" is admittedly non-obvious).\n\nThis is of course completely tangential, but it seems like a lot of the problems we're grappling with here would be substantially reduced if we solved the long-standing \"OpenBMC takes way too long to boot\" problem (though it'd need to be a pretty dramatic improvement I suppose)."
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Went with queue design"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "type": "ADDED",
                    "insertions": 109,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 124,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "a1d63e7543a4cba70c51ef5f5da4ada152195693",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/23/53723/2",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "createdOn": 1659377845,
            "author": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 119,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "32ae5d69ec6486891a8d3c8b0ea760e7b2a4f74f",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/23/53723/3",
            "uploader": {
                "name": "Corey Hardesty",
                "email": "corey.hardesty@icloud.com",
                "username": "NodeMan97"
            },
            "createdOn": 1660060916,
            "author": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "(Please mark all previous comments resolved if that is the case)"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 67,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: spelling"
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "line": 67,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "andrew@geissonator.com",
                        "username": "geissonator"
                    },
                    "message": "Hmm, my spellcheck was not working it appears. Fixed this and a few others."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 119,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "6370b76e876ebc69a9c50e3a9e812e2cf18d7b90",
            "parents": [
                "9915e5d21d3009eab284b321fef46f9301a13206"
            ],
            "ref": "refs/changes/23/53723/4",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "createdOn": 1661880116,
            "author": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 119,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "e87bd81d5faaab18f787791fe73ae1d437af4665",
            "parents": [
                "93f86ae2cda48ab6ced5ef8d2fe52dd30476c511"
            ],
            "ref": "refs/changes/23/53723/5",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1666644445,
            "author": {
                "name": "Andrew Geissler",
                "email": "andrew@geissonator.com",
                "username": "geissonator"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "designs/bmc-boot-ready.md",
                    "type": "ADDED",
                    "insertions": 104,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 119,
            "sizeDeletions": 0
        }
    ]
}