{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "I73f62e7e8f3d3ba93363a7aa2f23b7b5dbc051ee",
    "number": 37750,
    "subject": "Add .clang-tidy exemplar",
    "owner": {
        "name": "Gunnar Mills",
        "email": "gmills@us.ibm.com",
        "username": "gtmills"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/37750",
    "hashtags": [],
    "createdOn": 1603911846,
    "lastUpdated": 1665658021,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1603911846,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1603918414,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\nThis is pulled from the one I wrote?  There is omissions in that that we should have in a \"generic\" clang-tidy file."
        },
        {
            "timestamp": 1603919026,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> This is pulled from the one I wrote?  There is omissions in that that we should have in a \"generic\" clang-tidy file.\n\nYes. \n\n> There is omissions in that that we should have in a \"generic\" clang-tidy file.\n\nLike?"
        },
        {
            "timestamp": 1603920657,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > This is pulled from the one I wrote?  There is omissions in that that we should have in a \"generic\" clang-tidy file.\n> \n> Yes. \n> \n> > There is omissions in that that we should have in a \"generic\" clang-tidy file.\n> \n> Like?\n\nCert checks that bmcweb had an errant example of, performance changes that should be enabled, but some bmcweb patterns were used a lot, and a couple others I'd have to check the list for that I haven't looked at off the top of my head.\n\nWhat's the driving force for getting this checked in now before we've done a couple repos?  Is there effort to try to use this in other places?  My plan was to get a couple of repos going with configs that we're happy with, then try to standardize.  I was also hoping to get clang-11 into the build CI before we did that, as it adds checks that would be useful."
        },
        {
            "timestamp": 1603924329,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n> Is there effort to try to use this in other places?  \n\nI've been playing around with this in openpower-proc-control."
        },
        {
            "timestamp": 1603925017,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1603926353,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\n> Patch Set 1:\n> \n> > Is there effort to try to use this in other places?  \n> \n> I've been playing around with this in openpower-proc-control.\n\nCool.  I will try to consolidate what I would like to see a \"stock\" config to be for most repos.  Might be tomorrow.\n\nMy assumption would be that we would start with a superset of checks in the docs repo, and the individual repos could remove from it where it would be too hard to transition patterns, and we can ratchet up the checks over time."
        },
        {
            "timestamp": 1603927152,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\n> Cool.  I will try to consolidate what I would like to see a \"stock\" config to be for most repos.  Might be tomorrow.\n\n\ud83d\udc4d"
        },
        {
            "timestamp": 1603927982,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1604527858,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1604528522,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1604545736,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1604942725,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665658021,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Abandoned\n\nclose due to inactivity"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
            "parents": [
                "754b1048bacca146a1b718b7df336dd7c8606cf8"
            ],
            "ref": "refs/changes/50/37750/1",
            "uploader": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "createdOn": 1603911846,
            "author": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 3,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we really want to be explicit about every individual check?  It seems immensely wordy and constantly requiring updating.  What I've done on other projects is:\n\nbugprone-*\nclang-diagnostic-*\nclang-analyzer-*\ncppcoreguidelines-*\nhicpp-excxeption-baseclass\nmisc-*\nmodernize-*\nperformance-*\nreadability-*\n-modernize-concat-nested-namespaces\n-modernize-use-trailing-return-type"
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 3,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yes, I did that explicitly for the actual checked in files because new versions of clang-tidy add new checks, so \"bugprone-*\" will mean something different tomorrow than it does today, and very likely would prevent us upgrading freely.  bmcweb has been running clang-tidy for a while now (never in CI until recently) and having wildcards burned us a couple times.  I really want repos to be explicit about what checks are turned on and enforced.  It also makes it really nice for non-CI users to have a warning that you're not checking all the checks expected of you if your distro has an older version of clang-tidy.\n\nIt also makes a very nice diff in the commit when someone goes and fixes all the issues with a given check, and adds the check to the list.  Having both makes it much more apparent why the seemingly meaningless changes were made, and atomically turns them on at the same time they're fixed."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 3,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I understand the opinion.  I don't have strong feelings on it.  The bad thing about not using foo-* enablement is that we have to regularly re-review all the documentation for each new Clang release to see what new shiny toys there might be for us.\n\nIf we are going to enable them individually, I think there is a significant number of these that should be disabled because they are not relevant to BMC code.  The osx and fuchsia ones are obvious examples.  By having them here we're just wasting time running analyses that aren't going to flag anything.\n\nI'd be willing to take a second stab at pruning the list down a bit if requested."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 3,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I understand the opinion.  I don't have strong feelings on it.  The bad thing about not using foo-* enablement is that we have to regularly re-review all the documentation for each new Clang release to see what new shiny toys there might be for us.\n\nRunning \"clang-tidy --checks=\".*\" --list-checks\" and comparing it to the list wasn't that troublesome.  That's how I built this list in the first place.\n\nI'd much rather have to review docs once in a while which can be done intentionally, at a planned time, than have CI randomly break at a random time because clang added new checks.\n\n> \n> If we are going to enable them individually, I think there is a significant number of these that should be disabled because they are not relevant to BMC code.  The osx and fuchsia ones are obvious examples.  By having them here we're just wasting time running analyses that aren't going to flag anything.\n\nAgreed.  That was on my list to do before publishing the \"real\" list.\n\n> \n> I'd be willing to take a second stab at pruning the list down a bit if requested.\n\n\nAnother thing I wanted to do before publishing this list is to play around with the WarningsAsErrors option.  The goal would be to have all repos turn on all OpenBMC checks, but only error on the ones that we know pass.  This needs more investigation on my part to see how that option works."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 242,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "this flags a lot of these:\n\n static constexpr auto THE_CONSTANT_VAR = \"the constant var\";"
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 242,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Technically that's against the coding standard, right?  The stuff I used as test cases for clang-tidy (correctly) didn't have very many global variables, so it's possible I messed that up in the CheckOptions on line 246.\n\nIt should be noted, you can run this with -fix, and it'll fix all the the naming convention violations for you automagically."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 242,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> Technically that's against the coding standard, right?  \n\nYes it looks that way:\n\n \"Constants and enum members should be named like variables in lowerCamelCase.\""
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 242,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If you have repos where you want to partially apply naming, there is a aNy_CasE (yes, that's the correct capitalization), and you can use that in the CheckOptions thing, if it makes the transition easier to stomach."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 245,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Elsewhere I've had to do 'AnalyzeTemporaryDtors: false', but I don't recall why."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 245,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Apparently that only applies to clang-tidy before 6.0.  That option has been removed (then added back and deprecated because everyones config files broke, but that's a different story).  I wouldn't expect a modern .clang-tidy file to need that key."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 245,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Interesting."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 250,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think you intended 'camelBack' here.  There is no 'lowerCamel' value.\n\nIt's unfortunate that clang doesn't allow \"value: A | B | C\" for cases when we have multiple but specific options."
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "line": 250,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep.  I had noticed this and fixed it when I did this for dbus-sensors.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/37294/20/.clang-tidy\n\nBut bmcweb is still wrong.  It's on my list to put together a commit to fix it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "lint/cpp/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 253,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 269,
            "sizeDeletions": 0
        }
    ]
}