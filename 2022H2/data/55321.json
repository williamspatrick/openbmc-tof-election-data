{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I929b0a80f11a5f483e13dfd0f3d2f30bee5455ee",
    "number": 55321,
    "subject": "Respond to ObjectMapper timeout",
    "owner": {
        "name": "Pawe\u0142 Kallas",
        "email": "pawel.kallas@intel.com",
        "username": "randomnezz"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55321",
    "hashtags": [],
    "createdOn": 1657702771,
    "lastUpdated": 1659006970,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1657702771,
            "reviewer": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1657702813,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1657704574,
            "reviewer": {
                "name": "Szymon Dompke",
                "email": "szymon.dompke@intel.com",
                "username": "sdompke"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1658128860,
            "reviewer": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1658128872,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1658128872,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1658129333,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/47145/ : SUCCESS"
        },
        {
            "timestamp": 1658157173,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658302466,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658327151,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658385584,
            "reviewer": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658401907,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658402752,
            "reviewer": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1658417734,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1659006970,
            "reviewer": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "message": "Abandoned\n\nShould be fixed in ObjectMapper."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "29ebf8da1c3ea8eb0a63604c7270c22858d4e1d7",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/21/55321/1",
            "uploader": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "createdOn": 1657702771,
            "author": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "line": 336,
                    "reviewer": {
                        "name": "Szymon Dompke",
                        "email": "szymon.dompke@intel.com",
                        "username": "sdompke"
                    },
                    "message": "should be inline instead of static"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 41,
            "sizeDeletions": 9
        },
        {
            "number": 2,
            "revision": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
            "parents": [
                "b5a10a22db6f44c7a96cc2912e1b57db439e77fc"
            ],
            "ref": "refs/changes/21/55321/2",
            "uploader": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "createdOn": 1658128860,
            "author": {
                "name": "Pawe\u0142 Kallas",
                "email": "pawel.kallas@intel.com",
                "username": "randomnezz"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you add more details here?  ObjectMapper is async, and should always respond in a timely manner.  If it's not, something is broken internally in the mapper, and we probably shouldn't be covering it up."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "sdbusplus has a timeout mechanism for async_method_call. Since ObjectMapper response is not received in sdbusplus before timer expires callback is called with timeout error.\n\nThis error is likely to happen on slower systems or systems with many objects and interfaces."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> sdbusplus has a timeout mechanism for async_method_call. Since ObjectMapper response is not received in sdbusplus before timer expires callback is called with timeout error.\n> \n> This error is likely to happen on slower systems or systems with many objects and interfaces.\n\nThat still seems like a mapper bug.  The mapper is pretty darn efficient code, and is operating on a dataset entirely in memory.  I'm really surprised it can't respond in all cases unless something else is going wrong."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Pawe\u0142 Kallas",
                        "email": "pawel.kallas@intel.com",
                        "username": "randomnezz"
                    },
                    "message": "In our testing PMT is adding over 4000 sensors on dbus. When those objects are added or removed mapperx process utilizes about 45% of cpu for about 2-3 minutes and is not responding to any dbus calls. Same situation can be observed when the objects are already present and ObjectMapper service is restarted."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "So object mapper is parsing all objects on dbus during first request, then it keeps data in memory so it can respond much faster. Pawel does this timeout occurs only one time after starting/restarting object mapper or does it happens all the time?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Pawe\u0142 Kallas",
                        "email": "pawel.kallas@intel.com",
                        "username": "randomnezz"
                    },
                    "message": "It happens after each start of ObjectMapper service or after adding/removing many dbus objects.\n> So object mapper is parsing all objects on dbus during first request\nI'm not sure if it's related to any request. mapperx process utilizes CPU for 2-3 minutes after restart even without sending requests to it (might be some other process sending the request, but that seems unlikely) Looks like it's some initialization phase that gets stuck with many dbus objects."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> In our testing PMT is adding over 4000 sensors on dbus. \n\nYes, if you intentionally overload dbus, things will have problems, and IMO, the system is giving the right error message here.  Something went wrong internally (the mapper didn't reply because it was locked up).  The current sensor subsystem was designed for ipmi limits of 256, although it's likely good to about 1000 sensors.\n\nAlso, in the future, when you do testing like this, PLEASE add it to your commit message.  It helps to explain what you're trying to accomplish and that this didn't occur in a \"normal\" system.\n\n\n> When those objects are added or removed mapperx process utilizes about 45% of cpu for about 2-3 minutes and is not responding to any dbus calls\n\nI'm guessing you added 4000 objects to one daemon?  That's well outside the limits of what the mapper is intended to handle (but could be made to handle more).  Have you tried 40 daemons with 100 sensors each (which is more likely in this scenario).\n\n\nI'm still of the position that this is a mapper bug.  If we want to make it parse single-daemons with lots of objects, that's pretty doable to make work, we just need to pause the XML parsing, and return control to the io_context once in a while so that it can answer dbus messages in a timely manner.  That's the patch that needs added, not something that tells the user to try again later.  What if the mapper is completely locked up forever?  We shouldn't tell the user to try again later forever.\n\n\n> Looks like it's some initialization phase that gets stuck with many dbus objects.\n\nWithout seeing your code, it's hard to speculate.  Can you try running your tests with this test tool? https://github.com/openbmc/openbmc-tools/tree/master/dbus_sensor_tester\nIt's likely parsing the gigantic XML that would be generated from a 4000 sensor daemon, and that takes a little time (although 2-3 minutes seems high)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/sensors.hpp",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 41,
            "sizeDeletions": 9
        }
    ]
}