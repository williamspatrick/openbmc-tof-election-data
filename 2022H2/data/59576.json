{
    "project": "openbmc/libpldm",
    "branch": "main",
    "topic": "AF_MCTP",
    "id": "I06e602831f360bbd0efda53d410bfb5080b3100d",
    "number": 59576,
    "subject": "new api",
    "owner": {
        "name": "Rashmica K Gupta",
        "email": "rashmica@linux.ibm.com",
        "username": "RashmicaG"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libpldm/+/59576",
    "hashtags": [],
    "createdOn": 1670648962,
    "lastUpdated": 1673260192,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1670648962,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1670648986,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1670648987,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1670649134,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/57425/ : FAILURE"
        },
        {
            "timestamp": 1670649669,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1670649686,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1670649686,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1670649687,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "message": "Topic set to AF_MCTP"
        },
        {
            "timestamp": 1670649937,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/57428/ : SUCCESS"
        },
        {
            "timestamp": 1670801691,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(12 comments)"
        },
        {
            "timestamp": 1670816829,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1671391648,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1671422425,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1671426029,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1671433264,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1672165082,
            "reviewer": {
                "name": "Tom Joseph",
                "email": "rushtotom@gmail.com",
                "username": "tomjoseph83"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673260192,
            "reviewer": {
                "name": "Arun P M",
                "email": "arun.p.m@linux.intel.com",
                "username": "arun-pm"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "d7232a8a9a53eff2ed2ab9458786c83ded902f65",
            "parents": [
                "6517d116dc838eaf9886a143da9ce5f18974e32d"
            ],
            "ref": "refs/changes/76/59576/1",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "createdOn": 1670648962,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/demux.c",
                    "type": "ADDED",
                    "insertions": 167,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/demux.h",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm.c",
                    "type": "MODIFIED",
                    "insertions": 178,
                    "deletions": -103
                },
                {
                    "file": "include/libpldm/requester/pldm.h",
                    "type": "MODIFIED",
                    "insertions": 102,
                    "deletions": 0
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 474,
            "sizeDeletions": 104
        },
        {
            "number": 2,
            "revision": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
            "parents": [
                "46d7db2fb29ae7f86849cc2ea08162bd9d59f6fe"
            ],
            "ref": "refs/changes/76/59576/2",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "createdOn": 1670649669,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "Please add few lines regarding the changes. Basically to understand the scope of the change."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Gerrit is claiming this file has been entirely rewritten. That doesn't feel right?"
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 0,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica@linux.ibm.com",
                        "username": "RashmicaG"
                    },
                    "message": "I think I overwrote the symbolic link. Woops."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 0,
                    "reviewer": {
                        "name": "Arun P M",
                        "email": "arun.p.m@linux.intel.com",
                        "username": "arun-pm"
                    },
                    "message": "It will be easy to review if this was resolved. Waiting for a patch refresh."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This isn't quite right \ud83d\ude0a\n\nI think `#pragma once` is generally accepted?"
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Though it is a C code-base, openbmc generally uses `#pragma once` in its C++ code. Maybe just flip it to PLDM_H?"
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 31,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I think we just leave maintenance of this kind of data to the specific transport implementation."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 33,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I think the generic API should only deal in TIDs. We can expose transport-specific APIs for resolving e.g. an MCTP EID to a TID."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 36,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Again here."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 48,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "This should be an int, right? Otherwise in the success case you're returning a value that's outside the valid enum range?"
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "MCTP EIDs shouldn't be part of this API, this should be a PLDM TID. The (MCTP) transport implementation needs to maintain the TID-to-EID mapping internally."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "I think you just want to pass `struct pldm *` here, not the transport specifically. Given the existence of pldm_{,un}register_transport() to hook an instance into a `struct pldm` instance, where would we get the `struct pldm_transport` that we need to pass through here from?"
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "What does it mean by (MCTP) transport implementation, in-kernel MCTP stack?\n\nIt will be a concern, since TID is a PLDM construct and mixing it with MCTP stack is probably a bad choice.\n\nIt is possible that BMC can have multiple PLDM terminus and the different PLDM apps can be assigned statically TID or dynamically assigned a TID from pldmd."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> What does it mean by (MCTP) transport implementation, in-kernel MCTP stack?\n> \n> It will be a concern, since TID is a PLDM construct and mixing it with MCTP stack is probably a bad choice.\n\nMaybe what I said was unclear. Let me try to clarify.\n\nThe DMTF are defining a set of related protocols. We're interested in PLDM and MCTP. However, it's not just a set of protocols, it's a stack of protocols. PLDM and MCTP both define a set of common behaviours (e.g. DSP0248 PLDM for Platform Monitoring and Control Specification, DSP0236 MCTP Base Specification) _and_ a means to exchange messages implementing those behaviours (e.g. DSP0241 Platform Level Data Model (PLDM) Over MCTP Binding Specification, MCTP PCIe VDM Transport Binding Specification). So:\n\n1. MCTP can use I2C, PCIe, serial and various other buses as its transport\n2. PLDM can use MCTP, NC-SI or potentially other lower level protocols as its transport\n\nTo exchange e.g. PLDM messages with some other device we need to package them for transmission via the underlying transport, and transmit it via that transport using the APIs exposed by its implementation. Consider PLDM over MCTP. Right now there are two implementations and two separate APIs libpldm can access:\n\n1. The mctp-demux-daemon, using an AF_UNIX socket with the abstract socket name '\\0mctp-demux'\n2. The in-kernel MCTP implementation, using an AF_MCTP socket\n\nThe job of the libpldm requester API is to provide an abstract API over either of these two implementations, and more. The code to implement this abstraction in libpldm is what I was referring to by \"transport implementation\" above. A transport implementation for e.g. mctp-demux-daemon AF_UNIX socket in libpldm would contain code to call `socket(AF_UNIX, ...)`, or `socket(AF_MCTP, ...)` for the in-kernel MCTP implementation. The user of the libpldm APIs mustn't need to care about these mechanics - that's the point of the abstraction. Again, this is the client code in libpldm, not the implementation of MCTP in e.g libmctp and its associated daemons, or the kernel.\n\nMCTP isn't the only transport for PLDM messages. We can use NC-SI as well. NC-SI and any future transports have no concept of the MCTP-specific EID, however they may have something similar with different representation and constraints. Thus, we can't embed the MCTP-specific EID representation in the generic API. TIDs are a PLDM concept and are relevant regardless of the underlying transport. They also uniquely identify a target address. From here, the transport implementation (client) in libpldm can maintain a mapping between TIDs and e.g. EIDs in the case of MCTP in order to encode the PLDM message for transmission via the appropriate MCTP API for the system (until now libpldm has only supported the mctp-demux-daemon as a transport).\n\n> It will be a concern, since TID is a PLDM construct and mixing it with MCTP stack is probably a bad choice.\n\nThis follow-on concern only exists under the misinterpretation of my original statement, which I've tried to clarify above. I'm not talking about the in-kernel implementation of MCTP or libmctp, I'm talking about the client code that lives in libpldm. This client code in libpldm needs to map the TID to an address appropriate for the underlying transport.\n\n> It is possible that BMC can have multiple PLDM terminus and the different PLDM apps can be assigned statically TID or dynamically assigned a TID from pldmd.\n\nI don't think this is a significant concern."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica@linux.ibm.com",
                        "username": "RashmicaG"
                    },
                    "message": "@arj\n> MCTP EIDs shouldn't be part of this API, this should be a PLDM TID. The (MCTP) transport implementation needs to maintain the TID-to-EID mapping internally.\nThis makes sense, as EIDs are an MCTP specific detail.\n\nI'm not clear on how we should get the mapping between a given TID and it's associated EID. We could have the user set up this mapping via an MCTP transport only API call - all current users have the EID so this would be straightforward using the GetTID PLDM command. But that would be going against what you said:\n> The user of the libpldm APIs mustn't need to care about these mechanics - that's the point of the abstraction\n\nDoes it make sense for the user to know the TID they want to communicate with and over which transport (mctp-demux-daemon, in-kernel mctp, nc-si), and (if that transport is MCTP) libpldm finds the right EID to use when we init the transport?\n\nThe PLDM spec mentions a type of PDR called Terminus Locater that contains information including a TID and an associate EID (if the terminus type is MCTP). Could we use these? I think I need to give the PLDM Platform Spec a thorough read."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "> and (if that transport is MCTP) libpldm finds the right EID to use when we init the transport?\n\nRight - basically we divide the code into two distinct groups - areas of the code that know about the transport specifics, and areas of the code that do not. The latter should be the bulk of it and only deal in TIDs and the core APIs. The former deals with instantiating the specific transport implementations, registering them with the requester core, and setting up the TID mappings by whatever mechanisms necessary (e.g. reading a configuration file containing static TID-to-EID mappings, enumerating and querying the MCTP devices exposed on DBus by mctpd during initialisation of the MCTP backend, or in the implementation of a handler registered to listen for DBus signals emitted by mctpd for dynamically discovered devices).\n\nSo we need APIs like:\n\n /* Asks an PLDM-capable MCTP device for its TID(s) */\n int pldm_transport_mctp_query_tid(struct pldm_transport_mctp *ctx, mctp_eid_t eid);\n \n /* Inserts a TID-to-EID mapping into the transport's device map */\n int pldm_transport_mctp_map_tid(struct pldm_transport_mctp *ctx, pldm_tid_t tid, mctp_eid_t eid);\n \n /* Removes a TID-to-EID mapping from the transport's device map */\n int pldm_transport_mctp_unmap_tid(struct pldm_transport_mctp *ctx, pldm_tid_t tid, mctp_eid_t eid);\n \n /* Assigns a PLDM TID to the device addressed by the provided MCTP EID and updates the TID-to-EID mapping in the transport's device map */\n int pldm_transport_mctp_assign_tid(struct pldm_transport_mctp *ctx, pldm_tid_t tid, mctp_eid_t eid);\n\netc, and similar APIs for the needs of NC-SI when we get around to it."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 159,
                    "reviewer": {
                        "name": "Tom Joseph",
                        "email": "rushtotom@gmail.com",
                        "username": "tomjoseph83"
                    },
                    "message": "> This follow-on concern only exists under the misinterpretation of my original statement, which I've tried to clarify above.\n\nI was carried away a bit by the original statement, the explanation clarifies the intent. It makes sense that the PLDM Tx/Rx core APIs uses the TID as the key.\n\nIn terms of flow, pldmd discovers (dynamically/statically discovers the MCTP endpoints and if the endpoint supports PLDM, then the discovery agent kicks in. The discovery agent is responsible for discovering termini and assigning them unique TID values. Even though there can be multiple pldm requester apps on BMC, the role of discovery agent has to be assumed by one. The TID-to-EID APIs needs to rely on completion of discovery agent for validity."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 176,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "PLDM TID again."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 197,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Drop this."
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "line": 217,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Drop this"
                },
                {
                    "file": "include/libpldm/requester/pldm.h",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Oh. I think my comments on the other header are actually applicable here? And the changes to the other header should be dropped?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/demux.c",
                    "type": "ADDED",
                    "insertions": 162,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/demux.h",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm.c",
                    "type": "MODIFIED",
                    "insertions": 181,
                    "deletions": -110
                },
                {
                    "file": "include/libpldm/pldm.h",
                    "type": "REWRITE",
                    "insertions": 225,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm.h",
                    "type": "MODIFIED",
                    "insertions": 112,
                    "deletions": 0
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 706,
            "sizeDeletions": 111
        }
    ]
}