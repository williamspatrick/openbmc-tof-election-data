{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ic29969bba25649b583d321515e3786aae154bd6e",
    "number": 53797,
    "subject": "WIP: bmcweb: Fix Local URIs in Collections",
    "owner": {
        "name": "Carson",
        "email": "clabrado@google.com",
        "username": "carsonlab"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53797",
    "hashtags": [],
    "createdOn": 1652838116,
    "lastUpdated": 1661355873,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1652838116,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1652838128,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1652838128,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1652838852,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/43446/ : SUCCESS"
        },
        {
            "timestamp": 1653403571,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1653427188,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1653427196,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1653507905,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased."
        },
        {
            "timestamp": 1653507944,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1653507944,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1653508316,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/43818/ : FAILURE"
        },
        {
            "timestamp": 1653518561,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 3: Patch Set 2 was rebased"
        },
        {
            "timestamp": 1653518588,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1653518588,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1653519291,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/43846/ : SUCCESS"
        },
        {
            "timestamp": 1658346183,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1658349441,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658349930,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658356007,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658363955,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1658522350,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 4: Commit message was updated."
        },
        {
            "timestamp": 1658522787,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1658592024,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1658771560,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1661355873,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Abandoned\n\nThis patch is no longer needed now that \"main_\" will for sure not be added to URIs of local resources.  Additionally, the merged patch https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53794 covers adding any needed prefixes.  This patch would have been a subset of that patch."
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "205a903f49d1e077068ba6b2c46c0d9a90544cc7",
            "parents": [
                "74ba77b0d4b954b27205c14cc175d04a4f194c03"
            ],
            "ref": "refs/changes/97/53797/1",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1652838116,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I realize this is WIP, but figured I'd give a couple pointers to lead you down the right path."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Response is meant to represent a generic, HTTP response.  Aggregation and collections are a property of Redfish, so that behavior needs to go in a Redfish layer somewhere."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "I need to be able to track this flag per each individual response.  If it can't go here then I think the only other option would be as a member variable of AsyncResp.\n\nIf I can't put a flag in AsyncResp then I think my next options are:\n1) Perform another satellite config D-Bus lookup at the end of the endpoints to decide if I need to attempt to fix any of the links.  \n2) Modify the response's completion handler so that it fixes the links before calling the original completion handler function."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I need to be able to track this flag per each individual response.  If it can't go here then I think the only other option would be as a member variable of AsyncResp.\n\nThat has the same problem.  AsyncResp applies to non redfish responses.  Generally when we need to attach data, we attach it to the completion handler, which CAN be specific to a given protocol.\n\n> \n> If I can't put a flag in AsyncResp then I think my next options are:\n> 1) Perform another satellite config D-Bus lookup at the end of the endpoints to decide if I need to attempt to fix any of the links.  \n\nCan't you just keep the satellite struct around?\n\n> 2) Modify the response's completion handler so that it fixes the links before calling the original completion handler function.\n\n(in the voice of the Mandalorian) This is the way."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> > 2) Modify the response's completion handler so that it fixes the links before calling the original completion handler function.\n> (in the voice of the Mandalorian) This is the way.\nI'll use this approach if we need to add \"main_\".  Based on the conversations in other threads it sounds like we've going to avoid using \"main_\" entirely.  The patchset will become abandoned in that scenario"
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We will still need to update links for the aggregated resource that the satellite gave us (which.... when we get there that will be a \"fun\" exercise)."
                },
                {
                    "file": "http/http_response.hpp",
                    "line": 36,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "That actually isn't too bad.  We can update the links as part of the response handler for each request sent to a satellite.  We would do that before we actually update the aggregator's AsyncResp with the information from the satellite's response.\n\nThat's how it's now approached in this CL https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53794/19"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 324,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Couple things here:\n1. Don't use regex.  We have specialized functions for unpacking a uri that handle escaping properly (is boost::urls);  Please use them.\n2. This isn't a complete listing of every collection type in the system, and isn't a list that I'm interested in maintaining over time.  This list either needs to be:\n1. Generated from schemas (preferred, but hard)\n2. Rely on some intrinsic, like the fact that the \"Members\" property exists and is an array, liked we do in other places."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 324,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> This isn't a complete listing of every collection type in the system, and isn't a list that I'm interested in maintaining over time. \nI was not trying to implement all collections, just a subset of the form \"/redfish/v1/<CollectionName>/\".  If I need to support each collection type then couldn't I assume that any \"/redfish/v1/<str>/<str>\" is an aggregated resource and then any \"/redfish/v1/<str>\" is a collection?\n\n> Rely on some intrinsic, like the fact that the \"Members\" property exists and is an array, liked we do in other places.\nThis might be tricky because a collection could exist on the satellite and not on the host. The \"Members\" property would exist, but none of the entries would belong to the aggregating BMC.  We would need to make sure that the code does not accidentally add \"main_\" to collection objects that are actually located on a satellite."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 324,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think we talked through the above on chat, but if you still need an answer to this, let me know."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 324,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Yeah we've talked it through and I'm good with the approach.  I'm going to leave this open until the patchset gets updated to remove this.\n\nFor reference, this is the patch that will address recognizing valid collections that are not currently supported by BMCWeb: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55215"
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "line": 2348,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Changing this URI is going to break a lot of stuff.  Technically it's allowed in the spec, but people hardcoding this over time have lead to a mediocre situation.  Could we just prefix the aggregated resources with an ID that denotes them as aggregated, and leave the existing routes alone?  I suspect that will get this patch merged faster."
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "line": 2348,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "The original intention was that the routing code would remove the prefix before it ever gets passed to the handler.  That would have left the existing routes intact.  Unfortunately, there is not currently an appropriate location to hook the handler.\n\nThis is now moot following Discord discussion beginning here: https://discord.com/channels/775381525260664832/855566794994221117/978720524140183622.  The plan is to forgo using \"main_\" to denote local IDs for the time being."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -1
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/collection.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 95,
            "sizeDeletions": 4
        },
        {
            "number": 2,
            "revision": "3db1f7e9b52f34e745b8f1efcd8ec610d5357a87",
            "parents": [
                "476d4f867139dcfdddfd0b47816d6f097d7913fc"
            ],
            "ref": "refs/changes/97/53797/2",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1653507905,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -1
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/collection.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 95,
            "sizeDeletions": 4
        },
        {
            "number": 3,
            "revision": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
            "parents": [
                "e7c6f6a6fa6feb7e811f759c6570c9e83468a1ce"
            ],
            "ref": "refs/changes/97/53797/3",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1653518561,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Work... in .... limbo?  \ud83d\ude04"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Unintentional, but not inaccurate haha"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Scenario I'm imagining here given this design, and something we need to consider:\n\n1. User boots up bmc, works great, it returns urls without main_.\n2. User plugs in a device that has aggregation supported, and BAM\nsuddenly all the URIs for things that didn't change now change.\n\nThis doesn't really match up with the redfish \"should\" statements around stability of URI in this regard, so I don't think as stated, this is going to work.\n\nNow, we could add \"main_\" to all local resources in all cases, but then we make people made by changing URIs, which is technically legal to do, but we have enough docs and examples that did it wrong, I don't really want to hold up your patch for doing all that work, nor do I want to push you in charge of cleaning up a mess you didn't cause.\n\n\nMy thinking in this regard is:\n1. Leave the existing resources alone.  this has the least impact to users.\n2. Come up with a unique prefix that we can reasonably assume a user wouldn't put in their device name (some magic garbage characters might be good here).\n3. if an ID starts with \"magic string\" we know that it's coming from the aggregated resource, otherwise we forward to the existing handlers."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "What if we just include \"main_\" if the aggregation compilation option is enabled?  The existence (or lack thereof) of satellite configs would have no bearing on if we include the prefix.\n\nIn this way the URIs on the aggregating BMC don't change when a new device is plugged in.  Plus, the prefix addition is hidden behind a compiler option so you'd have to purposefully opt into changing the URIs."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> What if we just include \"main_\" if the aggregation compilation option is enabled? \n> The existence (or lack thereof) of satellite configs would have no bearing on if we include the prefix.\n\n\nI like your thought process, and I did think about that, but it has the same problem.  User flashes their BMC with a newer openbmc that supports aggregation, and BAM, suddenly all the IDs change.\n\n\n> \n> In this way the URIs on the aggregating BMC don't change when a new device is plugged in.  Plus, the prefix addition is hidden behind a compiler option so you'd have to purposefully opt into changing the URIs.\n\nOur general rule is that all options are enabled by default, and should have no impact in the cases where they're not configured or you don't have the hardware.  This is to help development having to update 6000 systems and forks every time we add a new option.  Aggregation is disabled by default right now because it's arguably not stable, but that will change at some point as you keep working it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> 1. User boots up bmc, works great, it returns urls without main_.\n> 2. User plugs in a device that has aggregation supported, and BAM suddenly all the URIs for things that didn't change now change.\n> \n> This doesn't really match up with the redfish \"should\" statements around stability of URI in this regard, so I don't think as stated, this is going to work.\nAlright so we can't add \"main_\" depending on if satellite configs exist.\n\n> I like your thought process, and I did think about that, but it has the same problem.  User flashes their BMC with a newer openbmc that supports aggregation, and BAM, suddenly all the IDs change.\nAlways adding \"main_\" seems like the only other option.  It sounds like there isn't a way to include \"main_\" in this context without breaking everything at the point aggregation becomes the default.\n\nUpsetting a lot of people would not be the only issue with always including \"main_\".  If we were to eventually add main_ by default then things will get hairy since the aggregated satellites would include main_ as well.  Aggregated URIs would like /redfish/v1/Chassis/aggregated0_main_someID and that's not very appealing.\n\nBased on this it sounds like there isn't an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\nI think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\""
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > 1. User boots up bmc, works great, it returns urls without main_.\n> > 2. User plugs in a device that has aggregation supported, and BAM suddenly all the URIs for things that didn't change now change.\n> > \n> > This doesn't really match up with the redfish \"should\" statements around stability of URI in this regard, so I don't think as stated, this is going to work.\n> Alright so we can't add \"main_\" depending on if satellite configs exist.\n> \n> > I like your thought process, and I did think about that, but it has the same problem.  User flashes their BMC with a newer openbmc that supports aggregation, and BAM, suddenly all the IDs change.\n> Always adding \"main_\" seems like the only other option.  It sounds like there isn't a way to include \"main_\" in this context without breaking everything at the point aggregation becomes the default.\n> \n> Upsetting a lot of people would not be the only issue with always including \"main_\".  If we were to eventually add main_ by default then things will get hairy since the aggregated satellites would include main_ as well.\n>  Aggregated URIs would like /redfish/v1/Chassis/aggregated0_main_someID and that's not very appealing.\n\nReason #193763 why URIs are supposed to be opaque, and not represent any actual information.\n\n> \n> Based on this it sounds like there isn't an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\n\nThat is a very valid concern, and why I would probably argue we shouldn't use \"aggregated\" either, we should use something more.... special\n\n> \n> I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n\nYep, that's the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there's no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn't' show up."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> > Based on this it sounds like there isn't an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n> That is a very valid concern, and why I would probably argue we shouldn't use \"aggregated\" either, we should use something more.... special\nIt's not very special, but I like that it obviously shows that the resource belongs to a satellite BMC.  Off the top of my head I can't think of a reason that a user would arbitrary choose a local identifier that begins with aggregated.  If we enforce this through the dbus collections like you describe later then it feels like that reduces need to pick a keyword that is overly special.  Saying to users \"don't begin resource names with 'aggregated'\" seems reasonable.\n\n\n> > I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n> Yep, that's the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there's no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn't' show up.\nAlong these lines we could change aggregated resource IDs into \"aggregated<value chosen at runtime>_<original ID>\".  The aggregated prefixes would become \"aggregated0_\", \"aggregated1_\", etc.  It's the same form as before, but we don't allow the HW config to set the prefix value.  We'd just increment that value as we found satellite configs.  We could match against \"aggregated\" and ignore the value for the purpose of D-Bus matching."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > > Based on this it sounds like there isn't an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n> > That is a very valid concern, and why I would probably argue we shouldn't use \"aggregated\" either, we should use something more.... special\n> It's not very special, but I like that it obviously shows that the resource belongs to a satellite BMC.  Off the top of my head I can't think of a reason that a user would arbitrary choose a local identifier that begins with aggregated.\n\nLots of sensors are called \"aggregated\" for margin sensors today (we call them fleeting, but regardless).  If aggregated is what we want, that probably works.\n\n>  If we enforce this through the dbus collections like you describe later then it feels like that reduces need to pick a keyword that is overly special.  Saying to users \"don't begin resource names with 'aggregated'\" seems reasonable.\n\nAgreed.  I'd like us to come up with at least a couple other names just so we can say we tried and thought about it hard, because realistically once we pick the name, it's forever.\n\n> \n> \n> > > I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n> > Yep, that's the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there's no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn't' show up.\n> Along these lines we could change aggregated resource IDs into \"aggregated<value chosen at runtime>_<original ID>\".  The aggregated prefixes would become \"aggregated0_\", \"aggregated1_\", etc.  It's the same form as before, but we don't allow the HW config to set the prefix value.  We'd just increment that value as we found satellite configs.  We could match against \"aggregated\" and ignore the value for the purpose of D-Bus matching.\n\nYup, you got it.  That gives us a way to identify an aggregated resource without,  having to hit dbus or the cache, which means the 404 handler can be smarter, and we can have separate paths for \"aggregated resource 404ed\", versus \"this route 404ed\""
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> > > > Based on this it sounds like there isn't an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n> > > That is a very valid concern, and why I would probably argue we shouldn't use \"aggregated\" either, we should use something more.... special\n> > It's not very special, but I like that it obviously shows that the resource belongs to a satellite BMC.  Off the top of my head I can't think of a reason that a user would arbitrary choose a local identifier that begins with aggregated.\n> Lots of sensors are called \"aggregated\" for margin sensors today (we call them fleeting, but regardless).  If aggregated is what we want, that probably works.\nSounds good.\n\n> >  If we enforce this through the dbus collections like you describe later then it feels like that reduces need to pick a keyword that is overly special.  Saying to users \"don't begin resource names with 'aggregated'\" seems reasonable.\n> Agreed.  I'd like us to come up with at least a couple other names just so we can say we tried and thought about it hard, because realistically once we pick the name, it's forever.\nFair enough, a few others ones I can think of are \"satellite\", \"remote\", \"external\".  My preference is still \"aggregated\".\n\n> > > > I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n> > > Yep, that's the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there's no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn't' show up.\n> > Along these lines we could change aggregated resource IDs into \"aggregated<value chosen at runtime>_<original ID>\".  The aggregated prefixes would become \"aggregated0_\", \"aggregated1_\", etc.  It's the same form as before, but we don't allow the HW config to set the prefix value.  We'd just increment that value as we found satellite configs.  We could match against \"aggregated\" and ignore the value for the purpose of D-Bus matching.\n> Yup, you got it.  That gives us a way to identify an aggregated resource without,  having to hit dbus or the cache, which means the 404 handler can be smarter, and we can have separate paths for \"aggregated resource 404ed\", versus \"this route 404ed\"\nI don't think we'd necessarily even need an explicit separate path for \"aggregated resource 404ed\".  If it's for an individual resource then we'd not need to actually handle it on the aggregator since we don't want to write a 404 to AsyncResp because we know AsyncResp is going to be overwritten by the response from the satellite.  We could just return right after we begin the process of forwarding the request to the satellite BMC.  This also saves us from having to create duplicate BMCWEB_ROUTE()'s for each supported resource like \"/redfish/v1/Chassis/aggregated<str>/\".\n\nIf the request is for a resource collection then we'd just use the normal handler since the prefixes wouldn't be included in the URI."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -1
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/collection.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 95,
            "sizeDeletions": 4
        },
        {
            "number": 4,
            "revision": "b2d49ac9f87f39f62d3d1d340fa9171ad5b44e96",
            "parents": [
                "e7c6f6a6fa6feb7e811f759c6570c9e83468a1ce"
            ],
            "ref": "refs/changes/97/53797/4",
            "uploader": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "createdOn": 1658522350,
            "author": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 37,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -1
                },
                {
                    "file": "http/http_response.hpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/utils/collection.hpp",
                    "type": "MODIFIED",
                    "insertions": 7,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 95,
            "sizeDeletions": 4
        }
    ]
}