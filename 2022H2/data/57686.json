{
    "project": "openbmc/stdplus",
    "branch": "master",
    "id": "Iccdd8f0b67f4d5bff90323373bad4ad69ae934c2",
    "number": 57686,
    "subject": "Wrapper around SIGSEGV to fetch stack trace",
    "owner": {
        "name": "Willy Tu",
        "email": "wltu@google.com",
        "username": "wltu"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/stdplus/+/57686",
    "hashtags": [],
    "createdOn": 1664983057,
    "lastUpdated": 1669068710,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1664983057,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1664983144,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1664983144,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1664983483,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/53008/ : SUCCESS"
        },
        {
            "timestamp": 1664984726,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665175979,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665176159,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665415582,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665417024,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665417157,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1665417669,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1669068710,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "92e08560cd41770fd0b24b2c2fdbff81c82f0bf4",
            "parents": [
                "aaa8e0dd01c86958b440debb0d94dfa11e8258ee"
            ],
            "ref": "refs/changes/86/57686/1",
            "uploader": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "createdOn": 1664983057,
            "author": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "I don't know how other feel since this would be integrated into daemons across the system, but I think I would prefer an LD_PRELOADable object like https://github.com/stass/libsegfault so that we can trivially enable or disable this without actual code changes."
                },
                {
                    "file": "src/signal.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Probably want _exit here.  I don't think it is safe to call 'exit' after a SIGSEGV."
                },
                {
                    "file": "src/signal.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Maybe add handler for other signal too? like SIGTERM, SIGABRT, or others."
                },
                {
                    "file": "src/signal.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "This just backtraces the signal handler, we need a different method for printing all the thread stacks that caused a crash. Why not just ship the coredump instead of some vague printed log messages?"
                },
                {
                    "file": "src/signal.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "Wouldn't it be better to just have our daemons LD_PRELOAD `libSegFault.so`?"
                },
                {
                    "file": "src/signal.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Thanks for the feedback. I'll take a look at `libSegFault.so`.\n\nAs for just shipping the coredumps, I was talking to Benjamin about this the main points are the following\n- There might be security issues? The memory and register values are also exposed.\n  - It might not matter since that's just BMC stuff and don't have customer datas.\n- Can only BMC with out of band access. We need a way to for system without OOB to get some info.\n\nI was planning on getting the stack trace out as logs to get some basic info for systems that can't get the coredump out.\n\n---\n\nI'll abandon this after this discussion is done."
                },
                {
                    "file": "src/signal.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "Tested the `libSegFault.so` and seems to work fine. Will test it on the BMC for now."
                },
                {
                    "file": "src/signal.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "It seems like that also dump the memory data + register, so in that sense it provides the same info as coredump. I'll have to check if that's an issue or not."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 42,
                    "deletions": 0
                },
                {
                    "file": "src/signal.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/stdplus/signal.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 63,
            "sizeDeletions": 0
        }
    ]
}