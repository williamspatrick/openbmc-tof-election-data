{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I7714c5e8391c16a42550baa0e9da4e91b5b31b8d",
    "number": 49835,
    "subject": "RFC: Add std::monostate to dbus variant",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/49835",
    "hashtags": [],
    "createdOn": 1640020317,
    "lastUpdated": 1665853056,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1640020317,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1640020336,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1640020434,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/32274/ : FAILURE"
        },
        {
            "timestamp": 1640020760,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2: New patch set was added with same tree, parent, and commit message as Patch Set 1."
        },
        {
            "timestamp": 1640020773,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1640020776,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1640021145,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/32275/ : FAILURE"
        },
        {
            "timestamp": 1640095683,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1640107015,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1640107029,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3: Patch Set 2 was rebased"
        },
        {
            "timestamp": 1640107048,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1640107141,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/32331/ : FAILURE"
        },
        {
            "timestamp": 1640130758,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\nActually, I'm remembering now why it works this way, and I understand the problem you're getting at.  We actually did this on purpose, because an implementation pattern that came up a couple times was:\n\n1. Dbus Interface changes, and adds new property of a type that the consumer interfaces interface had never seen before.\n2. All GetAll unpacks immediately start failing, including those that currently ignore the new property, simply because there was no way to unpack it.\n\nFor that reason, we did the default construct variant thing.  You're right, it's non-ideal, but in practice, the above pattern is guaranteed to cause a bug, whereas the pattern we have now is unlikely, although possible to cause a bug.\n\nYes, monostate might be a way to make that better, but that would involve either option 1 or option 2 above (or whatever ideas you have).  If you're interested in one of those, lets get this patchset updated with something that compiles and go from there to see if it's better."
        },
        {
            "timestamp": 1640163086,
            "reviewer": {
                "name": "Krzysztof Grobelny",
                "email": "krzysztof.grobelny@intel.com",
                "username": "krzysztof-i"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> Actually, I'm remembering now why it works this way, and I understand the problem you're getting at.  We actually did this on purpose, because an implementation pattern that came up a couple times was:\n> \n> 1. Dbus Interface changes, and adds new property of a type that the consumer interfaces interface had never seen before.\n> 2. All GetAll unpacks immediately start failing, including those that currently ignore the new property, simply because there was no way to unpack it.\n> \n> For that reason, we did the default construct variant thing.  You're right, it's non-ideal, but in practice, the above pattern is guaranteed to cause a bug, whereas the pattern we have now is unlikely, although possible to cause a bug.\n> \n> Yes, monostate might be a way to make that better, but that would involve either option 1 or option 2 above (or whatever ideas you have).  If you're interested in one of those, lets get this patchset updated with something that compiles and go from there to see if it's better.\n\nIf we think about option two it might be impossible to produce correct result. std::monostate is a dummy type that is used currently only when reading message. If there is std::monostate in variant used to build message there is a possibility that we cannot build a message so additional error handling would be needed in client code (or calling completion callback with error code immediately).\n\nPersonally I think that we should go with option 1 or option 3 (after introducing common variant only one place might have this issue, which is huge improvement if we compare it to situation where there was only one type in variant)"
        },
        {
            "timestamp": 1640194456,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > Actually, I'm remembering now why it works this way, and I understand the problem you're getting at.  We actually did this on purpose, because an implementation pattern that came up a couple times was:\n> > \n> > 1. Dbus Interface changes, and adds new property of a type that the consumer interfaces interface had never seen before.\n> > 2. All GetAll unpacks immediately start failing, including those that currently ignore the new property, simply because there was no way to unpack it.\n> > \n> > For that reason, we did the default construct variant thing.  You're right, it's non-ideal, but in practice, the above pattern is guaranteed to cause a bug, whereas the pattern we have now is unlikely, although possible to cause a bug.\n> > \n> > Yes, monostate might be a way to make that better, but that would involve either option 1 or option 2 above (or whatever ideas you have).  If you're interested in one of those, lets get this patchset updated with something that compiles and go from there to see if it's better.\n> \n> If we think about option two it might be impossible to produce correct result. std::monostate is a dummy type that is used currently only when reading message. If there is std::monostate in variant used to build message there is a possibility that we cannot build a message so additional error handling would be needed in client code (or calling completion callback with error code immediately).\n\nThe thing you put in parenthesis is what we do already.  There are sdbusplus paths that call the completion handler immediately with an error code, so we could continue to do that.\n\n> \n> Personally I think that we should go with option 1 or option 3 (after introducing common variant only one place might have this issue, which is huge improvement if we compare it to situation where there was only one type in variant)\n\nAs with everything, we should evaluate #1 for binary size, given that it would be duplicating some heavily templated code.  It's probably negligible, but worth talking about either way.\n\nI'm ok with basically any of the three, but each will require work."
        },
        {
            "timestamp": 1665853052,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1665853056,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Abandoned\n\nNo input from parties that asked for this.  I'm not interested in pushing it forward"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "65dab7dcaa630786da6f013033200b16c7389163",
            "parents": [
                "13152e939d7ddec6375b0752a78e2e42431144dc"
            ],
            "ref": "refs/changes/35/49835/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1640020317,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -2
                },
                {
                    "file": "include/dbus_utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 34,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "d1ea7421bde8b6d4ed116fb9e657307c4da6ebc4",
            "parents": [
                "f47eacbe9d80a0faecb3592656d284e1f28d2870"
            ],
            "ref": "refs/changes/35/49835/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1640020760,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "NO_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Krzysztof Grobelny",
                        "email": "krzysztof.grobelny@intel.com",
                        "username": "krzysztof-i"
                    },
                    "message": "I will give you example how it works right now.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/49875/2\n\nPlease notice that when dbus interface contains a type that is not present in variant there is no error and variant is initialized to first type in list which can lead to some problems.\n\nConsidering that bmcweb will switch to common variant this risk will only apply to place in code which uses property with same type as first type in variant.\n\nI just want to have common understanding of this problem. Once we are on same page and in your opinion risk is too small then I will be fine with doing nothing."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I will give you example how it works right now.\n> \n> https://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/49875/2\n> \n> Please notice that when dbus interface contains a type that is not present in variant there is no error and variant is initialized to first type in list which can lead to some problems.\n\nIf that's true then the \"no error\" part sounds like a bug in sdbusplus.  It's possible error propagation doesn't work when the variant to unpack is in a container?\n\n> \n> Considering that bmcweb will switch to common variant this risk will only apply to place in code which uses property with same type as first type in variant.\n\nAssuming we don't fix the aforementioned bug.\n\n> \n> I just want to have common understanding of this problem. Once we are on same page and in your opinion risk is too small then I will be fine with doing nothing."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -2
                },
                {
                    "file": "include/dbus_utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 34,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "e9d4694ab8d55fd168071bbbfe9cda1456bca821",
            "parents": [
                "cc4db404ac3d911bc640528e6fd7f778c77e02d8"
            ],
            "ref": "refs/changes/35/49835/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1640107029,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "No inputs from parties that asked for this to be supported.  Happy to revisit at some point if the need arises."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "include/openbmc_dbus_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -2
                },
                {
                    "file": "include/dbus_utility.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 34,
            "sizeDeletions": 2
        }
    ]
}