{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "Ia26398e2f39c792cf371e4aeae3c0782fde73aff",
    "number": 71441,
    "subject": "service-config-manager: proposal to make more abstract",
    "owner": {
        "name": "Andrew Geissler",
        "email": "geissonator@yahoo.com",
        "username": "geissonator"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/71441",
    "hashtags": [],
    "createdOn": 1715806154,
    "lastUpdated": 1725373150,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1715806154,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1715806188,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1715806188,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1715806212,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/84446/ : SUCCESS"
        },
        {
            "timestamp": 1715818223,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1716409054,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1716413087,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(21 comments)"
        },
        {
            "timestamp": 1719953493,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1719953493,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 2:\n\n(18 comments)"
        },
        {
            "timestamp": 1719953514,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1719953514,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1719953535,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/87208/ : SUCCESS"
        },
        {
            "timestamp": 1721341779,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(4 comments)"
        },
        {
            "timestamp": 1723494929,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1725373150,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Abandoned\n\nSee last comment"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "96d43ef5f285dfed1f09f2d209f59a33cd19a443",
            "parents": [
                "e1399e5cc77db5a270d5fe06c0f626a31319fab5"
            ],
            "ref": "refs/changes/41/71441/1",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "createdOn": 1715806154,
            "author": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "No real opinion here other than the design of service-config-manager always felt like a bit of a crime-scene, so I'm glad that someone's thinking about it \ud83d\ude0a"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "+1"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Overall, in support of this.  We need to understand how this new design fits in with.\n\n1. Services that need activated per-network interface.\n2. Services that change their port number at runtime.\n\nAfter that, I think the rest of my comments are just structural changes that aren't super important.\n\nI do wonder that if we're doing this level of rewrite, we might want to consider a different design for the actual execution of service changes, that maybe disables the incoming socket targets without necessarily stopping the service process within the bmc to give better response times to users.  At least in my head, this seems simpler than trying to start/stop services."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Seems like we have 2 big one's here. I could find no uses within the code base of either of these features. Redfish doesn't even have an API to control on a per-network interface within ManagerNetworkProtocol. So for for the sake of simplicity, I was making a try at just removing them. It does not sound like that's going to fly.\n\nSo I'll put the port number change requirement back in. \nDo you really think we need the per-network interface control? I see no use of that currently and there doesn't seem to be a Redfish way to control it?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?????  Huh?\n\nMy understanding of this problem (from a 10000ft view, because I didn't write or participate in it) is that systemd doesn't have a mechanism for adjusting the port used for a given service on dbus, so when you implement the Redfish ManagerNetworkProtocol schema, something needs to read/modify/write the socket file, then call daemon-reload, and restart the service to actually effect the change.  That was logic that shouldn't live in bmcweb, ipmi, or pldm, so service-config-manager was created.  I thought that was the niche that service-config-manager lived in, but this makes it sound like it's not needed anymore?\n\nDoes systemd provide APIs to do this now?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 14,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "I don't see that feature used anywhere (adjusting the port number) so I assumed it was something someone thought they may need but didn't. I was hoping as a part of the overall simplification of this repo, to get rid of this function. As noted above, I'll leave it in."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Completely agree with this.  The API itself leaves a lot to be desired."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 32,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  Is this anything more than a bug in the implementation that should be fixed?  It seems kind of unrelated to the greater multi-service design.\n\nI get they're related, but we could probably just remove this and simplify, but up to you if you want to change."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 32,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Yeah, valid point that it's somewhat tangential. But it's definitely a limitation I want to address with these changes so I'd like to leave in."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Redfish provides APIs for interacting with that stuff (ManagerNetworkProtocol), can you note why those don't work for this case?  (Ideally making the case to DMTF with patches to the schema that do work)."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 37,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "The complexity is that there's no persistent data within service-config-manager that clearly states IPMI enabled/disabled. It's just /dev/null links out in /etc and such that systemd puts in place when systemctl disable is called. I'd like a more specific persisted d-bus property that we can replicate back and forth. I'll update text to clarify."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 47,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This could probably just be removed.  \"What if we didn't use systemd\" is a whole other line of topic that takes away from this overall design, and is to abstract, I doubt we could get concensus on it."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 47,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is not a requirement.  \"true abstraction\" doesn't mean anything.  I suspect this can just be removed, and the list below turned into a normal bulleted requirements list."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 51,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 53,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This requirement needs broken down.  \"Service\" could mean \"ipmi\" or it could mean \"ipmi on eth0\" or it could mean \"ipmi on eth 0 and port N\".\n\nSaying we're going to have a single property for all 3 of those seems problematic, so lets call out what we mean.  I would give you example language, but as this is written, I'm not actually sure which one you intended."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 53,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Noted the removal of per-network interface capability (as noted above there are no uses and no Redfish API to utilize it). Also specifically noted removal of Running property and made a separate requirement below about ability to configure port number for a service."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How does one implement per-network-interface level service control then?  I suspect we need both APIs in a complete solution."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 55,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 57,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "this isn't a requirement, this is a design.\n\nDo we have any background on why Masked was made available as a separate property?  I can't think of the use case for that.\n\n\nIn addition, in terms of this design, should enable/disable be a method call rather than a property?  There's a weird discontinuity between \"does the API request that the service is running\" versus \"Is the service currently running\" that you kind of want to differentiate between."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "When I wrote this I didn't see anything on a quick grok, but I do see one use of masked out in openbmc/intel-ipmi-oem. A masked service will not start even to satisfy a dependency (whereas a disabled service will). I'll have to follow up on whether that is still a requirement by the Intel team."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You've created a requirement about a non-requirement here.  Can we avoid the negative.\n\n\"Services that are not currently running shall be represented on the aformentioned dbus interface\""
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 58,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we add some requirements around error handling and service startup?  Clients expect that when they've enabled the service, the service is now accessible;  The existing design doesn't really handle that in the way users expect, so if we're reworking everything, doing it in a way that a user expects would be good.\n\nRequests to enable or disable the service shall only return to the caller once the service has started or stopped using systemds definition;"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 60,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Agree, this current behavior has resulted in some weird delays and such in the GUI I believe."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "this will be through systemd service files, similar to how the socket files are persisted?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "nlohmann json files for the policy settings, which then will be utilized to know the systemd d-bus calls to make (which will create the files in /etc and such)."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Implementing the ManagerNetworkProtocol schema in Redfish seems like a valid use case, no?  Or are we proposing a different way to restart services?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 71,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 76,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "IPMI requires being able to set these things on a per-nic basis, correct?  (I haven't looked in a long time)."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 76,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "I couldn't find anything in the code utilizing this but I'll add on IPMI devs."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 100,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\n\nThis is so much better."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 106,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This assumes that Redfish -> systemd conversions are trivial.  In practice, the systemd DBus API is far from trivial.\n\nAgree, this isn't what we want to do."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we make clear that the existing user-facing interfaces will not be impacted?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "I'd like to remove the ability to target per interfaces since I can't find any need for it and it adds unneeded complexity to the code."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think this is required for IPMI for some people (and maybe Redfish eventually)?  I thought there was another design for that).  You want an in-band interface to have IPMI but not the external (or vis-versa)."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 131,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "I started this design out with a few goals:\n\n1. Remove the per-interface enable/disable and the ability to configure ports. I figured these were added at a time that we thought we may need them and now that we're much further along and not using them, we could remove them and the very complicated code that comes with them. Based on this review, it does not seem like removing either of these are viable.\n\n2. Simplify the enable/masked/running concept. The fact an Intel IPMI OEM library uses the Masked call makes this one tricky. It's going to be difficult to remove an existing call like that because it was obviously added for some specific reason.\n\n3. Fix the issue where you have to run the service you want to disable before you can enable/disable it.\n\n4. Persist the enable/disable info in a way that it can easily be synchronized to a redundant BMC\n\n5. Some other miscellaneous items that came up in this review like enhancing the error reporting and ensuring the d-bus API doesn't return until the operation is actually complete\n\nSo, I'm starting to think it may be time to just abandon this design doc and focus on 3 and 4 via code reviews. So some light refactoring + 3 and 4."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ipmi?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 138,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 145,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Same thing with port changes."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 145,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 146,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you enumerate this a little?  I suspect this is just:\n\nTest redfish can enable and disable an API, and the service is available on the port specified once enabled/disabled.\n\nTest redfish can change the port of a given service, and the service port changes.\n\nTest that IPMI can change the enabled state of a given service."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 146,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "designs/service-config-manager.md",
                    "type": "ADDED",
                    "insertions": 157,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 171,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "84450db4355ed8a0bab07b3803d3d2c2c38e582d",
            "parents": [
                "5a727b484f69eaea8accb6f066687cc06abc9ad2"
            ],
            "ref": "refs/changes/41/71441/2",
            "uploader": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "createdOn": 1719953493,
            "author": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Mostly minor nits."
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 23,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: phopshor?"
                },
                {
                    "file": "designs/service-config-manager.md",
                    "line": 40,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: backtick escape"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "designs/service-config-manager.md",
                    "type": "ADDED",
                    "insertions": 163,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 177,
            "sizeDeletions": 0
        }
    ]
}