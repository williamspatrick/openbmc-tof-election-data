{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "clang-tidy-base",
    "id": "I01a86282b4b768f4cd925c4b4e536597f0956eff",
    "number": 76345,
    "subject": "clang-tidy: Added C++ Reference Configuration",
    "owner": {
        "name": "Jayanth Othayoth",
        "email": "ojayanth@gmail.com",
        "username": "ojayanth"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/76345",
    "hashtags": [],
    "createdOn": 1733658351,
    "lastUpdated": 1736227715,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1733658351,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1733658398,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1733658398,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1733658406,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Topic set to clang-tidy-base"
        },
        {
            "timestamp": 1733658423,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96070/ : SUCCESS"
        },
        {
            "timestamp": 1733658614,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1733704284,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1733721713,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1733721744,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1733721744,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1733721778,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1733721829,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1733721829,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1733721832,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/96116/ : ABORTED"
        },
        {
            "timestamp": 1733721840,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1733721922,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/96118/ : FAILURE"
        },
        {
            "timestamp": 1733722158,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1733722179,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1733722179,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1733722204,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96119/ : SUCCESS"
        },
        {
            "timestamp": 1733755624,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 4: Code-Review+1"
        },
        {
            "timestamp": 1733766782,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1733766819,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1733766819,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1733766843,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96137/ : SUCCESS"
        },
        {
            "timestamp": 1733808504,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1734006386,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734006420,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734006420,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1734006437,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734006505,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96478/ : SUCCESS"
        },
        {
            "timestamp": 1734015621,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734016061,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Code-Review-1\n\n(6 comments)"
        },
        {
            "timestamp": 1734016814,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734016890,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734017294,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734017431,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734023680,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734024369,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1734064497,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734064521,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734064522,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1734064720,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96564/ : SUCCESS"
        },
        {
            "timestamp": 1734064914,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1734068963,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1734069623,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1734073018,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1734175533,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 8.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734175580,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734175580,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: -Ok-To-Test"
        },
        {
            "timestamp": 1734175761,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96653/ : SUCCESS"
        },
        {
            "timestamp": 1734175862,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1734176030,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 9.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734176069,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734176069,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: -Ok-To-Test"
        },
        {
            "timestamp": 1734176094,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96654/ : SUCCESS"
        },
        {
            "timestamp": 1734176636,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 8:\n\n(5 comments)"
        },
        {
            "timestamp": 1734176700,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 9:\n\n(1 comment)"
        },
        {
            "timestamp": 1734180271,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 10.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734180311,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734180311,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: -Ok-To-Test"
        },
        {
            "timestamp": 1734180490,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96655/ : SUCCESS"
        },
        {
            "timestamp": 1734185733,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 11.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734185760,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734185760,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: -Ok-To-Test"
        },
        {
            "timestamp": 1734185784,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96657/ : SUCCESS"
        },
        {
            "timestamp": 1734185837,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 12.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734185870,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734185870,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: -Ok-To-Test"
        },
        {
            "timestamp": 1734185893,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96658/ : SUCCESS"
        },
        {
            "timestamp": 1734213733,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 12: Code-Review-1\n\n(2 comments)"
        },
        {
            "timestamp": 1734237588,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1734389451,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1734410738,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1734434499,
            "reviewer": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "message": "Uploaded patch set 13: Commit message was updated.\n\nCopied Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR **changekind:NO_CODE_CHANGE** OR changekind:TRIVIAL_REBASE OR is:MIN\")\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1734434548,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1734434548,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: -Ok-To-Test"
        },
        {
            "timestamp": 1734434573,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/96813/ : SUCCESS"
        },
        {
            "timestamp": 1736167813,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 13: Code-Review-1\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "4606ddefbe6a1f8c72b4920478cc243801261bec",
            "parents": [
                "67032dffe31f98a8638927f74a7a35990d6a1fbc"
            ],
            "ref": "refs/changes/45/76345/1",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1733658351,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Please write in the imperative mood and avoid using \"this commit\" in this manner.\n\n> Introduce a reference ..."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Done."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "What does this mean in practice?\n\nCan you please document how you generated the file so others can understand how they might maintain it going forwards?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Updated commit message and also added new commit for document updates , prior to this."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I don't feel that your changes address my question of\n\n> Can you please document how you generated the file so others can understand how they might maintain it going forwards?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Added additional info ine newer version."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Sorry, but can you point to where you think it's documented?\n\nI'm looking for a way where we can automatically generate the complete list of rules, or something."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "https://gerrit.openbmc.org/c/openbmc/docs/+/76369/6/cpp-style-and-conventions.md#186 am referring, \nRegarding the rule i followed high level added additional comments as review response for reference here https://gerrit.openbmc.org/c/openbmc/docs/+/76345/6..7/style/cpp/.clang-tidy-cpp#b354\n\nLet me know incase you are looking diffrent info ?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": ">I'm looking for a way where we can automatically generate the complete list of rules, or something.\nThere are two phases of enablement \n1. Readiness for running clang-tidy, This requires is to fix all clang-tidy build level errors, ( rfere https://gerrit.openbmc.org/c/openbmc/phosphor-power/+/76336 commit chain as example) .\n2. Use the base config file , and run clang-tidy using docker. and disable failing teste initial enablement-> this is easy for Repo , which doesn't have clang-tidy support in place . Using automated way now to fix this , only minimum manual intervention. Since the tidy enabled Repos , not following std format . this is tricky to automate.\nIn summary with proposing common config file , easy to automate for any future change in future . That is the intention of this proposal."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I'm struggling with your response because my understanding of what you've written is as if I asked an entirely different question.\n\nYou don't need to enable all rules at once. My comment on discord was about listing all the rules and explicitly disabling them individually with `-` prefix. That way maintainers of application repositories at least had a list of all the rules they _could_ choose to enable. I see you've moved away from the complete-list approach so my question has lost its motivation, but I was hoping it wasn't tricky to answer. \"There's no automated way to generate the list\" is a fine response (even if it would be disappointing)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "The .clang-tidy-cpp file attached here is derived from the list at Clang-Tidy Checks and tailored for OpenBMC projects based on category levels instead of individual checks. For example, instead of listing all 100+ bugprone-xxx-xxx checks, I grouped them under the bugprone* category. This approach helps users enable or disable specific groups of checks more efficiently. Based on review feedback, no one wanted to review all 400 checks I initially added, so I opted for a category-based approach. This method still meets our initial requirements. Let me know if you need additional information on how developers can better enable clang-tidy coverage.\n\nFor more details on my approach, please refer to this commit.https://gerrit.openbmc.org/c/openbmc/phosphor-power/+/76608/\n\nRegarding automation, \"there's no fully automated way to generate the list\". As mentioned earlier, full automation requires some manual intervention due to the steps involved before enabling clang-tidy fixes. Let me know what kind of automation approach you are looking for, or we can discuss it on Discord if you need further clarification.\n\nYou can use the command clang-tidy-18 -list-checks -checks= to list supported checks specific to clang-tidy version 18."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Discord Discussion Link : https://discord.com/channels/775381525260664832/867820390406422538/1313366808258154527"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-template",
                    "type": "ADDED",
                    "insertions": 386,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 409,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "7bf6387ab8d85dc881de1de7ce65aa9925ce91da",
            "parents": [
                "1a3347e721a98ce43d4aee0ec7d9763de34d154c"
            ],
            "ref": "refs/changes/45/76345/2",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1733721713,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-template",
                    "type": "ADDED",
                    "insertions": 386,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "c94f944ee39ad67dd6ad4ecaaab8075058f97103",
            "parents": [
                "1a3347e721a98ce43d4aee0ec7d9763de34d154c"
            ],
            "ref": "refs/changes/45/76345/3",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1733721778,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 386,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 418,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "791f446c2513232d48e36a103b91c327820a1b12",
            "parents": [
                "8bf552c7c293dae0afabb53d0b0089a3276591d0"
            ],
            "ref": "refs/changes/45/76345/4",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1733722158,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 386,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 419,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "60b63fd7b394ae64171a10244e7d7745e2180b40",
            "parents": [
                "6426eb0557607139078ce97fe27a1376c84d165f"
            ],
            "ref": "refs/changes/45/76345/5",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1733766782,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 386,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 404,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "b17a6315b347542d62cd91d4b59a0c450233a17e",
            "parents": [
                "19de26ab96bbe609a0dbd3d9a0c13249f7548f64"
            ],
            "ref": "refs/changes/45/76345/6",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734006386,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think we have to be really careful about just suggesting that everyone enable every clang-tidy option in existence.  Some of these are coding style recommendations from Google, LLVM, etc. which are not our coding style.  Worse is that by enabling all of these, we end up with the _union_ of all coding styles that exist.\n\nI'm fine with security and performance ones and ones raised by the cpp core guidelines (since we explicitly call that out anyhow) but I don't think we should enable big sets of the other ones."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Need inputs from on why these checks enabled on BMCWeb ."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "If bmcweb wants to enable additional checks on their repository, that is sort of up to them, but we need to make a clear statement for the entirety of the project.  \n\n\"First mover status\" is not a reason to follow everything in bmcweb and I don't think it is reasonable for us to even spend time coming to consensus on 400 checks."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "To gather early feedback, I initiated discussions on Discord and the mailing list. I also started reviews on selected active repositories to get input from repository users. To kick off the discussion, I began with a base configuration that includes existing checks used across repositories, which enabled tidy checks. I agree with your approach and will not merge any common configuration files until this version is approved by all interested parties. Additionally, we should consider options for using a combination of common and repository-specific sections, which will facilitate future migrations across repositories. This approach will also help accommodate any base configuration changes based on future .clang-tidy releases."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We need some understanding of what it means to be a \"reference\".  I see the file below was copied from bmcweb (because bmcweb adds some things that shouldn't be in a general file, and also has history that no longer applies to modern tidy).  Is there a plan to sync this to all repositories and get the issues resolved?\n\nAs much as I really want to see us get to the point where we can claim that the majority of the code passes all these these checks, I don't think this patch gets us closer to that goal.  Rather than integrating the required changes to the repositories, we debate each individual check, which frankly is a waste of time at this point.  There's a lot of junk checks in tidy that I enabled in bmcweb just because it was there and passed.\n\nI would much rather we start with one check in the reference file that we want to universally apply, and get that deployed to all our c++ repos.  The actual check almost doesn't matter (I might recommend the no non-const global variables check), but getting it deployed across the project and the project passing ALSO gets the project compiling against clang, which enables different warnings, and when I've turned it on in bmcweb/dbus-sensors/entity-manager, almost always found functional bugs (usually in an error handling case).\n\nOnce we are universally using tidy, and have the rules around things like NOLINT understood then we can incrementally add checks.\n\n\nTo be clear, I want us to get to the point where this can merge, I just think the incremental approach is better.\n\nTL; DR\nTimeline: One check universally applied -> Several checks universally applied -> This patch (or a variation of this patch)"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Ed, Main focus of this patch series to stream line clang-tidy support enablement/support activity. mainly am focusing on item 1 to 4 now .mentioned below.\n1.Define a Common Configuration File Format:\nUse an automation-friendly format to facilitate future enhancements.\n\n2.Select Recommended Categories of Checks:\nFinalize the categories to include in the clang-tidy configuration to enhance code quality and security.\nRecommended categories: bugprone, cert, clang-analyzer, cppcoreguidelines, misc, modernize, performance, and readability.\nCoordinate with the OpenBMC team for any new categories to be included in the project.\n\n3.Start with a Minimal Set of Checks for Each Category:\nOption 1: Refer to .clang-tidy-cpp (added in review). This includes the use of OpenBMC recommended checks as a base, allowing repository owners to disable checks based on their use case.\nOption 2: Refer to .clang-tidy-cpp-v1 (added in review). This option disables all checks by category and enables only one check initially. This approach is more user-friendly and makes it easier to extend required checks under each category.\n\n4.Integrate Clang-Tidy into the Build System:\nAddress all issues reported by clang-tidy build errors before enabling checks.\nEnsure clang-tidy runs as part of the Continuous Integration (CI) pipeline.\n\n5.Adopt a Phased Approach:\nRepository owners can progressively enable more stringent checks.\nEnsure alignment with OpenBMC guidelines.\n\n6. Regularly Update Clang-Tidy:\nKeep clang-tidy and its configuration up-to-date with the latest versions and best practices.\nRegular updates ensure new checks and improvements are incorporated."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Ed, Main focus of this patch series to stream line clang-tidy support enablement/support activity. mainly am focusing on item 1 to 4 now .mentioned below.\n\nWhat does \"Streamline\" mean in technical terms and how does this review help?\nKeep in mind, we already have a .clang-tidy file in this same folder you've added this one, so I'm really not sure how they relate or how creating a second file gets us higher quality.\n\nhttps://github.com/openbmc/docs/blob/master/style/cpp/.clang-tidy\n\nThat was checked in 10 months ago, and still isn't standard across the project, nor have I seen a lot of patches pushed to that end.  Just adding more checks makes the problem harder.\n\nWhat does \"Recommended\" mean in concrete terms?\n\n> Finalize the categories to include in the clang-tidy configuration to enhance code quality and security.\n\nWhat does \"finalize\" mean here?  Are you intending to go do the work to turn all these on across the project?\n\nWriting a clang tidy file in a docs repo doesn't improve code quality.  Applying the clang-tidy file across the project and making sure the code is compliant improves quality.  If this patch is asking for \"Should I go start turning on checks?\" absolutely, I think everyone on this review will support you, and we can treat this review as aspirational.  This review doesn't need to merge for that work to start.\n\n> 3.Start with a Minimal Set of Checks for Each Category:\n\nStart with ONE check was my recommendation (which is actually close to what the existing clang-tidy file does).  Turning on one tidy check actually gets us more checks because we're now compiling with clang, and which on its own gets us a lot more warnings.\n\n> Repository owners can progressively enable more stringent checks.\n\nCan thusfar hasn't translated to \"will\".  I think this is key here, most maintainers don't have time for enabling these amount of checks.\n\nWe need some level of staging here.  Keep in mind, to get bmcweb compliant with tidy to the level it is has taken years. The original config file was automatically generated and took a couple of seconds.  I'd like to see some indication that the parties involved actually intend to roll this out"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 165,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "@ed BMCWeb curently using  OSX, Fuscia, Webkit specific checks, There is question cam from @stwcx and @manokiran on this Can you please provide inputs related to this ?"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There is no reason to have any OSX checks in our reference file."
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 200,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 351,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This one is another one that is a Google coding style but not ours."
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 351,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 352,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This doesn't even do anything without additional configuration."
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 352,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Some of these are LLVMs coding styles but not our coding styles.  This is one I especially hate because it defeats the purpose of using auto in the first place.  How do we determine which of these we really care about?\n\nWe have almost 400 checks enabled in this file.  I don't see how that is practical to review and maintain this."
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 354,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Added New template , which is reduced set also used grouping approch. Please reveiw this and provide feedback.\n\nbelow information provides additional inputs about this grouping and how it helps \n kind of info. Based on openbmc requirements we can add or remove the group from this list.\n \nMinimum Recommended CERT Checks\n1. clang-analyzer-core.*: Core checks for common issues like null dereferences, divide-by-zero, and uninitialized variables.\n2. clang-analyzer-cplusplus.*: Checks specific to C++ features, such as smart pointers, new/delete operations, and virtual calls.\n3. clang-analyzer-deadcode.*: Detects dead code, such as unused variables and unreachable code.\n4. clang-analyzer-nullability.*: Checks related to nullability annotations and null pointer dereferences.\n5. clang-analyzer-optin.*: Optional checks that are not enabled by default but can be useful for catching specific issues.\n6. clang-analyzer-security.*: Security-related checks, such as detecting the use of insecure functions.\n7. clang-analyzer-unix.*: Checks for Unix-specific issues, such as incorrect usage of POSIX functions.\n8. clang-analyzer-valist.*: Checks for issues related to variadic functions and va_list usage.\n9. clang-analyzer-apiModeling. -- Not supported.\nDeclarations and Initialization\n10. cert-dcl03-c: Detects the use of identifiers with conflicting linkage.\n11. cert-dcl21-cpp: Flags the use of delete on polymorphic base class pointers.\n12. cert-dcl50-cpp: Detects the use of dynamic exception specifications.\nError Handling\n13. cert-err34-c: Ensures that error codes are checked.\n14. cert-err52-cpp: Flags the use of throw in destructors.\n15. cert-err60-cpp: Detects the use of catch(...) without rethrowing.\nFile I/O\n16. cert-fio38-c: Ensures that file operations are checked for errors.\n17. cert-fio54-c: Ensures that file descriptors are closed properly.\n18. cert-fio57-c: Detects the use of fgets with untrusted buffers.\nSecurity\n19. cert-env33-c: Ensures that environment variables are sanitized.\n20. cert-fio45-c: Ensures that file paths are sanitized.\n21. cert-fio62-c: Flags the use of fopen with untrusted file names\n\n\nType Safety\n22. cppcoreguidelines-pro-type-cstyle-cast: Flags C-style casts.\n23. cppcoreguidelines-pro-type-member-init: Ensures that all members are initialized in constructors.\n24. cppcoreguidelines-pro-type-reinterpret-cast: Flags reinterpret_cast usage.\n25. cppcoreguidelines-pro-type-static-cast-downcast: Flags downcasts using static_cast.\nResource Management\n26. cppcoreguidelines-pro-bounds-array-to-pointer-decay: Flags array-to-pointer decay.\n27. cppcoreguidelines-pro-bounds-constant-array-index: Ensures array indices are within bounds.\n28. cppcoreguidelines-pro-bounds-pointer-arithmetic: Flags pointer arithmetic.\n29. cppcoreguidelines-pro-type-vararg: Flags usage of variadic functions.\nReadability and Maintainability\n30. cppcoreguidelines-avoid-magic-numbers: Flags magic numbers.\n31. cppcoreguidelines-avoid-non-const-global-variables: Flags non-const global variables.\n32. cppcoreguidelines-avoid-goto: Flags usage of goto.\n33. cppcoreguidelines-special-member-functions: Ensures special member functions are properly defined.\nModern C++ Practices\n34. cppcoreguidelines-init-variables: Ensures variables are initialized.\n35. cppcoreguidelines-no-malloc: Flags usage of malloc and free.\n36. cppcoreguidelines-owning-memory: Ensures proper ownership of dynamically allocated memory.\n37. cppcoreguidelines-slicing: Flags object slicing.\nPerformance\n38. cppcoreguidelines-narrowing-conversions: Flags narrowing conversions.\n39. cppcoreguidelines-pro-type-union-access: Flags unsafe union access.\n40. cppcoreguidelines-pro-type-const-cast: Flags const_cast usage.\n41. cppcoreguidelines-pro-type-union-access: Flags unsafe union access.\n\nGeneral Code Quality\n42. misc-definitions-in-headers: Flags definitions in header files.\n43. misc-dangling-handle: Detects dangling handles, such as file descriptors or sockets.\n44. misc-misleading-bidirectional: Flags misleading bidirectional text.\n45. misc-new-delete-overloads: Ensures that new and delete operators are correctly overloaded.\n46. misc-non-copyable-objects: Detects non-copyable objects that are copied.\n47. misc-no-recursion: Flags recursive function calls.\n48. misc-redundant-expression: Detects redundant expressions.\n49. misc-static-assert: Ensures that static_assert is used correctly.\n50. misc-throw-by-value-catch-by-reference: Ensures exceptions are thrown by value and caught by reference.\n51. misc-undelegated-constructor: Flags constructors that do not delegate.\n52. misc-unused-alias-decls: Detects unused alias declarations.\n53. misc-unused-parameters: Flags unused parameters in function definitions.\nInclude Management\n54. misc-include-cleaner: Checks for unused and missing includes.\nReadability and Maintainability\n55. misc-confusable-identifiers: Flags identifiers that are easily confusable.\n56. misc-const-correctness: Ensures const correctness.\n57. misc-coroutine-hostile-raii: Flags RAII objects that are hostile to coroutines.\nUse of Modern C++ Features\n58. modernize-use-auto: Replaces explicit type declarations with auto where appropriate.\n59. modernize-use-bool-literals: Replaces integer literals used as booleans with true and false.\n60. modernize-use-default-member-init: Uses default member initializers instead of assigning in constructors.\n61. modernize-use-emplace: Replaces push_back and insert with emplace_back and emplace.\n62. modernize-use-equals-default: Replaces defaulted special member functions with = default.\n63. modernize-use-equals-delete: Replaces deleted special member functions with = delete.\n64. modernize-use-nullptr: Replaces NULL and 0 with nullptr.\n65. modernize-use-override: Ensures that overridden functions are marked with override.\n66. modernize-use-using: Replaces typedef with using.\nPerformance Improvements\n67. modernize-loop-convert: Converts loops to range-based for loops where possible.\n68. modernize-pass-by-value: Replaces pass-by-reference with pass-by-value for parameters that are copied.\n69. modernize-redundant-void-arg: Removes redundant void arguments in function declarations.\n70. modernize-replace-auto-ptr: Replaces std::auto_ptr with std::unique_ptr.\n71. modernize-shrink-to-fit: Uses shrink_to_fit to reduce the capacity of containers.\n72. modernize-unary-static-assert: Replaces static_assert with a single argument with the unary form.\nCode Simplification\n73. modernize-avoid-bind: Replaces std::bind with lambdas.\n74. modernize-deprecated-headers: Replaces deprecated C++ standard library headers with their modern equivalents.\n75. modernize-deprecated-ios-base-aliases: Replaces deprecated std::ios_base aliases.\n76. modernize-make-shared: Uses std::make_shared instead of std::shared_ptr constructor.\n77. modernize-make-unique: Uses std::make_unique instead of std::unique_ptr constructor.\n78. modernize-raw-string-literal: Replaces regular string literals with raw string literals where appropriate.\n79. modernize-redundant-void-arg: Removes redundant void arguments in function declarations.\n80. modernize-replace-disallow-copy-and-assign-macro: Replaces macros that disallow copy and assign with = delete.\n81. modernize-return-braced-init-list: Uses braced-init-list for return statements.\n82. modernize-use-noexcept: Adds noexcept specifier to functions that do not throw exceptions.\n83. modernize-use-transparent-functors: Uses transparent functors for standard library algorithms.\nMemory Management\n84. performance-inefficient-algorithm: Flags inefficient algorithms that can be replaced with more efficient ones.\n85. performance-inefficient-vector-operation: Detects inefficient vector operations.\n86. performance-move-const-arg: Flags cases where a const argument is passed to a function that takes it by value.\n87. performance-move-constructor-init: Ensures that move constructors initialize members efficiently.\n88. performance-no-automatic-move: Detects cases where automatic move operations are not used.\n89. performance-noexcept-move-constructor: Ensures that move constructors are marked noexcept.\n90. performance-trivially-destructible: Flags non-trivially destructible types that could be made trivially destructible.\nLoop Optimization\n91. performance-for-range-copy: Detects range-based for loops that make unnecessary copies.\n92. performance-for-range-reference: Ensures that range-based for loops use references where appropriate.\n93. performance-unnecessary-copy-initialization: Flags unnecessary copy initializations.\nData Structures\n94. performance-type-promotion-in-math-fn: Detects type promotions in mathematical functions that can be avoided.\n95. performance-unnecessary-value-param: Flags value parameters that could be passed by reference to avoid unnecessary copies.\nNaming and Consistency\n96. readability-identifier-naming: Enforces consistent naming conventions for identifiers.\n97. readability-inconsistent-declaration-parameter-name: Ensures parameter names are consistent across declarations and definitions.\nCode Structure and Style\n98. readability-braces-around-statements: Ensures that all statements are enclosed in braces.\n99. readability-else-after-return: Flags else statements that follow a return statement.\n100. readability-function-cognitive-complexity: Measures the cognitive complexity of functions.\n101. readability-isolate-declaration: Ensures that declarations are isolated from other statements.\n102. readability-magic-numbers: Flags the use of magic numbers in the code.\n103. readability-make-member-function-const: Ensures member functions that do not modify the object are marked const.\n104. readability-named-parameter: Ensures that function parameters are named.\n105. readability-non-const-parameter: Flags non-const parameters that could be made const.\n106. readability-redundant-control-flow: Detects redundant control flow statements.\n107. readability-redundant-declaration: Flags redundant declarations.\n108. readability-redundant-member-init: Flags redundant member initializations.\n109. readability-simplify-boolean-expr: Simplifies boolean expressions.\n110. readability-static-accessed-through-instance: Flags static members accessed through an instance.\n111. readability-string-compare: Ensures string comparisons are done correctly.\nComments and Documentation\n112. readability-implicit-bool-cast: Flags implicit casts to bool.\n113. readability-convert-member-functions-to-static: Converts member functions that do not access instance data to static functions.\n114. readability-uppercase-literal-suffix: Ensures that literal suffixes are uppercase.\n115. readability-use-anyofallof: Encourages the use of std::any_of and std::all_of instead of manual loops."
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 386,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This isn't appropriate for all repositories.  Should we even bother with it?"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 386,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "This one added as a reference for openbmc naming conventions. I noticed some of checks are specific  to repository.  It will be good to Keep the Naming convention here that will help repo users/maintainers to follow the OpenBMC naming convention.s"
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 386,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There is a conflict with what is written here though:\n\nhttps://github.com/openbmc/docs/blame/67032dffe31f98a8638927f74a7a35990d6a1fbc/cpp-style-and-conventions.md#L327\n\nThere isn't any way (that I know of) to say that lower_case is always allowed.  That is how some repos are written."
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "line": 386,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Removed from alternative proposal."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 386,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 403,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "4c628d011620d9adf7b6e23d3a3a32c649a4c858",
            "parents": [
                "87120cace37abf8524a5455768172d46cf1f307f"
            ],
            "ref": "refs/changes/45/76345/7",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734064497,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 204,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 221,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "e0334c51ae1eeb937ba96790b0b44251fc0ea5f1",
            "parents": [
                "87120cace37abf8524a5455768172d46cf1f307f"
            ],
            "ref": "refs/changes/45/76345/8",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734175533,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "style/cpp/.clang-tidy-cpp-v1",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "This approach will help for\n\nTargeted Coverage: The format covers the specific types of checks required by OpenBMC, ensuring relevant aspects of code quality, security, performance, and readability are addressed.\n\nCustomization: Allows for specific checks to be enabled or disabled, providing flexibility to tailor the configuration to the project's needs.\n\nIncremental Adoption: By starting with a minimal set of checks and progressively enabling more, teams can adopt clang-tidy without being overwhelmed by too many warnings or errors initially.\n\nAutomation-Friendly: The structured format is suitable for automation, making it easier to integrate into CI pipelines and maintain consistency across different repositories.\n\nFocus on Best Practices: Encourages adherence to best practices from sources like CERT Secure Coding Guidelines and C++ Core Guidelines, promoting high-quality and secure code.\n\nCons: Repository owner need additional work to enable all required checks related analysis. clang-tidy-cpp file helps to fix this partially."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp-v1",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 204,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 260,
            "sizeDeletions": 0
        },
        {
            "number": 9,
            "revision": "5a692f54377176f164e0b1ba71a0ccb38cf2a5fc",
            "parents": [
                "87120cace37abf8524a5455768172d46cf1f307f"
            ],
            "ref": "refs/changes/45/76345/9",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734176030,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Added two template file now based team's input. Added details in the file specific"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp-v1",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 204,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 260,
            "sizeDeletions": 0
        },
        {
            "number": 10,
            "revision": "854639f64723f84dc77a5e7b359887072bf49865",
            "parents": [
                "87120cace37abf8524a5455768172d46cf1f307f"
            ],
            "ref": "refs/changes/45/76345/10",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734180271,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp-v1",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 204,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 260,
            "sizeDeletions": 0
        },
        {
            "number": 11,
            "revision": "355af89ccc5c69803638637611fa307dd412f898",
            "parents": [
                "4369d83e8e37833162fd4df3baea26ac1b34c772"
            ],
            "ref": "refs/changes/45/76345/11",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734185733,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 63,
            "sizeDeletions": 0
        },
        {
            "number": 12,
            "revision": "877bba49714561e64ca72c78d9ed3a2b6273b3a4",
            "parents": [
                "4369d83e8e37833162fd4df3baea26ac1b34c772"
            ],
            "ref": "refs/changes/45/76345/12",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734185837,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "While I agree with some of the checks enabled in this file, I don't see how checking this duplicate into the docs repo does anything but cause more chaos.\n\nMy recommendation for a path forward would be to enable one check that can be universally applied, then start pushing patches to add it to the various repos in the project.  Once a majority of those projects are tidy enabled (or are at least in review), we can update the existing file with that one check.\n\nFWIW, this is essentially what I've been doing over time as I get spare cycles, starting with bmcweb, then going to EM, dbus-sensors, etc."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jayanth Othayoth",
                        "email": "ojayanth@gmail.com",
                        "username": "ojayanth"
                    },
                    "message": "Thanks. I am also going same direction. Additionally added  category name in the file , to indicate what are the clang-tidy checks applicable for the C++ . This one need inputs. That will help to developers , where to start. Currently all the category is disabled. \nIn future the after fixing the issues config file is going to be some thing like category enabled and only failing one disabled kind. This will help to keep concise version of .clang-tidy , and avoid unsupported checks in the newer version if any.\n\n\"bugprone-*,\n- bugprone-branch-clone,  ( failed one only added, that will help users which one need to enable.\""
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 63,
            "sizeDeletions": 0
        },
        {
            "number": 13,
            "revision": "796406995c191c780d7c2f0eec8107bd4e31fa37",
            "parents": [
                "4369d83e8e37833162fd4df3baea26ac1b34c772"
            ],
            "ref": "refs/changes/45/76345/13",
            "uploader": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "createdOn": 1734434499,
            "author": {
                "name": "Jayanth Othayoth",
                "email": "ojayanth@gmail.com",
                "username": "ojayanth"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "The clang-tidy configuration file is traditionally named ```.clang-tidy```, not ```.clang-tidy-cpp```\n\nAnd ```style/cpp/.clang-tidy``` already exists.\n\nCan you please modify the existing file."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "cpp-style-and-conventions.md",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "style/cpp/.clang-tidy-cpp",
                    "type": "ADDED",
                    "insertions": 39,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 63,
            "sizeDeletions": 0
        }
    ]
}