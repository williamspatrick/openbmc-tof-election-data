{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I20000a6ee15afd18c1449c0f3a5cd9d7b56235ef",
    "number": 70120,
    "subject": "Extensibility: Message Registry and Service Root",
    "owner": {
        "name": "Abhilash Raju",
        "email": "abhilash.kollam@gmail.com",
        "username": "abhilashraju"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/70120",
    "hashtags": [],
    "createdOn": 1710918973,
    "lastUpdated": 1730909731,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1710918973,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1710919077,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710919077,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1710919822,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/80925/ : SUCCESS"
        },
        {
            "timestamp": 1710949404,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(5 comments)"
        },
        {
            "timestamp": 1710950045,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1710951030,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(5 comments)"
        },
        {
            "timestamp": 1710962169,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1710993773,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1710993859,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710993859,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1710993926,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/81050/ : FAILURE"
        },
        {
            "timestamp": 1710995398,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 2:\n\n(12 comments)"
        },
        {
            "timestamp": 1710996483,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1710996708,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 3: Commit message was updated.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1710996793,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1710996798,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1710996858,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/81051/ : FAILURE"
        },
        {
            "timestamp": 1710996953,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1711005446,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711036987,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711037682,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711083950,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711084113,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711086238,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711090186,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711121848,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711342744,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711342989,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711345683,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711426463,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1711431774,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1712732906,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1719847401,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1720970659,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1730909731,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Abandoned\n\nNo longer being worked"
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "7a2e29c562fa3b7096de0346136469d7591f7da9",
            "parents": [
                "b6164cbec4dd7f5c4e6e7667b203874e11cd8b3c"
            ],
            "ref": "refs/changes/20/70120/1",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1710918973,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "What is the overall goal here?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I hope new commit message is clearer now."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "what is outside?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You say it's a concern, but you don't articulate WHY.  Also, to be frank, what you do in your downstream is your own business.  While I'm open to making things better for people rebasing and forking, we need to actually articulate the concerns with examples of what people might change, and weigh them against complexity.\n\nChanges that involve:\nModifications to DMTF owned registries without DMTF approval.\nModifications to OpenBMC owned registries without OpenBMC maintainer approval.\n\nCause problems for the Redfish ecosystem as a whole, and are explicitly called out by the spec as incorrect, because there's no way to maintain semantic versioning on the registries if everyone forks their own copy.  This patchset needs to explicitly exclude any DMTF/OpenBMC owned registries from modification.\n\nThis commit seems to be under the impression that anyone can go make changes to any registry.  If you want to extend the registries:\nA. Upstream your changes to OpenBMC/DMTF\nB. Create your own company-specific registry, that you can maintain semver on.\nC. Fork your changes, and cause ecosystem problems.\n\nThose are really the only options."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Agreed, commit message could have been better. \nIntent was not add unsupported schemas. I hope example usage and new commit message is clearer now. \nThe intent was to have an easier way to pick the needed features by reducing the spread of compiler directives across multiple files."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Agreed, commit message could have been better. \n> Intent was not add unsupported schemas. I hope example usage and new commit message is clearer now. \n\nIt's not.  I'm arguably more confused.  This patchset is\n\n1. More code\n2. Still hardcodes the behavior like was there before, just does it by registering a large number of std::function objects.\n\n> The intent was to have an easier way to pick the needed features by reducing the spread of compiler directives across multiple files.\n\nI'm very confused, because I don't see any #ifdefs removed in your patch, so I'm confused how this is supposed to be better.  The ifdefs are still there?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "What is outside? Who is an example application? An application is calling registerMessage / addRootProvider ?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "added example"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "maintainability efforts for downstream forks?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "yes"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 29,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  None of these are an OEM API, and all are either owned or versioned by OpenBMC, or DMTF, and shouldn't be directly modified.  If we are allowing folks to directly modify these, that's an issue that needs fixed."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 29,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Intention was not to modify these schemas."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "double sign off here"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 31,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets start by getting the use case articulated clearly with examples of what people are trying to do, and what guarantees we're trying to make.  I'm assuming people are creating their own message registries, but I'm not really sure.  If people are extending DMTF or OpenBMC owned registries and not contributing the change, I have no sympathy given that ownership and versioning of those is called out by name in the Redfish spec, and frankly, they're making the Redfish ecosystem worse by publishing their own versions of the schemas.\n\nAssuming we're wanting to create our own registries, in terms of actual implementation, couldn't we just use the static file hosting mechanism, and have folks put their message registry in /var/www/redfish/v1/MessageRegistries/<my_registry>, which bmcweb would look for additional registries when running MessageRegistryCollection?  That seems like it would keep the code complexity relatively the same, but allow people to host their own registries.\n\nIt seems like it would be much simpler than \"Maintain a patch against bmcweb that adds a callback\", the file contents would be governed by DMTF schema, and we wouldn't have to maintain a binary interface (which I'm not sure we really know how to do well in openBMC)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "FWIW, I plan on writing a document in the next week or two of a revamp to phosphor-logging / PDI in order to better support the Redfish LogEvent requirements, such as the Message Registry.  I'd be interested to hear some of the concerns IBM has and maybe this is something we can collaborate on."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "@Ed\nI was not aware of this /var/www/redfish/v1/MessageRegistries/<my_registry>, Can you point me to any example usage?\n\nAs I said above there is no intention to modify any of schemas or add any unsupported schemas.\n\nAfter reviewing new patch set, can you tell me how you wanted me to support this feature. I know at least 4 different ways to do the same feature. But I should start somewhere and I cannot judge what would be the maintainer's inclination before proposing one.\n\n@Patrick Can you see the intent from the latest commit? Do you have any suggestion? I am happy collaborate"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> @Ed\n> I was not aware of this /var/www/redfish/v1/MessageRegistries/<my_registry>, Can you point me to any example usage?\n\ninclude/webassets.hpp is where we load static files from today.\n\n> \n> As I said above there is no intention to modify any of schemas or add any unsupported schemas.\n\nRight, but you've modified Registries?  (Note, that schema and registry are different things).\n\n> \n> After reviewing new patch set, can you tell me how you wanted me to support this feature.\n\nOne meson option, fed into bmcweb_config.hpp and 15 ish lines of associated \"if constexpr\" to not enable TaskService and to not enable TaskEvent registry, for those that don't want it present.  This is the same way we handle adding/removing other features."
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Passing around std::functions isn't a great method of abstraction.  I'm having a lot of trouble reading this code, and what it's intending.  The old code was much easier to read, and I don't see anything that actually \"extends\" this in the way this patchset intends."
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I am open to any other implementation as long it reduces the spread of compilation directives"
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not really following what's wrong with the existing implementation of meson options.  Can you be more clear what you're trying to accomplish by reducing \"spread of compilation directives\"?\n\nRight now I don't see what this is accomplishing compared to what we use now, (meson options and constexpr if)"
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 50,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "There's way too much use of auto here.  explicit types make code easier to read, especially when we don't know what the types are."
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 189,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why were all the registries BUT openbmc removed?  I wouldn't expect the openbmc registry to be any different?"
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 189,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "yeah , there was an extra dmtf.clear(),which was not needed other cases."
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "line": 189,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Right..... which was part of the logic before, so you haven't really solved the issue?"
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why is the registry getter a nlohmann object?  We have explicit types for message registries."
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I dont understand. Can you explain?"
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Take a look at the redfish::registries::Header and redfish::registries::MessageEntry types.  These are the concrete classes we use to represent a message registry."
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is now a global object that takes memory for the whole lifecycle.  Why is that neccesary?  Can we not just read in the providers on request?"
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "line": 52,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "how? we should keep available providers somewhere right?"
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "line": 52,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  we should keep available providers somewhere right?\n\nWhy?  Storing them takes runtime memory.  I would expect them to come out of RODATA, and not need to be stored."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 25,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "type": "MODIFIED",
                    "insertions": 112,
                    "deletions": -61
                }
            ],
            "sizeInsertions": 171,
            "sizeDeletions": 62
        },
        {
            "number": 2,
            "revision": "d88786bd746036c3e291044d685342ea5029c706",
            "parents": [
                "b6164cbec4dd7f5c4e6e7667b203874e11cd8b3c"
            ],
            "ref": "refs/changes/20/70120/2",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1710993773,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "webserver_main.cpp isn't where we host configuration.  bmcweb_config.hpp is."
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I kind of see what you're getting at here, but I suspect most cases are not this simple, where you would completely remove one static function from another.\n\nIf we want to make TaskService disablable, why wouldn't we do it with a meson option, like we do other things?  I suspect this same behavior can be accomplished in a 15 line diff."
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "by meson option I believe you are referring something like -DTASK_EVENT(Correct me if I am wrong). \nIf that is the case, how may places you will use this compiler directive?. I wanted to restrict the usage of ifdef TASK_EVENT to one place, which is in webserver_main.cpp. \n\nWithout this patch I can see that it should be used in at-least in 3 files. \n1) messgae_registry.hpp\n2) server_root.hpp\n3) webserver_main.cpp\n\nThink about scenario where we have  sever such apps. These three files will be having several ifdef checks. \n\nMy want is that inclusion of application header file in wbserver_main.hpp is enough to enable everything about it"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> by meson option I believe you are referring something like -DTASK_EVENT(Correct me if I am wrong). \n\nno, I mean something like\n\n```\nif constexpr (<variable from bmcweb_config.h>)\n```\n\n> If that is the case, how may places you will use this compiler directive?. \n\nAs many as are required to accomplish the task.\n\n> I wanted to restrict the usage of ifdef TASK_EVENT to one place, which is in webserver_main.cpp. \n\nTaskEvent isn't defined in webserver_main.cpp at all.  If I understand what you're asking, you would first have to promote the registry routes to webserver_main.cpp?  What are you trying to accomplish by restricting the ifdef to one file?  If you want a complete list, they are all available in meson_options.txt.\n\n> \n> Without this patch I can see that it should be used in at-least in 3 files. \n> 1) messgae_registry.hpp\n\ngit ls-files | grep message_registry.cpp\n\nDoesn't return any results.  Can you please just link to the line you're talking about on github.\n\n> 2) server_root.hpp\n\nI'm assuming this was meant to be \"service_root.hpp\" ?\nIndividual registries aren't registered in ServiceRoot, so no, this file wouldn't need to be modified.\n\n> 3) webserver_main.cpp\n> \n> Think about scenario where we have  sever such apps. These three files will be having several ifdef checks. \n\nI'm assuming you meant \"several such apps\"?  Yes, they will have several ifdef checks, just like we already do in redfish.hpp\n\nhttps://gerrit.openbmc.org/plugins/gitiles/openbmc/bmcweb/+/1f56a3a6031ba5992d52532cf2d32c76253c9167/redfish-core/include/redfish.hpp#74\n\n> \n> My want is that inclusion of application header file in wbserver_main.hpp is enough to enable everything about it\n\nWhy is that better?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I guess, before responding to the individual questions, what are you overall trying to accomplish?  You seem to want to put all the ifdefs in one file, but you don't really answer WHY you want to do that, or what doing that enables for you.\n\nThe one example you came up with, Removing TaskEvent registry, might not be the best example, given that technically anything in the system can return an async Task, so it needs to be enabled unless all callers have been changed to not use async.  Is there a different example you can come up with that might be simpler?\n\nReading between the lines a bit, is this related to the License changes?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Look at message_registries.hpp line no 25 . The task related headers are removed.\nWhich means message_registry is no more depending on task.\nAt line 508 task.hpp, messages related to task is registered here.\n\nThis will be invoked by [redfish.hpp](https://github.com/openbmc/bmcweb/blob/master/redfish-core/include/redfish.hpp#L228)\n\nYes I took wrong example of task to demonstrate the usage. But you can get the overall idea here.\n\nIf you want to remove task feature , then we can do it at single place which is  [redfish.hpp](https://github.com/openbmc/bmcweb/blob/master/redfish-core/include/redfish.hpp#L228) \n\nFor other applications disabling will be done at  [webserver_main.cpp](https://github.com/openbmc/bmcweb/blob/master/src/webserver_main.cpp#L81). \n\nThe overall ideas is to co-locate all related data  to single place. It will be easier to enable or disable an application then. \n\nI wanted to even remove entire code starting from [here](https://github.com/openbmc/bmcweb/blob/master/src/webserver_main.cpp#L76) to [here](https://github.com/openbmc/bmcweb/blob/master/src/webserver_main.cpp#L130) with couple of lines. \nI thought that that would be bigger change set then. \n\nIf you are interested I can incorporate those changes too in this patch set. \n\nBut it all depends on how community see it as a valuable feature or not. Personally I feel it  will have value addition in long term maintenance point of view."
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Yes for me it is license. But in general for any application that cannot be upstreamed at the moment for various reasons. We need some flexible customization points from bmcweb to help those application keep as downstream app."
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> But you can get the overall idea here.\n\nNo, I don't get the overall idea here.  I understand, you want things enabled/disabled with a single ifdef in one location.  Why is that helpful compared to having multiple locations?\n\n> Yes for me it is license.\n\nUnderstood, then lets talk about this in terms of a license implementation.  Can you point me at how this makes license better?  Ideally in your codebase that you can show me how it makes supporting license easier?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Right now changes belonging to license feature spread across multiple files(message_registry, server_root and webserver_main) . We wanted to move all those changes to licnese_sevice.hpp (as I shown in task.hpp ) . Then we just need to just include license_sevice.hpp in webserver_main.cpp to enable license feature. This is  going to be a single line change for every upstream rebase. the license service.hpp can be placed outside the bmcweb directories( meson include path change required in this case) ."
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Right now changes belonging to license feature spread across multiple files(message_registry,\n\nThis is the part I'm not understanding;  I would not expect License schema to effect message Registry at all.  They're two different schemas, used for two different purposes.\n\n> , server_root \n\nWhat is \"server_root\"?\n\n> and webserver_main)\n\nWhy does it make changes to webserver main? I would expect change to be made to redfish.hpp.  In addition, the schema would need to be added, that makes changes to update_schemas.py, and the static files directory.\n\n> . We wanted to move all those changes to licnese_sevice.hpp (as I shown in task.hpp ) . Then we just need to just include license_sevice.hpp in webserver_main.cpp to enable license feature.\n> This is  going to be a single line change for every upstream rebase. the license service.hpp can be placed outside the bmcweb directories( meson include path change required in this case) .\n\nCan't you already do that though?\n\nIn redfish.hpp, put:\nrequestRoutesLicenceCollection()\n\nand let your code do whatever it wants?\n\n\n\nOne thing that I've thought for a long time is that the odata links:\n\nhttps://github.com/openbmc/bmcweb/blob/e10f0176d66a2737edefec71f40376566769712b/redfish-core/lib/service_root.hpp#L88C6-L88C76\n\nCould be generated automatically based on the registered routes in the router.  If the request would 404, we don't add the route.  Maybe that's an incremental improvement you could make?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "\"This is the part I'm not understanding; I would not expect License schema to effect message Registry at all. They're two different schemas, used for two different purposes.\"\n\n[This](https://redfish.dmtf.org/registries/License.1.0.0) is the DMTF approved license message. This should be served via /redfish/v1/Registries/<str>/<str>/ to redfish clients. How can we make it work with out modifying message_registries.hpp?\nShould BMCWEB_ROUTE(app, \"/redfish/v1/Registries/License/License\")  work ? Does bmcweb has logic to select more specific URL instead of parameterised one while routing?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "What is \"server_root\"? \nSorry It was typo, I mean service_root here. \n\nWhy does it make changes to webserver main? \nI could see modification are going in  both  webserver_main.hpp and redfish.hpp. I don't know which one to choose. I thought OEM specific changes will fall in webserver_main.hpp"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "\"Could be generated automatically based on the registered routes in the router\" I did not get it fully. \npopulating the service_root urls from the registered routes seems to be a good idea. Have you done it ? or you want some one to explore more on this idea?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  Have you done it ? or you want some one to explore more on this idea?\n\nI have not attempted it yet, just something that would incrementally help with this plugability problem.\n\n\n> Should BMCWEB_ROUTE(app, \"/redfish/v1/Registries/License/License\") work ? Does bmcweb has logic to select more specific URL instead of parameterised one while routing?\n\nToday this would result in a conflict, but that's just behavior in the router.  We could make this kind of thing call both or override a specific path.\n\nThe other option is we could just register 3 routes, one for each registry, that way your downstream registry route wouldn't conflict.\n\n\n> How can we make it work with out modifying message_registries.hpp?\n\nYou didn't mention that you're adding two things, Licence registry AND license service.  Adding pluggable registries is considerably harder than adding pluggable routes, because the registry needs to be made available.  What I would do is\n\n1. Move the registry generation script to run during the build, instead of running on checkin.\n2. Add code to make the script search for new registry file\n3. Have the script generate all the possible registries and error_messages.hpp/cpp files.\n4. As part of your bbappend, install the new registry file into the rootfs for bmcweb to find.\n5(optional) make all the registries installed with their own recipe, and have bmcweb generate all of them.\n\nThis way, nobody is maintaining a patch, even a single line, and people can trivially plug in their own registries if they like.\n\n\n\nI think that, combined with the above automatic hyperlinking, and BMCWEB_ROUTE overriding would get you everything you want, right?"
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "line": 517,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Yes auto generation or registry during build time is a better solution for plug-ability. I am happy to manage it via bbappend than a code patch. Combining auto registration of registry and auto population of service root from bmc-route will solve the plug-ability issue I have with license manager. If that is the plan then I no more required this commit."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "type": "MODIFIED",
                    "insertions": 106,
                    "deletions": -62
                }
            ],
            "sizeInsertions": 188,
            "sizeDeletions": 64
        },
        {
            "number": 3,
            "revision": "b177a899174c8757b86663967abfa1d1e899066b",
            "parents": [
                "b6164cbec4dd7f5c4e6e7667b203874e11cd8b3c"
            ],
            "ref": "refs/changes/20/70120/3",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1710996708,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is this still being worked?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Not at present"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/task.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/lib/message_registries.hpp",
                    "type": "MODIFIED",
                    "insertions": 106,
                    "deletions": -62
                }
            ],
            "sizeInsertions": 188,
            "sizeDeletions": 64
        }
    ]
}