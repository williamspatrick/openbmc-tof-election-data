{
    "project": "openbmc/libpldm",
    "branch": "main",
    "id": "Ib6cbff302be0e52d30125bcf08687ba42f7fc93f",
    "number": 77095,
    "subject": "bindings: C++ binding for parsing PLDM fw package",
    "owner": {
        "name": "Alexander",
        "email": "alexander.hansen@9elements.com",
        "username": "pointbazaar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libpldm/+/77095",
    "hashtags": [],
    "createdOn": 1736175939,
    "lastUpdated": 1736310207,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1736175939,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1736175961,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1736175961,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1736175978,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/97702/ : FAILURE"
        },
        {
            "timestamp": 1736176357,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1736176401,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1736176401,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1736176720,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/97703/ : SUCCESS"
        },
        {
            "timestamp": 1736226187,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(18 comments)"
        },
        {
            "timestamp": 1736262970,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1736262991,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1736262991,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1736263018,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 3:\n\n(18 comments)"
        },
        {
            "timestamp": 1736263298,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/97745/ : SUCCESS"
        },
        {
            "timestamp": 1736310207,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@codeconstruct.com.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n(13 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "8197c034e29200b7ae40f84a82e511bf45bc8d90",
            "parents": [
                "bd092fc76d869cce3df355db12da90089113f555"
            ],
            "ref": "refs/changes/95/77095/1",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1736175939,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "meson.options",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tests/bindings/cxx/package_parser_test.cpp",
                    "type": "ADDED",
                    "insertions": 190,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/types.hpp",
                    "type": "ADDED",
                    "insertions": 89,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/utils.hpp",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "type": "ADDED",
                    "insertions": 194,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "type": "ADDED",
                    "insertions": 338,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/utils.cpp",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "tests/bindings/cxx/meson.build",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 923,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "988ff6bf6067f8498f02ae04584b973ce439f8db",
            "parents": [
                "bd092fc76d869cce3df355db12da90089113f555"
            ],
            "ref": "refs/changes/95/77095/2",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1736176357,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I'm a bit wary of wholesale importing things from openbmc/pldm."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Added some explanation there of the changes done to the original code.\n\n> I'm a bit wary of wholesale importing things from openbmc/pldm.\n\nI thought that would be the place to find the best pldm related code \ud83d\ude04 with all the best practices."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Hi Alexander, thanks for kicking this off. I do have some reservations, which I've covered inline."
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "line": 2,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I guess this is in the vein of what libgpiod does with its separate libraries, but I'd like to understand if that's definitely the right direction, rather than providing one library with both C and C++ APIs."
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "line": 2,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "I don't have any preference there.\n\nProbably easier for the user to have a single library.\n\nBut since the C++ binding is optional then libpldm != libpldm.\n\nIf it's not optional then the size of the library might be too big for some people because of the additional code. Not sure if size is a big topic.\n\nLet me know what you want to go with \ud83d\udc4d"
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "line": 2,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Well, we already have the meson option to drop the transport APIs and implementations from the build. I think the specific approach could be more fine-grained, but that depends on people actually caring about it too.\n\nI think it's reasonable to allow customisation. The only trick would be not installing the headers for the symbols that configured out."
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "line": 9,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Are the headers installed? Which headers?"
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "line": 9,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "They were not installed but the newest revision has an ```install_headers``` statement similar to what is there for libpldm.\n\nChecked with ```DESTDIR=/tmp/install meson install``` that only the headers we want are installed."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I don't like this \ud83d\ude1e\n\nThe newer libpldm iterator-style APIs are a big improvement. We should do the conversion where necessary.\n\nImplementation of these methods shouldn't be doing any raw indexing into the provided buffer. That's the responsibility of the C APIs."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Makes sense. Agree that the stuff from libpldm should not be re-implemented in the binding.\n\nSince the firmware_update.h header is quite big, can you suggest which functions/macros would be appropriate? I have split the functions here up into more smaller functions, so the indentation should be less and easier to see which does what.\n\nI found several macros (ew, C macros) of the form ```foreach_pldm_*``` in the libpldm headers, but unsure if they are complete (covering all structs) and which is appropriate to use.\n\nPerhaps this is what you meant with\n> We should do the conversion where necessary.\n\n? That not all of these iterators are implemented?"
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "> Perhaps this is what you meant with\n>\n> > We should do the conversion where necessary.\n>\n> ? That not all of these iterators are implemented?\n\nYes, not all messages with variable length substructures have iterators. The iterator approach was introduced only recently:\n\nhttps://github.com/openbmc/libpldm/commit/3a2c6589c5660d2066b612bae28ca393a8aa1c2b\n\n> I found several macros (ew, C macros) ... \n\nI'm not sure how the commentary helps? \n\n> ... of the form foreach_pldm_* in the libpldm headers\n\nGiven the code here, I'd rather than macros.\n\nSo to set expectations, currently I don't plan to merge the C++ binding without making improvements to the C API to eliminate most of the implementation of these APIs."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 182,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why is this necessary?"
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 182,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "It's necessary since the compiler does not accept the implicit conversion in this case. I inlined these expressions and got some errors like below.\n```\nFAILED: bindings/cxx/libpldmcxx.so.p/package_parser.cpp.o \nc++ -Ibindings/cxx/libpldmcxx.so.p -Ibindings/cxx -I../bindings/cxx -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -Wpedantic -Werror -std=c++23 -Og -g -DLIBPLDM_API_DEPRECATED -DLIBPLDM_API_TESTING -fPIC -isystem../include -isysteminclude -MD -MQ bindings/cxx/libpldmcxx.so.p/package_parser.cpp.o -MF bindings/cxx/libpldmcxx.so.p/package_parser.cpp.o.d -o bindings/cxx/libpldmcxx.so.p/package_parser.cpp.o -c ../bindings/cxx/package_parser.cpp\n../bindings/cxx/package_parser.cpp: In static member function \u2018static std::expected<long unsigned int, std::__cxx11::basic_string<char> > pldm::fw_update::PackageParser::parseCompImageInfoArea(pldm::fw_update::Package&, pldm::fw_update::ComponentImageCount, const std::vector<unsigned char>&, size_t)\u2019:\n../bindings/cxx/package_parser.cpp:191:63: error: cannot bind packed field \u2018compImageInfo.pldm_component_image_information::comp_identifier\u2019 to \u2018short unsigned int&\u2019\n  191 |                                                 compImageInfo.comp_identifier,\n      |                                                 ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\nninja: build stopped: subcommand failed.\n```"
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 182,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Ah, well, that's the result of exposing packed structs. Hence:\n\nhttps://github.com/openbmc/libpldm/blob/main/docs/checklists/changes.md?plain=1#L134-L135\n\nAny API making use of packed structs is legacy in my view. This code demonstrates why."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 235,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I don't think libraries should be throwing `std::runtime_error()`. You might as well be calling `abort()` in terms of the process life. Libraries can't have that luxury."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 235,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "removed the exceptions"
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 292,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Why is any of this the responsibility of the binding implementation? All of this should be the responsibility of the C APIs. The C++ APIs should just be a wrapper, improving the ergonomics of the C API using the features of the C++ language."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 292,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Having the ```std::format``` strings is nice for debugging in the error case. \nIt can provide more information and help to create a correct PLDM package faster.\n\nInstead of having error codes or fixed strings.\nSo it makes sense to me to have that be part of the binding.\n\nCan we discuss a specific section of code and how it can be better done with an equivalent libpldm call?\n\n'any of this' includes creating the C++ object with the package header information and component info and such, which cannot be done with the C API."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 292,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Sorry, my comment wasn't as specific as it should have been. I was not concerned about the use of `std::format`.\n\nThe code is parsing the provided message byte buffer. That's not the responsibility of the C++ binding, that's the core responsibility of the (C) library. Internally, libpldm provides a number of mechanisms to ensure spatial memory safety and correct handling of endianness that are both ergonomic to use and generate code with good performance. Specifically, the APIs provided by `src/msgbuf.h`. Those are completely dodged by this implementation. This is not code I wish to maintain. Reviewing stuff like this requires constant vigilance to prevent CVEs (which I will fail at), whereas use of the msgbuf APIs allows me to assume no unsafe accesses are performed or incorrect representations generated, or if there are bugs of this nature, they can be fixed centrally to the benefit of the rest of the library implementation.\n\nThere should be C APIs to extract the necessary data to (unpacked) C structs, and from there you can populate your C++ classes (though, possibly it would make sense to embed the C struct as a member in the class). If we do not yet have C APIs to do the job, then it's a deficiency of the (C) library that must first be fixed."
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 302,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This is a UUID?"
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "line": 302,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Yes, DSP0267 (version 1.3.0), page 1011, **PackageHeaderIdentifier**\nfor package format version 1.0"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 19,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "The whitespace thoughout seems quite messed up. I feel like it shouldn't pass clang-format. Does it actually? Are we confident it's actually being processed?"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 19,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "It should be as intended by the .clang-format file.\n\nThe indentation is different from what is in the 'pldm' repo, which makes sense since they use different .clang-format files.\n\n```\ndiff ~/upstreaming/libpldm/.clang-format ~/upstreaming/pldm/.clang-format  | wc -l\n221\n```"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 60,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I prefer we design the APIs to conform to `noexcept`. Can you try using `std::expected` instead?\n\nhttps://en.cppreference.com/w/cpp/utility/expected"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 60,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Yes, error as value is better \ud83d\udc4d. Reworked the functions to return the ```std::expected<T, std::string>```"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 62,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Is there a reason for this to be virtual? I'd prefer it be static and produce a polymorphic const type rather than mutate an existing instance."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 62,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Removed most of the 'virtual' stuff from the newest revision.\nAlso introduced 'class Package' to represent a PLDM FW Package.\n\nWhich can then be separate from the parser."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Going with the comment immediately above, this is why I'm not a fan, because we can instances that are in the zombie state of existing but failed to successfully parse the buffer."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 68,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "For the new revision, i removed all the instance variables from 'class PackageParser'.\n\nThere are now classes 'PackageHeaderInfo' and 'Package' to contain the parsing result.\n\nSo the API now primarily has one function to parse the package header, and then the 'parse' function which is static as requested.\n\nIt is still 2 function calls to parse, do you want it combined?\nThen it would only be one call to parse the entire package."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 151,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "I'd prefer we avoid extension for this. I expect we can handle it directly in the implementation of parse()?"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 151,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "removed the PackageParserV1 class."
                },
                {
                    "file": "bindings/cxx/types.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This is all a bit much. Can we not use the message structs from the C headers?"
                },
                {
                    "file": "bindings/cxx/types.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "The point of the binding is to make things easier. Of course everything is possible to do in plain C. But then we also have the plain C pointers and everything that comes along.\n\nI'm not sure how to translate\n```cpp\nusing VendorDefinedDescriptorInfo =\n\t\tstd::tuple<VendorDefinedDescriptorTitle,\n\t\t\t   VendorDefinedDescriptorData>;\n\tusing Descriptors = std::map<\n\t\tDescriptorType,\n\t\tstd::variant<DescriptorData, VendorDefinedDescriptorInfo> >;\n\tusing DescriptorMap = std::unordered_map<eid, Descriptors>;\n\n```\n\ninto C structs without getting into the manual memory management.\n\nFor example this one,\n```c\nint decode_firmware_device_id_record(\n|       const uint8_t *data, size_t length,\n|       uint16_t component_bitmap_bit_length,\n|       struct pldm_firmware_device_id_record *fw_device_id_record,\n|       struct variable_field *applicable_components,\n|       struct variable_field *comp_image_set_version_str,\n|       struct variable_field *record_descriptors,\n|       struct variable_field *fw_device_pkg_data);\n```\n\nthe ```struct variable_field``` can be anything.\nSo there is heavy reliance on the programmer to always have the spec/docs at hand to know how to cast it and iterate over it. Which makes it time-consuming to work with the PLDM.\n\nIn the C++ types in this header, all the members have their own types.\n\n```\n// FirmwareDeviceIDRecords\n\tusing DeviceIDRecordCount = uint8_t;\n\tusing DeviceUpdateOptionFlags = std::bitset<32>;\n\tusing ApplicableComponents = std::vector<size_t>;\n\tusing ComponentImageSetVersion = std::string;\n\tusing FirmwareDevicePackageData = std::vector<uint8_t>;\n\tusing FirmwareDeviceIDRecord =\n\t\tstd::tuple<DeviceUpdateOptionFlags, ApplicableComponents,\n\t\t\t   ComponentImageSetVersion, Descriptors,\n\t\t\t   FirmwareDevicePackageData>;\n```\n\nEven if it's just renaming of the underlying. This makes it easy to e.g. pass a ```ComponentImageSetVersion``` as a function parameter and later be able to know what it is based on the types alone and their relationships in this header."
                },
                {
                    "file": "bindings/cxx/types.hpp",
                    "line": 87,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Adding `using` aliases for complex generic data structures is one thing, but adding individual `using` aliases for individual message fields is the wrong way to tackle the problem IMO. Pass a pointer/reference to the message struct around instead, and this problem disappears?\n\nFunctions defined like below have poor form and are not something I want to maintain:\n\n```\nint decode_firmware_device_id_record(\n|       const uint8_t *data, size_t length,\n|       uint16_t component_bitmap_bit_length,\n|       struct pldm_firmware_device_id_record *fw_device_id_record,\n|       struct variable_field *applicable_components,\n|       struct variable_field *comp_image_set_version_str,\n|       struct variable_field *record_descriptors,\n|       struct variable_field *fw_device_pkg_data);\n```\n\nThere are far too many ways to shoot yourself in the foot with this. It's just bad API design. We should try to do better.\n\nParticularly, from [[1](https://github.com/openbmc/libpldm/blob/main/docs/checklists/changes.md#philosophy-and-influences)], see:\n\n[How Do I Make This Hard to Misuse?](https://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html)\n\nand\n\n[What If I Don't Actually Like My Users?](https://ozlabs.org/~rusty/index.cgi/tech/2008-04-01.html)"
                },
                {
                    "file": "bindings/cxx/utils.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Any logic required should exist in the C API and be wrapped by the C++ API. The C++ API should not be providing behaviour beyond the C API."
                },
                {
                    "file": "bindings/cxx/utils.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Removed the ```std::replace_if``` \ud83d\udc4d"
                },
                {
                    "file": "bindings/cxx/utils.cpp",
                    "line": 27,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "That's not really resolving my concern, but since it's not part of the public API, then it doesn't matter so much."
                },
                {
                    "file": "bindings/cxx/utils.hpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "Is this header installed?"
                },
                {
                    "file": "bindings/cxx/utils.hpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "no, i did not include it in the list in the newest revision.\nIt's used internally in package_parser.cpp"
                },
                {
                    "file": "meson.options",
                    "line": 6,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This should be an array type with choices, like the `oem` option.\n\n```\noption('bindings', type: 'array', description: 'Language bindings for libpldm', choices: ['c++'], value: ['c++'])\n```"
                },
                {
                    "file": "meson.options",
                    "line": 6,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Done. A little surprised that you consider the binding as enabled by default."
                },
                {
                    "file": "meson.options",
                    "line": 6,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "All options need to be enabled by default so that they are exercised by CI.\n\nDistros like OpenBMC and other integrations always have to set specific options as required. They don't get to skate by on the defaults."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "meson.options",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tests/bindings/cxx/package_parser_test.cpp",
                    "type": "ADDED",
                    "insertions": 190,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/types.hpp",
                    "type": "ADDED",
                    "insertions": 89,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/utils.hpp",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "type": "ADDED",
                    "insertions": 194,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "type": "ADDED",
                    "insertions": 338,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/utils.cpp",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "tests/bindings/cxx/meson.build",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 924,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "e184d16d58b57d8dc8c1a60786a2bda732c05010",
            "parents": [
                "bd092fc76d869cce3df355db12da90089113f555"
            ],
            "ref": "refs/changes/95/77095/3",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1736262970,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "ready for round 2 \ud83d\ude04"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "A requirement that I have for accepting this is that the C++ ABI is controlled in the same way as the C ABI, using the `LIBPLDM_ABI_*` annotations. We need to figure out how to make that work, if the obvious approach doesn't."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 39,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "whitespace is still busted throughout \ud83d\ude1e"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 69,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This isn't documented."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 71,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "`uintmax_t` is a bad type and should be avoided in public APIs. I think it should be `size_t` anyway?"
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "This shouldn't be true ..."
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "line": 120,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@codeconstruct.com.au",
                        "username": "amboar"
                    },
                    "message": "... especially given this."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "meson.options",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tests/bindings/cxx/package_parser_test.cpp",
                    "type": "ADDED",
                    "insertions": 205,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/types.hpp",
                    "type": "ADDED",
                    "insertions": 89,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/utils.hpp",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/package_parser.hpp",
                    "type": "ADDED",
                    "insertions": 135,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/meson.build",
                    "type": "ADDED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/package_parser.cpp",
                    "type": "ADDED",
                    "insertions": 427,
                    "deletions": 0
                },
                {
                    "file": "bindings/cxx/utils.cpp",
                    "type": "ADDED",
                    "insertions": 27,
                    "deletions": 0
                },
                {
                    "file": "tests/bindings/cxx/meson.build",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 976,
            "sizeDeletions": 0
        }
    ]
}