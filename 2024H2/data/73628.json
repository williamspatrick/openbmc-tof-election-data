{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I8aed28716848fef3e4aebebf129f84d52f6d48ce",
    "number": 73628,
    "subject": "event logs: consolidate: get entry",
    "owner": {
        "name": "Alexander",
        "email": "alexander.hansen@9elements.com",
        "username": "pointbazaar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/73628",
    "hashtags": [],
    "createdOn": 1723480986,
    "lastUpdated": 1724748747,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1723480986,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1723481017,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1723481017,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1723481232,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 2: New patch set was added with same tree, parent tree, and commit message as Patch Set 1."
        },
        {
            "timestamp": 1723481277,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1723481277,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1723481280,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nCopied votes on follow-up patch sets have been updated:\n* Verified-1 has been copied to patch set 2 (copy condition: \"changekind:NO_CHANGE\").\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/89566/ : ABORTED"
        },
        {
            "timestamp": 1723483179,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/89574/ : SUCCESS"
        },
        {
            "timestamp": 1723487061,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1723487340,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1723539483,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1723541107,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1723569233,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1723841770,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 3: Patch Set 2 was rebased on behalf of Alexander <alexander.hansen@9elements.com>\n\nCopied Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR **changekind:TRIVIAL_REBASE** OR is:MIN\")\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1723841809,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1723841809,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1723843228,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/89904/ : SUCCESS"
        },
        {
            "timestamp": 1724147662,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1724147703,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1724147703,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1724149246,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/90119/ : SUCCESS"
        },
        {
            "timestamp": 1724149781,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1724695787,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Code-Review-1\n\n(2 comments)"
        },
        {
            "timestamp": 1724748747,
            "reviewer": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "message": "Abandoned"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "15ba590c258231b0af6e7e18a3e96879f87aadad",
            "parents": [
                "18fb3a1313763163bab65819f8af4cac9b032ec9"
            ],
            "ref": "refs/changes/28/73628/1",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1723480986,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/redfish.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -63
                }
            ],
            "sizeInsertions": 59,
            "sizeDeletions": 64
        },
        {
            "number": 2,
            "revision": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
            "parents": [
                "bbe4e35bd5b4f2eea81d408bad4def7b7b0e900a"
            ],
            "ref": "refs/changes/28/73628/2",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1723481232,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "NO_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Somewhere, ideally in the first patch in the series, we need a better commit message about:\n\n1. Why these are being combined.\n2. What user impacts there will be by combining these.\n3. What features will no longer work once these are combined.\n4. Testing that we'll do to combine these.\n\n\n\nOverall, I don't see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API.  That needs documented, discussed, and probably put behind an option flag so users can get the old behavior if they want it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "> Overall, I don't see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API\n\nWhich impacts? I see that the rsyslog based entries will be able to be resolved and deleted individually. \nAdditionally there is a small performance impact.\n\nOtherwise there should be no impact from the current iteration of the patch series. \n\nRemember, the querying of the event log collection is still guarded by the meson option. So the client will have the same event logs returned as before.\n\nThe clients using rsyslog backend will additionally have the \"Resolved\" property in their json response.\n\n> Overall, I don't see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API\n\nFor the testing, what do you have in mind? What would you like to see tested? I assume this will require further changes to the function signatures to decouple them from dbus and the ```/var/log/redfish``` respectively. Some ideas what we can test\n\n- presence of some properties in the response json\n- maybe we can make the location of the rsyslog logs (```/var/log/redfish```) configurable. Then the behavior of the implementation  on that backend can also be tested, including\n  - get all logs\n  - delete an individual log entry\n  - resolve an individual log entry\n  - clear logs\n\nFor the phosphor-logging backend i can imagine it does not require much testing from bmcweb side since bmcweb just uses it without much processing on bmcweb side."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Which impacts? \n\nI'm not going to enumerate all of them, but off the top of my head:\nProperty differences in result\nDifferences in LogEntry delete behavior\nDifferences in EventService behavior for the two backends.\nDifferences in Circular Buffering/overflow behavior\nDifferences in behavior if one backend isn't present.\nPolling Performance (as you mentioned).  My understanding was that this wasn't a \"small\" impact.  For large number (thousands) of entries my understanding is that it's quite a large impact.\nDifferences in Paging capabilities.\n\n\nI suspect the thing we discussed in discord about you adding an option mode where you get \"both\" logs under different URIs probably makes the most sense for now, and we can work through all the above over time, especially if this is just a dev use case, there's no sense in going through all the effort.\n\n\n> For the testing, what do you have in mind? What would you like to see tested?\n\nIn a short sentence, all behavior that was changed needs tested.  This is also written down in TESTING.md if you want to read that.  You've changed a lot of behavior in this patch series, so we need to at least try to test all the use cases you've changed.  I suspect you've broken the usage contract for a vast majority of them (see impacts above)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "> usage contract\n\nIs this usage contract written down somewhere? Do you mean the redfish specification? Or are you talking about client implementations that were coded to match the specific bmcweb implementation?\n\n> Property differences in result\n\nSince most of the properties are optional in redfish, the result is still redfish compliant. There is no regression for individual log entries. If an entry had a property before, it will have that property after these patches.\n\n> Differences in Circular Buffering/overflow behavior\n\nThis specific patch is just about GET of an individual log entry\n\n> adding an option mode where you get \"both\"\n\nI don't like this idea. I want to get all the entries without any options. There is no need for options, one implementation can cover all use-cases. It just needs to be a good implementation. No one needs to worry about details of how Event Log works. It can just work without any need for configuration. Just needs some patches.\n\n> You've changed a lot of behavior in this patch series\n\nIt would make it a lot easier for me if any concerns were directed at individual patches. We can talk about the series as a whole on discord or something, but it's difficult for me if the whole series is discussed as a comment on a single patch.\n\nThe single patch is up for debate on the specific changes done in that patch."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Is this usage contract written down somewhere?\n\nIn the code behavior of the user facing interface is the best resource to look at.  Look for things like property changes (entries that show up missing properties), full-behavior changes, or performance changes.\n\n>  the result is still redfish compliant\n\n\"Redfish compliant\" doesn't mean anything.  This has for sure broken the rules on how circular collections are handled, so it's not compliant.  I'm also fairly sure it breaks interop profiles.\n\n> This specific patch is just about GET of an individual log entry\n\nThat doesn't change the point.\n\n\n> I want to get all the entries without any options. \n\nWhy?\n\n\n> one implementation can cover all use-cases.\n\nYou and I disagree on this point, which I'm happy to chat about if you'd rather.  I was trying to unblock you by letting you add an option key that you can go communicate the benefits of to other system owners/clients.  But if you'd rather have all the patches wait on that, that's fine too.\n\n\n> No one needs to worry about details of how Event Log works\n\nThis is an idealized statement, but the reality is that the two logging mechanisms support different features."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1662,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Nit, new code is supposed to use sdbusplus::message::object_path.  I realize this code was just moved, so I don't expect you to change it, just FYI."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1662,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "i would have rather not moved this code. But since it's a .hpp file (why?)\nand functions are not declared somewhere above, i had to move it so it would compile, since i am calling it from somewhere higher than it was called previously.\n\nLooking at this mess, how can we fix it? Should i pre-declare these functions\ninstead of moving them? Should we make this whole file a .cpp?\n\nIt's kind of ridiculous to be moving code around and creating huge diff for no good reason."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1662,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> i would have rather not moved this code. But since it's a .hpp file (why?)\n> and functions are not declared somewhere above, i had to move it so it would compile, since i am calling it from somewhere higher than it was called previously.\n> \n> Looking at this mess, how can we fix it? Should i pre-declare these functions\n> instead of moving them? Should we make this whole file a .cpp?\n> \n> It's kind of ridiculous to be moving code around and creating huge diff for no good reason.\n\nI suspect you misread the part where I said \"I don't expect you to change it\".  This was just something I noticed because the code moved and I did the review that might be fixed in the future.\n\nSure, we can debate the (over) use of headers in bmcweb.  In fact, that problem is even documented in HEADERS.md if you want to contribute to that effort of trying to find a solution.  Re-hashing it in an unrelated code review comment doesn't really fix the problem I'm afraid."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1662,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1753,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "So we try to find an entry in the Redfish log files, then fall back to dbus?  That seems error prone.  Is there any way to make the branching decision higher based on the ID + the meson option?"
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1753,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "> Is there any way to make the branching decision higher based on the ID + the meson option?\nThe point of this patch series is to remove the meson option \ud83d\ude0a\n\n> That seems error prone\nHow is the fallback error prone? Which errors do you expect? \n\nThe entry ids are disjoint. If we do not find it in the redfish logs, we look on dbus. If we do not find it on dbus, it does not exist.\n\nSo it is found or not found as before."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1753,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The entry ids are disjoint.\n\nWhere is that documented?  There's nothing preventing a logging daemon from creating conflicting IDs compared to the rsyslog based implementation, and there's been discussions in the past about simplifying the rsyslog IDs down to the monotonic journal id that would now be not possible if we're doing an explicit merge."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1753,
                    "reviewer": {
                        "name": "Alexander",
                        "email": "alexander.hansen@9elements.com",
                        "username": "pointbazaar"
                    },
                    "message": "> Where is that documented? \n\nI did not find it documented anywhere. Same as the mysterious usage contract that seems to be going on with the redfish clients \ud83d\ude0a\n\n> there's been discussions in the past about simplifying the rsyslog IDs down to the monotonic journal id that would now be not possible if we're doing an explicit merge.\n\nif that id is monotonic and starts at some minimum value ```x``` then we can always offset it by ```n``` where ```n``` is the max amount of event logs expected to be provided by phosphor-logging backend (e.g. the desired 10000 or whatever)\n\nSo then externally the event log entries will have a unique id and be disjoint based on the backend."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 1753,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Where is that documented? \n> \n> I did not find it documented anywhere. Same as the mysterious usage contract that seems to be going on with the redfish clients \ud83d\ude0a\n\nSo then lets keep them separate.  I'm not aware of any requirement here that keeps the dbus IDs monotonic.  We treat the dbus ids as unique.\n\n> \n> > there's been discussions in the past about simplifying the rsyslog IDs down to the monotonic journal id that would now be not possible if we're doing an explicit merge.\n> \n> if that id is monotonic and starts at some minimum value ```x``` then we can always offset it by ```n``` where ```n``` is the max amount of event logs expected to be provided by phosphor-logging backend (e.g. the desired 10000 or whatever)\n> \n> So then externally the event log entries will have a unique id and be disjoint based on the backend.\n\nYep, that's fair, if you assume that Redfish log collection behavior doesn't require circular buffer behavior."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/redfish.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -63
                }
            ],
            "sizeInsertions": 59,
            "sizeDeletions": 64
        },
        {
            "number": 3,
            "revision": "69ccf06c0a903b48ebcb942c55347fbf5cd12136",
            "parents": [
                "cf995c78f31fcdae4e50563fd4ac2e32f84c16df"
            ],
            "ref": "refs/changes/28/73628/3",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1723841770,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/redfish.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": -63
                }
            ],
            "sizeInsertions": 59,
            "sizeDeletions": 64
        },
        {
            "number": 4,
            "revision": "962db007ffaf30f2962a24ab0acaab0fcc500f64",
            "parents": [
                "f5103dc1da6a6da80b0bdf095a8416342cef0eb9"
            ],
            "ref": "refs/changes/28/73628/4",
            "uploader": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "createdOn": 1724147662,
            "author": {
                "name": "Alexander",
                "email": "alexander.hansen@9elements.com",
                "username": "pointbazaar"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/redfish.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 34,
                    "deletions": -62
                }
            ],
            "sizeInsertions": 58,
            "sizeDeletions": 63
        }
    ]
}