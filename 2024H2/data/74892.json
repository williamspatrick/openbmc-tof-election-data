{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "I1f1f12bc4763b7782bd9768d5472485d3f3c45d5",
    "number": 74892,
    "subject": "Further telemetry error handling adjustments",
    "owner": {
        "name": "Michal Orzel",
        "email": "michalx.orzel@intel.com",
        "username": "morzelx"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/74892",
    "hashtags": [],
    "createdOn": 1727354615,
    "lastUpdated": 1728470726,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1727354615,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1727354665,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1727354665,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1727356019,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/92331/ : SUCCESS"
        },
        {
            "timestamp": 1727688598,
            "reviewer": {
                "name": "Adrian Ambro\u017cewicz",
                "email": "adrian.ambrozewicz@linux.intel.com",
                "username": "aambroze"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1727861180,
            "reviewer": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1727980920,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1728037947,
            "reviewer": {
                "name": "Adrian Ambro\u017cewicz",
                "email": "adrian.ambrozewicz@linux.intel.com",
                "username": "aambroze"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1728057878,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1728305292,
            "reviewer": {
                "name": "Adrian Ambro\u017cewicz",
                "email": "adrian.ambrozewicz@linux.intel.com",
                "username": "aambroze"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1728344816,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1728470726,
            "reviewer": {
                "name": "Adrian Ambro\u017cewicz",
                "email": "adrian.ambrozewicz@linux.intel.com",
                "username": "aambroze"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "af3239d59a02153756fdfea5fe105972832828a5",
            "parents": [
                "a14c9113226dcae33a36eb4e50abbcc28be998ae"
            ],
            "ref": "refs/changes/92/74892/1",
            "uploader": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "createdOn": 1727354615,
            "author": {
                "name": "Michal Orzel",
                "email": "michalx.orzel@intel.com",
                "username": "morzelx"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "Waiting until dependency (https://gerrit.openbmc.org/c/openbmc/telemetry/+/74890) review completes"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sorry for doing this in a commit, but we need to have a discussion about this interface.  To be clear, I appreciate you trying to make the error behavior correct, and I fully support getting there.\n\nMost of the issues here are because of the way the Telemetry interfaces were modeled;  Rather that a set of properties and known types, they rely on a large dictionaries of key/values;  This requires bmcweb to map things to that map in odd ways, and means that things like PATCH error handling have to be done in special ways.\n\nHave you ever considered using a more conventional dbus interface setup?\n\nSpecifically the parameter here: https://github.com/openbmc/phosphor-dbus-interfaces/blob/5133c7bfa8127e8a4ea339c439675ad018911363/yaml/xyz/openbmc_project/Telemetry/ReportManager.interface.yaml#L48\n\nnormally if we need multiple dbus objects, we'd have multiple dbus objects that point to one another.  We generally wouldn't try to inline one object in another."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "I'm not sure I follow. What key/values?\n\nFor clarity - here is code-level definition of this parameter https://github.com/openbmc/telemetry/blob/b47b7db48c4f883eb191077848d55d96bd884607/src/types/report_types.hpp#L19\n\nI'm curious what do you understand by conventional.\n\n==============\n\nWhat is more - this 'unconventional' handling is caused by the fact that AddReport is single method which requires complete and coherent definition of report. It then does the validation underneath and returns proper SdBus exception with detailed information about what was wrong.\n\nTo solve the issue we have 2 options\na) move validation to bmcweb side (need syncing on both sides, we could eventually wind up with 500 in case bmcweb and telemetry has different opinions)\nb) wait for the refined elog<> which will pass provided metadata\nc) redefine interface according to your suggestion (unknown for me as I need more data:))"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I'm not sure I follow. What key/values?\n> \n> For clarity - here is code-level definition of this parameter https://github.com/openbmc/telemetry/blob/b47b7db48c4f883eb191077848d55d96bd884607/src/types/report_types.hpp#L19\n> \n> I'm curious what do you understand by conventional.\n\nFor dbus interface properties, it's where where each property is represented by a named property.   Optional properties are either given a \"default\" value, or those values are moved to another interface.\n\nFor dbus interface methods, it's where each argument is modeled as a argument to the method call, that has a name and a description of the value.\n\n\nFor example, assuming you only had the interface definition:\n```\nArray of metric parameters, which are stored in a way specified\n                in description of ReadingParameters property from Report\n                interface documentation.\n```\n\nwhich parameters are supported?  which parameters have which types?  There's no way to answer that without looking at the code.  This is part of the problem.  If one of the parameters is wrong, what error gets returned?\n\n> \n> ==============\n> \n> What is more - this 'unconventional' handling is caused by the fact that AddReport is single method which requires complete and coherent definition of report. It then does the validation underneath and returns proper SdBus exception with detailed information about what was wrong.\n> \n> To solve the issue we have 2 options\n> a) move validation to bmcweb side (need syncing on both sides, we could eventually wind up with 500 in case bmcweb and telemetry has different opinions)\n\nNope.  This would mean that nothing else in the system but bmcweb could create a telemetry interface.  THat's a non starter.\n\n> b) wait for the refined elog<> which will pass provided metadata\n\nLets keep the discussion at a dbus level;  Once we've figured out what the dbus interface looks like, then we can focus \n\n> c) redefine interface according to your suggestion (unknown for me as I need more data:))"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "> For example, assuming you only had the interface definition:\n> \n> ```\n> Array of metric parameters, which are stored in a way specified\n>                 in description of ReadingParameters property from Report\n>                interface documentation.\n> ```\n> which parameters are supported? which parameters have which types? There's no way\nto answer that without looking at the code. This is part of the problem. If one of the parameters is wrong, what error gets returned?\n\nGot it. API was originally described in spec, but text definition was moved by @pmatuszc to have single source of truth in YAML definitions here: https://github.com/openbmc/docs/commit/434ff72789bdb589dfa0d10f9477a0be2601be71\n\nWe have a gap here, which shows that perhaps problem is not within service implementation, but is rather limitation of our current phosphor-dbus-interfaces ? \n\nIf your idea for fixing the API would be to make interface work with D-Bus objects we have severe limitations:\n- method parameters accept only predefined list of types https://dbus.freedesktop.org/doc/dbus-specification.html#id-1.3.8\n- we don't have a way to define this in more detail (other than text) https://github.com/openbmc/phosphor-dbus-interfaces/blob/9d46e5bb0fcad6c4a775dcef781c0ce4b9de1ff5/yaml/xyz/openbmc_project/Telemetry/ReportManager.interface.yaml#L49\n\nIf reworking phosphor-dbus-interfaces to work with complex parameters is not favorable, it's still not clear for me how would you redesign the API to be more 'conventional'.\n\nDo you have ready example of interfaces which is intended to Create D-Bus resources on demand written in the way you like?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > For example, assuming you only had the interface definition:\n> > \n> > ```\n> > Array of metric parameters, which are stored in a way specified\n> >                 in description of ReadingParameters property from Report\n> >                interface documentation.\n> > ```\n> > which parameters are supported? which parameters have which types? There's no way\n> to answer that without looking at the code. This is part of the problem. If one of the parameters is wrong, what error gets returned?\n> \n> Got it. API was originally described in spec, but text definition was moved by @pmatuszc to have single source of truth in YAML definitions here: https://github.com/openbmc/docs/commit/434ff72789bdb589dfa0d10f9477a0be2601be71\n> \n\nYep, and that's part of the problem that it needed a separate spec in the first place.\n\n> We have a gap here, which shows that perhaps problem is not within service implementation, but is rather limitation of our current phosphor-dbus-interfaces ? \n\nNot sure i agree.  Phosphor-dbus-interfaces is perfectly capable of holding descriptions, it's just a matter of someone writing them.\n\n> \n> If your idea for fixing the API would be to make interface work with D-Bus objects we have severe limitations:\n> - method parameters accept only predefined list of types https://dbus.freedesktop.org/doc/dbus-specification.html#id-1.3.8\n\nThese are the same limitations the existing code has, so I'm not sure why a method changes this.\n\n> - we don't have a way to define this in more detail (other than text) https://github.com/openbmc/phosphor-dbus-interfaces/blob/9d46e5bb0fcad6c4a775dcef781c0ce4b9de1ff5/yaml/xyz/openbmc_project/Telemetry/ReportManager.interface.yaml#L49\n\nNot really true, you have the ability to build interfaces that use individual properties, rather than arbitrary maps.\n\n> \n> If reworking phosphor-dbus-interfaces to work with complex parameters is not favorable, it's still not clear for me how would you redesign the API to be more 'conventional'.\n\nI think we're missing the point a little, the point is to make the parameters simpler, not to make phosphor-dbus-interfaces support more complex things.\n\n> \n> Do you have ready example of interfaces which is intended to Create D-Bus resources on demand written in the way you like?\n\nIt would look exactly like what's there, but with the ReadingParameters argument removed, and replaced with arguments that match the values that are in that key.  Even if there's a large number of arguments, that's still a lot simpler than what we have now."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Adrian Ambro\u017cewicz",
                        "email": "adrian.ambrozewicz@linux.intel.com",
                        "username": "aambroze"
                    },
                    "message": "> Not sure i agree. Phosphor-dbus-interfaces is perfectly capable of holding descriptions, it's just a matter of someone writing them.\n\nOkay, so baby-step in better direction would be just to expand the text description at https://github.com/openbmc/phosphor-dbus-interfaces/blob/73c931fb942daa714bfff17e950b9d5622a25842/yaml/xyz/openbmc_project/Telemetry/Report.interface.yaml#L36 ?\n\n> These are the same limitations the existing code has, so I'm not sure why a method changes this.\n\nWhat I've meant is that neither D-Bus nor phosphor-dbus-interface (by extension) treats method parameters like it treats Interfaces. They are second class citizen. You can't describe an Interface to an 'Object' passed to the method, therefore phosphor-dbus-interfaces don't support it. It makes some attempt though, like with definition of `errors` and `metadata`.\n\n> I think we're missing the point a little, the point is to make the parameters simpler, not to make phosphor-dbus-interfaces support more complex things.\n\nI was answering your questions \"which parameters are supported? which parameters have which types? There's no way to answer that without looking at the code. This is part of the problem. If one of the parameters is wrong, what error gets returned?\".\nIn the end - phosphor-dbus-interfaces does a good job in describing Properties. It introduces enumerations (out of D-Bus spec scope), errors with metadata (extension of of D-Bus spec scope). Why wouldn't it be able to model method parameters in the same way? How is that more complex? In both cases you'd have the same object definition, just used in different context.\n\n>It would look exactly like what's there, but with the ReadingParameters argument removed, and replaced with arguments that match the values that are in that key. Even if there's a large number of arguments, that's still a lot simpler than what we have now.\n\nI'm sorry. I know this is probably clue of the problem, but I still don't get it. What map? What keys? Definition of this parameter in the code is located here https://github.com/openbmc/bmcweb/blob/15b6f9f9718426f137ad00090984396fe162619c/redfish-core/lib/metric_report_definition.hpp#L38C7-L38C25\nIt consists of:\n- array of source Metrics (1..N)\n-- D-Bus Sensor path - for backend (monitoring done by openbmc/telemetry)\n-- Redfish URI - for frontend (MetricReportDefinition GET - https://github.com/openbmc/bmcweb/blob/15b6f9f9718426f137ad00090984396fe162619c/redfish-core/lib/metric_report_definition.hpp#L323)\n- collectionFunction\n- collectionTimeScope\n- collectionDuration\n\nPerhaps by maps you mean keeping track of Redfish URI<>D-Bus Sensor ? If not - consider me lost and accept my sincere apologies for ongoing misunderstanding.."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/src/utils/dbus_utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/metric_report_definition.hpp",
                    "type": "MODIFIED",
                    "insertions": 68,
                    "deletions": -165
                },
                {
                    "file": "redfish-core/lib/trigger.hpp",
                    "type": "MODIFIED",
                    "insertions": 84,
                    "deletions": -13
                }
            ],
            "sizeInsertions": 178,
            "sizeDeletions": 178
        }
    ]
}