{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I55b41c52d08db59946778a321d7e7884d5b10111",
    "number": 74729,
    "subject": "Sensors: Add discrete sensors",
    "owner": {
        "name": "Patrick Rudolph",
        "email": "patrick.rudolph@9elements.com",
        "username": "PatrickRudolph"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/74729",
    "hashtags": [],
    "createdOn": 1726735959,
    "lastUpdated": 1727176184,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1726735959,
            "reviewer": {
                "name": "Patrick Rudolph",
                "email": "patrick.rudolph@9elements.com",
                "username": "PatrickRudolph"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1726735994,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1726735994,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1726736154,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/91997/ : FAILURE"
        },
        {
            "timestamp": 1726757865,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(3 comments)"
        },
        {
            "timestamp": 1726758821,
            "reviewer": {
                "name": "Patrick Rudolph",
                "email": "patrick.rudolph@9elements.com",
                "username": "PatrickRudolph"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1726770961,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1726785002,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1727089156,
            "reviewer": {
                "name": "Patrick Rudolph",
                "email": "patrick.rudolph@9elements.com",
                "username": "PatrickRudolph"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1727176184,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "mdmii@outlook.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "16975adcca0261677dc5346be2d8dae34835fd67",
            "parents": [
                "20650cd00902ef3ae80e524b0af6c5dcd05b01d0"
            ],
            "ref": "refs/changes/29/74729/1",
            "uploader": {
                "name": "Patrick Rudolph",
                "email": "patrick.rudolph@9elements.com",
                "username": "PatrickRudolph"
            },
            "createdOn": 1726735959,
            "author": {
                "name": "Patrick Rudolph",
                "email": "patrick.rudolph@9elements.com",
                "username": "PatrickRudolph"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 15,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "my first read was expecting this to be a list of requirements eg and for each clause.    only after reading the list did I realize it was one of possible use cases.   please add something to the introduction."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 26,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lets enumerate at least one of these in how you expect this to work from \n\ngpio read -> daemons -> dbus -> user facing interface.\n\nI suspect a lot of this is already covered by the state namespace, or could be added with pretty minimal additions."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Overall, I suspect there's some missing documentation about what the end goal is here, and how we expect this to work.  Some key points:\n\nDeclaring an explicit \"discrete\" sensor is less helpful than an explicit type (leak, VR failure, Hot, etc).  There is no way to map a generic interface to DMTF redfish without relying on specific sensor names, which we try to avoid (user facing naming is in the control of the platform owner).\n\nAs written, it's not clear how this would map to IPMI.  If that's the intent, we should call it out.\n\nAs written, I suspect this really should just be extensions to the existing state properties, which I've called out a couple places below."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "mdmii@outlook.com",
                        "username": "mdmillerii"
                    },
                    "message": "just reading the change log so far"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is not a \"sensor\" but a State.  We already have some of these values modeled there.  Add new interfaces as necessary."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Rudolph",
                        "email": "patrick.rudolph@9elements.com",
                        "username": "PatrickRudolph"
                    },
                    "message": "A unit can have multiple discrete sensors, but it doesn't make sense to have multiple \"states\" on one unit. A unit can only be in one (discrete) state.\n\nA unit would have discrete sensors for:\n- voltage good\n- clock good\n- not in reset\n- throttled\n- catastropic error\n\nThose discrete sensors can then be used to calculate the one state the unit is in."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> A unit can have multiple discrete sensors, but it doesn't make sense to have multiple \"states\" on one unit. A unit can only be in one (discrete) state.\n> \n> A unit would have discrete sensors for:\n> - voltage good\n> - clock good\n> - not in reset\n> - throttled\n> - catastropic error\n> \n> Those discrete sensors can then be used to calculate the one state the unit is in.\n\nI don't really understand the above.  IPMI defines the above as individual bits, so a \"discrete\" sensor would only be 1 or 0.  Maybe you can provide some examples of how this is helpful?\n\nIf your goal is to implement this in Redfish, there is no such \"discrete\" property in redfish."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 2,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is overly broad and not descriptive enough. \"discrete sensor\" isn't a term in openbmc.  Openbmc \"sensors\" are defined as number quantized values of real world things (temps, pressures, speeds, etc).\n\nI can only assume that this terminology is coming from IPMI, in which case I suspect this really ends up in the \"state\" namespace.\n\nRegardless, one sentence of description isn't enough here."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 2,
                    "reviewer": {
                        "name": "Patrick Rudolph",
                        "email": "patrick.rudolph@9elements.com",
                        "username": "PatrickRudolph"
                    },
                    "message": "How are \"sensor\" and \"state\" defined within OpenBMC? Where's the difference?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This would go in the state namespace."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 35,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do you have a reference to an external standard / specification for these?  It isn't immediately obvious that these all belong together."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "line": 35,
                    "reviewer": {
                        "name": "Patrick Rudolph",
                        "email": "patrick.rudolph@9elements.com",
                        "username": "PatrickRudolph"
                    },
                    "message": "This is based on the requirements of different discrete sensors found on the mainboard. It's not based on any spec."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How is this different than our existing Sensor.Value interface?  Why do we need something new?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Rudolph",
                        "email": "patrick.rudolph@9elements.com",
                        "username": "PatrickRudolph"
                    },
                    "message": "It's using a discrete state instead of a floating point value."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not following how we would measure \"Amperes\" in a discrete value."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Rudolph",
                        "email": "patrick.rudolph@9elements.com",
                        "username": "PatrickRudolph"
                    },
                    "message": "The `discrete sensor` that is able to measure current would not report the actual measurement in \"Amperes\". It has an *internal discriminator* and it would report whether or not the value is within an acceptable limit.\n\nAs example: This discrete sensor could be connected to a GPIO where 0 is good and 1 is not good.\n\nSimilar a `discrete sensor` that is able to measure voltage would not report the actual measurement in \"Volt\". It has an *internal discriminator* and it would report whether or not the voltage is within an acceptable limit."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "line": 64,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This says voltage, but the description has a number of different \"units\""
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "line": 64,
                    "reviewer": {
                        "name": "Patrick Rudolph",
                        "email": "patrick.rudolph@9elements.com",
                        "username": "PatrickRudolph"
                    },
                    "message": "that's indeed a typo.\nMaybe: \"observed unit\""
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Operational.interface.yaml",
                    "type": "ADDED",
                    "insertions": 53,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Discrete/Physical.interface.yaml",
                    "type": "ADDED",
                    "insertions": 146,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 228,
            "sizeDeletions": 0
        }
    ]
}