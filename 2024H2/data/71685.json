{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ie11c39cf8bc9b014aad700bf9199cb6ceb4c56fb",
    "number": 71685,
    "subject": "redfish_aggregator: Mutual aggregation support",
    "owner": {
        "name": "Abhilash Raju",
        "email": "abhilash.kollam@gmail.com",
        "username": "abhilashraju"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71685",
    "hashtags": [],
    "createdOn": 1717064975,
    "lastUpdated": 1726207127,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1717064975,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1717065009,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717065009,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1717065039,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/85092/ : FAILURE"
        },
        {
            "timestamp": 1717073527,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gunnar@gmills.xyz",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(4 comments)"
        },
        {
            "timestamp": 1717077773,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717077785,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717077785,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1717077815,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/85105/ : FAILURE"
        },
        {
            "timestamp": 1717079152,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1717079268,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1717079309,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1717079309,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1717079369,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/85107/ : FAILURE"
        },
        {
            "timestamp": 1717079396,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717082023,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717087251,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1717111651,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1717115919,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1717116291,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717130444,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1717133839,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717191714,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717203586,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717465241,
            "reviewer": {
                "name": "Carson",
                "email": "clabrado@google.com",
                "username": "carsonlab"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1717518705,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1717560787,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1717562762,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1718278172,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1718278180,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1719844051,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1719844069,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1719844069,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1719844238,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/87094/ : FAILURE"
        },
        {
            "timestamp": 1719847328,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1719852175,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1719903096,
            "reviewer": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1726207127,
            "reviewer": {
                "name": "Ramesh Iyyar",
                "email": "rameshi1@in.ibm.com",
                "username": "RameshIyyar"
            },
            "message": "Removed reviewer Ramesh Iyyar <rameshi1@in.ibm.com>."
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "42b97d3dfed9bcfdc784fb03496d571982a8743b",
            "parents": [
                "de0c960c4262169ea92a4b852dd5ebbe3810bf00"
            ],
            "ref": "refs/changes/85/71685/1",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1717064975,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "space here"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "spelling"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "spelling"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gunnar@gmills.xyz",
                        "username": "gtmills"
                    },
                    "message": "spelling"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 566,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we use a more standard header here?  THere's a number of X-Forwarded-{For, Host, Prefix} that are used to denote that these were forwarded by a proxy.  I suspect we don't need to invent another.\n\nIn the case where we are inventing another we need to make it:\n1. OpenBMC specific (OpenBMC doesn't own the name \"redfish\", DMTF does).\n2. Follow Http header naming conventions."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "97674cbf18e613145e49fd16175fcf48ffd02804",
            "parents": [
                "de0c960c4262169ea92a4b852dd5ebbe3810bf00"
            ],
            "ref": "refs/changes/85/71685/2",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1717077773,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Lots of unrelated changes that weren't in patchset 1?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "it was a mistake .Those were work in progress for mtls aggegation"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "\ud83d\udc4d. looks like it's fixed now."
                },
                {
                    "file": "http/http_request.hpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why was this added?  Generally we would just do getHeaderValue(...).empty() to test for whether or not the header is present."
                },
                {
                    "file": "http/http_request.hpp",
                    "line": 90,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Acknowledged"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "http/http_request.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                },
                {
                    "file": "http/mutual_tls.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -1
                },
                {
                    "file": "http/http_server.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -23
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -2
                },
                {
                    "file": "http/http_client.hpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -36
                },
                {
                    "file": "include/ssl_key_handler.hpp",
                    "type": "MODIFIED",
                    "insertions": 63,
                    "deletions": -11
                }
            ],
            "sizeInsertions": 140,
            "sizeDeletions": 73
        },
        {
            "number": 3,
            "revision": "ab2880d4cb9fe9be18942047efb56a2f0b60b9bd",
            "parents": [
                "de0c960c4262169ea92a4b852dd5ebbe3810bf00"
            ],
            "ref": "refs/changes/85/71685/3",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1717079268,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "This may not need to be addressed as part of this patch.  In a mutual aggregation system the URIs will change depending on which aggregator you are querying.  Aggregation prefixes will not be applied to URIs that come from the aggregating BMC.\n\nIs the expectation that URIs will be consistent regardless of which BMC is queried as the aggregator?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I would say we should actively try to avoid that requirement if at all possible;  Syncronizing header names seems like a pain, although could be doable now that"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "It would be a huge pain.  I'm also in favor of not going down that road.\n\nI think you'd hit a similar issue that arose during implementing Redfish Aggregation.  The original thought was resources on the aggregating BMC would also get an aggregation prefix: `main_`.  That meant the current URIs would change depending on if aggregation was enabled.\n\nThat was not desirable so the idea was abandoned.  If the URIs need to be consistent regardless of aggregator then I feel like we'd end up having to modify URIs on the aggregating BMC."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I am not clear about the discussion here. I don't see any issue in making aggregation enabled in all BMCs. There is no change in the static redfish url. An external client will make usual top level request to any BMC. The bmc will have its own private list of satellite information. So it can gather and attach prefix (a unique name of satellite BMC) to urls returned from satellite. So the clients will be using same BMC for satellite resources with prefixed urls. It will works as usual. Yes we need to worry if client switches the  BMC and uses prefixed urls obtained from previous BMC. As long as we can uniquely identify BMC from prefix name, then it is just an easier implementation to test if the incoming prefix is current BMC or not before forwarding."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> Yes we need to worry if client switches the BMC and uses prefixed urls obtained from previous BMC. As long as we can uniquely identify BMC from prefix name, then it is just an easier implementation to test if the incoming prefix is current BMC or not before forwarding.\n\nYes, this scenario is the one I'm saying we shouldn't support.  From the client's perspective querying a different BMC should be treated as if it's querying a completely new system.\n\nConsider a simple system where A aggregates B and B aggregates A.  Let's say each machine has two `Chassis` resources.  A has `Main` and `ExampleA`.  B has `Main` and `ExampleB`.\n\nIf support is added for multiple satellite BMCs then the aggregation prefix would likely become something like `{aggregation_prefix}_{Satellite_uuid}_`.  Right now it's just `{aggregation_prefix}_` which is `5B247A_`.\n\nHere's what you'd see when querying Machine A\n```\n~# curl -s {MACH_A_IP}/redfish/v1/Chassis\n{\n  \"@odata.id\": \"/redfish/v1/Chassis\",\n  \"@odata.type\": \"#ChassisCollection.ChassisCollection\",\n  \"Members\": [\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/Main\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/ExampleA\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/{aggregation_prefix}_{B_uuid}_Main\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/{aggregation_prefix}_{B_uuid}_ExampleB\"\n    }\n  ],\n  \"Members@odata.count\": 4,\n  \"Name\": \"Chassis Collection\"\n}\n```\n\nHere's what you'd see when querying Machine B\n```\n~# curl -s {MACH_B_IP}/redfish/v1/Chassis\n{\n  \"@odata.id\": \"/redfish/v1/Chassis\",\n  \"@odata.type\": \"#ChassisCollection.ChassisCollection\",\n  \"Members\": [\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/Main\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/ExampleB\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/{aggregation_prefix}_{A_uuid}_Main\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/{aggregation_prefix}_{A_uuid}_ExampleA\"\n    },\n  ],\n  \"Members@odata.count\": 4,\n  \"Name\": \"Chassis Collection\"\n}\n```\n\nYou get the same resources but they have different URIs depending on which BMC is queried.  I think that should be fine.  Things start getting really gross if instead you want the URIs to match regardless of which BMC was queried.\n\nBMCWeb at its core has to handle requests differently depending on whether or not it's meant for a satellite BMC.  That's denoted by the `{aggregation_prefix}_` in the URI.  That also guarantees that there will be a difference in the URIs of local resources vs aggregated resources."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I did not get it.\nWhat happens suppose client switches from Machine A to Machine B and uses the url obtained from Machine A to Machine B.\n### case 1\n   Use url /redfish/v1/Chassis/Main \n   ##### Desired result:\n   It get the details of machine B in response. Client cannot expect machine A data here, as he made the switch explicitly.\n   ##### Implementable?\n   \n   Yes it is implementable. I don't see why it will not work. \n\n### case 2\n   Use url /redfish/v1/Chassis/{aggregation_prefix}_{B_uuid}_Main\n   ##### Desired result\n   \n   Bmc can parse the uuid and recognise that it is directed to itself. So it can return the local response instead of forwarding.\n   \n   ##### Implementable?\n   \n   I don't see any problem in achieving it. Prerequisite for it is to have a dictionary of uuid to bmc mapping."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "In order to implement a generic solution, we should first support multiple satellite capabilities and an uuid assignment scheme for the BMCs for proper request forwarding and duplicate removals. So keeping it as WIP till dependencies are solved."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Your commit points out this breaks multi-level aggregation such as A aggregates B and B aggregates C.  I don't think we should break that functionality regardless of how widespread its use currently is.  Better to get it right the first time.\n\nCould we instead add a custom header to the aggregation request object which contains the identifiers of the BMCs that have been aggregated so far?  Those identifiers could be something like the `SCHEME://HOST:PORT` key used by the `connectionPools` in our internal `HttpClient`.\n\nAnother option is to use the aggregation prefix as the identifier.  That will require implementing generating aggregation prefixes.  Right now it's just hardcoded to always be `5B247A_`.  That'll likely need to be implemented regardless as part of enabling mutual aggregation.  It's not as useful if there can only be two BMCs in the entire system.\n\nThe flow would look something like this:\n\n1. Add the `SCHEME://HOST:PORT` of the aggregator\n2. Retrieve the satellite configs\n3. If the Satellite `SCHEME://HOST:PORT` is NOT in the header then add it and proceed with aggregation and forward the request\n4. Else don't forward the request since we've already queried that satellite elsewhere in the chain."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't know if HOST:port works, because an aggregator might be accessing through a different host/port than the BMC thinks it's on.  We had a similar problem with trying to enforce the Location header. But maybe we could do something with UUID?  Send a header like \"aggregated from\" and the UUID.  If we ever see a UUID in the list that we're aggregating the satellite of, or see our own UUID in the list, refuse to aggregate?"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "UUID could work.  We previously discussed using that as the seed for generating aggregation prefixes.\n\nWe'll need to warn the satellites as well though of all BMCs that the message is getting forwarded to.  Consider this setup:\n\n* A aggregates B & C\n* B aggregates A & C\n* C aggregates A & B\n\nLet's say we query A for `/redfish/v1/Chassis`.  That's a top level collection so A also needs to forward that request to B and C.  In that request we only include the UUID of A.\n\nB aggregates A & C.  B would think it needs to forward the request to C since the only UUID in the header is for A (who just sent the request).  Likewise, C would forward the request to B and ignore A.\n\nThe end result is the resources from B and C get included twice in the overall response in some form or fashion.\n```\nQuery -> A -> B -> C\n          \\\n           -> C -> B\n```\n\nIf the original forwarded request from A contained the UUID for A as well as the ones for the destinations then B and C would not make redundant forwards since they know that \"something\" has already aggregated one of the BMCs they're aggregating.\n\nFor that to work each BMC will have to know the UUIDs of the BMCs they're aggregating in addition to their own.  I can think of two ways to make that happen:\n\n1. Each BMC makes an initial query to retrieve the UUID and decide if it should proceed with the actual aggregation.\n2. We let the BMCs cache their satellite configs and as part of that they retrieve the UUIDs from the satellites before normal operation actually begins."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> UUID could work.  We previously discussed using that as the seed for generating aggregation prefixes.\n> \n> We'll need to warn the satellites as well though of all BMCs that the message is getting forwarded to.  Consider this setup:\n> \n> * A aggregates B & C\n> * B aggregates A & C\n> * C aggregates A & B\n> \n> Let's say we query A for `/redfish/v1/Chassis`.  That's a top level collection so A also needs to forward that request to B and C.  In that request we only include the UUID of A.\n> \n> B aggregates A & C.  B would think it needs to forward the request to C since the only UUID in the header is for A (who just sent the request).  Likewise, C would forward the request to B and ignore A.\n> \n> The end result is the resources from B and C get included twice in the overall response in some form or fashion.\n> ```\n> Query -> A -> B -> C\n>           \\\n>            -> C -> B\n> ```\n> \n\n\nUg...... the above made my brain hurt, but makes sense.  To support that kind of cluster topology we almost have to attach \"resource created by\" type metadata to every request.\n\n> If the original forwarded request from A contained the UUID for A as well as the ones for the destinations then B and C would not make redundant forwards since they know that \"something\" has already aggregated one of the BMCs they're aggregating.\n> \n> For that to work each BMC will have to know the UUIDs of the BMCs they're aggregating in addition to their own.  I can think of two ways to make that happen:\n> \n> 1. Each BMC makes an initial query to retrieve the UUID and decide if it should proceed with the actual aggregation.\n> 2. We let the BMCs cache their satellite configs and as part of that they retrieve the UUIDs from the satellites before normal operation actually begins.\n\nArguably we should be caching the sattelite UUID already, so I suspect this would be fine.\n\nAlternatively, maybe at startup, each aggregator builds that little map in memory, so that when it makes requests we can pick a path?  IDK;  We should really get multiple satellites working first."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Query -> A -> B -> C\n          \\\n           -> C -> B\nAssuming we have uuid for BMCs available.\nCan't A decide what to put in request header to avoid this duplicates. \n1) When we forward request to B , we add C uuid in excluding list. \n2) Forward for C is inverse of 1.\nSo this will avoid duplicate aggregation right? The extra cost is in copying request for siblings."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Query -> A -> B -> C\n>           \\\n>            -> C -> B\n> Assuming we have uuid for BMCs available.\n> Can't A decide what to put in request header to avoid this duplicates. \n\nA doesn't know which resources in a collection came from B, and which ones came from C.  Also, they're not unique URIs, the collections are merged, so there's not a single header we could use to know.\n\n> 1) When we forward request to B , we add C uuid in excluding list. \n> 2) Forward for C is inverse of 1.\n> So this will avoid duplicate aggregation right? The extra cost is in copying request for siblings.\n\n\nI don't think it avoids it\n\nA sets As UUID forwards to B and C\nAt this point B doesn't know if it should forward to C or not, and there's no UUID to compare to in the request, because we only know B and C\n\n\n\n\nIt could be we're overcomplicating it at this point.  Do we have any designs that require loops like that?"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "I did not explain it properly.\n\n```\nhandleRequest()\n{\n  \n  if this bmc is in request header\n\treturn // no need to handle as we have already seen this request\n  for( bmc b in  satellites)\n  \t{\n\t\tRequest r = copy request\n\t\tr.addHeader( current bmc name)\n\t\tr.addHeader( all bmc in satellite list except b)\n\t\tforward r to b\n\t}\n  merge with local response\n  return response\n}\n\n\n```\n\nDoes not this work?\n\nEvery BMC knows its own satellite BMC\nAnd it  knows that it is going to forward the request to those satellite anyway\nSo it can add that information in the request header.\n\nNow when a Bmc process the header , it has the information about whether it saw the same request before or not. It handles the request based on that \n\nThis will avoid duplicates right?"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "Splitting this off from https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71685/comment/b510d528_b6e5dfb8/ to prevent that thread from become any more overloaded.\n\nThe concern about double counting can get particularly heinous if you have aggregation chains added to the mix.\n\n* A aggregates B & C\n* B aggregates D\n* C aggregates D\n\nIf you query `/redfish/v1/Chassis` on Machine A then fetching the information would look like this\n```\nA -> B -> D\n \\\n  -> C -> D\n```\n\nIn that case we'll duplicate D.  The proposed approach from the earlier thread won't help.  A has no idea that B and C are both aggregating D so it can't warn them in advance.\n\nAfter A forwards to B and C then those two paths occur in a vacuum.  B has no idea that C is aggregating D and C has no idea that B is aggregating D.\n\nMachine A would have to be able to recognize that these are duplicate resources\n* `/redfish/v1/Chassis/5B247A_{Buuid}_{Duuid}_ChassisId`\n* `/redfish/v1/Chassis/5B247A_{Cuuid}_{Duuid}_ChassisId`\n\nMachine A does not know that D exists so there is not a way for it to know that the `{Duuid}_` portion of the URIs comes from aggregation instead of being part of the actual ChassisId itself.\n\nMaybe that this point we just say something like \"Mutual Aggregation is only supported at the topmost level.  Don't create loops.\"?\n\nThe other option is the aggregator has to build a full topology and determine all the UUIDs beyond just the ones specified in its satellite configs.  That'd be a lot of effort though to implement something that there may not be a need for."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Carson",
                        "email": "clabrado@google.com",
                        "username": "carsonlab"
                    },
                    "message": "> Ug...... the above made my brain hurt, but makes sense. \n:D\n\n> A sets As UUID forwards to B and C\n> At this point B doesn't know if it should forward to C or not, and there's no UUID to compare to in the request, because we only know B and C\n\nI think Abhilash and I are saying the same thing at this point.  That's why I think the answer is the cache the satellite configs including their UUIDs.  That way A can also include the UUIDs for B and C in that initial request it forwards.\n\nB will likewise know the UUIDs of A and C.  When B receives that fowarded request from A then B will want to forward it to A and C since it aggregates both.  However, B likewise knows the UUIDs of A and C.  Their UUIDs will be in the header so it won't attempt to aggregate and it will just return normally.  The same thing would happen with C and we avoid duplicates.\n\nThere's another case that that may be of concern.  I'm splitting it off as a separate comment.\n\n> We should really get multiple satellites working first.\n+100.  Right now all we can really do anyway is a ring of A -> B -> A.  Enabling multiple satellite will require changing the aggregation prefix and considerations about caching the satellite configs.\n\nSome of these mutual aggregation questions will become a bit more clear when you can setup an actual topology instead of using my crude drawings."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Mutual Aggregation is only supported at the topmost level. Don't create loops.\n\n\nyep.  Lets just make this statement."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If you two understand it, I'm happy to trust with whatever you two come up with, so I'm more or less going to check out here.  Ping me if you want my input on anything, but I'll just trust that you guys have a solution that works."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 1200,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "A aggregates B & C\nB aggregates D\nC aggregates D\n\nYes this case is tricky to solve. we need following strategy for it \n1) we have global topology information available to all BMC,\n2) create a routing path for each satellite bmc add it to the header of satellite request. \n3) satellite uses the routing path for its aggregation.\n\nThis will also bring capabilities to aggregate/forward to BMC that are the part of the connected graph, which need not be always adjacent to the BMC. \n\nOr \n\nImplement a duplicate removal algorithm on the response before merging. \n\nQuestion is do we really need to support such topology? What is the need for such complicated BMC topology. \n\nJust a support for mutual aggregation and linear aggregation will do the job for all our practical use cases."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "2cb9b03023eb997007f87ce3e667ba0d61970d45",
            "parents": [
                "9dae4deed587e8c4a1ed6fa7eed91917f2c8d404"
            ],
            "ref": "refs/changes/85/71685/4",
            "uploader": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "createdOn": 1719844051,
            "author": {
                "name": "Abhilash Raju",
                "email": "abhilash.kollam@gmail.com",
                "username": "abhilashraju"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How is this related to the existing fixed prefix name?\n\nhttps://github.com/openbmc/bmcweb/blob/1cf823137844d1f3ef28c3b7129d8a7eb7f2662a/redfish-core/include/redfish_aggregator.hpp#L430C41-L430C47"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Now we are not hardcoding the satellite bmc name. We use satellite name coming from dbus.(Entity manager/Decorators can take responsibility of assigning unique name)  \n\nPreviously for the forwarding resource request we were using hardcoded satellite name.  \nSince the satellite name is no more hardcoded and there are more than one satellite bmc possible, we need a way distinguish between local and remote resource request. The Remote_ prefix will help in identifying it with minimal possible changes."
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 428,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we just grab the implementation from here: https://github.com/openbmc/dbus-sensors/blob/e8a14e91eefb21dc4bfa754c57212504f7fddb09/src/VariantVisitors.hpp#L28"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 428,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "look like it throws. Can we have something that doesn't throw?\nCan I add one version that takes ec as arg instead ?"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 511,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We should call this \"MutualTLS"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 511,
                    "reviewer": {
                        "name": "Abhilash Raju",
                        "email": "abhilash.kollam@gmail.com",
                        "username": "abhilashraju"
                    },
                    "message": "Acknowledged"
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "line": 513,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We shoudl be setting the scheme based on a separate property.  Something like:\n\nProtocol: HTTP\nProtocol: HTTPS\n\nIt seems reasonable that someone would want to connect to https but not use authentication, or might choose password auth.  They are separate parameters."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/include/redfish_aggregator.hpp",
                    "type": "MODIFIED",
                    "insertions": 83,
                    "deletions": -38
                }
            ],
            "sizeInsertions": 107,
            "sizeDeletions": 38
        }
    ]
}