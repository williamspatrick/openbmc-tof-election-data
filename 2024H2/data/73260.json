{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "If4b5a7c69447b497bfa178e397fc34329e1cdf8d",
    "number": 73260,
    "subject": "defines a new interface for machinecontext",
    "owner": {
        "name": "Christopher Sides",
        "email": "christopher.sides@hpe.com",
        "username": "csides-hpe"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/73260",
    "hashtags": [],
    "createdOn": 1722552145,
    "lastUpdated": 1730391841,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1722552145,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1722552186,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1722552186,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1722552527,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/89023/ : FAILURE"
        },
        {
            "timestamp": 1722610949,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1722612011,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722612552,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722613584,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722613764,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722616994,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722869950,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722882584,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722885181,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722963170,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1722965390,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1722967303,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1723054244,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1723499569,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1730391841,
            "reviewer": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "message": "Abandoned\n\nNo new interface required"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d714eb018bf4c39db19e8648e9e7fe564502f170",
            "parents": [
                "5302e3a6ae32971a5aebabe3ad8f40c8dde2ac49"
            ],
            "ref": "refs/changes/60/73260/1",
            "uploader": {
                "name": "Christopher Sides",
                "email": "christopher.sides@hpe.com",
                "username": "csides-hpe"
            },
            "createdOn": 1722552145,
            "author": {
                "name": "Chris Sides",
                "email": "Christopher.Sides@hpe.com",
                "username": ""
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "These are just random things that we already have in other interfaces.  Why would we define a new top-level interface for this?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "I would say the idea here is to present an interface for HW ID data (VPD) as discovered in well-defined device-tree nodes.\n\nIt's my understanding that something along these lines is needed for the 'device-tree -> dbus (for Entity-Manager probe consumption) daemon.\n\nAs discussed here: https://gerrit.openbmc.org/c/openbmc/phosphor-u-boot-env-mgr/+/71512/comment/e3a2680c_c642e88b/\n\nI am open to suggestions \n\n(sidenote: I've noticed the top-level description on my YAML probably should be changed. I'll aim to fix that along with whatever fixes/changes are needed next)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Reuse the existing dbus interfaces and put them at a well-defined location?\n\nInventory.Decorator.Compatible = Model\nInventory.Decorator.Asset = SerialNumber\nInventory.Item.NetworkInterace = MACAddress and LocalMACAddress (?)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "It's been awhile, and I bet I can find more detail if a deeper dive is needed, but I believe the suggestion to use existing Inventory.Decorator was rejected by the community.\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/66369/comment/b7fcf0b3_e571f130/\n(Ed Tanous comments)\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/66369/comments/62dc0e29_4dd4207c\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/66369/comments/efb4633f_267a3e16\n\nThe 'MachineContext' name we've landed on for this is the only interface name so far we didn't get objections to (so far) across the design doc & phosphor-u-boot-env-mgr daemon implimentation comments on Gerrit"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Oh- it just clicked -- are you suggesting I aim to gather existing properties and make them available through a new 'central' location on d-bus? That isn't something I had thought of as an option before."
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "By \"central\" I would only mean a path, not a new interface. \n\nI am not following what Ed's concern is wrt Decorator.Asset.  TBH, I don't know why the path matters anyhow. EM can just as easily Probe against the Compatible interface as some random BOARD_PRODUCT_NAME property, so I don't know what is wrong.\n\nWe have all this stuff defined already. I'm not going to accept a new \"bunch of random properties HPe thinks are important [today] globbed into a new interface\" interface. If that requires tweaking your design or getting things smoothed over with Ed, so be it."
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "I believe I understand your position. \n\nI'm currently going back over old community discussion on \"where to output device-tree data to dbus\" topic and putting together a \"where we've been and where we're at now\" summary, and help drive further community discussions.\n\nAs far as I understand, there is no interface for device-tree data available to d-bus at this time. We (after much community discussion) landed on the 'MachineContext' name with the idea that it represents data about physical hardware discovered via device-tree to give context for the hardware we're running on.\n\nI believe Ed's main objections using to the Decorator assets Compatible fields were largely about that interface not being representative of physical hardware, and him really not liking the idea of tying data about physical hardware to arbitrary paths. I'll have more on this once I've finished putting together a new summary.\n\nEssentially, this is intended as an interface for 'device-tree' (there was plenty of objection to just naming the interface something with 'device-tree' in the name, with the idea that 'Device-Tree' is a concept, not representative of physical hardware that needs an interface) \n\nHPE will be using it to allow Entity-Manager probes to find our HW, but it is not intended to be an HPE-specific interface or daemon.\n\t\nHPE essentially only cares about the 'model' field, the other fields serial-number and the mac address fields are \"low hanging fruit\" - device tree root nodes that were included due to community discussion -- largely because they're well-defined device-tree nodes (as described @ https://devicetree-specification.readthedocs.io/en/latest/ )"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Also worth bringing up -- looking at existing Entity-Manager configs, it seems like Decorator properties like model are generally defined by devs in the entity-manager JSON config files for each platform.\n\nhttps://github.com/search?q=repo%3Aopenbmc%2Fentity-manager%20model&type=code\n\nI suspect that with having decorator assets typically being defined inside EM-config files after a successful EM-probe match, it could cause issues if there's a service trying to set that same field behind the scenes based on device-tree node data at boot.\n\nAs far as I know, there's no defined place for device-tree discovered data at the moment. I am continuing my research, and I am still open to any and all suggestions. Thanks for your time!"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I suspect that with having decorator assets typically being defined inside EM-config files after a successful EM-probe match, it could cause issues if there's a service trying to set that same field behind the scenes based on device-tree node data at boot.\n\nThis shouldn't be an issue.  They wouldn't be updating the *same* field, because they'd be different instances (both different services and object_paths).\n\nThe device tree stuff can fill in `/xyz/openbmc_project/inventory/device-tree/fru1` with Asset and Compatible.  EM will probe on some combination of those and create `/xyz/openbmc_project/inventory/Board/HPe_G15_Mainboard`."
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Thanks for the insight. I haven't had much experience with mixing and matching/playing with dbus paths in practice (esp with sdbusplus processes in the mix), so have been experimenting with your suggestions to some success. \n\nI will add this to my situation summary I'm putting together for community discussion.\n\nQuestion: how would you implement multiple interfaces to one dbus object in the context of sdbusplus processes? \n\nMy current understanding is that one interface per object can be implemented by simply creating a class that inherits from a SDBusPlus-YAML generated class like aserver::xyz::openbmc::inventory::decorator::asset, instancing it, and then spawning a service with the sdbusplus::asyc::context.\n\nbut I'm not sure about using more than one interface, for say Inventory.Item.NetworkInterface and Inventory.Decorator.Asset"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Nevermind the last question - did some experimenting, realized the answer is 'multiple inheritance.'\n\nNext question: Am I right to assume there's no way to 'hide' properties from an inherited interface in the listing that comes up with we introspect on an dbus object? \n\nie there's no way to tell sdbusplus \"I only want to make these inherited interface properties available, but not those properties\", right?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Ah - the answer to that appears to be multiple inheritance.\n\nNext question: Is there any way to only present specific properties from one of those interfaces?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Yes, multiple inheritance but... there is an \"object\" class that facilitates wrapping the multiple inheritances.  (Looks like object was the sync name for it; server is the async name for it. https://github.com/openbmc/sdbusplus/blob/5cee91570368554a7fcbbd9418f65efda449fa70/include/sdbusplus/async/server.hpp#L19)\n\nYou can't \"hide\" properties and that would be a violation of dbus conventions. Dbus doesn't have \"optional\" properties. If you define an interface to have specific properties it must have all of those properties. \n\nWe usually have conventions to indicate \"unused\" or \"unknown\". For enum-based properties you'll see \"unknown\". For strings, empty string. For numbers something like 0, max, min, or NaN (depending)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Thanks for the info.\n\nWould you say it's important to use a path in the /inventory/ hierarchy if I'm using inventory-related interfaces? \n\nI mostly ask because I have the impression most of that hierarchy is tied to inventory management implementation details (items and properties directly managed by phosphor-inventory-manager, I presume) \n\nWould there be objections to a service using path '/xyz/openbmc_project/MachineContext' on a bus w/ service name 'xyz.openbmc_project.MachineContext' (also considering 'MachineVPDContext' as a name to make it more clear this is VPD related, like IBM's Open Power-related VPD handling under 'com.ibm.ipzvpd'). \n\t\nAs suggested, this would be making use of the existing inventory.decorator.asset & inventory.item.NetworkInterface interfaces."
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "line": 5,
                    "reviewer": {
                        "name": "Christopher Sides",
                        "email": "christopher.sides@hpe.com",
                        "username": "csides-hpe"
                    },
                    "message": "Based on our discussion, I've gone ahead and updated the HW ID service to use interfaces decorator.asset and inventory.networkinterface via path: /xyz/openbmc_project/machinecontext \n\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-u-boot-env-mgr/+/71512/comment/86b03e06_27daefad/"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
                    "type": "ADDED",
                    "insertions": 34,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/MachineContext/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 73,
            "sizeDeletions": 0
        }
    ]
}