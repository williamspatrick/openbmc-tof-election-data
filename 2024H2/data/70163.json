{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Ic8a837abbad06d8c8b6ecd05defc68978819f1f2",
    "number": 70163,
    "subject": "Add option to use secondary code as extension of primary postcode",
    "owner": {
        "name": "cchoux",
        "email": "cosmo.chou@quantatw.com",
        "username": "cchoux"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/70163",
    "hashtags": [],
    "createdOn": 1711077696,
    "lastUpdated": 1732622759,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1711077696,
            "reviewer": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1711077763,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1711077763,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1711078519,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/81120/ : SUCCESS"
        },
        {
            "timestamp": 1711078744,
            "reviewer": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "message": "Patch Set 1:\n\nThis change is ready for review."
        },
        {
            "timestamp": 1711081163,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1: Code-Review-1\n\n(2 comments)"
        },
        {
            "timestamp": 1711082355,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1711527917,
            "reviewer": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1711528016,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1711528016,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1711528965,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/81318/ : SUCCESS"
        },
        {
            "timestamp": 1711531621,
            "reviewer": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1711562586,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1722391593,
            "reviewer": {
                "name": "PL",
                "email": "potin.lai@quantatw.com",
                "username": "potinlai"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1722391615,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1722391615,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1722392888,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/88884/ : SUCCESS"
        },
        {
            "timestamp": 1723444254,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1723745156,
            "reviewer": {
                "name": "Amithash Prasad",
                "email": "amithash@meta.com",
                "username": "amithash"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1723745413,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1723745450,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1723757100,
            "reviewer": {
                "name": "Amithash Prasad",
                "email": "amithash@meta.com",
                "username": "amithash"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1723787478,
            "reviewer": {
                "name": "PL",
                "email": "potin.lai@quantatw.com",
                "username": "potinlai"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1723820082,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1724153400,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review-1\n\n(2 comments)"
        },
        {
            "timestamp": 1724847954,
            "reviewer": {
                "name": "PL",
                "email": "potin.lai@quantatw.com",
                "username": "potinlai"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE\")\n"
        },
        {
            "timestamp": 1724847995,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1724847996,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1724849220,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(3 comments)"
        },
        {
            "timestamp": 1724849599,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/90869/ : SUCCESS"
        },
        {
            "timestamp": 1724862005,
            "reviewer": {
                "name": "PL",
                "email": "potin.lai@quantatw.com",
                "username": "potinlai"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1724862782,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1724891248,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1724907753,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1725558687,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1732622759,
            "reviewer": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "message": "Abandoned"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d4c0f19608fdc3521039705ed8f307f1c94c49c7",
            "parents": [
                "e10f0176d66a2737edefec71f40376566769712b"
            ],
            "ref": "refs/changes/63/70163/1",
            "uploader": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "createdOn": 1711077696,
            "author": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why does this require a configure option?  Can't we just print however many bytes we receive?  The API is an array.  This seems like something that's easier to just make dbus provide the right interface?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "cchoux",
                        "email": "cosmo.chou@quantatw.com",
                        "username": "cchoux"
                    },
                    "message": "The interfaces were modified in the commits that introduced the array. Should we update the interfaces?\nhttps://github.com/openbmc/phosphor-dbus-interfaces/commit/9a96970ebb93eb1f495c200801343a4d1c53977c\nhttps://github.com/openbmc/phosphor-dbus-interfaces/commit/71eaf8b1db7d903c5a62da3bae178116e69892e1"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "There aren't that many post code daemons (I think there's only one). We should avoid having a config option, and just make sure that all the interfaces are correct in all daemons."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "+1"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "How about with the option enabled?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "cchoux",
                        "email": "cosmo.chou@quantatw.com",
                        "username": "cchoux"
                    },
                    "message": "Description added."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 4021,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "bytesToHexString is a function designed for exactly this use case.  Please don't duplicate code."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 4021,
                    "reviewer": {
                        "name": "cchoux",
                        "email": "cosmo.chou@quantatw.com",
                        "username": "cchoux"
                    },
                    "message": "Changed to use bytesToHexString().\nThanks for the recommendation!"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 36,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "e635ed4b2e6be13c716489373b34c020570aa1eb",
            "parents": [
                "d0eb0e7303744d03aaa6f994bbbcdd6dc92bab13"
            ],
            "ref": "refs/changes/63/70163/2",
            "uploader": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "createdOn": 1711527917,
            "author": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 59,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
            "parents": [
                "2401e814aefcd044b8ccfd886159d876fc994418"
            ],
            "ref": "refs/changes/63/70163/3",
            "uploader": {
                "name": "PL",
                "email": "potin.lai@quantatw.com",
                "username": "potinlai"
            },
            "createdOn": 1722391593,
            "author": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The big issue I take with this is that you've said \"instead\" of the primary portion.  We should _always_ be showing the primary portion.\n\nA better name for the secondary portion probably would have been \"extended\".  The purpose of it is for systems like the SBMR that use more than can fit in an 8 byte field; the remainder go into the array.  The hope was that vendors would still use the first 8 bytes as having the most useful information so that, if necessary, people could easily code reactions to the first 8 bytes.  [As an example, AMD processors require looking for specific post codes as failure indications which can only be reported by their hardware and not through BIOS SELs.]\n\nIf you're leaving the primary post code as 0s, this is a wrong implementation."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "It feels to me, like we are pushing backend design into bmcweb."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "@cchoux any updates here?  Comments have been open for several months with no replies.  If you're working on changes, please let us know, otherwise I'll close this."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "Amithash Prasad",
                        "email": "amithash@meta.com",
                        "username": "amithash"
                    },
                    "message": "Instead of a compile time flag, can we just tag on std::get<1> to std::get<0>?\nSomething like\n```\nhexCode << \"0x\" << std::setfill('0') << std::setw(2) << std::hex\n                    << std::get<0>(code.second);\nif (std::get<1>(code.second).size() > 0) {\n  hexCode << bytesToHexString(std::get<1>(code.second));\n}\n```\nThat way if the platform has no secondary code, the vector would be 0 size and things work as is. If it does have a secondary code, it gets tagged onto the primary post code."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> If it does have a secondary code, it gets tagged onto the primary post code.\n\nIf the service expects the primary code in the primary slot, why didn't the backend put it there in the first place?\n\nIn your case, you can only check if the secondary was PROVIDED.  But that doesn't mean that the secondary post code is the \"primary\"."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "Amithash Prasad",
                        "email": "amithash@meta.com",
                        "username": "amithash"
                    },
                    "message": "Some processors have a 9 byte post code :-(. So, the existing 64bit (8byte) post code is insufficient. At least for the ARM platform this is the reason to use the secondary post code. But for the original intention of the introduction might be a hardware specific feature of an IBM platform.\nIn the ARM case, worst case scenario, the post code ends up with a 0x00<actual 9 byte code> if the back end puts a stock 0 in the primary post code."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "PL",
                        "email": "potin.lai@quantatw.com",
                        "username": "potinlai"
                    },
                    "message": "Hi @Ed, as Amithash mentioned, current primary postcode insufficient for new systems (ARM platform). \n\nWhat if we change the primary postcode type from `uint64_t` to `std::vector<uint8_t>` ? this will ensure primary code can fill in any size of postcode.\n\nPlease kindly let me know if you have any concerns of this modification, thank you."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You're proposing dbus interface changes;  A bcmweb code review isn't the right place to do that, although what you proposed looks like it would work."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't think a dbus interface change is necessary here or warranted.  IBM, if I recall, uses something like 32 _byte_ post codes, but the most informative are in the first 64 bits.\n\nI agree this should not be a configuration flag.\n\nThe \"setfill('0')\" in the original code is, in my opinion, wrong for everything except for original 8 bit Intel post codes.  We probably should start with fixing that (so that only 8 bit post codes have a prefixed 0).  Once we do that, emitting the whole post code as one is probably the right thing to do.\n\nAs I mentioned in the commit message review, we probably should have called it \"Extended\" rather than \"Secondary\".\n\nI checked with what IBM was doing downstream, since they're the ones who originally requested the \"Secondary\" field, but I don't think it is too helpful for this discussion.  They've come up with their own MessageRegistry entry (violating the use of \"OpenBMC\" but...) and add the whole post code as a new message argument.  https://github.com/ibm-openbmc/bmcweb/blame/1110/redfish-core/lib/log_services.hpp#L5253"
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3708,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "At the very least,\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/522846cf10edf2bee60aa6867594db1efd8cd585/yaml/xyz/openbmc_project/State/Boot/Raw.interface.yaml#L8\n\nNeeds more description if we're going to start making switching statements based on whether or not the second arg is empty.\n\nI've pushed the changes I think as a WIP here.  They remove the struct, break the field into properties, and give descriptions that call out architectures instead of leaving it undefined.\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/74338\n\nWe need to pull up the ARM schema supplement to figure out what is expected in Redfish for ARM processors specifically, and make sure this matches, but this should be an ok start."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 47,
                    "deletions": 0
                },
                {
                    "file": "meson.options",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 65,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "e759a74dcb21626e2b11d139242dbb470c2ad1cd",
            "parents": [
                "2539e69ce10b61cef945d6dc83a1d603050dc2f5"
            ],
            "ref": "refs/changes/63/70163/4",
            "uploader": {
                "name": "PL",
                "email": "potin.lai@quantatw.com",
                "username": "potinlai"
            },
            "createdOn": 1724847954,
            "author": {
                "name": "cchoux",
                "email": "cosmo.chou@quantatw.com",
                "username": "cchoux"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm satisfied in general with the direction this is going.  Some suggestions attached."
                },
                {
                    "file": "meson.options",
                    "line": 323,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there any need for a new option?  Can't we just extend the postcode if the secondary postcode is filled in?"
                },
                {
                    "file": "meson.options",
                    "line": 323,
                    "reviewer": {
                        "name": "PL",
                        "email": "potin.lai@quantatw.com",
                        "username": "potinlai"
                    },
                    "message": "Hi Patrick,\n\nIn the commit Cosmo mentioned before, IBM system has 72 bytes postcode, and I am not sure is IBM OK with showing all 72 bytes postcode?\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/commit/71eaf8b1db7d903c5a62da3bae178116e69892e1"
                },
                {
                    "file": "meson.options",
                    "line": 323,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@Gunnar?"
                },
                {
                    "file": "meson.options",
                    "line": 323,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Can't we just extend the postcode if the secondary postcode is filled in?\n\nPresumably we'd just make a change in the post code daemon to fill this in as the \"primary\" and change the type to support more bits like we've done with secondary?"
                },
                {
                    "file": "meson.options",
                    "line": 323,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> In the commit Cosmo mentioned before, IBM system has 72 bytes postcode, and I am not sure is IBM OK with showing all 72 bytes postcode?\n\nNope, IBM systems would be broken if we show all the 72bytes. And only 8 bytes in those are the ones that we want to display on redfish/GUI. And if needed clients can download the entire 72byte progress code via a redfish attachment.\n\nI like ed's suggestion better. We have already refactored the dbus interface & all the applications twice now. I think its better to change the type to support more bits as that could be scalable even in future."
                },
                {
                    "file": "meson.options",
                    "line": 323,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We have already refactored the dbus interface & all the applications twice now.\n\nI'd point out that the last time we refactored this, we were under the impression that all post codes would fit in a 64 bit uint.  Clearly we were wrong."
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3694,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How about:\n\n```\nif (auto& secondary = std::get<1>(code.second); !secondary.empty())\n{\n    hexCode << bytesToHexString(secondary);\n}\n```"
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "line": 3694,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> How about:\n> \n> ```\n> if (auto& secondary = std::get<1>(code.second); !secondary.empty())\n> {\n>     hexCode << bytesToHexString(secondary);\n> }\n> ```\n\nI think that still breaks IBM systems, they have a secondary that's populated, but isn't what they want as their \"primary\".\n\nI'm still pretty certain that this needs an interface change.  If we can't represent what we need in the \"primary\" property,"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 47,
                    "deletions": 0
                },
                {
                    "file": "meson.options",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "config/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 60,
            "sizeDeletions": 0
        }
    ]
}