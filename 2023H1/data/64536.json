{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "I11dd2b5c40b4410c88faf2934ef23e03d5b953a1",
    "number": 64536,
    "subject": "asio: Add get_property method",
    "owner": {
        "name": "Jian Zhang",
        "email": "zhangjian3032@gmail.com",
        "username": "zhangjian3032"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/64536",
    "hashtags": [],
    "createdOn": 1688021806,
    "lastUpdated": 1689005971,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1688021806,
            "reviewer": {
                "name": "Jian Zhang",
                "email": "zhangjian3032@gmail.com",
                "username": "zhangjian3032"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1688021835,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1688021835,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1688022488,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/69852/ : SUCCESS"
        },
        {
            "timestamp": 1688023012,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1688572957,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1688620120,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1688661350,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1688697880,
            "reviewer": {
                "name": "Jian Zhang",
                "email": "zhangjian3032@gmail.com",
                "username": "zhangjian3032"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1688697910,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1688697910,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1688698615,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/70372/ : SUCCESS"
        },
        {
            "timestamp": 1688700142,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1688707664,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1688760816,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1688966399,
            "reviewer": {
                "name": "Lei YU",
                "email": "mine260309@gmail.com",
                "username": "mine260309"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1689005688,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1689005971,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "d7d27a74c3157913684f962fdefe3a5d693a6750",
            "parents": [
                "fa663aec1ec21036f972318cb9cd59b3623f7afd"
            ],
            "ref": "refs/changes/36/64536/1",
            "uploader": {
                "name": "Jian Zhang",
                "email": "zhangjian3032@gmail.com",
                "username": "zhangjian3032"
            },
            "createdOn": 1688021806,
            "author": {
                "name": "Jian Zhang",
                "email": "zhangjian3032@gmail.com",
                "username": "zhangjian3032"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What is the utility of this?  Why would you need to get the value of a local property from within the same server?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "The \"asio\" code in sdbusplus hide the property value in internal callbable object, and thus the property can not be directly accessed like how \"non-asio\" code does.\nSo it has `setter` function but does not have a `getter` function.\n\nFor an asio service, it could easily set a property, but could not get it back.\nAdding the `getter` function helps in such case."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "you haven\u2019t really explained WHY a getter helps.  what is the use case where registering your own getter/setter callback attached to an internal parameter doesn\u2019t solve the problem?\n\nalso, you can \u201cget it back\u201d if you\u2019re writing your own callback functions that point to internal state parameters, which I\u2019d expect the app to be doing in this case."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "> What is the use case where registering your own getter/setter callback attached to an internal parameter doesn\u2019t solve the problem?\n\nFor a client that makes dbus calls, that's OK, it always needs to make a DBus call to get and set a property.\n\nFor a service that implements an interface, there is no such `getter` function at all.\nE.g. check below code in a service:\n\n // In some function it sets a value\n iface->set_property(propertyName, xxx);\n ...\n // In other functions it tries to get the value\n // But there is no such getter function!\n auto value = ifase->get_property(propertyName);\n \nThis patch adds such `getter`. Otherwise, the code where needs to get a property will have to \"save\" the value in other data structure."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> For a service that implements an interface, there is no such getter function at all.\n\n\nRight, the application provides its own getter, with register_property_r(), and have the callback point to your local copy of the variable.\n\nI'm assuming in your application you're using the register_property_r overload that takes PropertyType as an argument, not the overload that takes CallbackTypeGet as an argument.  The former is really only intended for parameter that won't change after the interface is instantiated.\n\nOverload that's being used right now:\nhttps://github.com/openbmc/sdbusplus/blob/fa663aec1ec21036f972318cb9cd59b3623f7afd/include/sdbusplus/asio/object_server.hpp#L402\n\nOverload that should be used to attach a reference to your parameter either through a lambda object, or std::bind_front():\nhttps://github.com/openbmc/sdbusplus/blob/fa663aec1ec21036f972318cb9cd59b3623f7afd/include/sdbusplus/asio/object_server.hpp#L434\n\n\n> // In other functions it tries to get the value\n\nThis would imply that you're trying to use the dbus interface as an abstraction for two modules to share state, which is a generalized anti-pattern.  One object should own the dbus interface state, and any communication with other modules should happen in application code without any mention of dbus.  This prevents a lot of abstraction issues.\n\nAgain, please provide the code that is using this, so we can give more concrete direction, but overall, I do not believe this getter function is worthwhile, and it prevents us from making the set_property() abstraction more efficient in the future (which was my intent)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Lei YU",
                        "email": "mine260309@gmail.com",
                        "username": "mine260309"
                    },
                    "message": "> Right, the application provides its own getter, with register_property_r(), and have the callback point to your local copy of the variable.\n\nThis assumes and forces the service/application to have a **local copy** of the variable.\nThe purpose for this patch is to provide the capability for a service to not save the **local copy**.\nCompare to the non-asio sdbusplus service:\n* A service that implements a generated \"server.hpp\" get the property in its base class, and thus it does not need to save a local copy at all. It could use the variable defined in server.hpp directly, and there is **only one instance** for the property.\n* Current asio service does not have such capability, a service will have to save a local copy of a property, and make sure it is synced in the getter and setter's callbacks.\n\n> This would imply that you're trying to use the dbus interface as an abstraction for two modules to share state, which is a generalized anti-pattern.\n\nNope, my case is as simple as above, that one service implements a interface and holds a property, it is better to have both setter and getter, instead of only a setter.\n\n> Again, please provide the code that is using this, so we can give more concrete direction.\n\nThe code is already shows in the above demo, it's pretty simple.\n\n> I do not believe this getter function is worthwhile, and it prevents us from making the set_property() abstraction more efficient in the future (which was my intent).\n\nCould you elaborate how to improve the set_property() to a more efficient way? And then we could discuss how to get a more efficient get_property() as well."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please reply with the code that does this in one of the openbmc applications.\n\n> to have a local copy of the variable.\n\nYep.  Applications having a local copy of a variable is how this was set up.  The code for adding a property directly was only for properties that realistically don't change.  You seem to imply that having a local copy of a variable is a problem, but I'm not really sure why.\n\n\nGetting an example of this in an application will help quite a bit I think.  Please provide the example, and we can go from there."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@Vernon / @Ed - please weigh in.  I don't have a lot of opinion on the ASIO code."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is there any example of how this would be used in a real scenario?  The pattern I would expect would be to register a getter function and have that getter sourced by whatever data you want within the applications class, not to have sdbusplus take ownership of the property, just to have it read out again.  Having multiple sources of truth is messy, and the application should know what the state of a property is within its own state, not having to rely on the dbus interface."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "still no reply to this."
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Accepting by std::any is a mediocre api, because it doesn't handle errors well.  Coding errors become runtime errors instead of compile time.  We do it for get_property because of history, and because accepting by std::any is better than the template parameter that preceeded it, but still leaves a lot to be desired.\n\nIf we MUST have this feature (which I'm not sure we do) I'd much rather that the register_property interface returned an object that could be then used to interact with the property itself, and that object could be template typed the same as the property itself, rather than having to accept std::any."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "type": "MODIFIED",
                    "insertions": 63,
                    "deletions": -9
                }
            ],
            "sizeInsertions": 79,
            "sizeDeletions": 9
        },
        {
            "number": 2,
            "revision": "d8ad1941b401fe9dc3d95c585bbbfefbb6dbbd9e",
            "parents": [
                "fa663aec1ec21036f972318cb9cd59b3623f7afd"
            ],
            "ref": "refs/changes/36/64536/2",
            "uploader": {
                "name": "Jian Zhang",
                "email": "zhangjian3032@gmail.com",
                "username": "zhangjian3032"
            },
            "createdOn": 1688697880,
            "author": {
                "name": "Jian Zhang",
                "email": "zhangjian3032@gmail.com",
                "username": "zhangjian3032"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "FYI, I've also pushed my WIP for having a \"Dbus property\" object that could accept sets, and is the reason I'm asking hard questions on this patchset.  It removes the need for std::any.  If we wanted to add get() to that it would be trivial, but I'd still like to see a use case where it makes the code clearer compared to just specifying a setter and a getter.\n\nhttps://gerrit.openbmc.org/c/openbmc/sdbusplus/+/64732"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/asio/object_server.hpp",
                    "type": "MODIFIED",
                    "insertions": 63,
                    "deletions": -9
                },
                {
                    "file": "test/bus/aio.cpp",
                    "type": "MODIFIED",
                    "insertions": 35,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 116,
            "sizeDeletions": 9
        }
    ]
}