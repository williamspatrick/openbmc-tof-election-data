{
    "project": "openbmc/openbmc",
    "branch": "master",
    "id": "Iff0b7a37194297d49ca4f3d6077d5995452d7c72",
    "number": 61623,
    "subject": "meta-phosphor: static-norootfs: add manifest JSON to image",
    "owner": {
        "name": "Patrick Williams",
        "email": "patrick@stwcx.xyz",
        "username": "williamspatrick"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/openbmc/+/61623",
    "hashtags": [],
    "createdOn": 1678489546,
    "lastUpdated": 1678737532,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1678489546,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1678494347,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1678499486,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1678500558,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1678500568,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1678545873,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1678545873,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1678548088,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-openbmc/16294/"
        },
        {
            "timestamp": 1678549491,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-openbmc/16294/ : SUCCESS"
        },
        {
            "timestamp": 1678549500,
            "reviewer": {
                "name": "Jenkins OpenBMC Google",
                "email": "haojenkinsg00gle@gmail.com",
                "username": "jenkins-openbmc-g00gle"
            },
            "message": "Patch Set 2:\n\nBuild Successful \n\nGoogle Internal CI : Google internal tests successfully started"
        },
        {
            "timestamp": 1678550729,
            "reviewer": {
                "name": "Jenkins OpenBMC IBM",
                "email": "geissonator+jenkinsibm@gmail.com",
                "username": "jenkins-openbmc-ibm"
            },
            "message": "Patch Set 2:\n\nBuild Successful \n\nIBM Hardware CI : witherspoon hardware tests passed"
        },
        {
            "timestamp": 1678649000,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1678655414,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1678719681,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1678735213,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1678735701,
            "reviewer": {
                "name": "Dan Zhang",
                "email": "dz4list@gmail.com",
                "username": "zhdaniel12"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1678737525,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2: Code-Review+2"
        },
        {
            "timestamp": 1678737532,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1fae022ecd8b6d54d751a7b68bdbde18808fc7de",
            "parents": [
                "2e37529947a9a11c2ba54e830fa59df37bc2ec36"
            ],
            "ref": "refs/changes/23/61623/1",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1678489546,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "the manifest look good, the only concern is where we put the checksum of it."
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "As you include the checksum of the manifest in the manifest JSON blob,\nDuring the checking time, you need to \n1. first load the JSON blob\n2. zero-out the sha256\n3. dump the JSON again to calculate the sha256.\n\nTwo issues:\n1. For python the element order in Dict can change so load and dump the Dict JASON can be different.\n2. The checking operation is complex than generation. \n\nSo my suggestion is separate the checksum of manifest from manifest, and append after it. And for easy to load, put the manifest dump string and checksum in two lines of string.\nThus during checking time normally happen in the BMC. the operation can be more straightforward and safe (check the checksum, if it is good load it, if not skip it)."
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> For python the element order in Dict can change so load and dump the Dict JSON can be different.\n\nThis is not true since Python 3.7.  https://mail.python.org/pipermail/python-dev/2017-December/151283.html\n\n> The checking operation is complex than generation.\n\nUnderstood.\n\n> So my suggestion is separate the checksum of manifest from manifest, and append after it. And for easy to load, put the manifest dump string and checksum in two lines of string.\n\nI'd like to keep the JSON both valid JSON and human readable.  That is why I added the `indent=4` because it pretty-prints the JSON.\n\nWhat I think I'll do is change the tag on the manifest sha256 so it can easily be differentiated from the other sha256 fields.  Then I'll make the sha256-sum cover every character up to the manifest-sha256 tag."
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "> This is not true since Python 3.7 ...\n\nI mean the loads will change the oder of Dict element. \nhttps://stackoverflow.com/questions/43789439/python-json-loads-changes-the-order-of-the-object\nthis will cause\njson_str != json.loads(json_str).dumps()\n\n> I'd like to keep the JSON both valid JSON and human readable. That is why I added the indent=4 because it pretty-prints the JSON.\n\nIt is not really necessary, there are some many tools like jq, json modules can be used for human read. But it is not really matter, I am fine with this. The only thing is that we need to make sure the checking part loading with the same indent setting, this introduce another point of complexity which is not necessary. \n\n> change the tag on the manifest sha256 so it can easily be differentiated ...\n\nMy key point is that put the checksum out of the manifest json. Mixing it within the object make things complex. Why not have a simple design, put the checksum out side of it? Is there any limitation or concern put the checksum as a different json object? like what META's image manifest does? https://github.com/facebook/openbmc/blob/eda9e95e2d94feaa2749f2a8e97e237bfe7b38e3/meta-facebook/classes/fbobmc-image.bbclass#L132"
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I mean the loads will change the oder of Dict element.\n> https://stackoverflow.com/questions/43789439/python-json-loads-changes-the-order-of-the-object\n> this will cause json_str != json.loads(json_str).dumps()\n\nAgain, this isn't true since Python 3.7.  This SO link is over 7 years old and one of the comments in it references the same change in Python 3.7 that I linked to.\n\n> The only thing is that we need to make sure the checking part loading with the same indent setting, this introduce another point of complexity which is not necessary.\n\nI don't think this is an issue.  All JSON parsers should be able to handle the whitespace.\n\n> My key point is that put the checksum out of the manifest json. Mixing it within the object make things complex. Why not have a simple design, put the checksum out side of it? Is there any limitation or concern put the checksum as a different json object? like what META's image manifest does?\n\nWhat you're proposing and linking to isn't JSON.  You've effectively concatenated two JSON files together, but no default JSON parser can handle it.  If we're calling something JSON my opinion is it should be JSON."
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "> > I mean the loads will change the oder of Dict element.\n> > https://stackoverflow.com/questions/43789439/python-json-loads-changes-the-order-of-the-object\n> > this will cause json_str != json.loads(json_str).dumps()\n> \n> Again, this isn't true since Python 3.7.  This SO link is over 7 years old and one of the comments in it references the same change in Python 3.7 that I linked to.\n> \nOh, OK. \n> > The only thing is that we need to make sure the checking part loading with the same indent setting, this introduce another point of complexity which is not necessary.\n> \n> I don't think this is an issue.  All JSON parsers should be able to handle the whitespace.\nI mean during checking the manifest, recalculating the manifest hash of the dump string. we need to make sure the code use the same indent.  \n> \n> > My key point is that put the checksum out of the manifest json. Mixing it within the object make things complex. Why not have a simple design, put the checksum out side of it? Is there any limitation or concern put the checksum as a different json object? like what META's image manifest does?\n> \n> What you're proposing and linking to isn't JSON.  You've effectively concatenated two JSON files together, but no default JSON parser can handle it.  If we're calling something JSON my opinion is it should be JSON.\n\nIt is two separate JSON strings. The first string is the manifest, the second one contain the checksum of the manifest. \n\nAnyway, as long as we can make sure the manifest_sha256 locate at the end of manifest dump, you design works. But IMO, separate the checksum of manifest with manifest make our design simple for checking logic and flexible. i.e. someday we may want to put the checksum somewhere else."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "type": "MODIFIED",
                    "insertions": 89,
                    "deletions": -5
                }
            ],
            "sizeInsertions": 110,
            "sizeDeletions": 5
        },
        {
            "number": 2,
            "revision": "917fab29b9ead43b10b0ef6dc884c39817f17965",
            "parents": [
                "2e37529947a9a11c2ba54e830fa59df37bc2ec36"
            ],
            "ref": "refs/changes/23/61623/2",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1678500558,
            "author": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "refer to my follow up feedback about the manifest checksum"
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "Can we make sure manifest-sha256 is the last element in the dump string of the manifest string?"
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It is.  See line 462.  I can add an assert if you really want to guarantee that it is the last key in the dictionary."
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "just curious, does python guaranteed the key add last will be the last in its JSON dump?"
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "line": 558,
                    "reviewer": {
                        "name": "Dan Zhang",
                        "email": "dz4list@gmail.com",
                        "username": "zhdaniel12"
                    },
                    "message": "ah, OK. Python3.7 make it a language rule."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "meta-phosphor/classes/image_types_phosphor.bbclass",
                    "type": "MODIFIED",
                    "insertions": 91,
                    "deletions": -5
                }
            ],
            "sizeInsertions": 115,
            "sizeDeletions": 5
        }
    ]
}