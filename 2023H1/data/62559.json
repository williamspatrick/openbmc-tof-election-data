{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "topic": "allow-propagating-exceptions",
    "id": "I014099a91f526a92c0f6646e75b4029513ad19a8",
    "number": 62559,
    "subject": "Allow propagating exceptions from server methods",
    "owner": {
        "name": "Hannu Lounento",
        "email": "hannu.lounento@iki.fi",
        "username": "hlounent"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/62559",
    "hashtags": [],
    "createdOn": 1681710144,
    "lastUpdated": 1683698644,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1681710144,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1681710182,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1681710296,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1681710564,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Topic set to allow-propagating-exceptions"
        },
        {
            "timestamp": 1681710995,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 2: Commit message was updated."
        },
        {
            "timestamp": 1681711057,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1681711904,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 2:\n\n(4 comments)"
        },
        {
            "timestamp": 1683218230,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1683631007,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1683631034,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1683631039,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1683631039,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1683631103,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/65916/ : FAILURE"
        },
        {
            "timestamp": 1683631599,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1683632042,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1683636088,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1683636114,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1683636115,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1683636218,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1683636255,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1683636382,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/65917/ : FAILURE"
        },
        {
            "timestamp": 1683637125,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1683637179,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1683637179,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1683637366,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1683637463,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/65919/ : FAILURE"
        },
        {
            "timestamp": 1683655710,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Published edit on patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1683655741,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1683655741,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1683655820,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1683656551,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/65933/ : SUCCESS"
        },
        {
            "timestamp": 1683658498,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1683658556,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged"
        },
        {
            "timestamp": 1683658568,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(2 comments)"
        },
        {
            "timestamp": 1683698644,
            "reviewer": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "e41c0cbc9d83774be3bdb475eed7518e606917c6",
            "parents": [
                "80ee79896463fa899e3874167980892b75464dd0"
            ],
            "ref": "refs/changes/59/62559/1",
            "uploader": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "createdOn": 1681710144,
            "author": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.cpp.mako",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 57,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "c9c03ad2f607024743c1e11c109a908d5e4b54fd",
            "parents": [
                "80ee79896463fa899e3874167980892b75464dd0"
            ],
            "ref": "refs/changes/59/62559/2",
            "uploader": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "createdOn": 1681710995,
            "author": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Marked the PR as WIP as the change is currently only an RFC and requires further changes prior to being considered for merging."
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "line": 199,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "(Couldn't find a way / place to add a cover letter in Gerrit, so added the description here as a comment for the time being; will move the relevant parts into the commit message when updating the pull request if the concept in general looks good).\n\n## The problem\n\nsdbusplus calls the D-Bus method implementation functions in such a way that the callstack contains `sd_bus` C functions from libsystemd, and sdbusplus only catches the specific exceptions that match the errors defined for the D-Bus method before returning execution to the C functions. If any D-Bus method implementation propagates any other exception than the errors the method declares, the C functions in the callstack may leak resources.\n\nWe didn't find any documentation or other statement that would prohibit exceptions from being thrown / propagated from method implementations. This seems to be a known issue though [1]:\n\n    By throwing an exception, you're not making an error return to the calling client, but instead blowing through all of the `sd_bus` C code with your C++ exception and putting your application into an invalid state. At a minimum you are leaking memory.\n\n## The proposed solution\n\nWe propose changing sdbusplus to catch any exceptions propagated from method implementations and to re-throw them from `sdbusplus::bus::bus::process*()`.\n\nFirst of all catching and re-throwing would avoid resource leaks from `sd_bus` C functions. And as a consequence it would allow propagating exceptions in the normal way until the caller that is prepared to handle them. Ultimately exceptions could propagate even up to `main()`, which is what we'd like to do in our applications: if no other layer before `main()` catches and handles the exception, it propagates to `main()`, `main()` logs the exception and its message as a fatal event to be stored in the system journal and the systemd unit is (typically) configured to restart the application. Restarting the application allows for a chance to recover from potential failures modes that persist (e.g. due to some invalid state stored in RAM) until application restart. Also, terminating the application, in which case the D-Bus daemon returns the standard error `org.freedesktop.DBus.Error.NoReply` to the client, avoids the need to declare an error for internal failures in the D-Bus API. Internal errors in the API specification do not really add value over `org.freedesktop.DBus.Error.NoReply` but only bloat the API as clients can't handle them in any better way than `org.freedesktop.DBus.Error.NoReply`.\n\nThe change should be backwards compatible as any code that hasn't propagated unexpected exceptions should still work as before while unexpected exceptions would still propagate through the callstack (excluding the `sd_bus` C functions) but just avoid the resource leaks from the `sd_bus` C functions.\n\n## Other options considered\n\nResources leaks from the `sd_bus` C functions could of course be avoided by catching all exceptions (or even `catch (...)`) in method implementations. That, however, would require adding some hand-written boilerplate to each and every method implementation. Additionally, as far as we see, there wouldn't be any means to propagate errors to `main()` as (unexpected) exceptions would cause resource leaks and the return value cannot be used to pass error codes.\n\nThe GCC option `-fexceptions` isn't really an option either as it still wouldn't automagically deallocate resources from the C code, many times one can't affect the compiler options used to build libsystemd, and -fexceptions is still a compiler specific option.\n\n## Pending actions\n\nThe implementation at this point is only a proof-of-concept or demonstration. We are not sure if e.g. `SdBusImpl` is the best / correct place to store the current exception, and secondly, if the change in principle looks good, we should extend the implementation to properties and potentially other necessary places. Also, tests were not modified yet and should be updated accordingly. Finally, the Git history needs to be cleaned up (the first commit dropped and at least a proper commit message written for the second commit).\n\n## Testing\n\nThe calculator example was modified to demonstrate the problem (the first commit) and the proposed change (the second commit).\n\nThe test can be reproduced with the following commands in the sdbusplus root directory for both commits:\n```\nrm -rf build/ && meson setup -Dtests=disabled build && cd build && ninja && valgrind --leak-check=full --show-leak-kinds=all ./example/calculator-server\nbusctl --user call net.poettering.Calculator /net/poettering/calculator net.poettering.Calculator Clear\n```\n\nAfter checking out the first commit, building it and running the calculator server with Valgrind\n```\nsdbusplus$ rm -rf build/ && meson setup -Dtests=disabled build && cd build && ninja\nThe Meson build system\nVersion: 1.0.1\nSource dir: /path/to/sdbusplus\nBuild dir: /path/to/sdbusplus/build\nBuild type: native build\nProject name: sdbusplus\nProject version: 1.0.0\nC compiler for the host machine: ccache cc (gcc 12.2.1 \"cc (GCC) 12.2.1 20221121 (Red Hat 12.2.1-4)\")\nC linker for the host machine: cc ld.bfd 2.37-37\nC++ compiler for the host machine: ccache c++ (gcc 12.2.1 \"c++ (GCC) 12.2.1 20221121 (Red Hat 12.2.1-4)\")\nC++ linker for the host machine: c++ ld.bfd 2.37-37\nHost machine cpu family: x86_64\nHost machine cpu: x86_64\nFound pkg-config: /usr/bin/pkg-config (1.8.0)\nRun-time dependency libsystemd found: YES 250\nProgram python3 (inflection, yaml, mako) found: YES (/path/to/bin/python3) modules: inflection, yaml, mako\nRun-time dependency Boost found: YES 1.76.0 (/usr)\nProgram sdbus++ found: YES (/path/to/sdbusplus/tools/sdbus++)\nProgram sdbus++ found: YES (overridden)\nProgram sdbus++-gen-meson found: YES (/path/to/sdbusplus/tools/sdbus++-gen-meson)\nProgram sdbus++-gen-meson found: YES (overridden)\nHeader \"boost/asio.hpp\" has symbol \"boost::asio::io_context\" : YES\nRun-time dependency Boost (found: context, coroutine) found: YES 1.76.0 (/usr)\nBuild targets in project: 9\n\nsdbusplus 1.0.0\n\n  User defined options\n    tests: disabled\n\nFound ninja-1.10.2 at /usr/bin/ninja\n[27/27] Linking target example/calculator-server\nbuild$ valgrind --leak-check=full --show-leak-kinds=all ./example/calculator-server\n==451108== Memcheck, a memory error detector\n==451108== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\n==451108== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\n==451108== Command: ./example/calculator-server\n==451108==\n```\nand issuing the call\n```\n$ busctl --user call net.poettering.Calculator /net/poettering/calculator net.poettering.Calculator Clear\n```\nthe client reports the error\n```\nCall failed: Remote peer disconnected\n```\nand the server produces the following results (full Valgrind output omitted):\n```\nTerminating due to a fatal condition: A propagating exception\n==451108==\n==451108== HEAP SUMMARY:\n==451108==     in use at exit: 3,946 bytes in 32 blocks\n==451108==   total heap usage: 142 allocs, 110 frees, 96,623 bytes allocated\n==451108==\n==451108== 2 bytes in 1 blocks are still reachable in loss record 1 of 27\n==451108==    at 0x484586F: malloc (vg_replace_malloc.c:381)\n==451108==    by 0x4C6152D: strdup (strdup.c:42)\n==451108==    by 0x48C4D7D: bus_node_allocate (bus-objects.c:1503)\n==451108==    by 0x48C4EE7: bus_node_allocate (bus-objects.c:1515)\n==451108==    by 0x48C4EE7: bus_node_allocate (bus-objects.c:1515)\n==451108==    by 0x48C4EE7: bus_node_allocate (bus-objects.c:1515)\n==451108==    by 0x48CC0BA: sd_bus_add_object_manager (bus-objects.c:3003)\n==451108==    by 0x403A17: sd_bus_add_object_manager (sdbus.hpp:189)\n==451108==    by 0x403A17: manager (manager.hpp:49)\n==451108==    by 0x403A17: main (calculator-server.cpp:63)\n==451108==\n[...]\n==451108==\n==451108== LEAK SUMMARY:\n==451108==    definitely lost: 0 bytes in 0 blocks\n==451108==    indirectly lost: 0 bytes in 0 blocks\n==451108==      possibly lost: 0 bytes in 0 blocks\n==451108==    still reachable: 3,946 bytes in 32 blocks\n==451108==         suppressed: 0 bytes in 0 blocks\n==451108==\n==451108== For lists of detected and suppressed errors, rerun with: -s\n==451108== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n```\n\nWith the second commit and the same procedure Valgrding reports no leaks (output not redacted)\n```\nbuild$ ninja && valgrind --leak-check=full --show-leak-kinds=all ./example/calculator-server\n[26/26] Linking target example/calculator-server\n==454408== Memcheck, a memory error detector\n==454408== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\n==454408== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\n==454408== Command: ./example/calculator-server\n==454408==\nTerminating due to a fatal condition: A propagating exception\n==454408==\n==454408== HEAP SUMMARY:\n==454408==     in use at exit: 0 bytes in 0 blocks\n==454408==   total heap usage: 154 allocs, 154 frees, 98,221 bytes allocated\n==454408==\n==454408== All heap blocks were freed -- no leaks are possible\n==454408==\n==454408== For lists of detected and suppressed errors, rerun with: -s\n==454408== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n```\nand the client still reports the same error (as expected)\n```\nCall failed: Remote peer disconnected\n```\n\n## References\n\n[1] https://lore.kernel.org/openbmc/YTDvfIn4Z05mGdCx@heinlein/"
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "line": 199,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "In both of these code paths we need to remove the exception from the interface, otherwise we can still only handle a single exception in a daemon."
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "line": 216,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Thanks, fixed."
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "line": 176,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "The implementation at this point is only a proof-of-concept or demonstration. We are not sure if e.g. `SdBusImpl` is the best / correct place to store the current exception."
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "line": 176,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would suggest we put it in the bus rather than in the interface.  The interface only exists for mocking purposes and tries to be a 1:1 mapping to underlying sd-bus interfaces (and doesn't use exceptions)."
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "line": 176,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Thanks, moved to the bus class."
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'd suggest `std::exchange(current_exception, nullptr)` and then where this is used you can do:\n\n```\nif (auto ex = get_current_exception())\n{\n    rethrow(ex);\n}\n```\n\nThat makes it so you don't reuse the exception and I think it is fairly straight-forward."
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Thanks, using std::exchange now but dropped get_current_exception() and using the member directly."
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "line": 93,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "The implementation at this point is only a proof-of-concept or demonstration, and if the concept looks good in general, we should extend the implementation to properties and potentially other necessary places."
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "line": 93,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 25,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.cpp.mako",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "include/sdbusplus/sdbus.hpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 57,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "4bc605bfbe49ad2fda5007d3a0bb07a7dff1863d",
            "parents": [
                "384943be7e81b08ed102abfaa3f2be2ad915e800"
            ],
            "ref": "refs/changes/59/62559/3",
            "uploader": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "createdOn": 1683631007,
            "author": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "The commit message became rather long due to moving the relevant parts of the original RFC cover letter to it and adding the testing description. I can trim it down if it's too verbose.\n\nI extended the implementation to cover reading and writing properties in addition to method implementations and added a couple of simple unit tests to verify that bus::process*() rethrow the current exception."
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.hpp.mako",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We'll need a more complex name than '_bus'.  The compile failure is due to name collision between a 'Bus' property in an interface YAML and this property.  `_sdbusplus_bus` is probably fine.\n\nI'd rather not store both the interface and the bus.  If we now need the bus, which is fine, we should remove the interface and obtain the interface from the bus when we need."
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.hpp.mako",
                    "line": 51,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Thanks. I was looking into the phosphor-dbus-interfaces and just about to ask what name you'd prefer. Now renamed the bus member and removed the interface member. Split that into its own commit as it's an independent simple refactor that doesn't change any existing functionality. Hopefully passes the CI now."
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.hpp.mako",
                    "line": 51,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 302,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.cpp.mako",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/bus/exception.cpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/property.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -4
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 375,
            "sizeDeletions": 7
        },
        {
            "number": 4,
            "revision": "2b495621abcdd7e9747225a9380990394a5fdd4d",
            "parents": [
                "27877eb995a2da529b2baab3ae50eec785a37a99"
            ],
            "ref": "refs/changes/59/62559/4",
            "uploader": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "createdOn": 1683636088,
            "author": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Seems clang-format failed in the previous CI run. At least the first issue should be fixed now.\n\nDidn't see a Jenkinsfile in the repo, so I looked briefly into openbmc-build-scripts to see what the CI pipeline looks like and expects so that I could take the checks into account and maybe even pre-run some of the steps locally, but didn't yet locate the pipeline other than maybe run-unit-test-docker.sh."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Yes, `run-unit-test-docker.sh` is what Jenkins runs.  We have a common test harness for all repositories except for openbmc/openbmc.  I don't think it is set up with a Jenkinsfile."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 302,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.cpp.mako",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/bus/exception.cpp",
                    "type": "ADDED",
                    "insertions": 28,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/property.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -4
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 366,
            "sizeDeletions": 6
        },
        {
            "number": 5,
            "revision": "02f743e9ec1c994e6cca865a07e367cc8ac84ae5",
            "parents": [
                "27877eb995a2da529b2baab3ae50eec785a37a99"
            ],
            "ref": "refs/changes/59/62559/5",
            "uploader": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "createdOn": 1683637125,
            "author": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 302,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.cpp.mako",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/bus/exception.cpp",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/property.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -4
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 367,
            "sizeDeletions": 6
        },
        {
            "number": 6,
            "revision": "90f8d9b44700c4c4017355cab97788f262e7f9fd",
            "parents": [
                "27877eb995a2da529b2baab3ae50eec785a37a99"
            ],
            "ref": "refs/changes/59/62559/6",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1683655710,
            "author": {
                "name": "Hannu Lounento",
                "email": "hannu.lounento@iki.fi",
                "username": "hlounent"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Hannu Lounento",
                        "email": "hannu.lounento@iki.fi",
                        "username": "hlounent"
                    },
                    "message": "Patrick, thanks for fixing the last CI failure and merging the changes!"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 302,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/interface.server.cpp.mako",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/method.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "include/sdbusplus/bus.hpp",
                    "type": "MODIFIED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "test/bus/exception.cpp",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "tools/sdbusplus/templates/property.prototype.hpp.mako",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -4
                },
                {
                    "file": "test/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 368,
            "sizeDeletions": 6
        }
    ]
}