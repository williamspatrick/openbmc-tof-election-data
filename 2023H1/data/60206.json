{
    "project": "openbmc/bmcweb",
    "branch": "master",
    "id": "Icd443bb89411924cc5e531b2f22cbea847ae484f",
    "number": 60206,
    "subject": "Postpone params validation",
    "owner": {
        "name": "Przemyslaw Czarnowski",
        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
        "username": "phawryle"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60206",
    "hashtags": [],
    "createdOn": 1673365442,
    "lastUpdated": 1677268709,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1673365442,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1673365462,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1673365462,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1673366288,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/58880/ : SUCCESS"
        },
        {
            "timestamp": 1673392010,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1673533941,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1673533965,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1673533965,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1673534164,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1673534786,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/58986/ : SUCCESS"
        },
        {
            "timestamp": 1673562810,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673607965,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673633904,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1673634631,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673636654,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1673637461,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673642341,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673642382,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673643381,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1674092190,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1674238582,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675080962,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1675080980,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1675080980,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1675081140,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1675081802,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59827/ : SUCCESS"
        },
        {
            "timestamp": 1675185920,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1675186549,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1675200698,
            "reviewer": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "message": "Patch Set 3:\n\n(5 comments)"
        },
        {
            "timestamp": 1675378837,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1677266346,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1677266401,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1677266401,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1677266598,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1677266813,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1677267270,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/61572/ : FAILURE"
        },
        {
            "timestamp": 1677267475,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1677267514,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1677267521,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5: Code-Review+2"
        },
        {
            "timestamp": 1677267543,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1677267544,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1677267544,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1677267585,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(2 comments)"
        },
        {
            "timestamp": 1677268688,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/61577/ : SUCCESS"
        },
        {
            "timestamp": 1677268709,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "24f98588df231b32ab81593af90fe0dd677c1b9b",
            "parents": [
                "1f2a40ce3223e024d510f2e3b32fbc7e08012728"
            ],
            "ref": "refs/changes/06/60206/1",
            "uploader": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "createdOn": 1673365442,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can you please add more details here?  In theory all modes need to validate parameters at some level, so I suspect we just need a little more explaination of \"why\" in this commit."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Let me describe. \n\nAccording to the design, there are two ways how to initiate virtual media requests. First is initiated by redfish action (legacy mode) and second (proxy mode) using websocket. \nAs proxy mode is not initiated using redfish, requests for appropriate action with proxy mode endpoint needs to be denied with appropriate response message and code. At the moment when we parse the parameters, we do not know which type of endpoint we operate on. That's why we pass the empty actionParams parameter to the place where such decision could be made, and the appropriate exit code can be passed to the user. Validation is added in other patches.\n\nI will extend the description, hope above gave you some more insight.\n\nBtw, VM backend is available as review request chain in jsnbd repo, so if you want to play around - it is possible now."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Let me describe. \n> \n> According to the design, there are two ways how to initiate virtual media requests. First is initiated by redfish action (legacy mode) and second (proxy mode) using websocket. \n\n\nWhy does the websocket take the redfish path?\n\n> As proxy mode is not initiated using redfish, requests for appropriate action with proxy mode endpoint needs to be denied with appropriate response message and code.\n\nWhy do the proxy mode endpoints need represented in redfish at all?  What's the use case?\n\n> At the moment when we parse the parameters, we do not know which type of endpoint we operate on. That's why we pass the empty actionParams parameter to the place where such decision could be made, and the appropriate exit code can be passed to the user. Validation is added in other patches.\n\nACK\n\n> \n> I will extend the description, hope above gave you some more insight.\n> \n> Btw, VM backend is available as review request chain in jsnbd repo, so if you want to play around - it is possible now."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "> > Let me describe. \n> > \n> > According to the design, there are two ways how to initiate virtual media requests. First is initiated by redfish action (legacy mode) and second (proxy mode) using websocket. \n> \n> \n> Why does the websocket take the redfish path?\n\nNo, it does not. For proxy mode we just open /nbd/X websocket to initiate connection. \n\n> \n> > As proxy mode is not initiated using redfish, requests for appropriate action with proxy mode endpoint needs to be denied with appropriate response message and code.\n> \n> Why do the proxy mode endpoints need represented in redfish at all?  What's the use case? \n\nRedfish could be used to:\n- check if there are any and if so - how many slots are available for each type/mode\n- check current status in each node\n- disconnect current connection\n\nAll is covered in the design document (https://github.com/openbmc/docs/blob/master/designs/virtual-media.md)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "Would be good if this was added to the commit msg :)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "I've updated message, hope now would be clearer."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The old code was correct here.  If the parameters given in the action are incorrect, we need to return 400 and complete."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "See previous comment.\nThis return value is valid only for legacy mode. For proxy mode we shall return 404."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Then register the two routes as different routes if they need to return 404 differently.  We cannot be ignoring errors.  As-written, this also doesn't work as you describe, it will set 400 errors within the response even in legacy mode."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "I understand your concern. Redfish path is the same for both modes (legacy and proxy). What differs is the path on DBus. We have to postpone validation to the time, when full validation is possible. I do not have other idea how to handle such case without redesign and having redfish endpoints names prefixed with mode.\n\nAlso, I see your point - json validation (when json is malformed) ends the connection and even if we change response later it does not matter. \nI would pass the whole readJsonAction() to dbus callback, but in one of previous reviews you asked me to not pass reference to request object in lambda capture list. How to deal with this problem then? Ignore and pass request down to dbus callback or pass as simple copy?"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> We have to postpone validation to the time\n\nThen don't parse the values, or make all the values std::optional, then check the std::optionals later to see if they're filled in."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "I would like to, but without request passed to DBus callback I would have to check it manually, first parse json then validate. But there is already a solution for this."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why?  std::optional shouldn't have issues if all params are optional, it will only throw errors if they are the wrong type, which you want to anyway."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "The problem I have is that raedJsonAction (the utility which does right job and does it good) invokes res.end() when json couldn't be parsed (this is an issue when we don't provide json at all). It also fills jsonValue with appropriate messages related to the format of the data provided in json. \nThis is OK for legacy mode, but I would also like to have a possibility to discard all for proxy. For proxy we shall behave like this route does not exist at all.\nThe proposal how to deal with this is a subject of the next patchset."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> The problem I have is that raedJsonAction (the utility which does right job and does it good) invokes res.end()\n\nAh, that makes more sense then.\n\nhttps://github.com/openbmc/bmcweb/blob/cef57e855f5a800222d5e5ba47cbbe69174211e9/redfish-core/src/utils/json_utils.cpp#L33\n\nI think is the one you're talking about, and that line can just be removed.  In fact, I already have a patch to remove it.\n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/59941\n\n> when json couldn't be parsed (this is an issue when we don't provide json at all). It also fills jsonValue with appropriate messages related to the format of the data provided in json. \n> This is OK for legacy mode, but I would also like to have a possibility to discard all for proxy. For proxy we shall behave like this route does not exist at all.\n> The proposal how to deal with this is a subject of the next patchset.\n\nIt would help quite a bit if we could get some level of documentation on this \"legacy\" versus \"normal\" pathing, and the intended behavior and parameters of each.  Considering that none of the backend code made it upstream, it's really hard as-is to understand the intent between the two, and why both need to exist."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Thanks for showing this review, I will remove the code adding possibility to avoid res.end() with readJsonAction().\n\nAs I mentioned it while upstreaming VM service, this naming scheme is provided and accepted in the design document. Feel free to propose some other name for this \"regular/normal/URL based\" path, but let's move this discussion to the design document. Then we do follow the scheme accepted by the community.\nOnce again, upstream of backend it WIP but all required patches are submitted, so could be tested."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sure, I'm happy to discuss.  The problem I'm noticing is actually a bmcweb specific one.  If there are \"legacy\" paths that should accept one set of params, and \"non legacy\" paths that accept a different set of params, they really should be different bmcweb_route instances.\n\nI wonder if at the virtual media collection level, we should append legacy_ or standard_ so we can directly differentiate.  postponing parameter validation isn't something we generally do."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 790,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 777,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Needs error checked before dereferencing on line 781"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 777,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "It is just an std::optional initialized with simple struct. What could possibly go wrong here? Shall I check it against std::nullopt?"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 777,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ah, gotcha.  I was reading InsertMediaActionParams as a method, not a constructor.  I suspect what you want here is to make all the elements within InsertMediaActionParams take std::optional (because that's your intent, for all parameters to be optional), then"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 777,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "then verify later whether or not the parameters are present in the validate function."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 777,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Yes, and it is made in verifyParams(). But still the problem with reading and parsing json from request remains. I would like to use readJsonAction() as it generate appropriate messages when there is a mismatch. But it is not possible at the level it is used now."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 777,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -22
                }
            ],
            "sizeInsertions": 42,
            "sizeDeletions": 22
        },
        {
            "number": 2,
            "revision": "ff2c7468bbdb54025beb0cd792f206d969c28d3d",
            "parents": [
                "71abefe40e8b4b7769183bbd5f49512a3842a82c"
            ],
            "ref": "refs/changes/06/60206/2",
            "uploader": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "createdOn": 1673533941,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "type": "MODIFIED",
                    "insertions": 26,
                    "deletions": -22
                }
            ],
            "sizeInsertions": 46,
            "sizeDeletions": 22
        },
        {
            "number": 3,
            "revision": "695d069eebb5fe4ea681116e4620fbd16f12a351",
            "parents": [
                "770b3ff239f96b419a791bed732f914899b8c202"
            ],
            "ref": "refs/changes/06/60206/3",
            "uploader": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "createdOn": 1675080962,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Out of curiosity, why was this called \"legacy\" mode if it's in the redfish standard?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Legacy term is used following accepted design docs for VM. See also other comment."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 10,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Doesn't this already happen in the router?  I'm confused why we need special handling here.  I'm assuming you want this to return 404?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Yes, I want regular 404 as this path is not listed in action list for \"proxy\" mode so shall not be serviced.\n\nLet's take a look at the \"real\" example:\nFirst GET on Proxy node:\ncurl -w '%{http_code}\\n' --header \"Content-Type: application/json\" --request GET https://host.name/redfish/v1/Managers/bmc/VirtualMedia/Slot_0                                 \n{\n  \"@odata.id\": \"/redfish/v1/Managers/bmc/VirtualMedia/Slot_0\",\n  \"@odata.type\": \"#VirtualMedia.v1_3_0.VirtualMedia\",\n  \"Actions\": {\n    \"#VirtualMedia.EjectMedia\": {\n      \"target\": \"/redfish/v1/Managers/bmc/VirtualMedia/Slot_0/Actions/VirtualMedia.EjectMedia\"\n    }\n  },\n  \"ConnectedVia\": \"NotConnected\",\n  \"Id\": \"Slot_0\",\n  \"Inserted\": false,\n  \"MediaTypes\": [\n    \"CD\",\n    \"USBStick\"\n  ],\n  \"Name\": \"Virtual Removable Media\",\n  \"Oem\": {\n    \"OpenBMC\": {\n      \"@odata.type\": \"#OemVirtualMedia.v1_0_0.VirtualMedia\",\n      \"WebSocketEndpoint\": \"/nbd/0\"\n    }\n  },\n  \"TransferMethod\": \"Stream\",\n  \"TransferProtocolType\": \"OEM\",\n  \"WriteProtected\": true\n}\n200\n\nBut somebody could use this action on an object representing proxy node and should get 404:\ncurl -o /dev/null -w '%{http_code}\\n' --header \"Content-Type: application/json\" --request POST https://host.name/redfish/v1/Managers/bmc/VirtualMedia/Slot_0/Actions/VirtualMedia.InsertMedia --data \"{}\"\n404\n\nFor \"legacy\" http code is 200 or e.g. 502 when host is not recognized:\ncurl -o /dev/null -w '%{http_code}\\n' --header \"Content-Type: application/json\" --request POST https://host.name/redfish/v1/Managers/bmc/VirtualMedia/Slot_2/Actions/VirtualMedia.InsertMedia --data \"{\\\"Image\\\": \\\"https://something\\\"}\"\n502\n\nFor completeness, GET on Slot_2 shows:\ncurl -w '%{http_code}\\n' --header \"Content-Type: application/json\" --request GET https://host.name/redfish/v1/Managers/bmc/VirtualMedia/Slot_2\n{\n  \"@odata.id\": \"/redfish/v1/Managers/bmc/VirtualMedia/Slot_2\",\n  \"@odata.type\": \"#VirtualMedia.v1_3_0.VirtualMedia\",\n  \"Actions\": {\n    \"#VirtualMedia.EjectMedia\": {\n      \"target\": \"/redfish/v1/Managers/bmc/VirtualMedia/Slot_2/Actions/VirtualMedia.EjectMedia\"\n    },\n    \"#VirtualMedia.InsertMedia\": {\n      \"target\": \"/redfish/v1/Managers/bmc/VirtualMedia/Slot_2/Actions/VirtualMedia.InsertMedia\"\n    }\n  },\n  \"ConnectedVia\": \"NotConnected\",\n  \"Id\": \"Slot_2\",\n  \"Inserted\": false,\n  \"MediaTypes\": [\n    \"CD\",\n    \"USBStick\"\n  ],\n  \"Name\": \"Virtual Removable Media\",\n  \"Oem\": {\n    \"OpenBMC\": {\n      \"@odata.type\": \"#OemVirtualMedia.v1_0_0.VirtualMedia\"\n    }\n  },\n  \"TransferMethod\": \"Stream\",\n  \"WriteProtected\": true\n}\n200\n\nHope this puts some more light on the issue."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "Another approach to handle different behaviors of proxy and legacy modes."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Overall, this really seems like something we need a naming convention for in the URI, which is how we handle this in other places.  something like\n\n/redfish/v1/Managers/<str>/VirtualMedia/Redfish<str>/Actions/VirtualMedia.InsertMedia\n\nWould point to the redfish capable endpoints, and\n\n/redfish/v1/Managers/<str>/VirtualMedia/ws<str>/Actions/VirtualMedia.InsertMedia\n\nWould point to the websocket endpoints.\n\nThat way, we don't even have to parse the json, and we can keep the rule that a given URI accepts and returns one type, which this doesn't handle well."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "This will assume kinda static names for nodes, but this, again, is not defined in the design. Actually, this could be discussed again, but is beyond the scope of this patchset.\nI would be more than happy to update the code base later (this could simplify the code)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I looked into this a little."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm surprised this \"false\" works here.  any idea what it's doing?"
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Przemyslaw Czarnowski",
                        "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                        "username": "phawryle"
                    },
                    "message": "this is the \"extension\" proposed to allow parsing without res.end()."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK.  Based on the dicusssion below, it shouldn't be needed."
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "line": 787,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/certificate_service.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -5
                },
                {
                    "file": "test/redfish-core/include/utils/json_utils_test.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/lib/hypervisor_system.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "include/google/google_service_root.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "type": "MODIFIED",
                    "insertions": 29,
                    "deletions": -22
                },
                {
                    "file": "redfish-core/include/utils/json_utils.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                },
                {
                    "file": "redfish-core/lib/chassis.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "redfish-core/src/utils/json_utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -2
                },
                {
                    "file": "include/ibm/management_console_rest.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/lib/managers.hpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/lib/update_service.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": -2
                },
                {
                    "file": "redfish-core/lib/log_services.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -3
                },
                {
                    "file": "redfish-core/lib/systems.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 109,
            "sizeDeletions": 50
        },
        {
            "number": 4,
            "revision": "6d214762f12514cde6214b1af3300ff196e34fb1",
            "parents": [
                "5e7e2dc585dc7a7e62d2b648b541e7f50c39ea5d"
            ],
            "ref": "refs/changes/06/60206/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1677266346,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I've refactored this a bit to where I'm happy with it.  If it works for you, this can merge."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Actually, this feature is already broken, lets just get this merged, and treat any other followup as another patch."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "type": "MODIFIED",
                    "insertions": 148,
                    "deletions": -147
                }
            ],
            "sizeInsertions": 168,
            "sizeDeletions": 147
        },
        {
            "number": 5,
            "revision": "120fa86ab4167d9746d08d3c4723ed677d86ab86",
            "parents": [
                "5e7e2dc585dc7a7e62d2b648b541e7f50c39ea5d"
            ],
            "ref": "refs/changes/06/60206/5",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1677267475,
            "author": {
                "name": "Przemyslaw Czarnowski",
                "email": "przemyslaw.hawrylewicz.czarnowski@intel.com",
                "username": "phawryle"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "redfish-core/lib/virtual_media.hpp",
                    "type": "MODIFIED",
                    "insertions": 146,
                    "deletions": -147
                }
            ],
            "sizeInsertions": 166,
            "sizeDeletions": 147
        }
    ]
}