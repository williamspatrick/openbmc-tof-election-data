{
    "project": "openbmc/sdbusplus",
    "branch": "master",
    "id": "I0475c04cc645563afeb2c7cf15b4d9522bc2b414",
    "number": 60111,
    "subject": "Add static to a number of methods that need it",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/60111",
    "hashtags": [],
    "createdOn": 1673043441,
    "lastUpdated": 1673126105,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1673043441,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1673043464,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1673043464,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1673044191,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/58697/ : SUCCESS"
        },
        {
            "timestamp": 1673044266,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1673044741,
            "reviewer": {
                "name": "William A. Kennington III",
                "email": "wak@google.com",
                "username": "wak-google"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1673045346,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1673045505,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1673126105,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "669f95cc825700f7cd3a7c930303f107a50b757c",
            "parents": [
                "640a7d56589c6f514c45d442daaa1d4be93eb5a6"
            ],
            "ref": "refs/changes/11/60111/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1673043441,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why?  I don't agree with this statement.  If we have some new Clang flag that is trying to enforce this, turn it off.  There is no reason to make every function in the organization have the 'static' keyword in front of it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "William A. Kennington III",
                        "email": "wak@google.com",
                        "username": "wak-google"
                    },
                    "message": "It's at least a googleism\nhttps://google.github.io/styleguide/cppguide.html#Internal_Linkage"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If there's no way to link against it because it's not in a header, why would someone want the symbols exposed?  I can disable the warning if you'd rather, it just seemed less controversial than I thought, which is why I didn't add a huge explanation to the commit message.  Sorry for that."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\"want the symbols exposed\"?  None of this is going into the shared library.  The linker should already handle the symbol visibility fine without this.\n\nI wouldn't have a problem if this was specifically about reducing the library symbol visibility because the linker is incapable of figuring it out on its own.  I don't want to see a precedent where every single .C file through out the org is required to have noisy 'static' on every single function.  It doesn't provide value."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "While I agree with your statement, it definitely isn't every function, only those that don't get used or defined outside the compile unit, which in most of these cases is the \"main\" file for the examples.\n\nlet me do some more research and see how much I really care.  You're right that this is a warning that has the potential to cause more boilerplate which isn't worth it compared to the bad design patterns it catches."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "example/asio-example.cpp",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": -15
                },
                {
                    "file": "example/coroutine-example.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "test/message/call.cpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 35,
            "sizeDeletions": 20
        }
    ]
}