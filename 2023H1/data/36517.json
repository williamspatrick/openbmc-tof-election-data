{
    "project": "openbmc/entity-manager",
    "branch": "master",
    "id": "Ib8186ef7257a13a596065bff3860a19512ca4f98",
    "number": 36517,
    "subject": "Add real parser to entity manager",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/entity-manager/+/36517",
    "hashtags": [],
    "createdOn": 1600201891,
    "lastUpdated": 1679676013,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1600201891,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1600201902,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1600201910,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4763/"
        },
        {
            "timestamp": 1600202177,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/4763/ : FAILURE"
        },
        {
            "timestamp": 1601383760,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1601391872,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1601391884,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601391891,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5367/"
        },
        {
            "timestamp": 1601391920,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/5367/ : FAILURE"
        },
        {
            "timestamp": 1601392105,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(5 comments)"
        },
        {
            "timestamp": 1601395103,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601403407,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601419030,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601464927,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601478564,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601492412,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601493597,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1679676013,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Abandoned\n\nNo effort on this in a while."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "e7a083d6caf5b6c683ea3fec99c1282103423871",
            "parents": [
                "844bf77aa5e208779f28e504b1d3a9532e5cacf7"
            ],
            "ref": "refs/changes/17/36517/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1600201891,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 23,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Regardless of implementation details, I think getting the logic factored out into a self contained thing is a great step forward for testing and maintainence."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 28,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Glad to see an off the shelf solution being used.  Sort of curious what the storage footprint impact looks like with this tool."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 28,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In my testing, it was about 12k for the full application.  I'm not sure how much of that was spirit versus the parser itself, but it seems reasonable.\n\nIn theory, the compiler can see and optimize the full grammar as if you had hardcoded it by hand, so it should be roughly as complex as we make it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 28,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Also, it was 5k before I added the symbols stuff, so it has the potential to swing wildly, but in a pretty reasonable range."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 39,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "This makes sense to me.  IMO implicit behavior such as this...just leads to bugs."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In looking at integrating this, this might need to be a follow on goal.  As-is, entity-manager does multiple passes on the data, each time with different keys.  I suspect that can be refactored to do something cleaner, but it's might be outside the scope of this patch.  But we'll see as I dig in more."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "The IBM VPD detection daemon publishes bytestrings (dbus type 'ay').  The &/| operators would possibly help when writing probe statements.\n\nAlso - the \"against core principles\" statement left me confused - I'm curious what use case of these operators would violate EM's core principles and which ones wouldn't?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The biggest thing is that Entity manager configs are supposed to be user-facing, and not contain implementation details.  Needing to do bitwise operators in a probe statement would generally be used for isolating fields in a binary blob, and somewhat speaks to the fact that those parameters should probably be broken out into full properties by the detecting daemon, rather than having EM operate on the binary data itself.\n\nWith that said, happy to discuss it."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> Entity manager configs are supposed to be user-facing, and not contain implementation details. \n\nI'm having trouble parsing what this means exactly.  Who is the user?  The system operator?  What would an example of something in an EM config that is an implementation detail be?\n\n>  should probably be broken out into full properties by the detecting daemon\n\nThey are already broken out.  An illustrative example - we have a 4 byte property called CCIN or \"customer card identification number\".  This is roughly a part number (although we have those too - IBM hw will have 1-N part numbers for a given CCIN).  Given two hypothetical FRUs with CCINs 0xaaaaaabb and 0xaaaaaacc it would be nice to be able to probe match both (0xaaaaaa) without having to list each one.  It is the same thing as a wildcard match on a part number string."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Entity manager configs are supposed to be user-facing, and not contain implementation details. \n> \n> I'm having trouble parsing what this means exactly.  Who is the user?  The system operator?  What would an example of something in an EM config that is an implementation detail be?\n\nSomething like this, where we're hardcoding a specific dbus interface into a config file, and forwarding along specific property names through EM.  Ideally I'd like to see that whole section go away in all the config files, and the user would have some way to say \"this is a power supply\", maybe based on folder structure?  At the time we wrote this, perfect was the enemy of good, so here we are.\n\nhttps://github.com/openbmc/entity-manager/blob/d7b6659944c3527622d454526509a0a8697ada0f/configurations/ASPOWER_U1A-D11200_PSU.json#L146\n\n\nOther examples of implementation details:  Take a look at the probe entry a couple lines up.  Knowing which entity/interface to match against would require a lot of documentation for a user, and something people are already struggling with.  This is an area that's ripe for simplification.\n\n> \n> >  should probably be broken out into full properties by the detecting daemon\n> \n> They are already broken out.  An illustrative example - we have a 4 byte property called CCIN or \"customer card identification number\".  This is roughly a part number (although we have those too - IBM hw will have 1-N part numbers for a given CCIN).  Given two hypothetical FRUs with CCINs 0xaaaaaabb and 0xaaaaaacc it would be nice to be able to probe match both (0xaaaaaa) without having to list each one.  It is the same thing as a wildcard match on a part number string.\n\nIn that case, today you would just do an OR match between the two cards.  Similar to this:\nhttps://github.com/openbmc/entity-manager/blob/d7b6659944c3527622d454526509a0a8697ada0f/configurations/Intel%20Front%20Panel.json#L43\n\nI tend to prefer that, as it's a lot more obvious how many, and what cards this file supports than if you did it with a single match.  Also, when that one card needs its own config file because X manufacturer did Y thing wrong, it's much easier to extract.\n\nIt should be noted, the above is moot in the context of this patch, as the variable replacement parser doesn't work on Probe statements at all, given that you would have to know about the match to make the match, you get a chicken and egg problem."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> In that case, today you would just do an OR match between the two cards.\n\nRight, this was my plan.  There are wildcard matches already though are there not?  Are those broken and need to be fixed?\n\n \"Probe\": \"xyz.openbmc_project.FruDevice({'PRODUCT_PRODUCT_NAME': '.*WFT'})\"\n\nHow is this different?\n\n>  as the variable replacement parser doesn't work on Probe statements at all,\n\nI wondered about this.  It seems we have 3 contexts for replacing tokens in EM?\n\n1 - probe statments\n2 - $address, $bus, $index\n3 - the ones this parser targets?\n\nIs there a difference between 2 and 3?  Why do I find $address in some contexts but $ADDRESS in others?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > In that case, today you would just do an OR match between the two cards.\n> \n> Right, this was my plan.  There are wildcard matches already though are there not?  Are those broken and need to be fixed?\n> \n>  \"Probe\": \"xyz.openbmc_project.FruDevice({'PRODUCT_PRODUCT_NAME': '.*WFT'})\"\n\n\"broken\" is a bit of a strong word, but yeah, one could say they're sub-optimal.  That one above I'm not even sure why it exists.  S2600WFT is I think what it should read on most platforms.  If anything it should be S2600WF? but I'm not sure why this was chosen.\n\n> \n> How is this different?\n\nThan a bit shift operator in the variable replacement logic?  One is a regex, the other is replacing variables?  I'm not sure I really understand\n\n> \n> >  as the variable replacement parser doesn't work on Probe statements at all,\n> \n> I wondered about this.  It seems we have 3 contexts for replacing tokens in EM?\n> \n> 1 - probe statments\n\nProbe statements don't ever replace tokens, they only do wildcard matching.\n\n> 2 - $address, $bus, $index\n> 3 - the ones this parser targets?\n> \n> Is there a difference between 2 and 3?\n\nNo.  2 and 3 are intended to be this parser.\n\n> Why do I find $address in some contexts but $ADDRESS in others?\n\nJust a guess, but it might be $address ends up as a numeric type on dbus (so you can pull it through as an int) and $ADDRESS ends up as a string type.  We should probably disambiguate the two if they are in fact different."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> \"broken\" is a bit of a strong word \n\nsure - how about \"goes against entity-manager core principles\" ?\n\n> I'm not sure I really understand\n\nThx for trying - as you noticed I was confused and conflating probes with variable expressions.\n\n> Probe statements don't ever replace tokens, they only do wildcard matching.\n\noops, right."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 42,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > \"broken\" is a bit of a strong word \n> \n> sure - how about \"goes against entity-manager core principles\" ?\n\nThat's a fair statement.  I'm conflicted on wildcard/regex matching in EM, because there are cases where it's useful, but the likelyhood that it gets abused in ways that cause cross platform dependencies (like using one config for 5 different systems) is really high.  I suspect there's a happy medium here, where we allow matching multiple platforms, but the MOMENT anything is different between them, they need moved to separate files.  At this point I'm just thinking out loud;  This definitely could use some more thought."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 46,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Is it worth mentioning unit tests here?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yup.  I guess I just assumed we'd run the existing unit tests for the parser, possibly adding some new cases for oddities in the grammar (things like spaces in math expressions).\n\nI've added a message about running the unit tests."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 48,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Would be cool if this could happen automatically as a part of CI.  You could even do this before making any changes to easily validate that the new parser didn't regress anything."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 48,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Agreed.  That would help a lot.  I'll add it to the (never-ending) list."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 54,
                    "deletions": 0
                },
                {
                    "file": "src/Parser.cpp",
                    "type": "ADDED",
                    "insertions": 270,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -208
                }
            ],
            "sizeInsertions": 355,
            "sizeDeletions": 208
        },
        {
            "number": 2,
            "revision": "0f3d10355357b75551db1a69e8e213770d5dcc84",
            "parents": [
                "844bf77aa5e208779f28e504b1d3a9532e5cacf7"
            ],
            "ref": "refs/changes/17/36517/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1601391872,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 63,
                    "deletions": 0
                },
                {
                    "file": "src/Parser.cpp",
                    "type": "ADDED",
                    "insertions": 269,
                    "deletions": 0
                },
                {
                    "file": "src/Utils.cpp",
                    "type": "MODIFIED",
                    "insertions": 31,
                    "deletions": -208
                }
            ],
            "sizeInsertions": 363,
            "sizeDeletions": 208
        }
    ]
}