{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I0d49f2b6417c794f2443505f8d0cbc995599813c",
    "number": 59928,
    "subject": "psusensor: allow per-driver PSUProperty defaults",
    "owner": {
        "name": "Paul Fertser",
        "email": "fercerpav@gmail.com",
        "username": "paulfertser"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/59928",
    "hashtags": [],
    "createdOn": 1672142226,
    "lastUpdated": 1675424055,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1672142226,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1672142251,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1672142251,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1672142433,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/58295/ : FAILURE"
        },
        {
            "timestamp": 1672145184,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1672145211,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1672145211,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1672145421,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/58297/ : SUCCESS"
        },
        {
            "timestamp": 1672149511,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673578467,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673604663,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673605281,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673644757,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673693643,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1673929817,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review-1\n\n(1 comment)"
        },
        {
            "timestamp": 1673978514,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1674129646,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Code-Review-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1674129657,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674129658,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1674129903,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59387/ : SUCCESS"
        },
        {
            "timestamp": 1674180443,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1674239886,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1674604108,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1675189209,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1675189851,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1675190364,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1675193667,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(5 comments)"
        },
        {
            "timestamp": 1675195070,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1675261592,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1675261608,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1675261608,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1675261665,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/59989/ : FAILURE"
        },
        {
            "timestamp": 1675262318,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1675262348,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1675262348,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1675262548,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/59993/ : FAILURE"
        },
        {
            "timestamp": 1675263134,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 6.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1675263158,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1675263158,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1675263404,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59995/ : SUCCESS"
        },
        {
            "timestamp": 1675264114,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Patch Set 6:\n\n(5 comments)"
        },
        {
            "timestamp": 1675291543,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 6:\n\n(3 comments)"
        },
        {
            "timestamp": 1675423808,
            "reviewer": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "message": "Uploaded patch set 7.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1675423822,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1675423822,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: -Ok-To-Test"
        },
        {
            "timestamp": 1675424055,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/60101/ : SUCCESS"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "19661f66e39d073419ebd70bc2468904c491fb74",
            "parents": [
                "ead7e927675d28e0e1b7bbc5d47e9bbcdda4da2e"
            ],
            "ref": "refs/changes/28/59928/1",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1672142226,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm looking at the patch, and I'm really not following how it's doing what the commit message claims here.  It's just doing an extra call to look for the label name instead of pmbusname + label name?  I'm not really following how that accomplishes what you're trying to do."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "> I'm looking at the patch, and I'm really not following how it's doing what the commit message claims here.  It's just doing an extra call to look for the label name instead of pmbusname + label name?  I'm not really following how that accomplishes what you're trying to do.\n\nI haven't rebased https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/59929/2?usp=related-change on top of the current change yet, but I hope the idea is clear: the current change provides a mechanism to hardcode a driver-specific override. pmbusname is the kernel driver name that's currently bound for the device in question."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 20,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Patchset 2 was a 6 line change that didn't really do anything.  Patchset 3 makes more sense."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 27,
            "sizeDeletions": 1
        },
        {
            "number": 2,
            "revision": "f7df14ef6d6497881a0502289473753388998b06",
            "parents": [
                "ead7e927675d28e0e1b7bbc5d47e9bbcdda4da2e"
            ],
            "ref": "refs/changes/28/59928/2",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1672145184,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is the part of this commit that I'm not sure about.  The defaults are supposed to be exactly that, defaults, but I'm not really sure this patchset solves the issue in a better way, given that ANY board is going to have to put in board-specific defaults.\n\nMy minor preference would be to detect and error on the cases where we get a configuration with a threshold that can't be hit, which I think solves the problem.  I'm a little worried about extending the default system, because this type of hardware functionally has no good \"default\", as it depends on the board config, and any default we put in is just going to be from the first user, and still incorrect in a majority of cases, so I'm not sure we gain anything overall.\n\nThe intent of the existing defaults was that we would pick the limits of what pmbus can represent, and if a system wanted to refine that, it could.  Setting per-device defaults just seems like it adds complexity in a bad way."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "> This is the part of this commit that I'm not sure about.  The defaults are supposed to be exactly that, defaults, but I'm not really sure this patchset solves the issue in a better way, given that ANY board is going to have to put in board-specific defaults.\n\nThe truth of life is that in the current entity-manager repository only `kudo` has custom specifications for maximum values (grep _Max) and only `blyth` specifies non-default hysteresis for some temperature sensors (grep \\\"Hysteresis).\n\nMy guess is that either the others never cared (as hitting an issue with unresonably large hysteresis is pretty hard in practice and requires an additional hardware or software issue) or probably have downstream patches to make default hysteresis effectively zero (I know Phoenix downstream uses max * 0.0005 instead of 0.01; Zev's unisensor has NaN). Apparently hitting an issue in real-life testing with 0 hysteresis is pretty hard too, even harder than crossing a threshold and going back. Probably that's what you want upstream instead?\n\nSo if most users are still counting on the defaults why not make it easier for them where we can?\n \n> My minor preference would be to detect and error on the cases where we get a configuration with a threshold that can't be hit, which I think solves the problem.  \n\nDoes this idea sound sane to you: \"on startup if the first measured (and reported, since some measurements must be ignored while the host is turned off) value is within all the thresholds /but/ closer than the specified hysteresis to one of them, print a warning to the log?\"\n\n> I'm a little worried about extending the default system, because this type of hardware functionally has no good \"default\", as it depends on the board config, and any default we put in is just going to be from the first user, and still incorrect in a majority of cases, so I'm not sure we gain anything overall.\n\nWith VRs such as pxe1610 and similar that's not the case, as they have some very strict limits on the voltage they measure, and they measure it directly, without any possibility for custom divider networks getting involved, so no matter what board you'd have them on the maximum possible value will be exactly the same.\n\n> The intent of the existing defaults was that we would pick the limits of what pmbus can represent, and if a system wanted to refine that, it could.  Setting per-device defaults just seems like it adds complexity in a bad way.\n\nI hope my clarifications make it seem less bad, and probably even desired :)"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> With VRs such as pxe1610 and similar that's not the case, as they have some very strict limits on the voltage they measure, and they measure it directly\n\nThis changes my opinion here.  If the classes of VR aren't configurable by the board, and we just picked a mediocre default, I'm fine with new defaults."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 19,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "So let's proceed with the new plan."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "FWIW, a related issue (but with adcsensor) was already discussed at https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/37345 with many good points raised. AFAICT, the conclusion is that it's essential to set the maximum to the real maximum that ADC can measure; while with adcsensors it's possible to just hardcode it for all supported devices, psusensors needs more fine-grained approach."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "In omnisensor the control over default min and max values is less fine-grained: https://github.com/zevweiss/omnisensor/blob/master/src/hwmon.rs#L238 . Zev, since you've recently had a good deep dive into the topic, probably you can provide some feedback here? Is this feature (driver-specific default values) worth having at all in your opinion?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I wouldn't read too much into that; I was basically just aiming for approximate feature parity with the existing psusensor code here: https://github.com/openbmc/dbus-sensors/blob/master/src/PSUSensorMain.cpp#L934-L1021\n\n(And as noted in the FIXME comment I left in that match block there I was lazy and didn't even make it fully match the existing code.)\n\nAs for whether it's worth having -- from your description there's clearly a significant shortcoming with the existing code; what I'm less sure of is the right way to address it...\n\nIs the value range going to be roughly the same for all instances of that device?  If so, should we just have a fixed lookup table in the daemon to handle it automatically instead of making every instance of it specify it explicitly in its config?"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "Hello Zev,\n\nThank you for chiming in.\n\n> As for whether it's worth having -- from your description there's clearly a significant shortcoming with the existing code; what I'm less sure of is the right way to address it...\n\nI see just two points why correct min and max values are important: precision of reporting via IPMI; automatic appropriate hysteresis. And the latter seems to be not implemented at all in omnisensor (defaults to NaN), so I'd expect to see a stream of events reported when it so happens that the measured value fluctuates (e.g. in the LSB of the ADC) near a threshold unless a specific configuration for this input is added.\n\nBTW, a somewhat related idea: how about adding sanity checking for hysteresis in this manner: on startup if the first measured (and reported, since some measurements must be ignored while the host is turned off) value is within all the thresholds /but/ closer than the specified hysteresis to one of them, print a warning to the log?\n\n> Is the value range going to be roughly the same for all instances of that device?  \n\nOf course, different hwmon (and other subsystem devices) can differ. E.g. a chip which measures current over a shunt resistor can have very different ranges on different boards, depending on the shunt value. But some devices (such as these pxe1610-compatible VRs, or the integrated ADC of ast2500/ast2600) have fixed limits.\n\n> If so, should we just have a fixed lookup table in the daemon to handle it automatically instead of making every instance of it specify it explicitly in its config?\n\nThat's what I'm proposing with this patch: to hardcode sensible values in the daemon for at least some drivers."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Why do we have to rely on encoding this metadata in a string? What are the alternatives and why are they worse?"
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "Hello Andrew,\nSo basically here we need a way to match on two keys: the kernel driver name and the particular label. One way to do that would be to make labelMatch a map that uses `std::pair<std::string, std::string>` for the key. That would involve changing all the existing entries in it, and adding new entries would look a bit more complex. The approach I offer is allowing to do the job with minimal changes, also similar \"metadata in a string\" idea was already accepted in c7e956275ffef . I do not consider the possibility to get a clash between such an augmented label name with another real label name to be real, so I can't see any downsides."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "As a maintainer, the downside to me is we're adding a yet another DSL to this codebase, which is already full of crazy DSLs. Honestly, I want it to stop. It's next to impossible to learn the behaviour without completely reading the code: it's an unabstraction.\n\nYou're already guarding the fallback of an un-augmented search here. The least we could do is come up with a more appropriate device-specific structure and search that first. If that fails, we fall back to the generic definitions as you've done here. No string parsing required, and we have types that can be enforced by the compiler."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1 to andrews comment.  Build typesafe structures.\n\n> That would involve changing all the existing entries in it, and adding new entries would look a bit more comple\n\nWhat you laid out would be my preference, with the exception of not using std::pair (becuase x.first and x.second have less meaning).\n\n> is allowing to do the job with minimal changes\n\nPer the coding standard \"minimal changes\" is not what we optimize for.  Code will be read many... many times by developers.  It will be written once.  We optimize for the reader, and clean code, and if that means propagating a type through several layers of interfaces, that's what we do."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 619,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 6,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 28,
            "sizeDeletions": 1
        },
        {
            "number": 3,
            "revision": "d112d740c1e3639b1ca7c72410db01703462de55",
            "parents": [
                "ea148ec6f913c1b1d4a145591097628b01384d96"
            ],
            "ref": "refs/changes/28/59928/3",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1674129646,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "+1 on the basis that this no-longer has a funky DSL. Deferring to Ed for other concerns."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I think this is an improvement. It does provide a solution where drivers have specific limits."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ok, overall, I'm understanding the feature, and I think there's a use case, and definitely think it's valid.  I do think we need to simplify the const structure a bit.  Ideally it should be something like:\n\nconstexpr std::array<PSURangeEntry, number> lookup = {\n....\n\n}.\n\nThat way, we're not mallocing a huge structure on startup."
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "?  Why friend?"
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "Doesn't matter if friend or const member afaict."
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 77,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The coding standard would normally make this not a friend."
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can we do this the easier to read way?\n\nif (l.label != r.label){\n    return false;\n}\nreturn l.driver == r.driver;"
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "> Can we do this the easier to read way?\n> \n> if (l.label != r.label){\n>     return false;\n> }\n> return l.driver == r.driver;\n\nMy implementation is taken literally from https://en.cppreference.com/w/cpp/language/operators#Comparison_operators . We need to implement operator< for the map to work, the set requires ordering. Why exactly it needs to be friend I'm not sure, C++ is still surprising to me so I just trust cppreference."
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "FWIW it looks like to provide total ordering (which is required for std::map and similar containers) one can either give a friend operator< function or a const member operator< function, both should be equivalent, and using std::tie is considered the right ideomatic way for the purpose."
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "line": 79,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We shouldn't be using std::map here.  PLease take a look at the WIP patches I've pushed."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 939,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "If this structure becomes per-system, it explodes it in a really bad way.\n\nThis struct already suffers from the fact that it:\n1. Takes up a ton of memory.\n2. Is allocated on startup.\n3. Includes tons of redundant data that could be easily just matched (vout1, vout2, vout3, ect)\n\nI don't like to require cleaning up someone elses code, but I don't see how we can afford to make this structure 20 times larger (assuming 20 different VR types) without some simplification."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 939,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "> If this structure becomes per-system, it explodes it in a really bad way.\n> \n> This struct already suffers from the fact that it:\n> 1. Takes up a ton of memory.\n> 2. Is allocated on startup.\n> 3. Includes tons of redundant data that could be easily just matched (vout1, vout2, vout3, ect)\n> \n> I don't like to require cleaning up someone elses code, but I don't see how we can afford to make this structure 20 times larger (assuming 20 different VR types) without some simplification.\n\nHm, probably it would be enough to match something like ``pin[0-9]*`` instead of the exact match, and that would simplify it enough?\n\nI'll see what I can do."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 939,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "Guess you meant something like my last changeset, it seems to satisfy all your requirements."
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "line": 939,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I pushed a patch series that conveys what needs to change, please help to review it, and if it works for you, we can just stack your changes ontop."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "include/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 93,
                    "deletions": -89
                }
            ],
            "sizeInsertions": 126,
            "sizeDeletions": 89
        },
        {
            "number": 4,
            "revision": "2364426e17ac0854f06b2aeed4903468872880f0",
            "parents": [
                "6747eba5e06ce8f7b407193410aa7d04eb5b833c"
            ],
            "ref": "refs/changes/28/59928/4",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1675261592,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -11
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -97
                }
            ],
            "sizeInsertions": 67,
            "sizeDeletions": 108
        },
        {
            "number": 5,
            "revision": "15111cb2908681bb0ddf92a0e2974c78083f7e3e",
            "parents": [
                "6747eba5e06ce8f7b407193410aa7d04eb5b833c"
            ],
            "ref": "refs/changes/28/59928/5",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1675262318,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -11
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -97
                }
            ],
            "sizeInsertions": 67,
            "sizeDeletions": 108
        },
        {
            "number": 6,
            "revision": "dd2b6331bf0924c1b7bd9573a3319f49646bb05b",
            "parents": [
                "6747eba5e06ce8f7b407193410aa7d04eb5b833c"
            ],
            "ref": "refs/changes/28/59928/6",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1675263134,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Paul Fertser",
                        "email": "fercerpav@gmail.com",
                        "username": "paulfertser"
                    },
                    "message": "A fair warning: the last changeset is only compile-time tested. Would be happy to hear your feedback before I invest time in testing it on our downstream old fork.**"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -11
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 36,
                    "deletions": -97
                }
            ],
            "sizeInsertions": 67,
            "sizeDeletions": 108
        },
        {
            "number": 7,
            "revision": "26b775a6fa6b744e795fce4c794bf008e5964d49",
            "parents": [
                "89d7f223eee7636888b50d05861066a2eebdf293"
            ],
            "ref": "refs/changes/28/59928/7",
            "uploader": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "createdOn": 1675423808,
            "author": {
                "name": "Paul Fertser",
                "email": "fercerpav@gmail.com",
                "username": "paulfertser"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 22,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensorMain.cpp",
                    "type": "MODIFIED",
                    "insertions": 20,
                    "deletions": -18
                }
            ],
            "sizeInsertions": 43,
            "sizeDeletions": 18
        }
    ]
}