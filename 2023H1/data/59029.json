{
    "project": "openbmc/libpldm",
    "branch": "main",
    "id": "I2b05578e228ad70219968cc1de2f26e8cd55ecc2",
    "number": 59029,
    "subject": "Add PLDM Base Requester library",
    "owner": {
        "name": "Harsh Tyagi",
        "email": "harsh23tyagi11@gmail.com",
        "username": "harsh23tyagi11"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/libpldm/+/59029",
    "hashtags": [],
    "createdOn": 1669761713,
    "lastUpdated": 1673826060,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1669761713,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1669761732,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1669761734,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1669761739,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1669761781,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Set private"
        },
        {
            "timestamp": 1669761842,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Removed cc Jason Bills <jason.m.bills@linux.intel.com>."
        },
        {
            "timestamp": 1669769052,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1669862556,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1669862727,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1670294226,
            "reviewer": {
                "name": "Kasun Athukorala",
                "email": "kasunath@google.com",
                "username": "kasunathg"
            },
            "message": "Patch Set 4:\n\n(9 comments)"
        },
        {
            "timestamp": 1670295085,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Patch Set 4:\n\n(7 comments)"
        },
        {
            "timestamp": 1670362290,
            "reviewer": {
                "name": "Kasun Athukorala",
                "email": "kasunath@google.com",
                "username": "kasunathg"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1670536375,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1670536444,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 6: Commit message was updated."
        },
        {
            "timestamp": 1670536823,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1670560565,
            "reviewer": {
                "name": "Kasun Athukorala",
                "email": "kasunath@google.com",
                "username": "kasunathg"
            },
            "message": "Patch Set 7:\n\n(15 comments)"
        },
        {
            "timestamp": 1670623486,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Patch Set 7:\n\n(16 comments)"
        },
        {
            "timestamp": 1670623635,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 8."
        },
        {
            "timestamp": 1670626355,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 8:\n\n(6 comments)"
        },
        {
            "timestamp": 1670874536,
            "reviewer": {
                "name": "Kasun Athukorala",
                "email": "kasunath@google.com",
                "username": "kasunathg"
            },
            "message": "Patch Set 8:\n\n(9 comments)"
        },
        {
            "timestamp": 1670889479,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Patch Set 8:\n\n(8 comments)"
        },
        {
            "timestamp": 1670914029,
            "reviewer": {
                "name": "Kasun Athukorala",
                "email": "kasunath@google.com",
                "username": "kasunathg"
            },
            "message": "Patch Set 8:\n\n(3 comments)"
        },
        {
            "timestamp": 1670955079,
            "reviewer": {
                "name": "Kasun Athukorala",
                "email": "kasunath@google.com",
                "username": "kasunathg"
            },
            "message": "Patch Set 8:\n\n(1 comment)"
        },
        {
            "timestamp": 1671051887,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1671052402,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 10: Commit message was updated."
        },
        {
            "timestamp": 1671052484,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1671052576,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Patch Set 11:\n\n(10 comments)"
        },
        {
            "timestamp": 1671075362,
            "reviewer": {
                "name": "Nikhil Namjoshi",
                "email": "nikhilnamjoshi@google.com",
                "username": "namjoshiniks"
            },
            "message": "Patch Set 11:\n\n(3 comments)"
        },
        {
            "timestamp": 1671151658,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1671151902,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Patch Set 12:\n\n(1 comment)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1671151914,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Unset private"
        },
        {
            "timestamp": 1671158232,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1671218559,
            "reviewer": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "message": "Patch Set 12:\n\n(2 comments)"
        },
        {
            "timestamp": 1673505742,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 12:\n\n(1 comment)"
        },
        {
            "timestamp": 1673826060,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica@linux.ibm.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 12:\n\n(4 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "1733685cafea17503654426f1d381f4235adb848",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/1",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1669761713,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "type": "ADDED",
                    "insertions": 57,
                    "deletions": 0
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "type": "ADDED",
                    "insertions": 88,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 159,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "5a3f200eaccf2049e2120bb0e9f14cea49e0644c",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/2",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1669769052,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "type": "ADDED",
                    "insertions": 58,
                    "deletions": 0
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "type": "ADDED",
                    "insertions": 88,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 160,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "a789a649c4040b1511183cec40cd23bc184cd7ff",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/3",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1669862556,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "type": "ADDED",
                    "insertions": 103,
                    "deletions": 0
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "type": "ADDED",
                    "insertions": 134,
                    "deletions": 0
                },
                {
                    "file": "tests/rde_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 60,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 313,
            "sizeDeletions": 3
        },
        {
            "number": 4,
            "revision": "c317b2d882602ba1614fb574a0389e55b6260ad3",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/4",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1669862727,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 1,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "This is simply the requester for PLDM base type. So we should name it as \"base\", not \"rde\"."
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 40,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "you can use PLDM_MAX_TYPES in base.h"
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 40,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "versions are 32 bits"
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 40,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Yes, definitely. Missed that."
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 40,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Yes, I read that later. It is coming in the next CL. It is usually being represented by ver_32."
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 57,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Why are you passing a pointer here?"
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 57,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 70,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "This should be the request buffer and the length. You can make a struct encapsulating a buffer and a variable for length."
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 90,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "whats the purpose of this queue?"
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "line": 90,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "As we discussed, I thought that this queue can be leveraged by the caller in terms of multiple requests (lets say from BMC Web) but I'll leave that part to the caller instead. Hence removing it and moving the functionality of just creating the request stream in the requester library."
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 59,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Since this is just a single value, you can pass by value. No need to use a pointer here."
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 59,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Yes sure."
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 62,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "A context should be tied to a particular eid and a requester tid. So we should initialize it separately. Something like \"pldm_base_init_context\""
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 62,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Makes sense. I can create another struct and tie them together"
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 62,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Sorry for the confusion. What I meant is creating another function for initializing the context we are using.\n\nvoid pldm_base_init_context(struct requester_base_context *ctx, uint8_t tid, ...);\n\nI think we shouldn't add the EID to the lib, since it's part of MCTP not the requester."
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 62,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Oh okay. We can keep those on the caller side."
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 63,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "We can simply set the \"current_command\" command to the first request command we need to generate and generate it when we call pldm_base_get_next_request"
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "line": 63,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Yes, since we are not using a queueing mechanism, then yes I'll update that."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/rde_requester.h",
                    "type": "ADDED",
                    "insertions": 103,
                    "deletions": 0
                },
                {
                    "file": "src/requester/rde_requester.c",
                    "type": "ADDED",
                    "insertions": 134,
                    "deletions": 0
                },
                {
                    "file": "tests/rde_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 64,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 317,
            "sizeDeletions": 3
        },
        {
            "number": 5,
            "revision": "69b8ad8b3be1b3ea686145a0fd3336bfc8bc4673",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/5",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1670536375,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 178,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 100,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 180,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 474,
            "sizeDeletions": 3
        },
        {
            "number": 6,
            "revision": "905cc53d75db212f2513e0f8bfd2f7d330e7dcb3",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/6",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1670536444,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 178,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 100,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 180,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 474,
            "sizeDeletions": 3
        },
        {
            "number": 7,
            "revision": "69fd8d4fa802cd3f79072eac72e324e7a04058d5",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/7",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1670536823,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 47,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "nit: Can we make the return type int, to be consistent with the rest."
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 47,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Even though `int` is used in other files, I followed this structure as it was used in `pldm.h`, and we are making this under pldm directory. Do you still suggest to remove it?"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 47,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Given that you are using negative integer values for enums, using int as return type could mean very different enum values when converting from pldm_base_requester_rc_t to int. Stick to using either int or pldm_base_requester_rc_t (preferred) in all places."
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 47,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "I just saw that pldm.h uses this style. So we can keep this."
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 47,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 11,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "You should be able to get rid of some of these headers. I don't think all of them are needed."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 11,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 14,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Not used"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 14,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 34,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "In case there is a failure, maybe it will be useful to print an error message with the command you were trying to encode and the error code.\n\nfprintf(stderr, \"\");"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 34,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 36,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "You can check the return status after the switch. That way you only need to do it once rather than doing it for every case."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 36,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Oh yes. Of course. I forgot to change it here. It was a left over, since I wrote these cases one at a time."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 45,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "nit: naming should be consistent with the rest of the repository. In this everything is snake_case"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 45,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 56,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "nit: you can pass this directly"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 56,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 76,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Here, the completion code (CC) hasn't been considered. We need to look at that before using the result. Applies to all cases"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 76,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Makes sense. I added it in the or clause:\n`if (rc || cc)` and will fprintf the error with rc and completion code if any.\n\nAdded this print too:\n\n```\nfprintf(stderr,\n\"Response decode failed with rc: %d, \"\n\"completion code: %d and err: %d\",\nrc, cc, errno);\n```"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "You are setting the command_status to one value here and changing it again to a different value in the line after next. Is that intentional?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "I intentionally added that. Because that is what the sequence of flow is. It does not hold much of syntactical value, but semantically, that is how the lifecycle of an executed command should be.\nI could remove it if you suggest it."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Doesn't the requestor of API pldm_base_push_response() expect command_status to be COMMAND_COMPLETED instead of COMMAND_NOT_STARTED ?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "It doesn't make much sense to change the value of the command_status this way. \n\nLooks like you haven't used this anywhere. If someone calls the pldm_base_get_next_request before receiving the response for the previous request, it should be an error. You could use this to indicate whether the requester is waiting for a response or not or free to start a new action."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "This makes sense. So as per your old suggestion, may I change this to requester_status instead of command_status?\n\nHow about this, i just have these statuses:\n\n```\n// instead of command_status, we have requester_status now\n\ntypedef enum requester_status {\n\tREQUEST_FAILED = -1,\n\tREADY_TO_PICK_NEXT_REQUEST = 0,\n\tWAITING_FOR_RESPONSE = 1,\n\tNO_PENDING_ACTION = 2\n} req_status_t;\n\n```\n\nInitially, we will always start with `READY_TO_PICK_NEXT_REQUEST`\nand once the request creation phase begins we would be in WAITING_FOR_RESPONSE, if it fails we should mark it is as COMMAND_FAILED, else chagne it to READY_TO_PICK_NEXT_REQUEST after pushing the response.\n\nIn the last command to be executed we can change it to NO_PENDING_ACTION.\n\nDoes this sound good?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Yea this sounds good.\n\nWe should have an initialization function to init the context status value to PLDM_BASE_REQUESTER_NO_PENDING_ACTION."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 87,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 95,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "the context already has an array to store the types. You don't need to create a new one."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 95,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "The decode_get_types_resp only accepts bitfield8_t as a parameter. I changed the context to use bitfield8_t as the data type for types. It is what is being used in the repo in most of the places for these kinds of responses. So this is resolved under that change."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 119,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Version response data contains a check sum too. But you can add checksum verification later."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 119,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Sure. I'll add a TODO here.\nJust a quick question though: If the checksum is incorrect, would it be routed to MCTP at all? Or is it a different checksum"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 119,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Yes this is a different checksum. Check DSP0240 v 1.1.0 section 8.2 GetPLDMVersion Response Data type structure."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 119,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Got it. I added a TODO for it in the latest patch set."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 137,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "What happens if there are more than 1 type supported by the responder? How can we get the version of those types?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 137,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Since sending a message and receiving a message is handled by the caller and not the requester library, the requester would have to make a call iteratively for all the pldm types. So we would have to call push_response for each of those pldm types and it would store it in the context.\n\nI have that part of code in local on the daemon side.\n\nThis is what I am doing:\n\nI add the corresponding PLDM types to an array. For instance if the PLDM_TYPES returned {0x03 0x00 0x00....} in the response, i get the corresponding bits that are set in the response (in this case index 0 and index 1) and add these indices/corresponding_PLDM_TYPE_values to the array. (For eg PLDM_BASE = 0(index) and whatever type is for index 3 etc). Then I reiterate over this array to make that version request by maintaining the pldm type in ctx->command_pldm_type.\n\nEven if the ctx->next_command is updated to PLDM_GET_PLDM_COMMANDS, it would not affect the context versions being updated. \n\nAnother thing that we could do, is pass a flag in push_response whether we want to update the context or we have more things to push.\n\nLet me know your thoughts."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 137,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "I am not sure I understood your explanation. Looks like you are implementing the  logic to read versions of multiple types in the daemon? If that is the case:\n\nThe requester library should handle that.\n\npldm_base_get_next_request should provide the next command until all the commands related to the action are completed. In the pldm_base_push_response we can update the context with the details that pldm_base_get_next_request needs to generate the next command in the sequence."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 137,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "I understand that. However, it wasn't very straight forward to repeat a command for all PLDM Types in the requester library itself as PLDM_TYPE is required to be a part of the request stream.\n\nHere is a suggested solution, let me know your thoughts:\n\n> Can we store an array just for PLDM_Supported_Types in the context instead of the entire response bitfield array.\n\n```\n// **** Current Implementation ****\nbitfield8_t pldm_types[PLDM_MAX_TYPES / 8]\n// The above represents pldm_types = [0x01, 0x00....(8 entries)] where each bit in \n// each of the 8 bytes is a pldm_type and it being 1 or 0 determine whether that \n// pldm_type is supported or not\n\n// ============================================================================\n\n// **** Suggested Implementation ****\nuint8_t pldm_types[64] // one byte for each 64 types\n\n// That way we can have lets say:\n\nctx->pldm_types = [PLDM_BASE, PLDM_RDE, PLDM_63rd]\n\n// and we can maintain the index of the current command being processed\n// can rename `command_pldm_type` to `current_pldm_type_index` later\n\nctx->command_pldm_type = 0; // for PLDM_BASE\nctx->command_pldm_type = 1; // for PLDM_RDE\nctx->command_pldm_type = 2; // for PLDM_63rd\n```\n\n\nWe can also have `ctx->number_of_supported_pldm_types = 3;` another attribute we can leverage for easier \"if\" condition handling. \n\nOr maintain it as the last index entry of the pldm_types array which is currently of length 64 but with the size at the end would be 65. Such as\n\n```\nuint8_t pldm_types[65] \n\n// one byte for each 64 types + 1 byte for number of supported commands, \n// so that we can move to next command (other than get_version) \n// when ctx->command_pldm_type == pldm_types[65] -1\n```\n\nThis way we can keep on sending the GET_PLDM_VERSION as next_command with a different pldm_types until all pldm_types are executed (i.e. ctx->command_pldm_type == pldm_types[65] - 1 (number of supported PLDM_TYPES))\n\nWhat do you think about this.?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 137,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "You can do a similar thing without keeping a 64byte array. Just keep the index of the next non zero bit. Once you get a response, increment that to the next non zero bit."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 137,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 145,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "In the context we should create uint8_t pldm_commands[ALL_TYPES][32] and use this array to store commands of all types."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 145,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "This makes sense. I'll add this change. My bad I missed it."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 176,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "So as i understand, this gives us the requester status. We can use it to know whether the requester is waiting for a response or not. If so, maybe we can rename it to requester status?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 176,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Oh I kept it as the command_status, as it talks more about the command that is being processed right now. But i can change it!"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 176,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack. Changed it to requester_status"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 177,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Maybe all we need is to know whether the requester is waiting for a response. So you can simply return that status here. \n\nBut if you don't find this function useful, I think we can get rid of it."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 177,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "I do not think this is very useful as context status can be accessed directly. I will remove it."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 177,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 178,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 100,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 182,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 476,
            "sizeDeletions": 3
        },
        {
            "number": 8,
            "revision": "9127ea326861174eddfe3f3851a779a3f87ed5f8",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/8",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1670623635,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Add a Tested Footer"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 14,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "I wonder what's the reason to use negative integers ?"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 14,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "That is what was being used in the repo.\nI followed a similar pattern. I do not see any advantage other than usually return code being checked directly for success as \n\n```\nif(rc) {...}\n\n```"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 14,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Ack"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 19,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "command_status and requester_status ordering differs (Negative nums at the top vs Negative nums at the bottom)\nMaybe be consistent with enum ordering?"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 19,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 9,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "What happens if the user calls this in the middle of waiting to receive a response for a previous command?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 9,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "I understand that. May I could add a check, like this: \n\n```\nif ctx->initialized == true:\nreturn CONTEXT_ALREADY_INITIALIZED\n```\n\nAnd it should not allow to reinitialize this after the context is initialized once.\n\nDoes that sound good?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 9,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "That won't work. If someone wants to run this again (say the responder side resets) then you won't be able to. You can use the command_status variable you are using to indicate the started action hasn't been completed yet. If it hasn't, we shouldn't allow a new action. If the previous action has been completed, then this will allow the user to start a new action."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 9,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 32,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "When we are passing numbers you could add a comment with the variable name so it's easier to read.\n\nfunction(/*param_1=*/0);"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 46,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "This is good but We should probably use a different way to say that the action has been completed. \n\nI think you are already using a variable to track the requester state. Depending on that state ( lets say \"no action pending\") You can return early. Then here you can say invalid command."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 46,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "** READ RESPONSE TO COMMENT [#87] BEFORE READING THIS **(https://gerrit.openbmc.org/c/openbmc/libpldm/+/59029/comment/f1f5e121_aac54a38/) \n\nInitially I was using a variable to track command status and not the requester status but if Comment #87 response is acceptable then, \n\nDo you mean just put an if condition before the switch case like (in terms of early return):\n\n```\nif (ctx->requester_status == NO_PENDING_ACTION) {\nreturn PLDM_BASE_REQUESTER_NO_NEXT_COMMAND_FOUND;\n}\n\nswitch(ctx->next_command)...\n\n```"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 46,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "Yes. You could do the same thing with pldm_base_start_discovery()"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 46,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 51,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "nit: Does the base encoding library set the errno value? If not, we don't need to print it since it doesn't contain any information."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 51,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Yes that makes sense. Return code should tell us what the error is, I'll remove it."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 66,
                    "reviewer": {
                        "name": "Kasun Athukorala",
                        "email": "kasunath@google.com",
                        "username": "kasunathg"
                    },
                    "message": "nit: You should be able to pass void* without casting."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 66,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Oh yes, totally missed it. I'll remove this."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 113,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Out of curiosity, what type is this ?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 113,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "This is a struct defined in pldm repo itself. The following is what the struct stand for:\n\n```\n// It stores the bytes accordingly from the byte array to store the version information for a pldm type. \n\ntypedef struct pldm_version {\n\tuint8_t alpha;\n\tuint8_t update;\n\tuint8_t minor;\n\tuint8_t major;\n} __attribute__((packed)) ver32_t;\n```"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 113,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "Interesting"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 171,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 86,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 182,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 455,
            "sizeDeletions": 3
        },
        {
            "number": 9,
            "revision": "2df176f5436da19b26fddcb20e287b22d77c0781",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/9",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1671051887,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 10,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 251,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 239,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 620,
            "sizeDeletions": 3
        },
        {
            "number": 10,
            "revision": "9660873fd2c3825caafb52064df590607403af07",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/10",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1671052402,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 251,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 239,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 625,
            "sizeDeletions": 3
        },
        {
            "number": 11,
            "revision": "6233e275d76ed2b22f347d0f29e69c44607718ad",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/11",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1671052484,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 196,
                    "reviewer": {
                        "name": "Nikhil Namjoshi",
                        "email": "nikhilnamjoshi@google.com",
                        "username": "namjoshiniks"
                    },
                    "message": "White space"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 196,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 251,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 239,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 625,
            "sizeDeletions": 3
        },
        {
            "number": 12,
            "revision": "fc690db2df2be5c46db55058fbbf2c2116721215",
            "parents": [
                "b7c73e502f8bcf4ab348e9566e1b7cb594f8aa8c"
            ],
            "ref": "refs/changes/29/59029/12",
            "uploader": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "createdOn": 1671151658,
            "author": {
                "name": "Harsh Tyagi",
                "email": "harsh23tyagi11@gmail.com",
                "username": "harsh23tyagi11"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Tracking IDs for private issues do not belong in an open source project."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Oh yes, my bad. I'll remove it..."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Hello Harsh,\n\nThanks for pushing the patch. However, has this been discussed in the community anywhere prior to pushing it? I ask because we're in the middle of remodelling the requester API? It looks like what you have may not be impacted by that as you appear to externalise the process of sending and receiving the messages in question, but maybe it's worth considering.\n\nhttps://gerrit.openbmc.org/c/openbmc/libpldm/+/59576\n\nAlso why was it initially a private patch? There a bunch of feedback while it was private. Generally it's best to engage the community from the start and not try to pre-review things, as community consensus may drive the effort in an entirely different direction (which would put that pre-review effort to waste)."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Harsh Tyagi",
                        "email": "harsh23tyagi11@gmail.com",
                        "username": "harsh23tyagi11"
                    },
                    "message": "Hey Andrew,\nThanks for the feedback. \n\n* The change you linked, as you said, does not seem to affect our implementation. We are planning to make a separate RDE daemon (In PLDM repo) which talks to this Requester library (which is what this code review is about) to initiate the PLDM Base commands in the correct sequence and help in maintaining the context. I haven't put this on the discord channel yet, but I can post a short summary of what we are trying to do.\n\n* \"Why was this patch private and have an internal feedback?\" - Since it was my first change, I was taking guidance from other senior engineers, but I understand what you said. I will keep it in mind. Thanks"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Ack"
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica@linux.ibm.com",
                        "username": "RashmicaG"
                    },
                    "message": "Hello, I have a couple of questions below. I see you replied to Andrew with a brief description of the purpose of this patch - would you be able to update the commit message with this?"
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "line": 27,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica@linux.ibm.com",
                        "username": "RashmicaG"
                    },
                    "message": "Is this state used anywhere?"
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 27,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica@linux.ibm.com",
                        "username": "RashmicaG"
                    },
                    "message": "I see that we set this in a couple of places but never check for it - which doesn't make sense to me. Can you help me understand the intended purpose of the requester status? Is this code the only one setting it or will the app also be setting it? If the app is supposed to do or not do specific things based off this status, can we document that? I initially assumed that this requester status was for controlling the sequence of events ie if an app calls pldm_base_get_next_request before pldm_base_start_discovery, then we wouldn't do anything - but that doesn't seem to be the case."
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "line": 215,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica@linux.ibm.com",
                        "username": "RashmicaG"
                    },
                    "message": "Are we expecting apps to use this function? Can we make it static? \n\nCan we check that current_type is within the valid range? At the moment if it was somehow called with current_type=72, we would return 72 - a value that is probably going to be used as an index that would lead to an out of bounds memory access."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "src/requester/pldm_base_requester.c",
                    "type": "ADDED",
                    "insertions": 250,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/requester/pldm_base_requester.h",
                    "type": "ADDED",
                    "insertions": 114,
                    "deletions": 0
                },
                {
                    "file": "include/libpldm/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "src/requester/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/meson.build",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -1
                },
                {
                    "file": "tests/pldm_base_requester_test.cpp",
                    "type": "ADDED",
                    "insertions": 239,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 624,
            "sizeDeletions": 3
        }
    ]
}