{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "antipatterns-20220120-1",
    "id": "I7c1aa730faaa03a1d0579cb11ddb1b1d4020fa18",
    "number": 60394,
    "subject": "anti-patterns: Externalising D-Bus dependencies",
    "owner": {
        "name": "Andrew Jeffery",
        "email": "andrew@aj.id.au",
        "username": "amboar"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/docs/+/60394",
    "hashtags": [],
    "createdOn": 1674195544,
    "lastUpdated": 1676266255,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1674195544,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1674195571,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674195571,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1674195595,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59446/ : SUCCESS"
        },
        {
            "timestamp": 1674219415,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1674427416,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1674428258,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1674428278,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674428279,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1674428304,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59524/ : SUCCESS"
        },
        {
            "timestamp": 1674589081,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1674601389,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1674656997,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(2 comments)"
        },
        {
            "timestamp": 1674659769,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1674677037,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675032416,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675034438,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675035607,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675043973,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675044021,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1675088794,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "43e516eda177cc19a6e0f02b224466c1e743ea15",
            "parents": [
                "bdcd4b764f2110df4db5b2e01221adcdaec4e6f9"
            ],
            "ref": "refs/changes/94/60394/1",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1674195544,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not sure our implementations are complete enough to count this as an anti-pattern at this point..."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Can you unpack that a bit?\n\nThis one was more aspirational than the others. I think it's reasonable that we try to prevent people adopting this pattern going forward."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think the issue I have with it is even by reading this I'm not sure _I_ know what to do.  So, if I don't know how to react to this anti-pattern, I have a hard time expecting anyone else to either.  Thus... what I wrote above."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Right, maybe it's just ranting then at this point. I don't have any practical examples to point to, it just feels like the current approach is inherently broken."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": ">  by reading this I'm not sure _I_ know what to do\n\nIsn't this outlined in the resolution section?"
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Are there any example implementations to point to?"
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Of waiting for an interface to show up on DBus? I'm probably missing the intent of the question but there is the mapper wait code itself, or any application in dbus-sensors, or here is one that I wrote awhile back:\n\nhttps://github.com/openbmc/openpower-pnor-code-mgmt/commit/099543e4d7a30546570d615c9c8a5a2e8b0c09d4"
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You're not waiting for an interface to show up, you're waiting for a path to show up on an unknown service.  Yes, this is what mapper does.  I don't think we want everyone reimplementing mapper in their own process.  Therefore, we'd need an API that mapper provides that gives similar results as what mapper-wait does?  This is why I don't think there is anything obvious to point to as a solution here."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "Right, but the point is that waiting for paths is kinda broken in exactly the way you describe. Better to wait for a well known connection name that is guaranteed to provide the path of interest, where possible. The anti-pattern already addresses that this is not always possible."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Better to wait for a well known connection name that is guaranteed to provide the path of interest,\n\nI strongly disagree with this from as an architectural choice.  We've gone back and forth on it.  \n\nGenerally speaking it doesn't work for cases where there are multiple of something, unless we shove everything of one type in a single executable.  This pretty much precludes any possibility of non-open implementations of anything and it also makes multi-host designs much harder with the current code-base."
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "> I strongly disagree with this from as an architectural choice. \n\nPut me in the only-use-mapper-when-necessary and not all the time camp.\n\n> This pretty much precludes any possibility of non-open implementations\n\nnon-open implementations can claim com.foocorp.foo and xyz.openbmc_project.foo at the same time, announcing their 'alternativeness' by way of com.foocorp and advertising their API compatibility by way of xyz.openbmc_project.\n\n> multi-host designs much harder\n\nIf I were to interpret this as an invitation to add latency and complexity in the general case to satisfy my specific use cases, what would be wrong with that?"
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Andrew Jeffery",
                        "email": "andrew@aj.id.au",
                        "username": "amboar"
                    },
                    "message": "That's only required in some cases, not all. Here's a quick analysis of stuff using `mapper-wait@.service`:\n\nhttps://gist.github.com/amboar/2de16ec94e9595e87122f6f0d3772a42\n\nDependencies targeted by this anti-pattern are those that aren't parameterised:\n\n```\nWants=mapper-wait@-org-openbmc-HostIpmi-1.service\n        meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-host/xyz.openbmc_project.Ipmi.Internal.SoftPowerOff.service\n\nWants=mapper-wait@-org-openbmc-mboxd.service\n        meta-phosphor/recipes-phosphor/mboxd/mboxd/mboxd-reload@.service\n\nWants=mapper-wait@-xyz-openbmc_project-control-nvme.service\n        meta-quanta/meta-gbs/recipes-gbs/gbs-sysinit/files/gbs-sysinit.service\n        meta-quanta/meta-gbs/recipes-phosphor/sensors/phosphor-nvme/xyz.openbmc_project.nvme.manager.service.replace\n\nWants=mapper-wait@-xyz-openbmc_project-inventory.service\n        meta-ibm/recipes-phosphor/fans/phosphor-fan/swift/phosphor-cooling-type@.service\n        meta-ibm/recipes-phosphor/fans/phosphor-fan/witherspoon/phosphor-cooling-type@.service\n        meta-ingrasys/meta-zaius/recipes-phosphor/gpio/phosphor-gpio-monitor/phosphor-gpio-presence@.service\n        meta-inspur/meta-fp5280g2/recipes-phosphor/fans/phosphor-fan/phosphor-cooling-type@.service\n        meta-openpower/recipes-phosphor/network/first-boot-set-mac/first-boot-set-mac@.service\n        meta-openpower/recipes-phosphor/occ/openpower-occ-control/org.open_power.OCC.Control.service\n        meta-openpower/recipes-phosphor/vpd/openpower-fru-vpd/op-vpd-parser.service\n        meta-phosphor/recipes-phosphor/dbus/phosphor-dbus-monitor/phosphor-msl-verify.service\n        meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-fru/obmc-read-eeprom@.service\n        meta-quanta/meta-gbs/recipes-gbs/gbs-sysinit/files/gbs-sysinit.service\n        meta-quanta/meta-gbs/recipes-phosphor/gpio/phosphor-gpio-monitor/phosphor-gpio-presence@.service.replace\n        meta-quanta/meta-olympus-nuvoton/recipes-olympus-nuvoton/power/first-boot-set-psu/first-boot-set-psu@.service\n\nWants=mapper-wait@-xyz-openbmc_project-led-groups.service\n        meta-ibm/meta-romulus/recipes-phosphor/gpio/id-button/id-button-pressed.service\n        meta-ibm/recipes-phosphor/gpio/id-button/id-button-pressed.service\n        meta-phosphor/recipes-phosphor/leds/phosphor-led-manager/obmc-fru-fault-monitor.service\n\nWants=mapper-wait@-xyz-openbmc_project-network-snmp.service\n        meta-ibm/recipes-phosphor/dbus/phosphor-dbus-monitor/phosphor-dbus-monitor-snmp.conf\n\nWants=mapper-wait@-xyz-openbmc_project-settings-fanctrl.service\n        meta-quanta/meta-gbs/recipes-google/acpi-power-state/acpi-power-state-daemon/gbs-host-s0-set-failsafe.service\n        meta-quanta/meta-gbs/recipes-google/acpi-power-state/acpi-power-state-daemon/gbs-host-s5-set-failsafe.service\n```\n\nMost of these I suspect are provided by a single process, in which case an alternative implementation just needs to acquire the well known connection name.\n\nPerhaps I have a misunderstanding?"
                },
                {
                    "file": "anti-patterns.md",
                    "line": 527,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> non-open implementations can claim com.foocorp.foo and xyz.openbmc_project.foo at the same time, announcing their 'alternativeness' by way of com.foocorp and advertising their API compatibility by way of xyz.openbmc_project.\n\nI agree when there is intentionally only \"one of\".  I was thinking more specifically about a proposal Google brought up at OCP, which they claimed they had Intel and AMD on board with, to add an interface for crash-dump like data collection that both Intel and AMD would have closed-source services for.  A blade / chassis-manager design can't handle a \"reserved name for the location of the crash-dump initiation\" since you can have a mixture of AMD/Intel/Ampere blades.\n\n> If I were to interpret this as an invitation to add latency and complexity in the general case to satisfy my specific use cases, what would be wrong with that?\n\nI'm sure there is a spectrum of complexity here, so I don't know what you have in mind behind this question.  I don't see prefacing calls with a mapper lookup as significant complexity.\n\nI gave multi-host designs as an example because, yes, it is something I care about.  IBM has mentioned some kind of aggregation service in a multi-node design of their own.  I don't know how you make that work without mapper because you have some local entities and some hosted by the aggregation service.  Maybe I've just not thought about it enough.\n\nIn terms of \"my specific use cases\", it probably depends on the specific complexity and contributor(s), no?  An addition of complexity proposed by a major contributor, I think, merits more consideration than one by a drive-by.  But, even in terms of major contributors there is probably some point where the complexity is more than other maintainers are willing to absorb.\n\n> That's only required in some cases, not all. Here's a quick analysis of stuff using mapper-wait@.service:\n\nI do agree that most of these can likely be simplified to avoid the mapper-wait.  We also need to consider ones installed by repositories directly because there are many of those.  For what it's worth, on Bletchley which is a \"simple\" design (as there is no IPMI/PLDM to the managed hosts), there are lots of mapper-waits as well.\n\n```\nroot@bletchley:/lib/systemd/system# ls *.service | xargs grep Wants=mapper-wait | wc -l\n62\n```\n\nAnother thing which comes to mind is that we do still have some processes which are claiming their busname before they create their objects (which is not correct in most cases), so it isn't always a simple mapper-wait to dbus-activation transformation.\n\n> Wants=mapper-wait@-org-openbmc-HostIpmi-1.service\n\nThis one looks like a hard-coded parameterization.  Not sure the intent there, but anything with 'org.openbmc' probably deserves to be re-examined anyhow.\n\n> Wants=mapper-wait@-xyz-openbmc_project-inventory.service\n\nThis one is likely wrong anyhow considering EM exists (at least for meta-phosphor recipes)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "anti-patterns.md",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "55c52bba9c9765ca86f52210db4da93de296e5d6",
            "parents": [
                "fc9d03c52d22478ccb7f0845cb1a3a8f3b64030e"
            ],
            "ref": "refs/changes/94/60394/2",
            "uploader": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "createdOn": 1674428258,
            "author": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "This might not be perfect with the current words but it seems like a good start we can 1 - iterate on and 2 - point people at when we see egregious mapper use."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "anti-patterns.md",
                    "type": "MODIFIED",
                    "insertions": 37,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 0
        }
    ]
}