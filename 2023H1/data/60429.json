{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "I1c8fc0b2ffce6b0934838d416da5d01fabdbcc12",
    "number": 60429,
    "subject": "RedfishSensor: It reads Redfish sensors to D-Bus",
    "owner": {
        "name": "Josh Lehan",
        "email": "krellan@google.com",
        "username": "Krellan"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/60429",
    "hashtags": [],
    "createdOn": 1674564628,
    "lastUpdated": 1684775634,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1674564628,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1674564641,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674564641,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1674564849,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/59625/ : FAILURE"
        },
        {
            "timestamp": 1674565449,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1674719018,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1674719045,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674719045,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1674719054,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1674719257,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/59722/ : FAILURE"
        },
        {
            "timestamp": 1674727461,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1674727505,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674727506,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1674727720,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/59723/ : FAILURE"
        },
        {
            "timestamp": 1674728541,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 4.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1674728565,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1674728566,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: -Ok-To-Test"
        },
        {
            "timestamp": 1674728824,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59724/ : SUCCESS"
        },
        {
            "timestamp": 1674758147,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(4 comments)"
        },
        {
            "timestamp": 1674758859,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(9 comments)"
        },
        {
            "timestamp": 1675061954,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 4:\n\n(13 comments)"
        },
        {
            "timestamp": 1675062953,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 5.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1675062991,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1675062991,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: -Ok-To-Test"
        },
        {
            "timestamp": 1675063248,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/59809/ : SUCCESS"
        },
        {
            "timestamp": 1675456415,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(8 comments)"
        },
        {
            "timestamp": 1675456532,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1675456884,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(1 comment)"
        },
        {
            "timestamp": 1675880681,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 5:\n\n(8 comments)"
        },
        {
            "timestamp": 1679374977,
            "reviewer": {
                "name": "Manish Baing",
                "email": "manish.baing@intel.com",
                "username": "manishbaing"
            },
            "message": "Patch Set 5:\n\n(10 comments)"
        },
        {
            "timestamp": 1679488739,
            "reviewer": {
                "name": "Smriti-Ayushi",
                "email": "smriti.ayushi@linux.intel.com",
                "username": "Smriti-Ayushi"
            },
            "message": "Patch Set 5:\n\n(5 comments)"
        },
        {
            "timestamp": 1684299020,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 6: Patch Set 5 was rebased.\n\nOutdated Votes:\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1684299038,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1684299038,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: -Ok-To-Test"
        },
        {
            "timestamp": 1684299084,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/66590/ : FAILURE"
        },
        {
            "timestamp": 1684775634,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "c74ffd8c17262e28833a61d0e64ae74bb3deba7e",
            "parents": [
                "ea148ec6f913c1b1d4a145591097628b01384d96"
            ],
            "ref": "refs/changes/29/60429/1",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1674564628,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/RedfishSensor.hpp",
                    "type": "ADDED",
                    "insertions": 407,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 630,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "type": "ADDED",
                    "insertions": 916,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "type": "ADDED",
                    "insertions": 944,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "type": "ADDED",
                    "insertions": 1237,
                    "deletions": 0
                },
                {
                    "file": "service_files/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4198,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "9a786df2ba630c3c6559cf5798851d29dbfbd459",
            "parents": [
                "e73bd0a11e54b7d2a7037d0b1e8d49de1042f44a"
            ],
            "ref": "refs/changes/29/60429/2",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1674719018,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "type": "ADDED",
                    "insertions": 397,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 629,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "type": "ADDED",
                    "insertions": 915,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "type": "ADDED",
                    "insertions": 943,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "type": "ADDED",
                    "insertions": 1236,
                    "deletions": 0
                },
                {
                    "file": "service_files/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4183,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "2e9615bfe0fef622edc0f0f4991386a9edc8f0f2",
            "parents": [
                "e73bd0a11e54b7d2a7037d0b1e8d49de1042f44a"
            ],
            "ref": "refs/changes/29/60429/3",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1674727461,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "type": "ADDED",
                    "insertions": 397,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 628,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "type": "ADDED",
                    "insertions": 915,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "type": "ADDED",
                    "insertions": 950,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "type": "ADDED",
                    "insertions": 1240,
                    "deletions": 0
                },
                {
                    "file": "service_files/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4193,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "f9c82aab778c82e4e4db1a8f29bd55f9f3dd0d14",
            "parents": [
                "e73bd0a11e54b7d2a7037d0b1e8d49de1042f44a"
            ],
            "ref": "refs/changes/29/60429/4",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1674728541,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Overall, IMO this is the wrong place for this code.  dbus-sensors is about reading hardware sensors, and pulling in TCP/http based sensors breaks quite a few things, and duplicates quite a big chunk of code that already exists in the aggregation feature, that should not be duplicated.  Reiterating what I said in the design review, this needs to be more tightly integrated with the existing features, rather than just rewriting them, given that significant effort has been put into tuning, debugging things like keepalive, supporting features HTTPS (which is technically a requirement of redfish) and other stuff that this patchset chooses to ignore.  When things like authentication, mutual TLS, and other are added, had we accepted this feature as written, we would have to duplicate those features as well, which would add significantly more engineering compared to integrating a solution in the first place.  This is roughly the same position that was taken when the aggregation feature was originally added, in that it re-implemented significant portions of EventService, so this is not feedback that is unique to this patchset.\n\nAs written, this patchset also seems to ignore some important required parts about the redfish specification, like walking the Redfish tree, ownership of the odata.id parameters, checking odata.type, error codes, handling 202 accepted, and other things.  While those could certainly be improved, it would have to start with a reading of the specification, and a rebuild of the polling loops and parameter sets to match what the specification states.\n\nIf other dbus-sensors and Redfish maintainers disagree with this opinion, I'm happy to have a discussion about if this is the right place for this code, and who will maintain it.  We already have two redfish client libraries (libredfish, and http_client.hpp in bmcweb).  I'm not interested in maintaining a third, especially one that's based on the same core libraries (beast/asio) as the http_client.hpp, and only implements a subset of its capabilities and specification correctness.  If we need to break that section of bmcweb out into a library, that's fine, lets get that done."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I would also mention, this patchset is 4000 lines, which is far more than can be reviewed effectively in one review, if it proceeds, it needs broken up a bit so it's effectively reviewable.\n\nI've left a few comments on general coding practices that need fixed across the patch just to help make progress."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I am all for extricating the HttpClient feature out of bmcweb, and making it available as a library, to other interested packages such as this. However, doing this is beyond the scope of what I had originally set out to do, that is, integrate Redfish sensors into dbus-sensors. It would be worth doing as a separate project in the future, though.\n\nThe reason to use Beast and ASIO is to smoothly integrate with the existing design of dbus-sensors, which uses ASIO, and for this, it works well. The RedfishConnection class is made to intentionally be at the center of the hourglass, as the implementation of it is intentionally drop-in replaceable with another implementation (such as HttpClient, if it could be extricated from the rest of bmcweb), as I agree that using HttpClient would be preferable.\n\nI believe dbus-sensors is for reading sensors, and making their values available on D-Bus. I don't believe it needs to be constrained to hardware sensors. (To be pedantic, they actually are hardware sensors, but they are located on another machine, and so, we need to use Redfish to pull in their values over the network.)\n\nHTTPS and TLS (SSL) can be added in a future revision of this feature. I am intentionally not including it in this first release. Also, RedfishSensor works best with tightly coupled machines in a cluster, with limited access to the outside world, which is our use case. As of yet, there has been no demand for encryption between machines within this cluster.\n\nNot sure what you mean about walking the Redfish tree. The tree is walked, starting at the root, to find chassises and sensors. The odata.id parameter does need to be more consistently checked, and I have that on my to-do list, you're right.\n\nError codes are supported, and made available to callers of RedfishConnection. The odata.type field is intentionally ignored, as RedfishSensor validates the syntax at the JSON level, without parsing schema metadata. The \"202 Accepted\" result seems only to be a concern when sending a request to perform a write action that modifies state on the Redfish server, but all requests RedfishSensor sends are merely read-only in nature."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks for looking at this. I agree that this patch is quite large. I could break it up by stubbing out parts of the program so that it all still compiles, though, even though it would be missing most of the code. Would this be more helpful?"
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In EM configs, we wouldn't split up these three things into three config entries.  a device \"supports redfish\" as a single feature, and redfish is introspectable, so we shouldn't duplicate things in the EM config file that we can determine from the server itself by simply walking the tree."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "The tree from the server is walked. The server's available chassis and sensor objects are matched up against what is configured here, and a match must be found in order to instantiate the sensor.\n\nThe reason these 3 categories are split up is to avoid having to declare many redundant fields of information within the EM configuration. A server can contain many chassises, and a chassis can contain many sensors. It would make the JSON file very awkwardly large and verbose, if all this had to be duplicated for every sensor. I'd rather be able to set the chassis and server once, then use it for many sensors."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't think the data needs duplicated, just read it from the server itself.  The exposes record would just be an extension of the existing SatelliteController, with something like\n\n{\n   ExposeSensors: true\n}\n\nThe rest would be read from dbus?"
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Sorry, I meant to say, the rest would be read from Redfish."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 17,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I don't quite understand. I think we are talking about two different things. As for reading data from the server, this is already done. The user still needs to specify the desired server, though, and the desired chassis on that server, and the desired sensor on that chassis."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Per the Redfish specification, IDs need to come from walking the tree, and are at the control of the server, not the client."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "That is true, but they are made available to the client as read-only strings in the response, under the key \"Id\". I added it as one more thing the client can use to match on a desired sensor. If the server changes it, then it will not match anymore. I could remove this if desired, but I like having it for symmetry with \"RedfishName\"."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  I added it as one more thing the client can use to match on a desired sensor.\n\nPer the spec, they should not be used for matching.  We should follow the specification in this regard."
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "line": 418,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I will consider removing \"RedfishId\". I can see the concern about it being a backdoor way to embed a URL path into configuration, which is frowned upon in the Redfish community."
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is duplicating code that already exists in bmcweb in http_client.hpp for handling Redfish transactions.  Please don't duplicate what already exists and has been debugged."
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "line": 30,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "True, but this is not bmcweb. It would be nice if the HttpClient feature of bmcweb were extracted out into a library, then that library could be usable by other projects such as dbus-sensors."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please make these kinds of lookup tables constexpr, per the coding standard.  As-written, they will be required to allocate on startup."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, done."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It can be used today.  The classes just need crafted to allow it.  Take a look at the registry implementation in bmcweb for an example that's similar, and I'm happy to help you if you could use more direct help."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I looked. The solution seems to be downgrading std::string to const char* (C string), and downgrading std::vector to std::array (unfortunately requiring the redundant size argument, even though the compiler should already know it from initialization, but it somehow doesn't), so did that."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "In new code we would generally downgrade std::string to std::string_view, but you got the gist."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 24,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Correct. As for std::string_view, it is a non-owning view of a classic C string, so it essentially is a classic C string."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This code is duplicating readJson in bmcweb, which handles more cases."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "True, but this is not bmcweb. It would be nice if the JSON parsing of bmcweb were extracted out into a library, then that library could be usable by other projects such as dbus-sensors."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is why I'm saying this is the wrong place for this code."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 37,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "The JSON needs to get out of nlohmann and into a standard string somehow, and I think this function is as good as any. It consolidates some functionality that otherwise would be very verbose. If HttpClient were refactored out of bmcweb in such a way that it could be independently usable by other executables, I would gladly use it."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "nit, extra parens."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I did this intentionally, as it's more readable, making it obvious that it's a negation. I can remove it, though. I still think it looks visually wrong to have something like !json.is_object(), as it looks like you're negating json and then calling is_object() on the results of the negation."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "clang builds will warn on these, and for consistency, we should keep the clang build warning free."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 43,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Interesting. I didn't see any warnings when compiling, both locally, and in the output from Jenkins upstream. Is a different compiler used elsewhere?"
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "please use nlohmann::json::get_ptr<nlohmann:json::object_t>\n\nThis advice needs repeated quite a bit for the generalized pattern this patch takes.  I'll comment once, all need fixed."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "OK, also I still like the idea of checking the type of things before trying to get a pointer to them."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "get_ptr does the type checking in a single line.  It will return nullptr if the type is wrong."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 46,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Got it, get_ptr functions like the \"!\" suffix, in a language like Swift that natively supports optionals (with \"?\" suffix). Will revise accordingly."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yes, it's called from_chars.  There's lots of examples of it in bmcweb you can use."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks, I will look at from_chars(). I'm glad that it ignores locale."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I'm not following this.  This isn't allowed in the standard, can you please explain (ideally in the commit message)?"
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "In JSON, there is no clean way to specify floating-point NaN, so JSON null (the JSON null type) or JSON string \"nan\" is often used. Also, I have seen numeric values wrapped in JSON strings (such as \"123.456\") instead of being JSON numbers. This usage appears common in the field, including third-party Redfish servers which we have no control over."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": ">  so JSON null (the JSON null type) or JSON string \"nan\" is often used\n\nThis was clarified in the redfish standard.  \"nan\" as a string is not allowed.\n\n> Also, I have seen numeric values wrapped in JSON strings (such as \"123.456\") instead of being JSON numbers\n\nThis is not allowed in the standard.\n\n> This usage appears common in the field, including third-party Redfish servers which we have no control over.\n\nThen please report the bug to the third party servers doing this.  This surprises me that it's widespread, because those servers would fail the redfish-service-validator, a tool which most implementations run."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 184,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I have reported it, but again, we have no control over these third-party Redfish servers. The purpose of RedfishSensor is to read from a remote sensor, not be a strict validator, so I would rather make RedfishSensor robust against different numeric input formats, instead of making it intentionally brittle."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please take a look at readJson in bmcweb.  It handles this in a much cleaner way, handles more errors, at at a minimum could be used as a model for this."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "I took a look at it. The readJsonHelper uses variants and parameter packs, which are beyond the scope of these simple functions which intentionally accept only one type.\nAnd, I noticed readJson() uses is_object() instead of get_ptr(), contrary to your earlier comment?"
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The code was written before get_ptr was fully understood.  These days we would use get_ptr, and it's what we require on code review.  I can open a code review to fix it."
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60619"
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "line": 388,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Nice, will follow this as an example."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "type": "ADDED",
                    "insertions": 397,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 628,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "type": "ADDED",
                    "insertions": 915,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "type": "ADDED",
                    "insertions": 950,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "type": "ADDED",
                    "insertions": 1246,
                    "deletions": 0
                },
                {
                    "file": "service_files/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4199,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "23b4fa81013483f13ff26908e6365a8afe3e925d",
            "parents": [
                "6747eba5e06ce8f7b407193410aa7d04eb5b833c"
            ],
            "ref": "refs/changes/29/60429/5",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1675062953,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "line": 7,
                    "reviewer": {
                        "name": "Smriti-Ayushi",
                        "email": "smriti.ayushi@linux.intel.com",
                        "username": "Smriti-Ayushi"
                    },
                    "message": "Add Service Type field too\nexample: Type=dbus"
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "line": 15,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "make it unsigned int"
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "same as above"
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Smriti-Ayushi",
                        "email": "smriti.ayushi@linux.intel.com",
                        "username": "Smriti-Ayushi"
                    },
                    "message": "Replace with the following:\n\nif(unit.redfishType == name || unit.redfishUnits == name || unit.dbusUnits == name)\n   return unit;"
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 16,
                    "reviewer": {
                        "name": "Smriti-Ayushi",
                        "email": "smriti.ayushi@linux.intel.com",
                        "username": "Smriti-Ayushi"
                    },
                    "message": "Question: Can you explain?"
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 41,
                    "reviewer": {
                        "name": "Smriti-Ayushi",
                        "email": "smriti.ayushi@linux.intel.com",
                        "username": "Smriti-Ayushi"
                    },
                    "message": "Magic number"
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 51,
                    "reviewer": {
                        "name": "Smriti-Ayushi",
                        "email": "smriti.ayushi@linux.intel.com",
                        "username": "Smriti-Ayushi"
                    },
                    "message": "Magic number"
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 64,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "query : can msElapsed hold negative value anytime ...? If not make it unsinged int ."
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 183,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "query : can port hold negative value anytime ...? If not make it unsinged int ."
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 195,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "same as line number 183 ."
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "line": 207,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "same as line number 183 ."
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "line": 18,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "if sizeLimit holds positive numbers make it unsigned int ."
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "line": 21,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "you make it 8 bit unsigned int as mentioned  This one goes up to 11 ."
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "line": 53,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "this variable can hold negative value anytime ...?"
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "line": 86,
                    "reviewer": {
                        "name": "Manish Baing",
                        "email": "manish.baing@intel.com",
                        "username": "manishbaing"
                    },
                    "message": "same as line number 53"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "type": "ADDED",
                    "insertions": 403,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 628,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "type": "ADDED",
                    "insertions": 915,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "type": "ADDED",
                    "insertions": 950,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "type": "ADDED",
                    "insertions": 1252,
                    "deletions": 0
                },
                {
                    "file": "service_files/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4211,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "7e14b793aa72fae6b3e5a97787685b51567f4dec",
            "parents": [
                "88a32137fb8173970e2bda25c41561b837f89f7d"
            ],
            "ref": "refs/changes/29/60429/6",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1684299020,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.hpp",
                    "type": "ADDED",
                    "insertions": 403,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorMain.cpp",
                    "type": "ADDED",
                    "insertions": 628,
                    "deletions": 0
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/meson.build",
                    "type": "MODIFIED",
                    "insertions": 17,
                    "deletions": 0
                },
                {
                    "file": "service_files/xyz.openbmc_project.redfishsensor.service",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorQuery.cpp",
                    "type": "ADDED",
                    "insertions": 915,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensor.cpp",
                    "type": "ADDED",
                    "insertions": 950,
                    "deletions": 0
                },
                {
                    "file": "src/RedfishSensorResponse.cpp",
                    "type": "ADDED",
                    "insertions": 1252,
                    "deletions": 0
                },
                {
                    "file": "service_files/meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 4211,
            "sizeDeletions": 0
        }
    ]
}