{
    "project": "openbmc/phosphor-host-postd",
    "branch": "master",
    "id": "If03a01e0cd62366d188109bb4dff52958346e1db",
    "number": 62891,
    "subject": "Add rate limiting",
    "owner": {
        "name": "Jonathan Doman",
        "email": "jonathan.doman@intel.com",
        "username": "jonathan-doman"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-host-postd/+/62891",
    "hashtags": [],
    "createdOn": 1682541418,
    "lastUpdated": 1683130560,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1682541418,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1682541471,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1682541471,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: -Ok-To-Test"
        },
        {
            "timestamp": 1682541595,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/65014/ : SUCCESS"
        },
        {
            "timestamp": 1682542836,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1682543095,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1682546952,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1682551760,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1682628631,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1682635087,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1682639199,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1682707950,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1682714456,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 2.\n\nOutdated Votes:\n* Code-Review+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR is:MIN\")\n* Verified+1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1682714492,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1682714492,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: -Ok-To-Test"
        },
        {
            "timestamp": 1682714517,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/65381/ : FAILURE"
        },
        {
            "timestamp": 1682714834,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1682715383,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Uploaded patch set 3.\n\nOutdated Votes:\n* Verified-1 (copy condition: \"changekind:NO_CHANGE OR changekind:NO_CODE_CHANGE\")\n"
        },
        {
            "timestamp": 1682715422,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1682715423,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: -Ok-To-Test"
        },
        {
            "timestamp": 1682715431,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1682715542,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/65382/ : SUCCESS"
        },
        {
            "timestamp": 1682978171,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1682984261,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1683044068,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 3: Code-Review+2\n\n(1 comment)"
        },
        {
            "timestamp": 1683130560,
            "reviewer": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "message": "Change has been successfully merged"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "88199c8d3f80bebc30d7d63fe66c66d27a1fb79c",
            "parents": [
                "65d1753ca99624e9f6e8479b66a82764a75d4b88"
            ],
            "ref": "refs/changes/91/62891/1",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1682541418,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Need to reword this. 65k/sec was measured as the maximum rate that snoopd can dequeue bytes from the kernel, if the D-Bus property updates are commented out. The rate that the host CPU writes is unknown, but possibly much greater."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "If CPU is writing faster than 1k code/sec and more than 2K, this driver buffer will be overrun and post code gets lost, right?\nBut that is not the normal case."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 37,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Yes, the driver will drop data when the fifo overruns. And driver also may miss data if it comes in faster than the IRQ is handled."
                },
                {
                    "file": "main.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "both of these should be configuration. and have options to turn it off if needed."
                },
                {
                    "file": "main.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Agreed, will add."
                },
                {
                    "file": "main.cpp",
                    "line": 122,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Added meson option and command-line option. With 1000 POST codes per second as the default."
                },
                {
                    "file": "main.cpp",
                    "line": 149,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Might it be good to at least log a message like \"Warning: dropped N POST codes\" or something if the rate limit is actually exceeded, just so it doesn't happen totally silently?  Though I suppose there's then the problem of flooding the log if the overload is sustained instead of just a brief burst, which might then necessitate its own log rate-limiting or coalescing of some sort...thoughts?"
                },
                {
                    "file": "main.cpp",
                    "line": 149,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "We're not necessarily dropping anything here. We're just taking a little break :) - something that might happen anyway due to other processes getting scheduled. Once the sleep is over, it'll pick up right where it left off. IMO hitting the rate limit doesn't mean that anything has gone wrong or needs to be logged.\n\nOn the other hand, the aspeed-lpc-snoop kernel driver will drop bytes if userspace doesn't read them in time - so that's where something could be logged if we wanted to be notified of it. But I also don't think there's any guarantee that the driver will see every incoming byte. The HW only saves the last two snooped bytes and if the IRQ isn't handled before more bytes are written then there will be silent data loss. So it's an inherently non-coherent or unreliable channel."
                },
                {
                    "file": "main.cpp",
                    "line": 149,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Ah right, that makes sense.  Just to get a rough sense of relative scales, do you know roughly how many unprocessed POST codes it takes for things to become problematic in the two cases described in the commit message?  For reference, on the kernel side it looks like the snoop driver uses a 2048-entry fifo, FWIW: https://github.com/openbmc/linux/blob/288cdbcca137444c131180738a8046c93ae228f0/drivers/soc/aspeed/aspeed-lpc-snoop.c#L30"
                },
                {
                    "file": "main.cpp",
                    "line": 149,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "I just tested the two cases by modifying snoopd and post-code-manager to print out the number of codes processed every 100 codes and checked the difference when the BMC grinds to a halt.\n\nCase 2 is the more common failure in my system. I forced Case 1 by calling bus.flush() for each code to force the message into dbus-broker.\n\nCase 1: 201200 signals stuck in dbus-broker (snoopd processed 764000, post-code-manager 562800)\nCase 2: 160300 signals stuck in snoopd (snoopd processed 307500, post-code-manager 147000)\n\nThis number will obviously depend on the POST code size and free system memory. Our Intel systems just use a single byte POST code. Both cases take less than 5 minutes to kill the BMC FW, with Case 2 being faster (sometimes less than 1 minute)."
                },
                {
                    "file": "main.cpp",
                    "line": 149,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Alright, thanks for the extra info...sounds good."
                },
                {
                    "file": "main.cpp",
                    "line": 149,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 49,
                    "deletions": 0
                },
                {
                    "file": "main.cpp",
                    "type": "MODIFIED",
                    "insertions": 16,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 65,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "012ed5a4d19241dba75d5fb307b97dde958042ed",
            "parents": [
                "65d1753ca99624e9f6e8479b66a82764a75d4b88"
            ],
            "ref": "refs/changes/91/62891/2",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1682714456,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Patchset 2 adds meson option and command line parameter to control the rate limiting. And uses sdevent API to disable events rather than just sleeping."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "main.cpp",
                    "type": "MODIFIED",
                    "insertions": 101,
                    "deletions": -7
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "lpcsnoop/snoop.hpp",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": -2
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 165,
            "sizeDeletions": 9
        },
        {
            "number": 3,
            "revision": "38b0946cee9ec287dded7ce8cbb84bd445b44554",
            "parents": [
                "65d1753ca99624e9f6e8479b66a82764a75d4b88"
            ],
            "ref": "refs/changes/91/62891/3",
            "uploader": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "createdOn": 1682715383,
            "author": {
                "name": "Jonathan Doman",
                "email": "jonathan.doman@intel.com",
                "username": "jonathan-doman"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "seems like the best solution would be allowing snoopd to run as non-root, right?\n\nmoving daemons to non-root users has been in progress project-wide for a while"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Jonathan Doman",
                        "email": "jonathan.doman@intel.com",
                        "username": "jonathan-doman"
                    },
                    "message": "Yes, I do agree a proper D-Bus resource usage policy would be the most elegant/holistic solution, and running as non-root is a big part of the that. But AFAIK there is not consensus yet on the future design for privilege separation, so that's why I think this is needed in the short term."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Benjamin Fair",
                        "email": "benjaminfair@google.com",
                        "username": "BenjaminFair"
                    },
                    "message": "Sure, this seems reasonable for the short term"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 46,
                    "deletions": 0
                },
                {
                    "file": "main.cpp",
                    "type": "MODIFIED",
                    "insertions": 101,
                    "deletions": -6
                },
                {
                    "file": "meson_options.txt",
                    "type": "MODIFIED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "lpcsnoop/snoop.hpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 5,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 161,
            "sizeDeletions": 6
        }
    ]
}