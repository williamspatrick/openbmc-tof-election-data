{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "Iac86dfc63c85af04985a61ba52161301134e8f2b",
    "number": 64354,
    "subject": "Add ComponentIntegrity D-bus Interface",
    "owner": {
        "name": "sunzc",
        "email": "zhichuang@google.com",
        "username": "sunzc"
    },
    "url": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/64354",
    "hashtags": [],
    "createdOn": 1687450960,
    "lastUpdated": 1687556918,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1687450960,
            "reviewer": {
                "name": "sunzc",
                "email": "zhichuang@google.com",
                "username": "sunzc"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1687450990,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1687453278,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(12 comments)"
        },
        {
            "timestamp": 1687454364,
            "reviewer": {
                "name": "sunzc",
                "email": "zhichuang@google.com",
                "username": "sunzc"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1687455009,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1687556897,
            "reviewer": {
                "name": "sunzc",
                "email": "zhichuang@google.com",
                "username": "sunzc"
            },
            "message": "Patch Set 1:\n\n(11 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "c511683040e75a9485d0977b971b2b37908a91c6",
            "parents": [
                "3bbd4827527ae41ea9e20c499506ff3a83027534"
            ],
            "ref": "refs/changes/54/64354/1",
            "uploader": {
                "name": "sunzc",
                "email": "zhichuang@google.com",
                "username": "sunzc"
            },
            "createdOn": 1687450960,
            "author": {
                "name": "sunzc",
                "email": "zhichuang@google.com",
                "username": "sunzc"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Just wanted to add more context, all the interface and properties added here are based on Redfish Spec https://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2022.3.pdf page 216, ComponentIntegrity schema. \n\nRedfish defined the ComponentIntegrity schema, the properties.\n\nI'm trying to translate the Redfish spec to DBus spec, so that when dbus daemon collecting properties for redfish request, it will be consistent and no extra work is needed to convert the data."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I'm trying to translate the Redfish spec to DBus spec, so that when dbus daemon collecting properties for redfish request, it will be consistent and no extra work is needed to convert the data.\n\nThis isn't what we do though.  If we did that, the BMC codebase would just become a big Redfish engine.  AMI tried that with IPMI and their codebase was stuck as a big out-of-date IPMI engine.  We're not going to make that same mistake with s/IPMI/Redfish/."
                },
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Thanks a lot for your detailed review, very helpful! I will work on a updated version soon."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Definitely don't want this to be at the top-level.\n\nIs this considered \"Inventory\"?  Maybe \"State\"?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 7,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do any of these properties need a \"readonly\" flag?  I suspect most of them you are _not_ expecting other daemons to modify."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 7,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Yes, a few of them are read/write, many are read-only. Thanks for the reminder! I will update it:\n- read/write: Enabled\n- read-only:Type, TypeVersion, LastUpdated,ComponentsProtected, TargetComponentURI"
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 23,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What ends up being the utility of this?  We generally don't like raw strings that might end up being interpreted by other code.  Maybe this is just for humans.\n\nYou might want to document the format here.  Are you expecting something like \"1.3\" for a TPM?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 23,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "It is for humans, just like the example you give: \"1.3\" for a TPM, or \"1.1\" for a SPDM-capable device. So should be ok to use string type."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What does \"updated\" mean in this context?  Some kind of firmware update applied or a state change?  This is ambiguous enough that we at least need more words in the description and potentially a different property name."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Good point! This could be any component integrity information change, including a firmware update, certificate change, security protocol version update. I will add more description."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 40,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please look at Associations.  You shouldn't directly hold a object_path like this to a static peer object."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 40,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "I took a look at association. I agree it is a better option. Let me test the association based implementation."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 55,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This probably belongs in an association as well."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 55,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Ack. The same as the above. Let me test the association."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 63,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do you need an \"Unknown\"?\n\nThe result of putting OEM first is that that ends up being the default value for the property (Type).  I'm not sure if that's what you desire."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "line": 63,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "This looks good to me. SPDM and TPM are the well known one. If we don't know, it could be OEM-specific (similar to unknown), which sounds like a safe assumption to me."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What ends up being the utility of this?  We are generally trying to avoid protocol-specifics bleeding out into other applications so when I see an interface named the same as a protocol it stands out."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Looks like this is an association."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM.interface.yaml",
                    "line": 6,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/IdentityAuthentication.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Lots of SPDM-specific stuff is showing up on dbus.  I haven't reviewed this  interface because it just looks like associations.\n\nNeed to see a design doc to understand what you're trying to accomplish by exposing SPDM directly onto dbus."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/IdentityAuthentication.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "So the idea is to allow a remote attester to do SPDM-based authentication to a device. It is a very useful feature in data center where remote attestation is needed everywhere to authenticate the device's firmware integrity or hardware identity. Typically, the BMC will get the attestation request(typically over a redfish request) and then the device dbus agent can handle the attestation request. That's why we have the properties defined here. We have the requester info, responder, responder's authentication(which is a certificate object).\n\nSPDMGetMeasurements is a SPDM-specific interface to get measurements (firmware or hardware config) of devices.\n\n Hope this help answer your question."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/MeasurementSet.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "size, not uint32."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/MeasurementSet.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "got it, thanks"
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/MeasurementSet.interface.yaml",
                    "line": 25,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "size, not uint32."
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/MeasurementSet.interface.yaml",
                    "line": 25,
                    "reviewer": {
                        "name": "sunzc",
                        "email": "zhichuang@google.com",
                        "username": "sunzc"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity.interface.yaml",
                    "type": "ADDED",
                    "insertions": 71,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM.interface.yaml",
                    "type": "ADDED",
                    "insertions": 9,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/ComponentIntegrity/SPDM/MeasurementSet/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/MeasurementSet.interface.yaml",
                    "type": "ADDED",
                    "insertions": 43,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/meson.build",
                    "type": "MODIFIED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/ComponentIntegrity/meson.build",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/ComponentIntegrity/SPDM/IdentityAuthentication/meson.build",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/ComponentIntegrity/SPDM/meson.build",
                    "type": "ADDED",
                    "insertions": 45,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/ComponentIntegrity/SPDM/IdentityAuthentication.interface.yaml",
                    "type": "ADDED",
                    "insertions": 36,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 295,
            "sizeDeletions": 0
        }
    ]
}