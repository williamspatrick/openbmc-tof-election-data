{
    "project": "openbmc/dbus-sensors",
    "branch": "master",
    "id": "If28870ac1e0d09be4a631a3145408ec70390dfc5",
    "number": 36772,
    "subject": "Fix missing threshold de-assert event when threshold changes.",
    "owner": {
        "name": "Zhikui Ren",
        "email": "zhikui.ren@intel.com",
        "username": "ZhikuiRen"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36772",
    "commitMessage": "Fix missing threshold de-assert event when threshold changes.\n\nSensor can be re-constructed when sensor configuration changes\nlike a new threshold value. Threshold deassert can be missed\nif the new threshold value fixes the alarm because the\ndefault state for new threshold interface is de-asserted.\nSend threshold de-assert message after interfaces are initialized to\nensure de-assert event is logged if there is an active assert\nevent.\n\nTested:\nstep1:\nbusctl set-property xyz.openbmc_project.ADCSensor /xyz/openbmc_project/sensors/voltage/P3VBAT xyz.openbmc_project.Sensor.Threshold.Warning WarningLow d 2.457\nipmitool sel list\nSEL has no entries\nstep2:\nbusctl set-property xyz.openbmc_project.ADCSensor /xyz/openbmc_project/sensors/voltage/P3VBAT xyz.openbmc_project.Sensor.Threshold.Warning WarningLow d 3.1\nipmitool sel list\n   1 | 09/24/20 | 21:30:15 UTC | Voltage #0x2d | Lower Non-critical going low  | Asserted\nstep3:\nbusctl set-property xyz.openbmc_project.ADCSensor /xyz/openbmc_project/sensors/voltage/P3VBAT xyz.openbmc_project.Sensor.Threshold.Warning WarningLow d 2.457\nipmitool sel list\n   1 | 09/24/20 | 21:30:15 UTC | Voltage #0x2d | Lower Non-critical going low  | Asserted\n   2 | 09/24/20 | 21:30:33 UTC | Voltage #0x2d | Lower Non-critical going low  | Deasserted\n\nSigned-off-by: Zhikui Ren <zhikui.ren@intel.com>\nChange-Id: If28870ac1e0d09be4a631a3145408ec70390dfc5\n",
    "createdOn": 1600983486,
    "lastUpdated": 1628621239,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1600983486,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1600983496,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1600983504,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5158/"
        },
        {
            "timestamp": 1600983857,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5158/ : SUCCESS"
        },
        {
            "timestamp": 1601009712,
            "reviewer": {
                "name": "AppaRao Puli",
                "email": "apparao.puli@linux.intel.com",
                "username": "apuli1"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1601050851,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1601067018,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1601067258,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1601421849,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1601421857,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1601421865,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/5447/"
        },
        {
            "timestamp": 1601421945,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/5447/ : SUCCESS"
        },
        {
            "timestamp": 1601422742,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1601502416,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601502746,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601671668,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601676870,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1601917778,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1602188305,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1605544699,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(1 comment)\n\nThis change is ready for review."
        },
        {
            "timestamp": 1605544699,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1605545818,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1605546683,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1605547064,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1605562351,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1605563863,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1605660715,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Set private"
        },
        {
            "timestamp": 1605660726,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1607635805,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Unset private"
        },
        {
            "timestamp": 1608256974,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1608256987,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608257072,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/10080/ : FAILURE"
        },
        {
            "timestamp": 1608257479,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Uploaded patch set 4: Commit message was updated."
        },
        {
            "timestamp": 1608257504,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 4:\n\nThis change is ready for review."
        },
        {
            "timestamp": 1608257504,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1608257730,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1608257747,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1608257825,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/10081/ : SUCCESS"
        },
        {
            "timestamp": 1608258341,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 5:\n\nI have updated the patch with a slightly new approach, moving the fix out of destructor into constructor/initialization. This ensure that the object is still valid when handler of the de-assert message may queries the object interface for more data. \nPlease review again."
        },
        {
            "timestamp": 1608570617,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 5:\n\n(5 comments)\n\nOverall, I'm trying to understand what this is actually fixing.  The tested statement lists some SetProperty test cases, but doesn't really explain how a user could actually hit this in practice.\n\nAlso, unless I'm mistaken (which very well could be the case) this patchset will add deassert events to every sensor on every boot/configuration change.  That doesn't seem acceptable, and is arguably worse than the bug that it's fixing."
        },
        {
            "timestamp": 1611879130,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Patch Set 5:\n\n(5 comments)"
        },
        {
            "timestamp": 1611879138,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Removed reviewer James Feist."
        },
        {
            "timestamp": 1613079185,
            "reviewer": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "message": "Set Work In Progress"
        }
    ],
    "wip": true,
    "patchSets": [
        {
            "number": 1,
            "revision": "8990f3d3d3d74c0bed2c0920073e1ecfd4ff422d",
            "parents": [
                "c6ca52b3b11656efe453685e9d98c4813fb48fad"
            ],
            "ref": "refs/changes/72/36772/1",
            "uploader": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "createdOn": 1600983486,
            "author": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/ADCSensor.cpp",
                    "line": 101,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "why is adcsensor special? shouldn't all need this?"
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "line": 101,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Agreed. I plan on doing follow up patches after more testing."
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "line": 101,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Added to other sensors also. One side effect of this approach is that there can be an extra toggle on thresholds because of unrelated configuration change. But the threshold don't get stuck in the wrong state."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 515,
                    "reviewer": {
                        "name": "AppaRao Puli",
                        "email": "apparao.puli@linux.intel.com",
                        "username": "apuli1"
                    },
                    "message": "duplicate code. This is same as assertThresholds() with few arsg changes(assertValue  & assert)> So we can reuse this with sensor->value and asert set to false in caller."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 515,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "True. I wanted to make sure the intention of the function is clear, so it is hard to use it in-correctly. There might be a way to do it without duplicating the code."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 515,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 62,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 77,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "2635789defb387ad94f7fbcce41982a102d1a54f",
            "parents": [
                "f57836bdc697ebf836c041ed990c617579aa25cf"
            ],
            "ref": "refs/changes/72/36772/2",
            "uploader": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "createdOn": 1601421849,
            "author": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 113,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "why can't this just be added to the base destructor?"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 113,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "This needs to be called after inputDev close and waitTimer cancel"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 113,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "It would https://stackoverflow.com/questions/654428/what-is-the-order-in-which-the-destructors-and-the-constructors-are-called-in-c"
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 113,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "But I think the interfaces (below) still are needed, maybe these can be moved into base destructor."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 113,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "yeah that'd be a great idea."
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "line": 113,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Since base class - sensors.hpp is neither a dbus object_server or has a dbus object_server, the following lines can't be moved into sensor's base destructor. I am open to other suggestions or thoughts on whether to add object_server into sensor's base construct."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 456,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "typo"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 457,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why isn't is called in the Threshold Destructor?"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 457,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Threshold currently does not link back to the sensor that owns it."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 457,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, fair point.  I'd like to see this deduplicated, so we don't have to edit every sensor to get the behavior we're looking for.\n\nYou might need this to land ahead of you, so you'll get access to the Sensor destructor as a generalized element.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/37313"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 457,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Nice, I will take a look and probably refactor this patch with it"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 461,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Shouldn't this only be asserting thresholds if the threshold is asserted?  This seems like it would indiscriminately deassert the threshold."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 461,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "It is the intend for this function to force the de-assert and should only be called on sensor destruct.\nWhen the new sensor get created again, the threshold will be reset based on new values."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 461,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> It is the intend for this function to force the de-assert and should only be called on sensor destruct.\n\nBut it should only be deasserted if it's asserted, correct?  Otherwise we're sending an extra event out.\n\n> When the new sensor get created again, the threshold will be reset based on new values."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 461,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "I thought there will be no extra event since the property value does not change.\nThreshold value state is not cached in the object, so get the current value is not free and need dbus get calls.\nSince sensors are not expected to be destructed constantly, I would think it is not worth adding a cached state yet."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 461,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I thought there will be no extra event since the property value does not change.\n\nI'm not an expert in this area.  If you can test and verify that's the case, then this is fine as-is.\n\n> Threshold value state is not cached in the object, so get the current value is not free and need dbus get calls.\n\nIsn't the current state available in the dbus interface itself?\n\n> Since sensors are not expected to be destructed constantly, I would think it is not worth adding a cached state yet.\n\nWe should already have access to the state within the threshold interfaces."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 3,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/CPUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/ExitAirTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "src/HwmonTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/IpmbSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "src/MCUTempSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "src/NVMeSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                },
                {
                    "file": "src/PSUSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/TachSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": 0
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 116,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "7d58e9292d44676d7a1206fa543a95b1de7cee75",
            "parents": [
                "937eb54e2fbdd917442bf359c8367219c23d4e36"
            ],
            "ref": "refs/changes/72/36772/3",
            "uploader": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "createdOn": 1608256974,
            "author": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 28,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "e79c32bf717ebbff157b7cbbefd478d4fedf9c18",
            "parents": [
                "937eb54e2fbdd917442bf359c8367219c23d4e36"
            ],
            "ref": "refs/changes/72/36772/4",
            "uploader": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "createdOn": 1608257479,
            "author": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 28,
            "sizeDeletions": 2
        },
        {
            "number": 5,
            "revision": "512fd3867ba56cac4fbf8250f1818e660e37615c",
            "parents": [
                "937eb54e2fbdd917442bf359c8367219c23d4e36"
            ],
            "ref": "refs/changes/72/36772/5",
            "uploader": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "createdOn": 1608257730,
            "author": {
                "name": "Zhikui Ren",
                "email": "zhikui.ren@intel.com",
                "username": "ZhikuiRen"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Is there an actual use case where this can happen, or is this hypothetical?\n\nConsidering that a sensor being reconstructed means that the sensor was either removed (through a hardware removal) or a threshold was changed, both of which are manual inputs by the user, it seems just fine that the thresholds deassert without a log message.  In the case where the sensor has been created and destroyed, there should be a log of the sensors removal, but I wouldn't expect there to be forced assert when the configuration changes."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 12,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "One example is that if 3.3BAT is reading 3.0V and raising a voltage low warning. The sensor event won't get cleared even after the threshold is adjusted to 2.9V through IPMI command."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 30,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please come up and test with a use case that doesn't involve the testing interfaces.  This seems like only a bug in the testing, not an actual error in the functionality.."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 30,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "will add for the above scenario."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 325,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Wont this cause every sensor to deassert thresholds every time it's recreated, and on every boot?  That seems unacceptable, and adds a lot of noise.  Especially considering (correct me if I'm wrong) that this is only seeable when running the test procedures, that seems like an issue."
                },
                {
                    "file": "include/sensor.hpp",
                    "line": 325,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Sorry for not getting back to this sooner.\nAgreed, the cost here is one dbus signal on every sensor threshold creation, which is not ideal, but probably not a frequent event that happens continuously. The use case is not just a test procedure, it can be a customer actually adjusting threshold levels (through ipmi for example). \nThis \"extra\" signal will not cause extra entries in SEL if the threshold is not currently asserted. So it would behave as expected.\nhttps://github.com/openbmc/phosphor-sel-logger/blob/master/include/threshold_event_monitor.hpp#L81\n\nAnother option for addressing the issue is to allow threshold value property to change without recreating the interface and the sensors objects. I think it is a cleaner solution for this issue, but little concerned about breaking some other features that depend on the current behavior, i.e. new interfaces created. \nAny comments on this or other approaches are welcome."
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "line": 91,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Guessing this was unintentional."
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "line": 91,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "same here."
                },
                {
                    "file": "src/Thresholds.cpp",
                    "line": 347,
                    "reviewer": {
                        "name": "Zhikui Ren",
                        "email": "zhikui.ren@intel.com",
                        "username": "ZhikuiRen"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "include/Thresholds.hpp",
                    "type": "MODIFIED",
                    "insertions": 4,
                    "deletions": -1
                },
                {
                    "file": "include/sensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "src/ADCSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "src/Thresholds.cpp",
                    "type": "MODIFIED",
                    "insertions": 13,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 31,
            "sizeDeletions": 3
        }
    ]
}