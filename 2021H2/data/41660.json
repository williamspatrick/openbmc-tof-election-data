{
    "project": "openbmc/docs",
    "branch": "master",
    "id": "I64e90c8c0a0d7656aaf7f50701800ace693f7bde",
    "number": 41660,
    "subject": "BIOS Specific post codes",
    "owner": {
        "name": "ManojKiran Eda",
        "email": "manojkiran.eda@gmail.com",
        "username": "manojkiraneda"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/41660",
    "commitMessage": "BIOS Specific post codes\n\n- The intent behind this commit is to add a design through\n  which we can achieve the BIOS Specific post codes.\n\nSigned-off-by: Manojkiran Eda <manojkiran.eda@gmail.com>\nChange-Id: I64e90c8c0a0d7656aaf7f50701800ace693f7bde\n",
    "createdOn": 1616924110,
    "lastUpdated": 1630120566,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1616924110,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1619538209,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(5 comments)"
        },
        {
            "timestamp": 1620303266,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1620303327,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1:\n\nJason - can you explain your proposal that you proposed in the GUI Work group meeting ?"
        },
        {
            "timestamp": 1620329720,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> Jason - can you explain your proposal that you proposed in the GUI Work group meeting ?\n\nYep.  My thought was that we already treat all three params as a string in the code, so calling them a number in the Message Registry doesn't really change anything.\n        std::vector<std::string> messageArgs = {\n            std::to_string(bootIndex), timeOffsetStr.str(), hexCode.str()};\n\nIf we just change at least the last param to a string (if not all three):\nMessageEntry{\"BIOSPOSTCode\",\n             {\n                 \"BIOS Power-On Self-Test Code received\",\n                 \"Boot Count: %1: TS Offset: %2; POST Code: %3\",\n                 \"OK\",\n                 \"OK\",\n                 3,\n                 {\"number\", \"number\", \"string\"},\n                 \"None.\",\n             }},\n\nThat leaves it open for whoever is sending the Message to decide what's in the param.  The existing implementation will still work since the POST Code number is just a string that will still be displayed, and the new implementation can just display the ASCII code instead of the number.  That way both implementations can use the same Message."
        },
        {
            "timestamp": 1620342299,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > Jason - can you explain your proposal that you proposed in the GUI Work group meeting ?\n> \n> Yep.  My thought was that we already treat all three params as a string in the code, so calling them a number in the Message Registry doesn't really change anything.\n\n>         std::vector<std::string> messageArgs = {\n>             std::to_string(bootIndex), timeOffsetStr.str(), hexCode.str()};\n> \n> If we just change at least the last param to a string (if not all three):\n> MessageEntry{\"BIOSPOSTCode\",\n>              {\n>                  \"BIOS Power-On Self-Test Code received\",\n>                  \"Boot Count: %1: TS Offset: %2; POST Code: %3\",\n>                  \"OK\",\n>                  \"OK\",\n>                  3,\n>                  {\"number\", \"number\", \"string\"},\n>                  \"None.\",\n>              }},\n> \n> That leaves it open for whoever is sending the Message to decide what's in the param.  The existing implementation will still work since the POST Code number is just a string that will still be displayed, and the new implementation can just display the ASCII code instead of the number.  That way both implementations can use the same Message.\n\nDoesn't that remove data from the response though?  Presumably you might want to know the exact post code so you can match up to the 7 segment display, or to look it up in the manual?\n\nThe other thing I don't like about this, is it leaves clients guessing as to what they're going to get.  On an x86 machine, you get an int, on an IBM machine, you get a string;  If we had both messages, client could explicitly pick which one they wanted, and could easily code in support for systems with both, without losing data."
        },
        {
            "timestamp": 1620342325,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1621054521,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1629897655,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\nWhat are next steps here?  Been a few months without motion."
        },
        {
            "timestamp": 1629992553,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> What are next steps here?  Been a few months without motion.\n\nI am waiting for the reply from Ed. and also appreciate if any one else can weigh on the design."
        },
        {
            "timestamp": 1630080207,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > What are next steps here?  Been a few months without motion.\n> \n> I am waiting for the reply from Ed. and also appreciate if any one else can weigh on the design.\n\nWhat reply are you waiting on from me?  I thought we had talked about this at length, and my last reply on your patchset trying to add this implementation had a section titled \"What I would recommend is:\"  I don't see those steps done, nor do I see any argument that they're the wrong steps to be taken.\n\nIf you were waiting on me, I apologize, I was under the impression that it was waiting on you to complete the concerns raised in that patch.  What other input are you looking for from me?\n\nFrom my perspective:\n1. We need to isolate machine specific code\n2. We need to implement this in a way that's backward compatible with the non-text version, such that we don't break clients that are actively using this feature.\n3. We need to support post codes on machines that don't have the lookup tables defined (ie all of the existing machines today)"
        },
        {
            "timestamp": 1630120437,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630120566,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > What are next steps here?  Been a few months without motion.\n> > \n> > I am waiting for the reply from Ed. and also appreciate if any one else can weigh on the design.\n> \n> What reply are you waiting on from me?  I thought we had talked about this at length, and my last reply on your patchset trying to add this implementation had a section titled \"What I would recommend is:\"  I don't see those steps done, nor do I see any argument that they're the wrong steps to be taken.\n> \n> If you were waiting on me, I apologize, I was under the impression that it was waiting on you to complete the concerns raised in that patch.  What other input are you looking for from me?\n> \n> From my perspective:\n> 1. We need to isolate machine specific code\n> 2. We need to implement this in a way that's backward compatible with the non-text version, such that we don't break clients that are actively using this feature.\n> 3. We need to support post codes on machines that don't have the lookup tables defined (ie all of the existing machines today)\n\nI agree with your perspective, even i share the same views but i want a clear idea on what needs to be exactly coded. before i start implementing the new patch. I had couple of questions that i asked on your previous replies, can you answer those for me please."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "e73de2a51519f5c16ff2b86266424f6ba4d3def5",
            "parents": [
                "f0ca2e418c0b4669d3a759775f654343f0b9e504"
            ],
            "ref": "refs/changes/60/41660/1",
            "uploader": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "createdOn": 1616924110,
            "author": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 82,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Please add to this list: A method that allows a user of a system to see and version ALL possible post codes, such that they can code against them without necessarily using all of them, ideally at compile time.\n\n\nIn the implementation section, this would normally be done as a Bios message registry.  Please plan on writing one of those."
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 83,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Also please add to the requirements list:  Must not break any existing implementations of post codes."
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 104,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This seems kinda messy, and still requires bmcweb to have system specific code.  The ASCII version of an IBM system is generated differently than the ASCII version for many other systems system (which would be a lookup table.)\n\nWhat if instead of this, we just add a new field the the PostCode property called \"text\".  If the field is empty, bmcweb is free to assume no representation exist.  If the field is filled, bmcweb can assume that it was filled in properly, without needing to implement system-dependent decoding logic."
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 104,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "> we just add a new field the the PostCode property called \"text\".  If the field is empty, bmcweb is free to assume no representation exist.  If the field is filled, bmcweb can assume that it was filled in properly, without needing to implement system-dependent decoding logic.\n\nWhere does the proposed PostCode property sit ? are you saying that we should modify the postCode structure to include this field called \"text\" ?\nthis one (https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/State/Boot/Raw.interface.yaml#L6) ? \n\nor are you saying that, the dbus method which is called by the bmcweb, should also return this field apart from just sending the timestamp & the Integer Code as shown below ? (https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/State/Boot/PostCode.interface.yaml#L31)\n\n\n```\n{\n  \"call\": \"GetPostCodesWithTimeStamp\",\n  \"interface\": \"xyz.openbmc_project.State.Boot.PostCode\",\n  \"obj\": \"/xyz/openbmc_project/State/Boot/PostCode\",\n  \"result\": [\n    {\"20191223T143052.632591\", 1, \"<text>\"},\n    {\"20191223T143052.634083\", 2, \"<text>\"},\n  ],\n  \"status\": \"ok\"\n}\n```\n\nThe problem is that the PostCode manager is written in such a way that it always sends the IntegerCodes. So this would demand the bmcweb to do all the conversion."
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 104,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "Ed, can you reply to this comment ?"
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 169,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I don't really want to maintain different registries.  That is going to spiral out of control in a hurry if we have to build message registries per-system."
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 192,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These are going to be duplicated, which I'm assuming means you intend to publish one kind of message for IBM systems, and one kind of message for other systems, which limits our compatibility.  What if instead, IBM systems published BIOSPOSTCode, then immediately after it published a message like:\n\nMessageEntry{\"BIOSPOSTCodeASCII\",\n             {\n                \"BIOS Power-On Self-Test Code received\",\n                \"Post code interpretation: %1\",\n                \"OK\",\n                \"OK\",\n                 1,\n                {\"string\"},\n\n\nThis keeps all OpenBMC systems compatible with all clients, and in the future if other systems want to implement post code interpretations, they can without breaking backward compatibility."
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 192,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "I am confused , How do you propose we do that, because we use log-service entry for sending out a post code & how do we send multiple messages in a single log entry ?\n\nAnd also, on what basis we send the BIOSPOSTCodeASCII ? as in how do we know its an IBM system or not ? in bmcweb ?"
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 192,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I am confused , How do you propose we do that, because we use log-service entry for sending out a post code & how do we send multiple messages in a single log entry ?\n\nYou don't.  You send multiple entries, and rely on the Redfish EventGroupId to map them to a single \"cause\", which is how redfish recommends to do this.  This also \n\n> \n> And also, on what basis we send the BIOSPOSTCodeASCII ? as in how do we know its an IBM system or not ? in bmcweb ?"
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "line": 192,
                    "reviewer": {
                        "name": "ManojKiran Eda",
                        "email": "manojkiran.eda@gmail.com",
                        "username": "manojkiraneda"
                    },
                    "message": "Sure,i think i got what you are trying to say."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "designs/bios-specific-post-codes.md",
                    "type": "ADDED",
                    "insertions": 221,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 221,
            "sizeDeletions": 0
        }
    ]
}