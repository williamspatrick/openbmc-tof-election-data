{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "topic": "storage-drive-type",
    "id": "I17263f07d324e959f05ba5f3f3993d7d4d55fa52",
    "number": 46333,
    "subject": "Inventory.Item.Drive: add Protocol property",
    "owner": {
        "name": "Andrei Kartashev",
        "email": "a.kartashev@yadro.com",
        "username": "alatarum"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/46333",
    "commitMessage": "Inventory.Item.Drive: add Protocol property\n\nProtocol property aimed to represent connection protocol used by the\ndrive. Most common protocols are SATA, SAS, NVMe.\n\nSigned-off-by: Andrei Kartashev <a.kartashev@yadro.com>\nChange-Id: I17263f07d324e959f05ba5f3f3993d7d4d55fa52\n",
    "createdOn": 1630187170,
    "lastUpdated": 1631719925,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1630187170,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1630187185,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1630187569,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/25282/ : SUCCESS"
        },
        {
            "timestamp": 1630187589,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630307570,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630496814,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630573954,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630577453,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630579080,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630580157,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630580973,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630584173,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630586226,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1630586274,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1630595838,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1630595854,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1630595855,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1630596058,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1630596074,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1630596078,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/25572/ : ABORTED"
        },
        {
            "timestamp": 1630596436,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/25573/ : SUCCESS"
        },
        {
            "timestamp": 1630605447,
            "reviewer": {
                "name": "Alexander Filippov",
                "email": "a.filippov@yadro.com",
                "username": "nest1ing"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1630700160,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1630745884,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1630940434,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Topic set to storage-drive-type"
        },
        {
            "timestamp": 1631102474,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1631226298,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631226498,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631255679,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1631273890,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1631302266,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631307969,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631483785,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631538363,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631553083,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631618213,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631699359,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631713098,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1631713936,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1631713955,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1631713964,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 4:\n\n(3 comments)"
        },
        {
            "timestamp": 1631714003,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/26375/ : FAILURE"
        },
        {
            "timestamp": 1631714275,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n> Build Failed \n\nNeeds a rebase."
        },
        {
            "timestamp": 1631714507,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 5: Patch Set 4 was rebased"
        },
        {
            "timestamp": 1631714525,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1631714591,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/26377/ : FAILURE"
        },
        {
            "timestamp": 1631715120,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1631715134,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1631715524,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/26378/ : SUCCESS"
        },
        {
            "timestamp": 1631715602,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1631716096,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1631716879,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6:\n\n(1 comment)"
        },
        {
            "timestamp": 1631719458,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1631719474,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1631719605,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8: Commit message was updated."
        },
        {
            "timestamp": 1631719613,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 8: Code-Review+2"
        },
        {
            "timestamp": 1631719866,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/26385/ : SUCCESS"
        },
        {
            "timestamp": 1631719925,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "c90d801f218a3735c42919abc9210a31d31e5452",
            "parents": [
                "a03d52bb88bb4334f5ed7b6d14e77e18e9fdb79c"
            ],
            "ref": "refs/changes/33/46333/1",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1630187170,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Shouldn't these be scoped to the connection type?\n\nMany of these are not really appropriate for Inventory.\n\nWe generally don't just wholesale copy Redfish definitions if they don't make sense."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "> Shouldn't these be scoped to the connection type?\n> Many of these are not really appropriate for Inventory.\n\nWhat do you mean. I don't mind to put this somewhere else or name it different.\nOr we can just remove entries, not related in Inventory."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The Redfish property here is a total garbage bag of everything known to man.  It has hardware protocols, software protocols, and everything in between.  It doesn't even have any obvious reason to me why some things are included and others aren't, except maybe just that someone added one and not another (like why i2c but not smbus; why TCP but not IP, UCMP, or SCTP).  I don't think that is particularly useful for us and it is actually error prone.\n\n\nI'd rather we take the pieces that are closer a particular hardware inventory item and put them as a specific enumeration there.  This is probably also not a useful example for us, but AHCI and UHCI could be in an inventory object related to a USB controller.  Maybe SAS, SATA, NVMe, and FC belong in the Storage object?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "> Maybe SAS, SATA, NVMe, and FC belong in the Storage object?\n\nI still prefer to keep this as decorator that can be used by not only Storage items. Let's say, keep just the following protocols: PCIe, AHCI, UHCI, SAS, SATA, USB, NVMe, FC"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I still prefer to keep this as decorator...\n\nCan you elaborate why?\n\nMaybe you misunderstood me.  I'm not suggesting there should be just 1 enumeration.  I would like the enumerations scoped to the purpose.  I gave example of Storage as an example.\n\nHaving a catch-all of enumerations is 1) difficult for people to find and 2) error prone of picking the wrong enumeration for the intended inventory item.  Keeping it scoped to the inventory item (inventory item type) ensures you're far more likely to use the right one and you find it when you're making that inventory item."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Then why do we have this Decorator concept at all?\nI thought, it good way to not duplicate same things in different interfaces. Like one might want to specify protocol (SATA/SAS/NVMe) not only for Item.Drive but also for Item.StorageController to show what type of Drives could be connected there."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Decorators are useful when you want to expose the same properties across multiple interface types.  And if you want to have a \"StorageProtocol\" (though I'm not sure I like the name) interface, you can do that.\n\nEnumerations can already be shared across interfaces, so you don't need a Decorator for that.  If you want Item.StorageController to have a protocols supported array property and an Protocols enumeration, you can then use that enumeration in Item.Drive as well.  Where you'd want a Decorator is if you wanted to shared the ProtocolsSupported property between both of them.  But, again, the Decorator should be scoped better and not a catch-all like this.\n\nAs you see in my example, having a single property \"Protocol\" probably isn't even useful.  Many drives and controllers support both SAS and SATA in a single drive (see the SFF-8482 connector)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ok, I got your point. Then I will move this to Item.Drive.\n\n> Many drives and controllers support both SAS and SATA in a single drive (see the SFF-8482 connector).\n\nDo you think, we should support a way to specify this from begging? In my usecase I don't think I will ever set \"SATA+SAS\" since we can get only actually used protocol from BIOS."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Do you think, we should support a way to specify this from begging?\n\nI think it depends on what you're trying to model.  If you're modelling \"current mode\" then a single is fine, if you're trying to model \"supported modes\" then you need a list.\n\nSince it is a minimal impact to return a list of 1 element, I'd go ahead and make the property that now to avoid any refactoring down the line."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ack"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "line": 1,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "To patricks point, we don't directly copy Redfish in these interfaces.  The interface you've pulled this from is \"Protocol\" which is intended to be the grab bag of all possible protocols that a device could be communicating with.  FWIW, these are all in one grab bag because trying to enumerate every possible way a data protocol could connect is hard.  A Drive could be available over the network for example.  TCP is kind of the catch all for \"proprietary\" and is really only used to be able to specify the port number.\n\nIn short, Patrick is right here, we should only be enumerating the interfaces that we would expect the BMC to reasonably use for a drive, and update it if more use cases exist.  Copying Redfish APIs as-is is generally ill advised, as they tend to try to account for lots of non-BMC use cases."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Decorator/Connection/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Decorator/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Decorator/Connection.interface.yaml",
                    "type": "ADDED",
                    "insertions": 130,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 158,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "ffe430a2eed62370ffa4094eb7912a16afe2ed91",
            "parents": [
                "a03d52bb88bb4334f5ed7b6d14e77e18e9fdb79c"
            ],
            "ref": "refs/changes/33/46333/2",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1630595838,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 23,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "aa52871e1c06a2de352e7217fc371ac12c4fc4ad",
            "parents": [
                "a03d52bb88bb4334f5ed7b6d14e77e18e9fdb79c"
            ],
            "ref": "refs/changes/33/46333/3",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1630596058,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think we support 'set'."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 11,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Hm? What is \"set\"? I didn't found it in PDI repo."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "https://github.com/openbmc/sdbusplus/blob/master/docs/interface.md#containers"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 11,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Why is this an array?  Are there drives that support multiples of these?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "That was Patrick's suggestion, see above (he had SATA+SAS case in mind).\nIn our case it can be only one of them. BTW, here is how we use it:\nhttps://github.com/YADRO-KNS/obmc-yadro-hardware/blob/master/src/storage/inventory.cpp"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I would've expected SAS would just be the enum for sata+sas?  Making this an array makes it a lot harder to build interfaces, as most interfaces tend to treat this as a single enum.  Otherwise, clients need to then read in the array and priority sort it to determine which things you care about, or you have to make assumptions, like only reading the first one.  I'd much prefer this be a single propertly."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "No so big deal, actually, but I prefer single enum too.\n@Patrick?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Otherwise, clients need to then read in the array and priority sort it to determine which things you care about, or you have to make assumptions, like only reading the first one.\n\nThis is exactly why we support std::set though.  I'm surprised there aren't any already defined.\n\nBetween adding an Unknown enum and using a set, I'd tend to prefer a set.  It is more accurate (SAS+SATA or SATA+NVMe) and I don't see it as significantly more complex.\n\n(SATA+NVMe is also a common mode for M.2 card)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Otherwise, clients need to then read in the array and priority sort it to determine which things you care about, or you have to make assumptions, like only reading the first one.\n> \n> This is exactly why we support std::set though.  I'm surprised there aren't any already defined.\n> \n> Between adding an Unknown enum and using a set, I'd tend to prefer a set.  It is more accurate (SAS+SATA or SATA+NVMe) and I don't see it as significantly more complex.\n\nStd::set doesn't solve the problem though.  Sure, it's a set, but in general you're not checking for inclusion into a set, you're matching against a specific type, so you can produce the appropriate inventory interface to the user.  With Redfish or IPMI as an example, what if a drive posted that it was both SATA and SAS, which should take precedence?  Any decision the transport makes is wrong to some degree, and would require clients to hardcode in some kind of precedence, which starts to push business logic into the channels.  What if drive is NVMe and SAS?  Again, pushing the precedence into Redfish/IPMI doesn't help here, and unless I'm missing something, doesn't add any use cases that exist.\n\nMaking it a single parameter makes it a lot more obvious what it's trying to convey, and keeps the business logic in the producing daemon where it belongs.\n\n\n> \n> (SATA+NVMe is also a common mode for M.2 card).\n\nit is?  I know there are SATA+NVMe slots, but I didn't know that a drive itself could be both at the same time.  Is there an example?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> What if drive is NVMe and SAS?  Again, pushing the precedence into Redfish/IPMI doesn't help here, and unless I'm missing something, doesn't add any use cases that exist.\n\nI feel like fundamentally the problem here is that the property description is \"interfaces supported\" and not \"interface in use\".  If you're listing the capabilities of the device, which is what Inventory should be, you want to know everything the device is capable of.  Ideally something in State would tell you which is in use, but unfortunately some of those we've been putting into Inventory also.\n\nIt doesn't necessarily seem appropriate to have the Inventory collector decide on precedence either.  If Redfish only has the ability to express one Protocol, that isn't our fault such that we should weaken our own data model, and yes that decision _should_ be pushed into the Redfish app.  Just like our dbus model isn't a direction union of everything in Redfish and IPMI, it isn't an interset either.\n\n> it is?  I know there are SATA+NVMe slots, but I didn't know that a drive itself could be both at the same time.  Is there an example?\n\nI think you might be right on this that the slot supports both and not the drive.  I thought key B was for SATA and key M was for PCIe-x4 (nvme) and I know I've seen B+M M.2 cards, but I guess newer SATA drives just do B+M, while NVMe just does M.\n\n\n---\n\nIf you think that there really aren't any SAS-only drives and SAS always implies (+SATA), and Redfish only wants one of them for a \"interfaces supported\", then I guess we can downgrade this to a single property.  I still don't feel it really reflects what we're advertising in the description."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > What if drive is NVMe and SAS?  Again, pushing the precedence into Redfish/IPMI doesn't help here, and unless I'm missing something, doesn't add any use cases that exist.\n> \n> I feel like fundamentally the problem here is that the property description is \"interfaces supported\" and not \"interface in use\".  If you're listing the capabilities of the device, which is what Inventory should be, you want to know everything the device is capable of.\n\nI guess that's the point though.  What are the use cases for drives that are capable of multiple protocols?  Redfish defines it as a single property, IPMI defines it as entity-id, which is singular, and I believe the drive VPD that we're going to be pulling this data from only supports one \"type\" field (I forget the exact OEM FRU field name).  Why are we adding complexity to something that we don't have use cases for?\n\n>  Ideally something in State would tell you which is in use, but unfortunately some of those we've been putting into Inventory also.\n> \n> It doesn't necessarily seem appropriate to have the Inventory collector decide on precedence either.\n\nIn the case of a single property, the inventory handler isn't deciding precedence, it's simply taking the single property value it got from the VPD and forwarding it onto the interface.  If anything, the drive/manufacturer itself is deciding precedence, if any, which is really where the decision should lie.\n\n>  If Redfish only has the ability to express one Protocol, that isn't our fault such that we should weaken our own data model, and yes that decision _should_ be pushed into the Redfish app.  Just like our dbus model isn't a direction union of everything in Redfish and IPMI, it isn't an interset either.\n> \n> > it is?  I know there are SATA+NVMe slots, but I didn't know that a drive itself could be both at the same time.  Is there an example?\n> \n> I think you might be right on this that the slot supports both and not the drive.  I thought key B was for SATA and key M was for PCIe-x4 (nvme) and I know I've seen B+M M.2 cards, but I guess newer SATA drives just do B+M, while NVMe just does M.\n\nYep, my understanding is that the drive itself is going to be either sata or nvme in terms of this interface definition.\n\n> \n> \n> ---\n> \n> If you think that there really aren't any SAS-only drives and SAS always implies (+SATA), and Redfish only wants one of them for a \"interfaces supported\", then I guess we can downgrade this to a single property.  I still don't feel it really reflects what we're advertising in the description.\n\nThe above would be my preference.  When and if we find a use case for multiple supported interfaces, we could change this to be multiple, but I have a feeling that we're never going to need it.\n\n\n\nThe one SLIGHT distinction we _might_ make in the future is drives that have a separate sideband interface, so we can know if the sideband is usb or smbus/mctp but in that case I suspect we'll want to have a separate \"management interface\" property."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> What are the use cases for drives that are capable of multiple protocols?\n\nI thought I've already stated this.  SAS+SATA is a real thing.  As a user, I may want to answer the question: \"can I move this drive from system A to system B?\"  Without knowing if my SAS drive also supports SATA I can't answer that question.\n\nI would not be surprised if the thing after NVMe ends up with drives that support { NVMe + \"NVMe-next\" } assuming PCIe is still the primary hardware transport protocol at that point, because the vast majority of NVMe disks are fully of firmware to do all the NVMe parts.\n\n> Redfish defines it as a single property.\n\nThe implication here is that Redfish gets everything 100% correct and complete on the first try? ;)\n\n> Why are we adding complexity to something that we don't have use cases for?\n\nI didn't think having a `set` was all that complex, but you've raised points indicating why it is, especially for Redfish due to the current property definition.\n\n> When and if we find a use case for multiple supported interfaces, we could change this to be multiple, but I have a feeling that we're never going to need it.\n\nAgain, we need to be clear that \"SAS+SATA\" (hardware) is just \"SAS\" (enum) today.  Maybe we can do that in the comments (ie. something like \"SAS may imply the drive also supports SATA\").  Otherwise, I don't mind potentially refactoring in the future when/if we need, even though all the hand-coded dbus codes don't make it especially easy."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > What are the use cases for drives that are capable of multiple protocols?\n> \n> I thought I've already stated this.  SAS+SATA is a real thing.  As a user, I may want to answer the question: \"can I move this drive from system A to system B?\"  Without knowing if my SAS drive also supports SATA I can't answer that question.\n\nOut of curiosity, does anyone actually do it that way in industry?  As a general rule, every system I've been in contact with uses model numbers for that, because whether or not the plug fits is rarely descriptive enough to make repair/replace decisions in a fleet.\n\n> \n> I would not be surprised if the thing after NVMe ends up with drives that support { NVMe + \"NVMe-next\" } assuming PCIe is still the primary hardware transport protocol at that point, because the vast majority of NVMe disks are fully of firmware to do all the NVMe parts.\n\nIsn't that just NVMe versioning?\n\n> \n> > Redfish defines it as a single property.\n> \n> The implication here is that Redfish gets everything 100% correct and complete on the first try? ;)\n\nNo, but they certainly have a lot more hard drive manufacturers and experts in attendance than we do on this patchset.  The implication is that if every standard we plan on implementing has implemented this as a single property, it's quite possible they know something we don't, or have intentionally simplified it.\n\n> \n> > Why are we adding complexity to something that we don't have use cases for?\n> \n> I didn't think having a `set` was all that complex, but you've raised points indicating why it is, especially for Redfish due to the current property definition.\n> \n> > When and if we find a use case for multiple supported interfaces, we could change this to be multiple, but I have a feeling that we're never going to need it.\n> \n> Again, we need to be clear that \"SAS+SATA\" (hardware) is just \"SAS\" (enum) today.  Maybe we can do that in the comments (ie. something like \"SAS may imply the drive also supports SATA\").\n\nSeems reasonable.\n\n>  Otherwise, I don't mind potentially refactoring in the future when/if we need, even though all the hand-coded dbus codes don't make it especially easy."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Out of curiosity, does anyone actually do it that way in industry?  As a general rule, every system I've been in contact with uses model numbers for that, because whether or not the plug fits is rarely descriptive enough to make repair/replace decisions in a fleet.\n\nI suspect a \"fleet\" likely describes a certain scale where you're more likely to use model numbers.  I'm expecting someone on the opposite end of the circularity life-cycle is more likely to plug-and-pray and it is those users where I'm more concerned about \"OpenBMC is a pile of junk that always lies to me\" due to their lesser degree of expertise."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Well, am I right that consensus here to go back to single enum value?\nI agree with Ed that we are not going to use multiple values in reasonable future."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Well, am I right that consensus here to go back to single enum value?\n\nYes and add 'Unknown'."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 21,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Do we want to have an explicit enumeration for \"Unknown\" such that we can make it very clear the behavior when this interface can't be implemented, or we don't have the data in the VPD."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 21,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Good point! I have comment in commit message: \"Leave the list empty if supported interfaces unknown.\", forgot to add it to parameter description. Will fix."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 21,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "A USB drive kind of feels like it doesn't really fit in this abstraction, as it's not an \"internal drive\" but more of a storage device.  I would expect that something like a flash drive would have its own inventory type, but maybe not?  Is there a use case for this?  Maybe it's worth omitting until we have a better use case?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "No, I have no usecases for USB right now, just thought it might be useful later.\nI don't mind to remove it.\nPatrick, what's your opinion here?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is \"USB\" even a drive interface?  Isn't it \"SATA over USB\" or \"SCSI over USB\"?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "IMO lets just remove it in the context of this patchset.  We'll deal with it when we have a use case."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 23,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 23,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "6d42d9d05477dfb178c894663f6fb177eea9cdc5",
            "parents": [
                "a03d52bb88bb4334f5ed7b6d14e77e18e9fdb79c"
            ],
            "ref": "refs/changes/33/46333/4",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1631713936,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 24,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "a7dd3c4c7047dece3f50a7ae37d23c00287de4f8",
            "parents": [
                "4573e652d37f10b2ae5a1b5b9ea1b79021546180"
            ],
            "ref": "refs/changes/33/46333/5",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1631714507,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 24,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "03453b40bf7bd9386363f54eafab67f81678f6d3",
            "parents": [
                "4573e652d37f10b2ae5a1b5b9ea1b79021546180"
            ],
            "ref": "refs/changes/33/46333/6",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1631715120,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 10,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why did you change this to 'Iface'?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 10,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Because it doesn't compile with \"Interface\" since it conflicting with some internal definition\nhttps://jenkins.openbmc.org/job/ci-repository/26377/console\n\nHave you better name? Redfish uses Protocol, but it sound bit different."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "line": 10,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Ah, ok.  There is a string created by sdbus++ named 'interface' which gives the proper name of this interface.  Got it.\n\nYeah, lets go with Protocol then.  I don't care for short names (like Iface) and it seems that Protocol/Interface are used fairly interchangeably in this context.\n\n(Might want to change DriveInterface -> DriveProtocol to match?)"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 24,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "a36f89b34a48be631c74ab4cb1b6bd66e83710fb",
            "parents": [
                "4573e652d37f10b2ae5a1b5b9ea1b79021546180"
            ],
            "ref": "refs/changes/33/46333/7",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1631719458,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 24,
            "sizeDeletions": 0
        },
        {
            "number": 8,
            "revision": "3a665b28dcc0d9f6926a1f5eb20bc0d9d768418d",
            "parents": [
                "4573e652d37f10b2ae5a1b5b9ea1b79021546180"
            ],
            "ref": "refs/changes/33/46333/8",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1631719605,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "NO_CODE_CHANGE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Item/Drive.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 24,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 24,
            "sizeDeletions": 0
        }
    ]
}