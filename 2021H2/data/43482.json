{
    "project": "openbmc/phosphor-virtual-sensor",
    "branch": "master",
    "id": "I228f60fa0f484cd1e7be1aca3d097494c5168936",
    "number": 43482,
    "subject": "virtual-sensor: Add ability to read a config from dbus",
    "owner": {
        "name": "Rashmica K Gupta",
        "email": "rashmica.g@gmail.com",
        "username": "RashmicaG"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-virtual-sensor/+/43482",
    "commitMessage": "virtual-sensor: Add ability to read a config from dbus\n\nIf we match on the right interface we attempt to add a virtual sensor\nfrom a configuration on dbus.\n\nAs we do not want to take arbitrary expressions from dbus, we only match\non a pre-determined set of calculations that can be an exprtk expression\nor a function. One is added in a later commit.\n\nSigned-off-by: Rashmica Gupta <rashmica.g@gmail.com>\nSigned-off-by: Matt Spinler <spinler@us.ibm.com>\nChange-Id: I228f60fa0f484cd1e7be1aca3d097494c5168936\n",
    "createdOn": 1621852143,
    "lastUpdated": 1628769020,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1621852143,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1621852153,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nUser not approved, see admin, no CI"
        },
        {
            "timestamp": 1621852526,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Removed reviewer Ed Tanous."
        },
        {
            "timestamp": 1621852528,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Removed reviewer Jae Hyun Yoo."
        },
        {
            "timestamp": 1621852530,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Removed reviewer Vernon Mauery."
        },
        {
            "timestamp": 1621859463,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(7 comments)"
        },
        {
            "timestamp": 1621859488,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\nAdding Ed to CC for awareness as well."
        },
        {
            "timestamp": 1621859536,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1621893948,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 1:\n\n(8 comments)"
        },
        {
            "timestamp": 1621896278,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1621899171,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(13 comments)\n\nThis is kinda neat to see, but I was expecting to see actually calling the parser in the code, not just writing up an implementation and trying to get it to fit in PVS.  Considering that this isn't really an expression based sensor at all, I wonder if this code better belongs somewhere else.\n\n\nI didn't get through the whole review, but I hit most of the high points."
        },
        {
            "timestamp": 1621901518,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1621973234,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1623916974,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1623916990,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623917199,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/19982/ : FAILURE"
        },
        {
            "timestamp": 1623918174,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1623918189,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623918321,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/19984/ : FAILURE"
        },
        {
            "timestamp": 1623918633,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 3:\n\n(2 comments)\n\nA lot of changes... Thoughts would be appreciated. I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?"
        },
        {
            "timestamp": 1623923165,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1623923179,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1623923278,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/19994/ : SUCCESS"
        },
        {
            "timestamp": 1623930122,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n> I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?\n\nCan you expand on both of these thoughts?  More details on what you mean by \"matching on too many things\" and how a timer relates to PropertiesChanged.\n\nDoes sdeventplus, which is already a dependency, have enough of a timer for your needs?  I prefer to avoid boost as much as possible."
        },
        {
            "timestamp": 1623932872,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?\n> \n> Can you expand on both of these thoughts?  More details on what you mean by \"matching on too many things\" \nAs far as I can see the messages on dbus when entity manager publishes a config file don't have much we can use. There is the first argument which the object path (something like '/xyz/openbmc_project/inventory/system/board/Nisqually_Backplane/<virtual sensor name>') and the second argument is an array. \n\nTo match on the object path seems unideal as that would need to hardcoded for each board that wants to use a virtual sensor. And matching on something like '/xyz/openbmc_project/inventory/system/' is very broad and will match a lot of things.\n\nThere is the configuration string ('xyz.openbmc_project.Configuration.modifiedMedian') in a dict/map entry in that array which would be ideal to match on, but I don't see any mechanisms to match on a string in an array... \n\n>and how a timer relates to PropertiesChanged.\n\nMatching on PropertiesChanged when the interface is added means we get a whole bunch of messages coming in at once. I figured that the timers in the eventHandlers in other sensors (dbus-sensors) were so we can sleep for a bit and not get called for each message. I might have misunderstood that.\n\n> \n> Does sdeventplus, which is already a dependency, have enough of a timer for your needs?  I prefer to avoid boost as much as possible.\n\nI'll have a look at that repo tomorrow, thanks."
        },
        {
            "timestamp": 1624033001,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?\n> > \n> > Can you expand on both of these thoughts?  More details on what you mean by \"matching on too many things\" \n> As far as I can see the messages on dbus when entity manager publishes a config file don't have much we can use. There is the first argument which the object path (something like '/xyz/openbmc_project/inventory/system/board/Nisqually_Backplane/<virtual sensor name>') and the second argument is an array. \n> \n> To match on the object path seems unideal as that would need to hardcoded for each board that wants to use a virtual sensor. And matching on something like '/xyz/openbmc_project/inventory/system/' is very broad and will match a lot of things.\n> \n> There is the configuration string ('xyz.openbmc_project.Configuration.modifiedMedian') in a dict/map entry in that array which would be ideal to match on, but I don't see any mechanisms to match on a string in an array... \n> \n> >and how a timer relates to PropertiesChanged.\n> \n> Matching on PropertiesChanged when the interface is added means we get a whole bunch of messages coming in at once. I figured that the timers in the eventHandlers in other sensors (dbus-sensors) were so we can sleep for a bit and not get called for each message. I might have misunderstood that.\n> \n> > \n> > Does sdeventplus, which is already a dependency, have enough of a timer for your needs?  I prefer to avoid boost as much as possible.\n> \n> I'll have a look at that repo tomorrow, thanks.\n\n\nSince your propertiesChanged match has 'arg0namespace='\" + vsConfigIntfPrefix + type + \"'\",', doesn't that limit your callbacks to just this interface?"
        },
        {
            "timestamp": 1624034038,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 4:\n\n(8 comments)"
        },
        {
            "timestamp": 1624265075,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 4:\n\n(8 comments)\n\n> Patch Set 4:\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?\n> > > \n> > > Can you expand on both of these thoughts?  More details on what you mean by \"matching on too many things\" \n> > As far as I can see the messages on dbus when entity manager publishes a config file don't have much we can use. There is the first argument which the object path (something like '/xyz/openbmc_project/inventory/system/board/Nisqually_Backplane/<virtual sensor name>') and the second argument is an array. \n> > \n> > To match on the object path seems unideal as that would need to hardcoded for each board that wants to use a virtual sensor. And matching on something like '/xyz/openbmc_project/inventory/system/' is very broad and will match a lot of things.\n> > \n> > There is the configuration string ('xyz.openbmc_project.Configuration.modifiedMedian') in a dict/map entry in that array which would be ideal to match on, but I don't see any mechanisms to match on a string in an array... \n> > \n> > >and how a timer relates to PropertiesChanged.\n> > \n> > Matching on PropertiesChanged when the interface is added means we get a whole bunch of messages coming in at once. I figured that the timers in the eventHandlers in other sensors (dbus-sensors) were so we can sleep for a bit and not get called for each message. I might have misunderstood that.\n> > \n> > > \n> > > Does sdeventplus, which is already a dependency, have enough of a timer for your needs?  I prefer to avoid boost as much as possible.\n> > \n> > I'll have a look at that repo tomorrow, thanks.\n> \n> \n> Since your propertiesChanged match has 'arg0namespace='\" + vsConfigIntfPrefix + type + \"'\",', doesn't that limit your callbacks to just this interface?\n\nIt does. However we get 37 callbacks in a short period of time, just for the one sensor. With the way this code is at the moment (using a callback as a signal to get managed objects from entity manager, and erroring out when we try to add a virtual sensor with the same name) this isn't very optimal. I see two ways to proceed:\n\n1) use a timer with a short timeout, and in each callback we cancel the timer and restart it, so only the last callback within a short period of time will actually get into the main chunk of code.\n2) parse the content of each callback and push it to a queue for processing, and at some point in time when we hopefully have all the information we need, we start processing the queue."
        },
        {
            "timestamp": 1624276491,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1624276502,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624276591,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20241/ : SUCCESS"
        },
        {
            "timestamp": 1624341677,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1624341702,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624341831,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/20309/ : FAILURE"
        },
        {
            "timestamp": 1624354922,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 7."
        },
        {
            "timestamp": 1624354941,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624355040,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 7: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20339/ : SUCCESS"
        },
        {
            "timestamp": 1624447018,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 8: Patch Set 7 was rebased."
        },
        {
            "timestamp": 1624447040,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624447139,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 8: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20501/ : SUCCESS"
        },
        {
            "timestamp": 1624454793,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 9."
        },
        {
            "timestamp": 1624454807,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624455203,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 9: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20510/ : SUCCESS"
        },
        {
            "timestamp": 1624491318,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 10: Patch Set 9 was rebased."
        },
        {
            "timestamp": 1624491329,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624491433,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 10: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20553/ : SUCCESS"
        },
        {
            "timestamp": 1624491544,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 11."
        },
        {
            "timestamp": 1624491559,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624491656,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 11: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20554/ : SUCCESS"
        },
        {
            "timestamp": 1624647266,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 11:\n\n(8 comments)"
        },
        {
            "timestamp": 1624664749,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 11:\n\n> Patch Set 4:\n> \n> (8 comments)\n> \n> > Patch Set 4:\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > > I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?\n> > > > \n> > > > Can you expand on both of these thoughts?  More details on what you mean by \"matching on too many things\" \n> > > As far as I can see the messages on dbus when entity manager publishes a config file don't have much we can use. There is the first argument which the object path (something like '/xyz/openbmc_project/inventory/system/board/Nisqually_Backplane/<virtual sensor name>') and the second argument is an array. \n> > > \n> > > To match on the object path seems unideal as that would need to hardcoded for each board that wants to use a virtual sensor. And matching on something like '/xyz/openbmc_project/inventory/system/' is very broad and will match a lot of things.\n> > > \n> > > There is the configuration string ('xyz.openbmc_project.Configuration.modifiedMedian') in a dict/map entry in that array which would be ideal to match on, but I don't see any mechanisms to match on a string in an array... \n> > > \n> > > >and how a timer relates to PropertiesChanged.\n> > > \n> > > Matching on PropertiesChanged when the interface is added means we get a whole bunch of messages coming in at once. I figured that the timers in the eventHandlers in other sensors (dbus-sensors) were so we can sleep for a bit and not get called for each message. I might have misunderstood that.\n> > > \n> > > > \n> > > > Does sdeventplus, which is already a dependency, have enough of a timer for your needs?  I prefer to avoid boost as much as possible.\n> > > \n> > > I'll have a look at that repo tomorrow, thanks.\n> > \n> > \n> > Since your propertiesChanged match has 'arg0namespace='\" + vsConfigIntfPrefix + type + \"'\",', doesn't that limit your callbacks to just this interface?\n> \n> It does. However we get 37 callbacks in a short period of time, just for the one sensor. With the way this code is at the moment (using a callback as a signal to get managed objects from entity manager, and erroring out when we try to add a virtual sensor with the same name) this isn't very optimal. I see two ways to proceed:\n> \n> 1) use a timer with a short timeout, and in each callback we cancel the timer and restart it, so only the last callback within a short period of time will actually get into the main chunk of code.\n> 2) parse the content of each callback and push it to a queue for processing, and at some point in time when we hopefully have all the information we need, we start processing the queue.\n\nDbus-sensors implementations have both 1 and 2.  This likely needs both as well."
        },
        {
            "timestamp": 1624869609,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 11:\n\n(8 comments)\n\n> Patch Set 11:\n> \n> > Patch Set 4:\n> > \n> > (8 comments)\n> > \n> > > Patch Set 4:\n> > > \n> > > > Patch Set 4:\n> > > > \n> > > > > Patch Set 4:\n> > > > > \n> > > > > > I can't see how we can use the InterfacesAdded signal without matching on too many things. If we want to use PropertiesChanged we should add a timer into eventHandler - is it reasonable to add boost as a dependancy for this?\n> > > > > \n> > > > > Can you expand on both of these thoughts?  More details on what you mean by \"matching on too many things\" \n> > > > As far as I can see the messages on dbus when entity manager publishes a config file don't have much we can use. There is the first argument which the object path (something like '/xyz/openbmc_project/inventory/system/board/Nisqually_Backplane/<virtual sensor name>') and the second argument is an array. \n> > > > \n> > > > To match on the object path seems unideal as that would need to hardcoded for each board that wants to use a virtual sensor. And matching on something like '/xyz/openbmc_project/inventory/system/' is very broad and will match a lot of things.\n> > > > \n> > > > There is the configuration string ('xyz.openbmc_project.Configuration.modifiedMedian') in a dict/map entry in that array which would be ideal to match on, but I don't see any mechanisms to match on a string in an array... \n> > > > \n> > > > >and how a timer relates to PropertiesChanged.\n> > > > \n> > > > Matching on PropertiesChanged when the interface is added means we get a whole bunch of messages coming in at once. I figured that the timers in the eventHandlers in other sensors (dbus-sensors) were so we can sleep for a bit and not get called for each message. I might have misunderstood that.\n> > > > \n> > > > > \n> > > > > Does sdeventplus, which is already a dependency, have enough of a timer for your needs?  I prefer to avoid boost as much as possible.\n> > > > \n> > > > I'll have a look at that repo tomorrow, thanks.\n> > > \n> > > \n> > > Since your propertiesChanged match has 'arg0namespace='\" + vsConfigIntfPrefix + type + \"'\",', doesn't that limit your callbacks to just this interface?\n> > \n> > It does. However we get 37 callbacks in a short period of time, just for the one sensor. With the way this code is at the moment (using a callback as a signal to get managed objects from entity manager, and erroring out when we try to add a virtual sensor with the same name) this isn't very optimal. I see two ways to proceed:\n> > \n> > 1) use a timer with a short timeout, and in each callback we cancel the timer and restart it, so only the last callback within a short period of time will actually get into the main chunk of code.\n> > 2) parse the content of each callback and push it to a queue for processing, and at some point in time when we hopefully have all the information we need, we start processing the queue.\n> \n> Dbus-sensors implementations have both 1 and 2.  This likely needs both as well.\n\nI'm a bit wary of using a queue. In the case of multiple sensors being added over dbus, there is no way to distinguish between messages belonging to a sensor apart from the order they come in. Can I assume that the order of the callbacks is determinate?\n\nAlso if we do want to use a config file to indicate that we want to get the sensor config from D-Bus then we can probably get rid of the matching code."
        },
        {
            "timestamp": 1624888128,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 11:\n\n(1 comment)"
        },
        {
            "timestamp": 1624960522,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 12."
        },
        {
            "timestamp": 1624960541,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624960580,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 12: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/20980/ : FAILURE"
        },
        {
            "timestamp": 1624960757,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 13."
        },
        {
            "timestamp": 1624960771,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1624960880,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 13: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/20984/ : SUCCESS"
        },
        {
            "timestamp": 1624963648,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 13:\n\n(4 comments)"
        },
        {
            "timestamp": 1625003413,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 13:\n\n(2 comments)"
        },
        {
            "timestamp": 1625004835,
            "reviewer": {
                "name": "Vijay Khemka",
                "email": "vijaykhemkalinux@gmail.com",
                "username": "vijaykhemka"
            },
            "message": "Patch Set 13:\n\nCan we split this patch in 2, one for reading config from dbus and other one adding median function. It is always easy to keep patches smaller with single functionalities at a time. It is easier to test and review."
        },
        {
            "timestamp": 1625035127,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 14."
        },
        {
            "timestamp": 1625035127,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 14:\n\n(1 comment)"
        },
        {
            "timestamp": 1625035141,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625035238,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 14: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21097/ : SUCCESS"
        },
        {
            "timestamp": 1625035341,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 14:\n\n> Patch Set 13:\n> \n> Can we split this patch in 2, one for reading config from dbus and other one adding median function. It is always easy to keep patches smaller with single functionalities at a time. It is easier to test and review.\n\nDone. Sorry, should have done that from the beginning."
        },
        {
            "timestamp": 1625039203,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 15."
        },
        {
            "timestamp": 1625039216,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625039346,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 15: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21108/ : SUCCESS"
        },
        {
            "timestamp": 1625087952,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 15:\n\n(2 comments)"
        },
        {
            "timestamp": 1625110588,
            "reviewer": {
                "name": "Thang Q. Nguyen",
                "email": "thang@os.amperecomputing.com",
                "username": "thangqn-ampere"
            },
            "message": "Patch Set 15:\n\nWith this change, do we need to declare sensors in entity-manager if we want to use in phosphor-virtual-sensor?\nFor example, I want to have DIMMG0_Temp which is maximum of DIMM_CH0_Temp, DIMM_CH1_Temp, ... currently I need to declare DIMM_CHx_Temp in entity-manager and DIMMG0_Temp in phosphor-virtual-sensors. I just want to have DIMMG0_Temp displayed in Redfish but DIMM_CHx_Temp are present also"
        },
        {
            "timestamp": 1625136554,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 15:\n\n(2 comments)\n\n> Patch Set 15:\n> \n> With this change, do we need to declare sensors in entity-manager if we want to use in phosphor-virtual-sensor?\n> For example, I want to have DIMMG0_Temp which is maximum of DIMM_CH0_Temp, DIMM_CH1_Temp, ... currently I need to declare DIMM_CHx_Temp in entity-manager and DIMMG0_Temp in phosphor-virtual-sensors. I just want to have DIMMG0_Temp displayed in Redfish but DIMM_CHx_Temp are present also\n\nBoth ways of adding a virtual sensor need the actual sensors (DIMM_CHx_Temp) to be on D-Bus and as far as I know that has to be done through an application like entity manager.\n\nI am not familiar with Redfish so can't help you there sorry."
        },
        {
            "timestamp": 1625170416,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 15:\n\n> Patch Set 15:\n> \n> With this change, do we need to declare sensors in entity-manager if we want to use in phosphor-virtual-sensor?\n> For example, I want to have DIMMG0_Temp which is maximum of DIMM_CH0_Temp, DIMM_CH1_Temp, ... currently I need to declare DIMM_CHx_Temp in entity-manager and DIMMG0_Temp in phosphor-virtual-sensors. I just want to have DIMMG0_Temp displayed in Redfish but DIMM_CHx_Temp are present also\n\nI believe those temps are showing up in Redfish because whatever dbus-sensors app is reading them is making associations to the appropriate inventory objects by default, and that is how bmcweb can find them.  You would probably need to add a dbus-sensors feature to turn off those associations to get them out of Redfish.  Similarly, if you wanted a virtual sensor to be in Redfish, you'd need somehow create an association for it to some inventory path."
        },
        {
            "timestamp": 1625171849,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 15:\n\n(2 comments)"
        },
        {
            "timestamp": 1625194127,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 15:\n\n(1 comment)"
        },
        {
            "timestamp": 1625582367,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 15:\n\n(1 comment)"
        },
        {
            "timestamp": 1625630350,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 16."
        },
        {
            "timestamp": 1625630363,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625630556,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 16: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21525/ : SUCCESS"
        },
        {
            "timestamp": 1625630625,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 16:\n\n(2 comments)"
        },
        {
            "timestamp": 1625674232,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 16:\n\n(1 comment)"
        },
        {
            "timestamp": 1625679012,
            "reviewer": {
                "name": "Bruce Mitchell",
                "email": "bruce.mitchell@linux.vnet.ibm.com",
                "username": "BMC-Bruce"
            },
            "message": "Patch Set 16:\n\n(1 comment)"
        },
        {
            "timestamp": 1625724256,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 17."
        },
        {
            "timestamp": 1625724256,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 17:\n\n(2 comments)"
        },
        {
            "timestamp": 1625724285,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625724396,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 17: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21614/ : SUCCESS"
        },
        {
            "timestamp": 1625830423,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 18: Patch Set 17 was rebased."
        },
        {
            "timestamp": 1625830436,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625830542,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 18: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21710/ : SUCCESS"
        },
        {
            "timestamp": 1625853256,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1625854673,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(2 comments)"
        },
        {
            "timestamp": 1625855217,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1625855918,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1625856290,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1626072966,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1626189754,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 18:\n\n(1 comment)"
        },
        {
            "timestamp": 1626953691,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 19."
        },
        {
            "timestamp": 1626953691,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 19:\n\n(1 comment)"
        },
        {
            "timestamp": 1626953704,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1626953813,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 19: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/22558/ : SUCCESS"
        },
        {
            "timestamp": 1626961792,
            "reviewer": {
                "name": "Bruce Mitchell",
                "email": "bruce.mitchell@linux.vnet.ibm.com",
                "username": "BMC-Bruce"
            },
            "message": "Patch Set 19: Code-Review+1\n\nJust did a quick scan but look ok."
        },
        {
            "timestamp": 1627582911,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 19:\n\n(3 comments)"
        },
        {
            "timestamp": 1627620215,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 19:\n\n(3 comments)"
        },
        {
            "timestamp": 1627886284,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 20."
        },
        {
            "timestamp": 1627886299,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1627886420,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 20: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23467/ : SUCCESS"
        },
        {
            "timestamp": 1627891058,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 21."
        },
        {
            "timestamp": 1627891075,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1627891224,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 21: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/23485/ : FAILURE"
        },
        {
            "timestamp": 1628064434,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 22."
        },
        {
            "timestamp": 1628064454,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628066608,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 22: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23756/ : SUCCESS"
        },
        {
            "timestamp": 1628077797,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 22: Code-Review-1\n\n(34 comments)"
        },
        {
            "timestamp": 1628152356,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 22:\n\n(29 comments)\n\nThanks for the thorough review!"
        },
        {
            "timestamp": 1628165495,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 22:\n\n(7 comments)\n\nI think I answered all your follow up questions.  Feel free to send me a message if I missed any that you need clarification on."
        },
        {
            "timestamp": 1628199668,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 22:\n\n(1 comment)"
        },
        {
            "timestamp": 1628200153,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 22:\n\n(1 comment)"
        },
        {
            "timestamp": 1628582599,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 23."
        },
        {
            "timestamp": 1628582599,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 23:\n\n(13 comments)"
        },
        {
            "timestamp": 1628582625,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 23: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628582753,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 23: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/24121/ : SUCCESS"
        },
        {
            "timestamp": 1628583163,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 23:\n\n(1 comment)"
        },
        {
            "timestamp": 1628591300,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 23:\n\n(1 comment)"
        },
        {
            "timestamp": 1628646193,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 24."
        },
        {
            "timestamp": 1628646208,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 24: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628646355,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 24: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/24175/ : SUCCESS"
        },
        {
            "timestamp": 1628649665,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 24:\n\n(17 comments)\n\nResolving unresolved comments"
        },
        {
            "timestamp": 1628693536,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 24:\n\n(6 comments)\n\nGetting pretty good.  Just a few minor comments."
        },
        {
            "timestamp": 1628759015,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Uploaded patch set 25."
        },
        {
            "timestamp": 1628759015,
            "reviewer": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "message": "Patch Set 25:\n\n(6 comments)"
        },
        {
            "timestamp": 1628759028,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 25: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628759112,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 25: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/24258/ : SUCCESS"
        },
        {
            "timestamp": 1628768979,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 25: Code-Review+2\n\n(2 comments)"
        },
        {
            "timestamp": 1628769020,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully merged by Patrick Williams"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "73102bf9c333d3d5404299f38269dacc7c3ef696",
            "parents": [
                "187582bd2c1d55199d2f65f33b37b8d65b452ee6"
            ],
            "ref": "refs/changes/82/43482/1",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1621852143,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "For some reason, Gerrit is showing this commit as a merge conflict.  Maybe you need a rebase?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "What should I be basing my commits on? openbmc master?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You should always base any commits to Gerrit on the most recent code merged in Gerrit.  It would be this repository's master, not openbmc master."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Side note, I wonder if there's a gerrit setting where we can just reject pushes that aren't rebased."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 7,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is it possible for us to write this code in a way that does not use an #ifdef?  I prefer we don't have them because it makes for dead code that is not compiled in CI."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Good point. From the discord discussion I gathered that Ed wanted a restriction on expressions taken from dbus, and you didn't want this restriction from your config files. I thought this was a way we could do both as I think the code you were referring to would be separate to the code that uses this change."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I think what patrick is saying here is that we'd like to see it selectable, similar to what phosphor-pid-control does.  If a config file exists, phosphor-pid-control uses it, otherwise it reads from dbus.\n\nAlternatively, if the code is structured such that you can do both, that seems useful too."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 9,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What does it mean to have tested using busctl?  Did you test this code or just tested the bus operations manually?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yes tested manually using busctl."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't understand how this is testing then.  We would need to test this code.  How did you even exercise it with busctl since it is a client?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 16,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Forgot to answer this directly - by updating the sensor values that the virtual sensor uses we can exercise the code."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Rashmica, it also appears you're missing from the IBM CI list because your commit didn't automatically get a CI triggered."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 18,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Thanks for pointing this out!"
                },
                {
                    "file": "meson.build",
                    "line": 32,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It looks like the only reason you're picking up boost is for 'flatmap'?  Just use std::map or std::hashmap.  I don't want to add a dependency on boost for something trivial."
                },
                {
                    "file": "meson.build",
                    "line": 32,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "meson.build",
                    "line": 32,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  Seems like a waste of a dependency just for a map."
                },
                {
                    "file": "meson.build",
                    "line": 32,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Removed."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "These don't look used?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 32,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This would be a lot more efficient if just coded in a method.  As written this will construct a map on heap every startup."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 34,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 268,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This isn't the behavior I would expect.  If the sensor value is out of range, I would expect it to be clamped into range, not just simply ignored."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 268,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "You're right."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 294,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It seems very unfortunate that we hardcode this specific string all around in a bunch of if conditions.  Can that be cleaned up any?  Or at least put into something else."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 294,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 359,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The fact that we're just writing this out as code makes me wonder if virtual sensor is the right place to do this, as we aren't really running an \"expression\" at all, but doing code.  dbus-sensors has Exit Air sensor that I think has a lot of this math in it already, although I believe it takes the max instead of the median, I wonder if we'd reduce the code if we put it there.\n\n\nApologies if I lead you astray, I was expecting that this code was going to be directly calling expertk, which is why it made sense at the time to suggest this."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 359,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I couldn't find an exprtk function for the median and seems less complicated to write it in C++ than in the exprtk language. But you make a good point about where this code should go. Will chat to Matt to see if we can put this in dbus-sensors."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 359,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I don't see us being able to have a lot of common code between the exit air temp algorithm and this one.\nExitAirTemp:\n* hardcodes its output sensor, input power sensor, and inlet sensor names\n* uses all pwm sensors on d-bus instead of getting them from entity-manager\n* does completely different math\n\nKeeping the code in PVS, all she had to do was add a D-Bus->JSON translation layer (which it sounds like may be able to be removed), and the actual median code.  The component and output sensor management code already works, which is what I saw as the biggest draw in putting it here in the first place.\n\nIf we were to do this in dbus-sensors, I bet that others may also wish to use entity-manager for their virtual sensor configs with different canned formulas as I have seen this request on discord."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 359,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I believe we discussed this in discord and this is ok to stay in p-v-s."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 372,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there corresponding code from EM for this?  Is there any YAML definition of the config?\n\nIs there any reason why we couldn't have made the EM contents the same as the existing virtual sensor config and/or change the virtual sensor config to match the proposed EM config?  I don't like having this huge blob of code that is transposing from one JSON format to another."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 372,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I have CC'd you on those changes. We can make them the same. I also assumed that there wasn't a straightforward way to make a map<string, map<string>, variant> into a format that the JSON library can parse, and since I was manually parsing it I figured it would be less churn to change the existing format. Will look into it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 372,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1, transposing dbus to json just so it can be parsed is messy.  See my comments on the EM review, we'll need to change some of the interfaces to conform to how the other sensors naming conventions work on that side anyway.\n\nI suspect we'll need code to just maneuver things into the right config items in the constructor."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 372,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 409,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "When reading these in, you should try to avoid using at() as it leads to throwing with no long in the case the user typos their parameter.  You might want to do something like find() and print \"X value not found\" before throwing out of this."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 409,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 412,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Considering these configs are user (and attacker) facing crashing generally isn't the best plan when parsing these (I don't see the exceptions caught anywhere)."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 412,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 573,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "One solution to the #ifdef is to have a config entry that says \"get my config from EM\".  For systems that want to use EM they can just have that single entry in their virtual-sensor config."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 573,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Oh this could be a nicer way to do it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What is this attempting to do?  Can we get some comments?\n\nYou might want to use map::contains rather than a count comparison.  (I know contains is in C++20, but it's time to upgrade all our repositories to C++20 anyhow)."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "This is so we don't add sensors with the same name. Do you think its a reasonable assumption to have unique virtual sensor names?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "If this is a problem we shouldn't silently drop them on the floor.  Raise this as an error or something.  (Throw an exception maybe?  At least log a log<level:ERR> of what went wrong.  Something is bad if we get to this case.)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 597,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 91,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is really up to the maintainers, but I would've expected this in its own commit, as its testing min/max is going to be very different, also, I would expect it to apply to both kinds of configs."
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 91,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 196,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This is going to match EVERY interfaces added method in the entire system.  Please don't do that, please take a look at dbus sensors, and use a more efficient match expression here.\n\n\nAlso, you need to match on InterfacesRemoved as well, and appropriately clear the sensors when the configuration gets removed."
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 196,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 20,
                    "deletions": 0
                },
                {
                    "file": "meson.build",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 283,
                    "deletions": -14
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 22,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 306,
            "sizeDeletions": 14
        },
        {
            "number": 2,
            "revision": "de5fab79bff415bdaeeb01148ac23a7a9bb4d715",
            "parents": [
                "08b2842196eacd9cc76dd5c2209e542fa938e26d"
            ],
            "ref": "refs/changes/82/43482/2",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1623916974,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 493,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 42,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 535,
            "sizeDeletions": 3
        },
        {
            "number": 3,
            "revision": "9aac9e175e0fdd9cbd735b65abcd7262322f688a",
            "parents": [
                "cb43fa1b5c080075a6148d17767809243e8645df"
            ],
            "ref": "refs/changes/82/43482/3",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1623918174,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 502,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 42,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 544,
            "sizeDeletions": 3
        },
        {
            "number": 4,
            "revision": "3ec7f6b0cd97097b7d5e5c8b0a9f337aa96266d3",
            "parents": [
                "cb43fa1b5c080075a6148d17767809243e8645df"
            ],
            "ref": "refs/changes/82/43482/4",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1623923165,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 258,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "The OpenBMC coding guidelines say to always use brackets with an if statement even if just one line.  Though I'll leave it to Patrick if he wants to enforce it :)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 258,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 370,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I believe in the docs, due to IBM's paranoia, it was supposed to not even include out of range values in the calculation?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 370,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Hmm. You are right. For some reason I thought that requirement was going to be addressed in the code that publishes the data to dbus."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 370,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 398,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "These cases don't also handle cases 2 and 1 above? (I didn't quite work through it all)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 398,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Not quite. This handles the case of 1, which I'll get rid of. But case 2 is the where this function deviates from a median."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "That's user error in the configuration, I don't think I saw dbus-sensors doing it so you wouldn't need to do it here either."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 407,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 424,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I'm OK with these numbers if others are.  Maybe when this is all done you could add a README that describes how to use and configure these."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 424,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "That's a good idea."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 424,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 469,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "you'll want to remove this before merging"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 469,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 481,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "it's preferred to use C++ casts as opposed to the  C style ones, so static_cast<>().  In fact, you may not even need a cast at all."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 481,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 817,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Is this still needed?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 817,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 495,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 41,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 536,
            "sizeDeletions": 3
        },
        {
            "number": 5,
            "revision": "0ea766067ad57d5b27461e61d1e5c7fb3691c86f",
            "parents": [
                "731c983d723fb3c7c9484fe92f4bd0fcf25dd252"
            ],
            "ref": "refs/changes/82/43482/5",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624276491,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 514,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 58,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 572,
            "sizeDeletions": 5
        },
        {
            "number": 6,
            "revision": "35cab419760ae51d9e8cebedd944a18d5ea1aed8",
            "parents": [
                "731c983d723fb3c7c9484fe92f4bd0fcf25dd252"
            ],
            "ref": "refs/changes/82/43482/6",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624341677,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 504,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 558,
            "sizeDeletions": 5
        },
        {
            "number": 7,
            "revision": "809de4b119d90b2a9c504ab99cda16fe6f57e2af",
            "parents": [
                "731c983d723fb3c7c9484fe92f4bd0fcf25dd252"
            ],
            "ref": "refs/changes/82/43482/7",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624354922,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 508,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 562,
            "sizeDeletions": 5
        },
        {
            "number": 8,
            "revision": "c63c477d17d1c192cefa151ade49733b435bbd66",
            "parents": [
                "3f6313cf79b43c4e7524a4a1a5b38b44b6ebaaaa"
            ],
            "ref": "refs/changes/82/43482/8",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624447018,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 508,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 562,
            "sizeDeletions": 5
        },
        {
            "number": 9,
            "revision": "bc22add4eab1b877325597fc0bac16d67479f60f",
            "parents": [
                "3f6313cf79b43c4e7524a4a1a5b38b44b6ebaaaa"
            ],
            "ref": "refs/changes/82/43482/9",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624454793,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 508,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 562,
            "sizeDeletions": 5
        },
        {
            "number": 10,
            "revision": "53f1e0f617ed42e2743d5aceaf29888fd86d058e",
            "parents": [
                "3e99919bbb099391e78e3544a4722970bd18feb6"
            ],
            "ref": "refs/changes/82/43482/10",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624491318,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "TRIVIAL_REBASE",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 508,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 562,
            "sizeDeletions": 5
        },
        {
            "number": 11,
            "revision": "7e244f6bbc27c8f168fe2540aca60d00ce56d2e4",
            "parents": [
                "1846d8225c933ed3de0f9da7d255606cbcb9d7a9"
            ],
            "ref": "refs/changes/82/43482/11",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624491544,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 280,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "const std::string&  is preferred"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 280,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 293,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I don't think this can be hit?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 293,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "It can't at this stage but if someone added another entry into calculationTypes but didn't update this function it could."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 293,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 319,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "if you moved this up to betwene lines 315 & 316 you wouldn't also have to have it on line 327."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 319,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 331,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "maybe add a comment here saying what this is doing?  I'm having a hard time following it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 331,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 469,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "const std::string&"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 469,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 578,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Something the IBM specs specified was that they wanted to have a hysteresis on the thresholds so the conditions wouldn't clear unless the ambient was X degrees below the trip point (looks like they used a value of 3 deg for all the alarms).\n\nI had actually attempted to put that support in awhile ago: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-virtual-sensor/+/38700  but never got around to finishing it when I hit other roadblocks.\n\nI think it would reasonable to handle this in a new commit. Currently entity-manager lets the dbus-sensors apps all determine their own hysteresis values, so I'm not sure the best way to add hysteresis into any entity-manager interfaces."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 578,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I'll have a look into that, thanks."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "If this file doesn't need to be there if using d-bus, then it probably shouldn't print an error trace.  That being said, I remember Patrick saying something about still requiring a config file but having it just contain some JSON that says it should use D-Bus instead.\n\nI'll defer to him on if that's what he really wants."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Good point. If we use a config file to indicate that we want to use D-Bus then we can probably get rid of the matching on PropertiesChanged. \n\nIs that what you would prefer Patrick?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I guess we should probably support getting the config from d-bus and from the JSON file, since entity-manager won't allow exprk expressions in there, and there may still be use cases for using other exprtk virtual sensors along with this median one."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 719,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "this would be due to invalid JSON.  It probably still needs to throw."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 729,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 508,
                    "deletions": -4
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 562,
            "sizeDeletions": 5
        },
        {
            "number": 12,
            "revision": "5a3d003b32744ebf67238599a4de51d5cc137121",
            "parents": [
                "1846d8225c933ed3de0f9da7d255606cbcb9d7a9"
            ],
            "ref": "refs/changes/82/43482/12",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624960522,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 507,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 561,
            "sizeDeletions": 4
        },
        {
            "number": 13,
            "revision": "60a2b4b606b75750833c93e11670e32dfcdf5d7b",
            "parents": [
                "1846d8225c933ed3de0f9da7d255606cbcb9d7a9"
            ],
            "ref": "refs/changes/82/43482/13",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1624960757,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 280,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "still need the '&', so you don't pass by value"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 280,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 508,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 54,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 562,
            "sizeDeletions": 4
        },
        {
            "number": 14,
            "revision": "8e4aa2ac2fcadf57c859e3d6e18d84617a39bb67",
            "parents": [
                "67d8b9d265c2abf6d88fa2bd654e8a177cdeb6c9"
            ],
            "ref": "refs/changes/82/43482/14",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1625035127,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 415,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 463,
            "sizeDeletions": 4
        },
        {
            "number": 15,
            "revision": "d8cfdc1f3c942073d5de6941c47415aba74fa3aa",
            "parents": [
                "67d8b9d265c2abf6d88fa2bd654e8a177cdeb6c9"
            ],
            "ref": "refs/changes/82/43482/15",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1625039203,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 611,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I guess now that you're matching on propertiesChanged signals, a name change is probably in order here."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 611,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I did think about changing to to propertiesChanged but left it as interfaceAdded as we are matching on propertiesChanged to tell us that an interface is added and we aren't actually updating properties that have changed. \n\nBut I agree that this isn't the best name. Maybe something like virtualSensorCallback? Or we could put the contents of this function directly in the lamda?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 611,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Probably not a lambda.  If you like this current name the best I'm OK with it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 611,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 850,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Maybe I'm missing it, but how does this create a virtual sensor if entity-manager is already up and running so no signals are coming in?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 850,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "You're right, it doesn't. This is possibly a limitation in how I have been testing... I veered away from using a string in the config file to indicate that we should look for a virtual sensor configuration on D-Bus, because in simics this code is run well before entity manager has put the config on D-Bus. \n\nPerhaps we can do both this and look for a string in the config file (like Patrick suggested initially), so regardless of whether entity-manager is up and running before or after this app runs we will create a virtual sensor. If we want to just use the string in the config file we will need to decide how often we should check if the config is on D-Bus and how many times we will try before giving up."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 850,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "If, for example, you put the calculation type (the arg to createVirtualSensorsFromDbus) into the JSON file, then on startup you could look for that.  If it's there, you could make the matches and call createVirtualSensorsFromDBus(type), so it would create the sensor if EM was ready and listen for it using the matches if it isn't."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 850,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Wouldn't this have a slight race condition, where in-between us failing to find the calculation type in objects we get from D-Bus and the matches being setup, the config could have been put onto D-Bus and we miss the PropertiesChanged signals?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 850,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "If you make the match objects before you check on D-Bus, it closes that window."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 850,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 415,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 48,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 463,
            "sizeDeletions": 4
        },
        {
            "number": 16,
            "revision": "80e478c00793b27db5d55e5c7885653e5d45fea2",
            "parents": [
                "67d8b9d265c2abf6d88fa2bd654e8a177cdeb6c9"
            ],
            "ref": "refs/changes/82/43482/16",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1625630350,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 100,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "You should look into variantToFloatVisitor in dbus-sensors.  It handles this method in more complete ways (ie it can convert any int type, not just a list of specified ones)."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 100,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Missed this earlier. What I have now (variantToDouble) can be easily changed to add in floats/ints if required in the future."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 652,
                    "reviewer": {
                        "name": "Bruce Mitchell",
                        "email": "bruce.mitchell@linux.vnet.ibm.com",
                        "username": "BMC-Bruce"
                    },
                    "message": "humidity as Percent relative humidity maybe coming\nand\npressure in Pascals is possible also\n\nif you need/want them is up to you (at least presently)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 652,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "It makes sense for this to have all the units available, I'll add it in a separate commit."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 793,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "you don't really need this check, as the desc.value(\"config\", \"\") will already return an empty string if 'Config' isn't there.\n\nAlso nlohmann has a 'contains' method that is pretty handy for this, such as below you could do: if (desc.contains(\"Type\"))"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 793,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "both good points, thanks!"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 445,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 497,
            "sizeDeletions": 4
        },
        {
            "number": 17,
            "revision": "994d78644aa2d880a198dbea42f89e8dff77575b",
            "parents": [
                "67d8b9d265c2abf6d88fa2bd654e8a177cdeb6c9"
            ],
            "ref": "refs/changes/82/43482/17",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1625724256,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 444,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 496,
            "sizeDeletions": 4
        },
        {
            "number": 18,
            "revision": "86ad08203f965bc943a4c43350778c2487838db7",
            "parents": [
                "4ac7a7f28e7469f0b2e9be096c31294334a6cd1a"
            ],
            "ref": "refs/changes/82/43482/18",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1625830423,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "It sounds like Patrick wants the actual threshold names here instead of these mysterious ones that entity-manager/dbus-sensors/etc all use.\n\nAs it stands now, since the entity-manager schema for Thresholds is all strings and no enums, it would not take any schema changes to do this, so I guess maybe it's the way to go."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This code doesn't even look correct for the \"mysterious\" entity-manager/dbus-sensors ones.  We should not be doing direct matching on name.  Name is an opaque thing that the user can name whatever they want.  We should be keying off direction and severity.\n\nThis is all handled today with code in dbus-sensors;  At most you should be building something similar to it:\nhttps://github.com/openbmc/dbus-sensors/blob/12c2c0ef533842d2e66f8c82c6b586f6df31d577/src/Thresholds.cpp#L60\n\nI'm still of the opinion that if we're not going to have a dependency on expertk expressions, phosphor-virtual-sensor is probably the wrong place to put this implementation.  Dbus-sensors already has examples of this kind of \"virtual\" sensors, and already has code for doing exactly this kind of config-to-thresholds operation that we could reuse.  If Patrick or the author wants to own maintainership an implementation in that repo, I'm happy to mess around with the OWNERS files to make that happen."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "I call it mysterious because the entity-manager schema lists severity as an unrestricted number:  https://github.com/openbmc/entity-manager/blob/master/schemas/legacy.json#L548  instead of being a string enum, or even a number with a min and a max with a description on what those mean."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The thresholds were created before we had json schemas for EM configs.  I think the original generation of the schemas was automated using some tool, so there's cases where they're more permissive than intended;  This is one of those cases.  I suspect the schemas could be updated to constrain Severity to min of 1 and max of 2 to be more accurate if we wanted (possibly max of 3 or 4 after we support the new threshold types)."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ps, just in case it sounded like it, I take no offense at the word \"mysterious\".  In a perfect world, we would've made these enums the first time around, but this was a design decision that James made early on that nobody questioned at the time because every system he'd ever worked on only had 2 threshold severities (yay IPMI), and they were in ascending levels of \"badness\" so an int kind of made sense."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "> We should not be doing direct matching on name.  Name is an opaque thing that the user can name whatever they want.  We should be keying off direction and severity.\n\n\nI can't see how the direction field is any less opaque than the name? I can't see any restrictions for either in the schema or entity-manager, what am I missing?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "The schemas were created later, and don't fully comprehend the intent, or desired limits of the full schema.  While they're getting better, they can't yet be trusted as a source of \"what is allowed\" for a given field.\n\nPlease take a look at the dbus-sensors code for how it parses these fields, using severity, and do something similar."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Okay, thanks for the information."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 532,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 444,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 496,
            "sizeDeletions": 4
        },
        {
            "number": 19,
            "revision": "84dfde6b7e2d9713e8b4d1d2414e4db28cd78bb5",
            "parents": [
                "4ac7a7f28e7469f0b2e9be096c31294334a6cd1a"
            ],
            "ref": "refs/changes/82/43482/19",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1626953691,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This looks odd?  is there a reason this is empty?  Having it be empty and constexpr looks like it invalidates a lot of code."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 22,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I separated out 'getting a config from DBus' from adding the modifiedMedian into separate commits to make it easier to review. Since none of this code can be used until a calculation type is added I figured as long as this compiled and didn't break anything it would be ok."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 258,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This isn't used in the latest version of the schema."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 258,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 655,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Need a match for InterfacesRemoved to delete objects when they've been destroyed?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 655,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "To clarify, should we match on InterfacesRemoved for the config files from entity-manager, the sensors we read, or both? I think we can get away without the sensors, as when we try to read sensors that aren't there we just get back a NaN and don't error out."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 655,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Added interfaces removed for when the config file is deleted."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 408,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 53,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 461,
            "sizeDeletions": 4
        },
        {
            "number": 20,
            "revision": "ad6af5be2a011e474156ac287460383d41eec152",
            "parents": [
                "4ac7a7f28e7469f0b2e9be096c31294334a6cd1a"
            ],
            "ref": "refs/changes/82/43482/20",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1627886284,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 413,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 470,
            "sizeDeletions": 4
        },
        {
            "number": 21,
            "revision": "a505d9c5001b2afb46216fb82e667bb70b09bdf2",
            "parents": [
                "4ac7a7f28e7469f0b2e9be096c31294334a6cd1a"
            ],
            "ref": "refs/changes/82/43482/21",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1627891058,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 411,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 468,
            "sizeDeletions": 4
        },
        {
            "number": 22,
            "revision": "6d61a2bcfd2df359f62d4742d7d39e9d4cedf2c9",
            "parents": [
                "4ac7a7f28e7469f0b2e9be096c31294334a6cd1a"
            ],
            "ref": "refs/changes/82/43482/22",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1628064434,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 120,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This can be significantly simplified with a std::visit and probably std::is_convertible<double>."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 120,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 129,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Are we really looking for the calculation type to contain the string or be the string?  Can we get some comments here if it is expected to just contain the string?\n\nI wonder what you are expecting to happen when the interface value is \"modified-median\" and one of the types is \"median\", but happens to be earlier in calculationTypes than \"modified-median\".\n\n(Yes, the example above might not match your definitions exactly but the scenario is valid going forward as people add additional types.)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 129,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yeah, good point. It is supposed to contain the string. I could be less lazy and do an exact match on the suffix of the interface path?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 129,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 271,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can you make these two parsing routines a function?  The code is getting pretty long at this point just parsing the first one."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 271,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 272,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Also here.  Are you expecting equality or contains?  Your code is doing a 'contains'."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 272,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 276,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Should we initialize this to NaN?\n\nPlease add some whitespace through here."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 276,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Prefer C++17 scoped-variable if statement syntax here.  Don't reuse the iterator variable.\n\n> `attr(optional) if constexpr(optional) ( init-statement(optional) condition ) statement-true`\n\nhttps://en.cppreference.com/w/cpp/language/if"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Can do that, but should I be using contains() here instead?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't think contains works for you because you need the itr->second?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 278,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "True."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 296,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "throw string doesn't match the code.  I think this is a missing threshold value, not an invalid one."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 296,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 298,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": ".empty()?  If you really want a comparison with an invalid string, add an invalid string constant somewhere for comparison rather than a magic."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 298,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 301,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "threshold type?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 301,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 305,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Follow similar comments as \"threshold\" case.  A lot of duplication from comments I made there."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 305,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 326,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Interesting that here you used .empty() but above you used `== \"\"`. ;)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 326,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "\ud83d\ude1c"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 331,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "These if-trees imply to me it might be useful to implement some kind of map-apply function:\n\nvoid config_apply(auto map, auto fns)\n{\n    for(auto [name, fn] : fns)\n    {\n        if (auto itr = map.find(name); itr != std::end(map))\n        {\n            fn(itr->second);\n        }\n    }\n}\n\nWhich you could call with:\n\n{\n    { \"MaxValue\", [](auto v){ ValueIface::maxValue(getNumber(v)); }},\n    { \"MinValue\", [](auto v){ ValueIface::minValue(getNumber(v)); }},\n    ...\n}"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 331,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Did something similar."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 381,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "In both cases we're returning quiet_NaN?  Something doesn't feel right here."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 381,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yeah, we don't need the second one."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 410,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'd be fine with a ternary operator here.\n\n  auto val = (itr == calculationTypes.end()) ? expression.value() : calculateValue(exprStr);"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 410,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 512,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Should we just throw in these cases?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 512,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I guess it makes more sense to throw here than to return an empty string and throw on that."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 516,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Should we use the sdbus++ strings here?  Does that make life easier later?\n\nxyz::openbmc_project::Sensor::Threshold::Warning::interface"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 516,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I don't think it does. Am I missing something?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 537,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can you use a map or array+std::find?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 537,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yeah I guess so. Do we need to use a find with an array? \n threshold = thresholdTypes[severity] \nseems nice and simple (with a prior check for severity >= array size)."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 537,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Do we need to use a find with an array? \n\nAh, right, these are integers."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 537,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm very confused by this function name vs the match vs the parameters here (and it may show by my comment on line 575).\n\nThe match is PropertiesChanged, but the function is interfaceAdded.\n\nPropertiesChanged signal is:\n              org.freedesktop.DBus.Properties.PropertiesChanged (STRING interface_name,\n                                                                 DICT<STRING,VARIANT> changed_properties,\n                                                                 ARRAY<STRING> invalidated_properties);\n\nInterfaceAdded signal is:\n          org.freedesktop.DBus.ObjectManager.InterfacesAdded (OBJPATH object_path,\n                                                              DICT<STRING,DICT<STRING,VARIANT>> interfaces_and_properties);\n\n\nI suspect you started with InterfaceAdded and later changed to PropertiesChanged but didn't fix up the names.  Please do so now."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 569,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yeah I did start with InterfacesAdded and kept the name because I felt it represented why we are calling this function (because a relevant interface has been added) and that we don't actually expect the properties on this interface to change nor do anything if they did somehow change.\n\nBut seeing how other apps use PropertiesChanged to add sensors, I guess this is more confusing. Will change."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 575,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This is a very vague \"contains\" search.  Can we search for more of the interface name than just Type?  \"com.foobar.ProcessorType\" also matches this.  Can we at a minimum make sure it is \".Type\"?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 575,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I mislabeled the variable - it's a property map not interfaces. Will rename it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 575,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think that Type is still too short.  Probably want a full match string match rather than find."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 575,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Won't find() on a std::map do an operator== on the string already?  'Type' is a standard entity-manager property name."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 575,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Doh.  I saw so many string::find operations in this whole commit that I forgot that other types exist.  Yes, map::find is fine here."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 575,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 622,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Prefer use sdbusplus::message::convert_to_string now, but this works."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 622,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 626,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm not entirely sure what is going on here.  Are the EM configs just short strings like \"Joules\"?  Can we please make them full enumeration strings?\n\nRather than `substr`, which returns a freshly allocated string, I think you could do a comparison with a string_view constructed using rfind(.).  \n\nThis also allows 0-code refactoring if we were to move Sensor somewhere else (for example).  Any time you're hard coding a string or portion of a string from something in one of the phosphor-dbus-interface headers there is likely a better way to do it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 626,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yes they are short strings defined here: https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/45481/1/schemas/legacy.json\n\nI'm not clear what you mean by \"full enumeration strings\". Do you mean \"xyz.openbmc_project.Sensor.Value.Unit.Joules\" instead of \"Joules\"?\n\nI will get rid of substr()."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 626,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Do you mean \"xyz.openbmc_project.Sensor.Value.Unit.Joules\" instead of \"Joules\"?\n\nYes, exactly.  Ideally EM would use the full names here instead of the short names.  If that can't be done now due to compatibility with dbus-sensors, we should open an issue and get that fixed."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 626,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 640,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "'auto' doesn't work here?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 640,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "It does. I'm fresh to C++ from C so using auto is not instinctive yet! Thanks for your patience in reviewing this."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 656,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please use helpers from sdbusplus::bus::match rather than coding your own strings.  There is even a propertiesChanged helper already there, but looks like you're wanting to do a path_namespace match instead of a fixed path.  Maybe you could add a new helper for this search."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 656,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Will do."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 669,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What are the cases where we expect this to happen?  Should this be an exception?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 669,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "We should at the very least log an error. I was avoiding throwing exceptions that I wasn't catching."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 669,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What if our configuration (sensor names) have hierarchy?  For example, multi-host configs.  This is a non-obvious requirement that we name all sensors with hostN_sensor rather than hostN/sensor."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Hmm. How is this dealt with elsewhere? I don't know enough to know how we would work out at runtime which host we are on (and so which sensor we should be using) in this case."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It isn't a \"which host we are on\" question.  The same BMC manages N host compute cards.  Probably need a discussion with Ed, et. al."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 676,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Right. Are there any example configs you can point me to? As far as I understand if the name field in a config was \"hostN/sensor\" entity manager would convert that to \"hostN_sensor\" in the object path. \n\nIf the actual object path did contain \"hostN/sensor\" and we wanted to use that for the name, I guess we would need to store the full object path in the virtual sensor and have some way of indicating to p-v-s which part of the of the path we want to include in the name."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 678,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "As mentioned elsewhere, I'd prefer if these were fully formed dbus strings rather than carrying around a prefix ourselves."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 678,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "So you'd be happy with 2 separate strings (the interface and the interface.Thresholds) for each calculation type? I assume some getter functions would be preferred to a global map."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 678,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I think I meant that 'calculationType' should be a fully formed dbus name?\n\nLike \"xyz.openbmc_project.Configuration.ModifiedMedian\"?  (I forget what values calcuationType is expected to contain.)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 678,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 681,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "if (!interfaceMap.contains(vsConfigIntf)) continue; ?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 681,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 691,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Use contains to better express intent."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 691,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 700,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is there a particular interface we should be looking for here?  What happens if we end up with two interfaces with the property Units?  How do we know we got the right one?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 700,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Good point, I'll add a check for the correct interface."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 720,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I prefer direct initialization but it looks like there is other code that follows this pattern.  Maybe you could quickly refactor them all.  You might change sensorDbusPath to be string by appending a `_s` to it."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 720,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 730,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "This seems bad.  We're going to have a InterfaceAdded signal go out with the wrong unit and then we're going to send out a PropertyChanged signal with the right one?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 730,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "I don't understand why it is going out with the wrong unit?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 730,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "The `std::make_unique<VirtualSensor>` call is going to construct the object and send an IntefaceAdded signal for it as a side-effect.\n\nI think there are parameters you can pass to the constructor to say \"don't send the InterfaceAdded signal now but defer it until I call back later.  Alternatively there should be constructors that allow you to pass all the properties in right away."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 730,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ah right, will do that."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 735,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "auto doesn't work on this?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 735,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 750,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Please use interfacesRemoved helper on this one."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 750,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 756,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There is a slight race condition here I think we need to deal with.  We got a signal for InterfacesAdded and then we spent time processing it and then added a watch for InterfacesRemoved.  It is possible that the interface has already been removed.  Ideally we'd do a dbus query here to confirm the underlying config still exists, right?\n\nThis is complicated, so I am ok if you leave it as a comment + GH issue as it isn't super likely."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 756,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Good point. I'll leave this as a TODO for now and come back to it."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 434,
                    "deletions": -3
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 57,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 491,
            "sizeDeletions": 4
        },
        {
            "number": 23,
            "revision": "8e3e2d6bf96ae7964222bd6b3286c6f25780f441",
            "parents": [
                "3d9570de992c44def48c917a4add6c206e459d0c"
            ],
            "ref": "refs/changes/82/43482/23",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1628582599,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 573,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ed doesn't want this:\n\n> The config files shouldn't have anything dbus specific in them, and the old mechanisms for this were better, and don't require changing everyones config.\n\nSo I'll change it back to a short string."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 573,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> The config files shouldn't have anything dbus specific in them\n\nI disagree with Ed here, but we can tackle that later."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 573,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Ack"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 392,
                    "deletions": -2
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 59,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 451,
            "sizeDeletions": 3
        },
        {
            "number": 24,
            "revision": "c0b33a048b6e65d37f9c2f74d71b92f1ed5b29f0",
            "parents": [
                "3d9570de992c44def48c917a4add6c206e459d0c"
            ],
            "ref": "refs/changes/82/43482/24",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1628646193,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 141,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don't think this size is required anymore.  I think the compiler deduces it in C++17 (maybe C++20).\n\nThis should probably be static to avoid construction on each call?"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 141,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Yes it should be static. Didn't know about array size not being required anymore, will change."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 172,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is this intentionally a double?  That is slightly surprising."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 172,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "You're right, have fixed."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Especially when there is a conversion here."
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 181,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 574,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Would it be more readable to have this be this?\n\n    unitPath == (unitPrefix + unit)"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 574,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Derp. Yes."
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I prefer action::defer_emit here for clarity."
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 96,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "And here."
                },
                {
                    "file": "virtualSensor.hpp",
                    "line": 115,
                    "reviewer": {
                        "name": "Rashmica K Gupta",
                        "email": "rashmica.g@gmail.com",
                        "username": "RashmicaG"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 393,
                    "deletions": -2
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 59,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 452,
            "sizeDeletions": 3
        },
        {
            "number": 25,
            "revision": "e7efe1353505ce38d140c3f250ac915042fe48a1",
            "parents": [
                "a2fa63a6cf7d7c2799361dee69e8eb393e68c854"
            ],
            "ref": "refs/changes/82/43482/25",
            "uploader": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "createdOn": 1628759015,
            "author": {
                "name": "Rashmica K Gupta",
                "email": "rashmica.g@gmail.com",
                "username": "RashmicaG"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "virtualSensor.cpp",
                    "line": 97,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\ud83c\udf89"
                },
                {
                    "file": "virtualSensor.cpp",
                    "line": 125,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm slightly surprised this compiles for a integral-type U (such as uint32), but it seems to...\n\nI like that this changed to a template.  I was going to suggest it but decided not to.  You could potentially go a step further and just call it 'getFromConfig' and handle types like std::string trivially as well."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "virtualSensor.cpp",
                    "type": "MODIFIED",
                    "insertions": 401,
                    "deletions": -2
                },
                {
                    "file": "virtualSensor.hpp",
                    "type": "MODIFIED",
                    "insertions": 59,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 460,
            "sizeDeletions": 3
        }
    ]
}