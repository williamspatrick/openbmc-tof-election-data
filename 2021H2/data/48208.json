{
    "project": "openbmc/x86-power-control",
    "branch": "master",
    "topic": "x86-pwr-ctrl-float",
    "id": "Id47996f5866fe10075f70019c657dba825129c01",
    "number": 48208,
    "subject": "Use float seconds for x86 Pwr Ctrl timeout values",
    "owner": {
        "name": "Sujoy Ray",
        "email": "sujoy.ray@intel.com",
        "username": "srayintel"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/x86-power-control/+/48208",
    "commitMessage": "Use float seconds for x86 Pwr Ctrl timeout values\n\nIn power-config-host0.json, the timeout values are expressed in\nseconds and milliseconds. As a standardization effort and better\ncode readability, they are now expressed in float seconds.\nAssociated code has been changed in power_control.cpp to\naccommodate the float seconds in json file.\n\nTested:\nTested using logs and by executing the following command:\n1) ipmitool chassis power soft\n2) ipmitool chassis power cycle\n3) ipmitool chassis power on\n4) ipmitool chassis power reset\n\nand printing the timer values before they are passed into\nthe chrono helper functions.\n\nSigned-off-by: Sujoy Ray <sujoy.ray@intel.com>\nChange-Id: Id47996f5866fe10075f70019c657dba825129c01\n",
    "createdOn": 1635197885,
    "lastUpdated": 1637840879,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1635197885,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1635197896,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635197935,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/28958/ : SUCCESS"
        },
        {
            "timestamp": 1635198139,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 1:\n\nHello Team,\n\nThis is my first code review created for the OpenBMC repo. This is a fairly simple change. Please let me know if you have any concern / suggestion.\nThanks in advance for your help!\n\nRegards,\nSujoy"
        },
        {
            "timestamp": 1635200002,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\nHi Sujoy,\n\nThe patch looks alright, though I wonder if this might be a good opportunity to go a bit further and convert all the settings to (float) seconds for consistency with other things as has come up in some recent discussion: https://gerrit.openbmc-project.xyz/c/openbmc/x86-power-control/+/46697/6#message-1804d7f4002d6d54efc8c08cb45ae3832bde4287\n\nAlso, if we're going to be making backwards-incompatible changes like this to the config file, it'd be good to also update the existing configs in the tree at the same time so they don't break.\n\n\nZev"
        },
        {
            "timestamp": 1635293888,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> Hi Sujoy,\n> \n> The patch looks alright, though I wonder if this might be a good opportunity to go a bit further and convert all the settings to (float) seconds for consistency with other things as has come up in some recent discussion: https://gerrit.openbmc-project.xyz/c/openbmc/x86-power-control/+/46697/6#message-1804d7f4002d6d54efc8c08cb45ae3832bde4287\n> \n> Also, if we're going to be making backwards-incompatible changes like this to the config file, it'd be good to also update the existing configs in the tree at the same time so they don't break.\n> \n> \n> Zev\n\nHi Zev,\nThank you for your comment on this. The timer values in question are all in milliseconds and they describe the timer usage accurately. We are using chrono helper types and they all take signed integer as value - not float. We could experiment further but at this point we're little hesitant to make big changes as this may impact platform stability. We will review your suggestion at a later date. For now, it will be helpful and appreciated if you please review the current patch and let me know if this can be submitted,\n\nBest regards,\nSujoy."
        },
        {
            "timestamp": 1635310852,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> We are using chrono helper types and they all take signed integer as value - not float.\n\nSure -- that seems like an implementation detail though, it doesn't have to dictate our config design.\n\n> We could experiment further but at this point we're little hesitant to make big changes as this may impact platform stability. We will review your suggestion at a later date.\n\nCan I ask who \"we\" means here?  (Mostly I'm wondering if it includes Jason or Vernon.)\n\n> For now, it will be helpful and appreciated if you please review the current patch and let me know if this can be submitted,\n\nWell, I definitely think it should update the existing configs if it's going change the format backwards-incompatibly -- breaking other people's previously-working systems doesn't seem ideal.\n\n\nZev"
        },
        {
            "timestamp": 1635351489,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > We are using chrono helper types and they all take signed integer as value - not float.\n> \n> Sure -- that seems like an implementation detail though, it doesn't have to dictate our config design.\n> \n> > We could experiment further but at this point we're little hesitant to make big changes as this may impact platform stability. We will review your suggestion at a later date.\n> \n> Can I ask who \"we\" means here?  (Mostly I'm wondering if it includes Jason or Vernon.)\n>\nHi Zev.  Sorry for the confusion.  As I understand it, our end goal is to normalize the config file timing values to simplify the config file input?\n\nWith that in mind, we looked at the change to float seconds compared to milliseconds, and it was much less intrusive to normalize to milliseconds.  So, we decided to use that as the starting point for this review discussion.\n\nI like the idea of normalizing all of OpenBMC timing configuration to float seconds.  Do you know if that is what is happening and other OpenBMC repos are also normalizing timing configs to float seconds?"
        },
        {
            "timestamp": 1635367847,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > We are using chrono helper types and they all take signed integer as value - not float.\n> > \n> > Sure -- that seems like an implementation detail though, it doesn't have to dictate our config design.\n> > \n> > > We could experiment further but at this point we're little hesitant to make big changes as this may impact platform stability. We will review your suggestion at a later date.\n> > \n> > Can I ask who \"we\" means here?  (Mostly I'm wondering if it includes Jason or Vernon.)\n> >\n> Hi Zev.  Sorry for the confusion.  As I understand it, our end goal is to normalize the config file timing values to simplify the config file input?\n> \n> With that in mind, we looked at the change to float seconds compared to milliseconds, and it was much less intrusive to normalize to milliseconds.  So, we decided to use that as the starting point for this review discussion.\n> \n> I like the idea of normalizing all of OpenBMC timing configuration to float seconds.  Do you know if that is what is happening and other OpenBMC repos are also normalizing timing configs to float seconds?\n\nI don't know offhand what other configurable time intervals presently exist in OpenBMC, but at least within entity-manager/dbus-sensors there's been some conscious effort to move in that direction: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/44463/6#message-10c9d084915e6ca4774b5c7ff8de2abff584aed7\n\nI think that'd be a good thing to aim for in x86-power-control.  It obviates the need for unit suffixes (we can use just `foo` instead of `fooMs` or whatever), and thus the question of whether it makes more sense to aim for all things to use the same unit or to have the unit be something that makes sense for a particular setting in isolation -- e.g. in this case the graceful shutdown timeout value is more naturally expressed in seconds, which makes it inconsistent with the other settings that are all in milliseconds, but if we aim for consistency (as in this patch), we sacrifice a bit on comprehensibility/ease-of-use for this specific setting.  Float seconds is a single format that's fairly intuitive to read/write while used consistently across a variety of timescales -- seeing 0.001 is pretty easily comprehensible as \"a millisecond\" and 3600 is likewise easily understood as \"an hour\", whereas it's (IMO) somewhat less obvious that 60000 means \"one minute\" (for something in milliseconds).\n\nIf there's agreement that that's what we'd like to move toward, the other consideration IMO is the amount of churn in the process of getting there -- I think it'd be good to minimize the number of times we make breaking changes to the config syntax along the way, so I'd be reluctant to proceed with this change as-is if we're just planning on changing it again in the near future.\n\n(Adding Ed to the CC list since he was involved in the E-M time-units discussion too.)"
        },
        {
            "timestamp": 1635448792,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > > Patch Set 1:\n> > > > \n> > > > We are using chrono helper types and they all take signed integer as value - not float.\n> > > \n> > > Sure -- that seems like an implementation detail though, it doesn't have to dictate our config design.\n> > > \n> > > > We could experiment further but at this point we're little hesitant to make big changes as this may impact platform stability. We will review your suggestion at a later date.\n> > > \n> > > Can I ask who \"we\" means here?  (Mostly I'm wondering if it includes Jason or Vernon.)\n> > >\n> > Hi Zev.  Sorry for the confusion.  As I understand it, our end goal is to normalize the config file timing values to simplify the config file input?\n> > \n> > With that in mind, we looked at the change to float seconds compared to milliseconds, and it was much less intrusive to normalize to milliseconds.  So, we decided to use that as the starting point for this review discussion.\n> > \n> > I like the idea of normalizing all of OpenBMC timing configuration to float seconds.  Do you know if that is what is happening and other OpenBMC repos are also normalizing timing configs to float seconds?\n> \n> I don't know offhand what other configurable time intervals presently exist in OpenBMC, but at least within entity-manager/dbus-sensors there's been some conscious effort to move in that direction: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/44463/6#message-10c9d084915e6ca4774b5c7ff8de2abff584aed7\n> \n> I think that'd be a good thing to aim for in x86-power-control.  It obviates the need for unit suffixes (we can use just `foo` instead of `fooMs` or whatever), and thus the question of whether it makes more sense to aim for all things to use the same unit or to have the unit be something that makes sense for a particular setting in isolation -- e.g. in this case the graceful shutdown timeout value is more naturally expressed in seconds, which makes it inconsistent with the other settings that are all in milliseconds, but if we aim for consistency (as in this patch), we sacrifice a bit on comprehensibility/ease-of-use for this specific setting.  Float seconds is a single format that's fairly intuitive to read/write while used consistently across a variety of timescales -- seeing 0.001 is pretty easily comprehensible as \"a millisecond\" and 3600 is likewise easily understood as \"an hour\", whereas it's (IMO) somewhat less obvious that 60000 means \"one minute\" (for something in milliseconds).\n> \n> If there's agreement that that's what we'd like to move toward, the other consideration IMO is the amount of churn in the process of getting there -- I think it'd be good to minimize the number of times we make breaking changes to the config syntax along the way, so I'd be reluctant to proceed with this change as-is if we're just planning on changing it again in the near future.\n> \nI agree.  We should decide between milliseconds and float seconds here and only make this change once.\n\n> (Adding Ed to the CC list since he was involved in the E-M time-units discussion too.)\n\nI'd support a move to standardize all timing configs across OpenBMC to be float seconds for consistency across the code base."
        },
        {
            "timestamp": 1637091887,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1637091906,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637092078,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30355/ : SUCCESS"
        },
        {
            "timestamp": 1637093110,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Topic set to x86-pwr-ctrl-float"
        },
        {
            "timestamp": 1637093896,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(6 comments)\n\nHi Sujoy -- thanks for the patch!  Glad to see this happening -- just a handful of tweaks below."
        },
        {
            "timestamp": 1637095963,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 2:\n\n(6 comments)\n\nThank you Zev. I will fix your comments."
        },
        {
            "timestamp": 1637097503,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1637097514,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637097605,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 3:\n\n(4 comments)"
        },
        {
            "timestamp": 1637097676,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30363/ : SUCCESS"
        },
        {
            "timestamp": 1637099119,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637099998,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3: Code-Review+1\n\n(1 comment)"
        },
        {
            "timestamp": 1637100154,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(3 comments)"
        },
        {
            "timestamp": 1637100562,
            "reviewer": {
                "name": "Jason Bills",
                "email": "jason.m.bills@linux.intel.com",
                "username": "jmbills"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637100590,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637101515,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637102075,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637102248,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637102438,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637102506,
            "reviewer": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637224908,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637229293,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1637805471,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1637840879,
            "reviewer": {
                "email": "smriti.ayushi@linux.intel.com",
                "username": "Smriti-Ayushi"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "dd895890b697d123ee08f7717eaa7e503dee86f3",
            "parents": [
                "f3a33b41348f9f7def1928699d1b356a1d132df5"
            ],
            "ref": "refs/changes/08/48208/1",
            "uploader": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "createdOn": 1635197885,
            "author": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "power-control-x86/config/power-config-host0.json",
                    "type": "MODIFIED",
                    "insertions": 1,
                    "deletions": -1
                },
                {
                    "file": "power-control-x86/src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 2,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 3,
            "sizeDeletions": 3
        },
        {
            "number": 2,
            "revision": "45e886467bf77ec14c9cca3687afe2c256ae8f74",
            "parents": [
                "48c94c59728023cdbff3bd62f203de3434af8b8a"
            ],
            "ref": "refs/changes/08/48208/2",
            "uploader": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "createdOn": 1637091887,
            "author": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "config/power-config-host0.json",
                    "line": 81,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Typo?  (Looks like this should be 1.0 to match the previous 1000ms.)"
                },
                {
                    "file": "config/power-config-host0.json",
                    "line": 81,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Good catch, thanks !"
                },
                {
                    "file": "config/power-config-host0.json",
                    "line": 81,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Done"
                },
                {
                    "file": "config/power-config-host0.json",
                    "line": 83,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "300 instead of 3?"
                },
                {
                    "file": "config/power-config-host0.json",
                    "line": 83,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Yes this should be 300"
                },
                {
                    "file": "config/power-config-host0.json",
                    "line": 83,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "s/3.0/300/ here as well."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Yes, I will fix this"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 131,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 696,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I'd guess we want to switch `%d` out for something else (`%f` perhaps) here now?  (I guess we don't have `__attribute__((printf(...))`-style compile-time checking on these, which is unfortunate.)"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 696,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Good catch. I will fix this"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 696,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Done"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 705,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "`%f` likewise here."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 705,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Ack"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 1161,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Hmm...I'm far from being a C++ expert, but from a glance at the boost docs (https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/reference/basic_waitable_timer/expires_after.html), would it work to just pass the `std::chrono::duration` directly to `.expires_after()` and bypass the `duration_cast`?  (Here and in a bunch of other places of course.)"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 1161,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "Unfortunately it did not work. Please suggest if you have a better way."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 1161,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "I thought it would work too, but in our testing, the boost expires_after() function only takes integer-based duration objects, so it fails to compile with a float-based duration object.  We had to add the cast to change the float duration to an integer duration to get it to build.\n\nI don't know if it would be better, but we could consider global integer duration objects that we cast only once at start-up..."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 1161,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Hmm, that's unfortunate...maybe if someone else (Ed?  Patrick?) has some insight on a cleaner way to achieve that we can fix it up more nicely, but that aside this looks good to me."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "config/power-config-host0.json",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -9
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 45,
                    "deletions": -38
                }
            ],
            "sizeInsertions": 54,
            "sizeDeletions": 47
        },
        {
            "number": 3,
            "revision": "9a5aa29166bd7c9c9a113e8e9b58ab140fd6bcc2",
            "parents": [
                "48c94c59728023cdbff3bd62f203de3434af8b8a"
            ],
            "ref": "refs/changes/08/48208/3",
            "uploader": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "createdOn": 1637097503,
            "author": {
                "name": "Sujoy Ray",
                "email": "sujoy.ray@intel.com",
                "username": "srayintel"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "config/power-config-host0.json",
                    "line": 85,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "Suggest to attach the unit like \"Ms\" did."
                },
                {
                    "file": "config/power-config-host0.json",
                    "line": 85,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Part of the point of the change was to eliminate the need for that by making everything be a single uniform unit (seconds)."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why not standardize on ms rather than involving floating point math?\n\nWhy not 'double' instead of 'float'?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Jason Bills",
                        "email": "jason.m.bills@linux.intel.com",
                        "username": "jmbills"
                    },
                    "message": "Zev was mentioning that elsewhere Ed has indicated a direction to standardize on float seconds for timing configuration values.  It might be nice if we could get the whole project to standardize on the same recommended timing config type.\n\n@Zev, maybe we need to hop on the mailing list or Discord and see if there is a possibility to standardize the whole project?  Would you want to kick that off?  Thanks!"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> Why not standardize on ms rather than involving floating point math?\n\nThere's some discussion of that in the prior comments on this change (https://gerrit.openbmc-project.xyz/c/openbmc/x86-power-control/+/48208/2..3#message-8d8f9b0dc669713ea6635a34709127a349629943).\n\n> Why not 'double' instead of 'float'?\n\nFor our purposes here I'd expect a single-precision float to be plenty accurate, but I'd be fine with switching to double if that's deemed preferable."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Zev was mentioning that elsewhere Ed has indicated a direction to standardize on float seconds for timing configuration values. \n\n> There's some discussion of that in the prior comments on this change (https://gerrit.openbmc-project.xyz/c/openbmc/x86-power-control/+/48208/2..3#message-8d8f9b0dc669713ea6635a34709127a349629943).\n\nHmm.  Ok.  At a dbus level I've been trying to get everything standardized on what Time/EpochTime uses, which is uint64 of microseconds.\n\n> For our purposes here I'd expect a single-precision float to be plenty accurate, but I'd be fine with switching to double if that's deemed preferable.\n\nI would recommend double mostly for consistency.  I see very few places where we use 'float' in the code base (other than some of the ADC code in  dbus-sensors that is similar to this code change) and if you use 'double' there is less thought required.  Since so much uses 'double' in libraries over 'float' there is usually less conversions involved in just sticking with 'double'."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "\"At a dbus level I've been trying to get everything standardized on what Time/EpochTime uses, which is uint64 of microseconds.\"\n\nIf that is the direction, we should all then use microseconds for the time. The float to integer conversion looks confusing  - just my 2 cents on this topic. Anyway, I am fine either way, please let me know whichever way you all want to proceed."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "> If that is the direction, we should all then use microseconds for the time.\n\nI dunno -- that may be fine for use in internal dbus APIs and such, but it doesn't sound like a good fit for a config file to me, since it seems highly likely to lead to a lot of awkward (and error-prone) squinting at questions of \"is that the right number of zeros on the end of that huge number?\""
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "We need a standardized approach to represent a quantity - in this case, time. I am fine whatever approach the project takes. But mixing the quantities may create confusion. Just a thought..."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 127,
                    "reviewer": {
                        "name": "Sujoy Ray",
                        "email": "sujoy.ray@intel.com",
                        "username": "srayintel"
                    },
                    "message": "*quantities = units. Sorry for the confusion."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 539,
                    "reviewer": {
                        "email": "smriti.ayushi@linux.intel.com",
                        "username": "Smriti-Ayushi"
                    },
                    "message": "std::chrono::seconds?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 540,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "If you do end up using float/double here you might consider 'duration<double, 1>' or 'duration<double, std::ratio<1>>'.  I had to look up what the default template arguments to duration mean otherwise to ensure you did the correct thing here."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 1152,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can you remove these 'const's while you're at it?  There are a bunch of 'const int' and 'const float' in this file it looks like which are pointless (r-value POD arguments do not include 'const' in the function name mangling so there is no difference)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 26,
                    "deletions": 0
                },
                {
                    "file": "config/power-config-host0.json",
                    "type": "MODIFIED",
                    "insertions": 9,
                    "deletions": -9
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 47,
                    "deletions": -40
                }
            ],
            "sizeInsertions": 56,
            "sizeDeletions": 49
        }
    ]
}