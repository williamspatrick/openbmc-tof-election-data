{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "topic": "need-36275",
    "id": "I4e90800a79469a87ef63f7395dbfc402976c73aa",
    "number": 36333,
    "subject": "Add sensor value mutability interface",
    "owner": {
        "name": "Josh Lehan",
        "email": "krellan@google.com",
        "username": "Krellan"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/36333",
    "commitMessage": "Add sensor value mutability interface\n\nThis adds and documents the new sensor value mutability interface. IPMI\nwill check the mutability interface before overriding a sensor value.\n\nSigned-off-by: Josh Lehan <krellan@google.com>\nChange-Id: I4e90800a79469a87ef63f7395dbfc402976c73aa\nSigned-off-by: Jie Yang <jjy@google.com>\n",
    "createdOn": 1599637102,
    "lastUpdated": 1627650462,
    "open": false,
    "status": "MERGED",
    "comments": [
        {
            "timestamp": 1599637102,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1599637115,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1599637122,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1:\n\nBuild Started https://jenkins.openbmc.org/job/ci-repository/4441/"
        },
        {
            "timestamp": 1599637373,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/4441/ : SUCCESS"
        },
        {
            "timestamp": 1599649375,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Topic set to need-36275"
        },
        {
            "timestamp": 1599649828,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1:\n\nThis is the requested YAML documentation for the new Mutable property of the Sensor Value interface. The idea behind Mutable is to provide a property that an externally-visible server, such as IPMI, can use for configuring write permission, same as MinValue and MaxValue are used to configure IPMI scaling factors. It also provides, for entity-manager JSON files, feature parity with the ipmi::sensor::mutability parameter of the old hardcoded YAML files."
        },
        {
            "timestamp": 1599656217,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1599666420,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1599671312,
            "reviewer": {
                "name": "James Feist",
                "email": "james.feist@linux.intel.com",
                "username": "feistjj"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1599716391,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1599743950,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1599750573,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1600058574,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1600059566,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Ready For Review"
        },
        {
            "timestamp": 1600059566,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nThanks for comments. As for Mutable, I still think it should be in the sensor, not in a different object elsewhere that would require a lot of cross-referencing and brittle lookups to access. I will make it a separate interface, though.\n\nAnother thing about a separate interface is that the whole focus of the Mutable idea was to provide hints to the services that serve up these sensors to the outside, such as IPMI and Redfish. I wanted a way to tell the IPMI server to set permissions read-write on some sensors, but read-only by default. I could name the interface \"ServiceHints\" or something like that, to better indicate the intentions. Mutable would be something under that, and also I could have something like \"ExcludeSDR\" to tell an IPMI server to avoid publishing this sensor in the SDR. The reason for that is that I could then, on a future system with both IPMI and Redfish running, have 1000 sensors published to Redfish, but only the most important 250 sensors published to IPMI. That's the idea. Thoughts?"
        },
        {
            "timestamp": 1600059587,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Set Work In Progress"
        },
        {
            "timestamp": 1620766035,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 2: Patch Set 1 was rebased."
        },
        {
            "timestamp": 1620766050,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1620766661,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/17041/ : SUCCESS"
        },
        {
            "timestamp": 1620776011,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 2:\n\nRebased to bring up to date, no changes needed."
        },
        {
            "timestamp": 1624377466,
            "reviewer": {
                "name": "Patrick Venture",
                "email": "venture@google.com",
                "username": "pstrinkle"
            },
            "message": "Removed reviewer Patrick Venture."
        },
        {
            "timestamp": 1625665686,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1625665701,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625665718,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1625666138,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21544/ : SUCCESS"
        },
        {
            "timestamp": 1625816639,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1625816651,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1625816659,
            "reviewer": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1625817053,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/21686/ : SUCCESS"
        },
        {
            "timestamp": 1627433072,
            "reviewer": {
                "name": "Jie Yang",
                "email": "jjy@google.com",
                "username": "PlotCondor"
            },
            "message": "Uploaded patch set 5."
        },
        {
            "timestamp": 1627433086,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1627433305,
            "reviewer": {
                "name": "Jie Yang",
                "email": "jjy@google.com",
                "username": "PlotCondor"
            },
            "message": "Patch Set 5:\n\nphosphor-host-ipmid checks the sensor mutability written in a yaml file before setting a sensor value. This is missing in present Sensor interface. Please take a look. Thanks for any comments."
        },
        {
            "timestamp": 1627433497,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 5: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/23026/ : FAILURE"
        },
        {
            "timestamp": 1627434243,
            "reviewer": {
                "name": "Jie Yang",
                "email": "jjy@google.com",
                "username": "PlotCondor"
            },
            "message": "Uploaded patch set 6."
        },
        {
            "timestamp": 1627434256,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1627434686,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 6: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/23028/ : SUCCESS"
        },
        {
            "timestamp": 1627440608,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 6: Code-Review+2"
        },
        {
            "timestamp": 1627440612,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Change has been successfully rebased and submitted as e253e0ec4bbbcdaf7417577fb643a10b95f0cbb9 by Patrick Williams"
        },
        {
            "timestamp": 1627646791,
            "reviewer": {
                "email": "rashmi.r.v@linux.intel.com",
                "username": "Rashmi-RV"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        },
        {
            "timestamp": 1627650462,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 7:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "94cc28a3b7905258d3b0801d3b86516ef38878c2",
            "parents": [
                "47f32d12c1ef5d4311a8b8c5779a6c67616cb7e8"
            ],
            "ref": "refs/changes/33/36333/1",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1599637102,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I wonder if this would be more appropriate as a new interface under org.openbmc_project.Common.Mutable ? It doesn't seem like this is a concept that needs to be specific to sensors and it doesn't seem like all sensor implementations would be interested in having this.  Making it an optional common interface solves both of these concerns."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I believe this is what I suggested (probably poorly phrased) in the other patch.\n\n+1"
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "James Feist",
                        "email": "james.feist@linux.intel.com",
                        "username": "feistjj"
                    },
                    "message": "Maybe also make it an array of property names, so that we know which ones are / are not mutable?"
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Hmm, that sounds a bit over-engineered to me. Which service would own the org.openbmc_project.Common.Mutable object? What would be the name of the interface, would it also be org.openbmc_project.Common.Mutable? Should it be org.openbmc_project or xyz.openbmc_project like the others?\n\nThe property name, under that interface, could be simply \"Mutable\". If it's an array of strings, would each string then be the sensor object path, such as /xyz/openbmc_project/sensors/temperature/cpu_core0? How are those strings then used to look up the objects, when it's also necessary to know the service name the object is under? That's something about D-Bus that's confusing to me.\n\nThe performance would be rather poor. Having to maintain an array of strings, then do a lookup each time, would make it even slower to iterate through the IPMI SDR. It seems to me that it would be much simpler to add an optional interface to a sensor, since the entire content of the IPMI SDR is sensors. If other non-sensor objects are later desired to be mutable, they can have the same optional interface added to them, orthogonally. This would seem to be a better solution.\n\nI could use \"xyz.openbmc_project.Common.Mutable\" as the name of this optional interface, which would be added to sensors, so that this interface would live alongside the xyz.openbmc_project.Sensor.Value interface. Would this be acceptable?"
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> Hmm, that sounds a bit over-engineered to me. Which service would own the org.openbmc_project.Common.Mutable object? What would be the name of the interface, would it also be org.openbmc_project.Common.Mutable? Should it be org.openbmc_project or xyz.openbmc_project like the others?\n\nThe same service that owns the sensor.  We do this all the time.  There is no correspondence between service names and the objects/interfaces they happen to host.\n\n> Which service would own the org.openbmc_project.Common.Mutable object?\n\nA tangent to clarify definitions: \"org.openbmc_project.Common.Mutable\" is an interface and not an object.  An interface can be hosted at any path in the object tree.  An object is a set of interfaces having the same path.\n\n> The property name, under that interface, could be simply \"Mutable\". If it's an array of strings, would each string then be the sensor object path, such as /xyz/openbmc_project/sensors/temperature/cpu_core0? How are those strings then used to look up the objects, when it's also necessary to know the service name the object is under? That's something about D-Bus that's confusing to me.\n\nI believe the request would be that the Mutable interface would be added to the _existing_ /xyz/openbmc_project/sensors/tempature/cpu_core0 object.  The array would be a list of PropertyNames such as [ \"MinValue\", \"MaxValue\" ] to indicate that the range is the mutable concept.\n\n> It seems to me that it would be much simpler to add an optional interface to a sensor, since the entire content of the IPMI SDR is sensors. \n\nHopefully you've got the suggestion now but an \"optional interface to a sensor\" is exactly what is being proposed rather than a \"required property on a Sensor.Value\".\n\n> I could use \"xyz.openbmc_project.Common.Mutable\" as the name of this optional interface, which would be added to sensors, so that this interface would live alongside the xyz.openbmc_project.Sensor.Value interface. Would this be acceptable?\n\nYes, entirely!  Looks like by the end we're all on the same page. ;)"
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > Hmm, that sounds a bit over-engineered to me. Which service would own the org.openbmc_project.Common.Mutable object? What would be the name of the interface, would it also be org.openbmc_project.Common.Mutable? Should it be org.openbmc_project or xyz.openbmc_project like the others?\n> \n> The same service that owns the sensor.  We do this all the time.  There is no correspondence between service names and the objects/interfaces they happen to host.\n\n+1\n\n> \n> > Which service would own the org.openbmc_project.Common.Mutable object?\n> \n> A tangent to clarify definitions: \"org.openbmc_project.Common.Mutable\" is an interface and not an object.  An interface can be hosted at any path in the object tree.  An object is a set of interfaces having the same path.\n> \n> > The property name, under that interface, could be simply \"Mutable\". If it's an array of strings, would each string then be the sensor object path, such as /xyz/openbmc_project/sensors/temperature/cpu_core0? How are those strings then used to look up the objects, when it's also necessary to know the service name the object is under? That's something about D-Bus that's confusing to me.\n> \n> I believe the request would be that the Mutable interface would be added to the _existing_ /xyz/openbmc_project/sensors/tempature/cpu_core0 object.  The array would be a list of PropertyNames such as [ \"MinValue\", \"MaxValue\" ] to indicate that the range is the mutable concept.\n\n+1\n\n> \n> > It seems to me that it would be much simpler to add an optional interface to a sensor, since the entire content of the IPMI SDR is sensors. \n> \n> Hopefully you've got the suggestion now but an \"optional interface to a sensor\" is exactly what is being proposed rather than a \"required property on a Sensor.Value\".\n> \n> > I could use \"xyz.openbmc_project.Common.Mutable\" as the name of this optional interface, which would be added to sensors, so that this interface would live alongside the xyz.openbmc_project.Sensor.Value interface. Would this be acceptable?\n> \n> Yes, entirely!  Looks like by the end we're all on the same page. ;)\n\nWOOHOO!\n\nThe only additional thought I had was whether the new interface should have a mapping of both Interfaces and property names, just to make sure we handle property name collisions.  I'm not sure I like the complexity there, and there's already other parts of the system that don't handle collisions gracefully, so I think it's probably fine to ignore that case."
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 33,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Thanks! Glad we reached a good understanding here. I want to avoid complexity. The odds of us having the same property name in different interfaces in the same object would be low, but if it ever happens, then we can add a syntax extension or something like that."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 10,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "e0053334241c9ebce53aa3b9859a289f592e6fbe",
            "parents": [
                "33458d4432a8323616622881f314a73cf0b04d97"
            ],
            "ref": "refs/changes/33/36333/2",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1620766035,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "What is your intended default here?  Is 'false' correct for most implementations today?"
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "line": 44,
                    "reviewer": {
                        "name": "Josh Lehan",
                        "email": "krellan@google.com",
                        "username": "Krellan"
                    },
                    "message": "Wow, I forgot to add a default! Good catch. The default should be false. It's the most conservative and correct choice, as false means to make no behavioral change from the previous behavior (not allowing sensors to be externally written at all)."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 10,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "34754e0527d727c4f15cad5a40efddc42926f088",
            "parents": [
                "178cae08d6b79eac7cf3eca963526eeefc53a5af"
            ],
            "ref": "refs/changes/33/36333/3",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1625665686,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 10,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 10,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "28cb5b3959e35affd2095e7bf6314ac585f4985b",
            "parents": [
                "178cae08d6b79eac7cf3eca963526eeefc53a5af"
            ],
            "ref": "refs/changes/33/36333/4",
            "uploader": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "createdOn": 1625816639,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/Value.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 11,
            "sizeDeletions": 0
        },
        {
            "number": 5,
            "revision": "d5508119fa420c69a624fab6048a0c0d2ae4af1c",
            "parents": [
                "c43d228a079f021ea2ac12923d2ac0fc6c1e38e5"
            ],
            "ref": "refs/changes/33/36333/5",
            "uploader": {
                "name": "Jie Yang",
                "email": "jjy@google.com",
                "username": "PlotCondor"
            },
            "createdOn": 1627433072,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/ValueMutability.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 14,
            "sizeDeletions": 0
        },
        {
            "number": 6,
            "revision": "813b50175ddd88b429442a6057d96b45abb1d360",
            "parents": [
                "c43d228a079f021ea2ac12923d2ac0fc6c1e38e5"
            ],
            "ref": "refs/changes/33/36333/6",
            "uploader": {
                "name": "Jie Yang",
                "email": "jjy@google.com",
                "username": "PlotCondor"
            },
            "createdOn": 1627434243,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Sensor/ValueMutability/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Sensor/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/ValueMutability.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 42,
            "sizeDeletions": 0
        },
        {
            "number": 7,
            "revision": "e253e0ec4bbbcdaf7417577fb643a10b95f0cbb9",
            "parents": [
                "1855438658857b355cfed500a54141fd28aaccda"
            ],
            "ref": "refs/changes/33/36333/7",
            "uploader": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "createdOn": 1627440612,
            "author": {
                "name": "Josh Lehan",
                "email": "krellan@google.com",
                "username": "Krellan"
            },
            "kind": "TRIVIAL_REBASE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "email": "rashmi.r.v@linux.intel.com",
                        "username": "Rashmi-RV"
                    },
                    "message": "Tested?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Tested strings are not particularly interesting in this repository.  The CI system verifies almost everything about the content of a YAML file."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Sensor/ValueMutability/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Sensor/meson.build",
                    "type": "MODIFIED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Sensor/ValueMutability.interface.yaml",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 42,
            "sizeDeletions": 0
        }
    ]
}