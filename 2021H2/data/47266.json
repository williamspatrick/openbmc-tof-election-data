{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "I07441869bca3506d4a8c7d830af96705241fa45e",
    "number": 47266,
    "subject": "connector: slot: remove duplicate interface",
    "owner": {
        "name": "Brad Bishop",
        "email": "bradleyb@fuzziesquirrel.com",
        "username": "bradbishop"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47266",
    "commitMessage": "connector: slot: remove duplicate interface\n\nA PCIeSlot interface already exists, so this one is redundant.\n\nFixes: 846182e0017cd90d15cf586ed8398e345b20373b\nChange-Id: I07441869bca3506d4a8c7d830af96705241fa45e\nSigned-off-by: Brad Bishop <bradleyb@fuzziesquirrel.com>\n",
    "createdOn": 1632786145,
    "lastUpdated": 1633559361,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1632786145,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1632786160,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1632786531,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/27052/ : SUCCESS"
        },
        {
            "timestamp": 1632797215,
            "reviewer": {
                "name": "Santosh Puranik",
                "email": "santosh.puranik@in.ibm.com",
                "username": "santoshpuranik"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1632799044,
            "reviewer": {
                "name": "ManojKiran Eda",
                "email": "manojkiran.eda@gmail.com",
                "username": "manojkiraneda"
            },
            "message": "Patch Set 1: Code-Review+1"
        },
        {
            "timestamp": 1632803185,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1632814172,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1632833145,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n> @Brad, should we move PcieSlot under Connector here?  \n\nas in xyz.openbmc_project.Inventory.Connector.PCIeSlot.interface.yaml ?"
        },
        {
            "timestamp": 1632843895,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > @Brad, should we move PcieSlot under Connector here?  \n> \n> as in xyz.openbmc_project.Inventory.Connector.PCIeSlot.interface.yaml ?\n\nYes.  Otherwise we are left with basically nothing in Connector."
        },
        {
            "timestamp": 1632862077,
            "reviewer": {
                "name": "Jie Yang",
                "email": "jjy@google.com",
                "username": "PlotCondor"
            },
            "message": "Patch Set 1:\n\nOriginally we want to use this interface to indicate an inventory item is removable, which differentiates the embedded items."
        },
        {
            "timestamp": 1633011937,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> Originally we want to use this interface to indicate an inventory item is removable, which differentiates the embedded items.\n\nOk.  Maybe xyz.openbmc_project.Inventory.Decorator.Removable would have been a more apt name then?  Shall we change it to that?"
        },
        {
            "timestamp": 1633089056,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > Originally we want to use this interface to indicate an inventory item is removable, which differentiates the embedded items.\n> \n> Ok.  Maybe xyz.openbmc_project.Inventory.Decorator.Removable would have been a more apt name then?  Shall we change it to that?\n\nAt one time I thought I was pointed to a list (maybe from Redfish) of various connector types.  I recall someone mentioning HDMI connectors as an example of something that might be added into this directory later.\n\nIf the only information we're trying to determine is \"can this entity be removed or not\" it seems like a boolean property would have been a lot easier."
        },
        {
            "timestamp": 1633113659,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > Patch Set 1:\n> > \n> > > Patch Set 1:\n> > > \n> > > Originally we want to use this interface to indicate an inventory item is removable, which differentiates the embedded items.\n> > \n> > Ok.  Maybe xyz.openbmc_project.Inventory.Decorator.Removable would have been a more apt name then?  Shall we change it to that?\n> \n> At one time I thought I was pointed to a list (maybe from Redfish) of various connector types.  I recall someone mentioning HDMI connectors as an example of something that might be added into this directory later.\n> \n> If the only information we're trying to determine is \"can this entity be removed or not\" it seems like a boolean property would have been a lot easier.\n\nIf we were to use a boolean property to indicate that, where should we put it.\n\nI am using that in https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44079 to set the LocationType to `Slot` for bmcweb. I am fine as long as we can indicate that it should be a slot in bmcweb.\n\nMaybe just using the PCIe interface is good enough?"
        },
        {
            "timestamp": 1633379431,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\nI'm a little lost at this point.  Is everyone happy with the status-quo?  If so I can just abandon this.  Whatever bmcweb code winds up populating the redfish Location Type can just look for either PCIeSlot or Slot on the object?"
        },
        {
            "timestamp": 1633383934,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n> I'm a little lost at this point.  Is everyone happy with the status-quo?  If so I can just abandon this.  Whatever bmcweb code winds up populating the redfish Location Type can just look for either PCIeSlot or Slot on the object?\n\nHad to look at this code from Willy to jog my brain.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44079/20/redfish-core/include/utils/location_utils.hpp#31\n\nI think that your statement (Brad) is why Ed/Willy wanted these other interfaces.  I think Ed didn't want an OR here of a big list of interfaces that would indicate \"this is a type slot\".  He wanted a unique interface to key off of.  But, I don't know the justification on why _this_ particular property is special and needs a unique interface while other properties can have a list.  I think we've had similar discussions on the \"Chassis\"/\"Assembly\" fiasco in Redfish?\n\nMy opinion is that a unique interface with nothing in it to make the Redfish implementation simpler is kind of a poor reason for an interface.  But, from a modeling standpoint if we're going to have a Connector sub-directory then it seems like we should strive to put all \"connectors\" into that sub-directory.  I'm fine with deleting Connector.Slot if everyone else is on-board with it.  I'd prefer that we also move Item.PCIeSlot to be Connector.PCIeSlot and do the needful refactoring in the <6 places that need it.  If you aren't wanting to do that work, let me know and I can probably do the necessary grep/sed operations."
        },
        {
            "timestamp": 1633386599,
            "reviewer": {
                "name": "Willy Tu",
                "email": "wltu@google.com",
                "username": "wltu"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > I'm a little lost at this point.  Is everyone happy with the status-quo?  If so I can just abandon this.  Whatever bmcweb code winds up populating the redfish Location Type can just look for either PCIeSlot or Slot on the object?\n> \n> Had to look at this code from Willy to jog my brain.\n> \n> https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44079/20/redfish-core/include/utils/location_utils.hpp#31\n> \n> I think that your statement (Brad) is why Ed/Willy wanted these other interfaces.  I think Ed didn't want an OR here of a big list of interfaces that would indicate \"this is a type slot\".  He wanted a unique interface to key off of.  But, I don't know the justification on why _this_ particular property is special and needs a unique interface while other properties can have a list.  I think we've had similar discussions on the \"Chassis\"/\"Assembly\" fiasco in Redfish?\n> \n> My opinion is that a unique interface with nothing in it to make the Redfish implementation simpler is kind of a poor reason for an interface.  But, from a modeling standpoint if we're going to have a Connector sub-directory then it seems like we should strive to put all \"connectors\" into that sub-directory.  I'm fine with deleting Connector.Slot if everyone else is on-board with it.  I'd prefer that we also move Item.PCIeSlot to be Connector.PCIeSlot and do the needful refactoring in the <6 places that need it.  If you aren't wanting to do that work, let me know and I can probably do the necessary grep/sed operations.\n\nI am fine with either-way. I can always update the patch based on this change. I also prefer moving PCIe to connector if that is not too widely used."
        },
        {
            "timestamp": 1633452471,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > I'm a little lost at this point.  Is everyone happy with the status-quo?  If so I can just abandon this.  Whatever bmcweb code winds up populating the redfish Location Type can just look for either PCIeSlot or Slot on the object?\n> \n> Had to look at this code from Willy to jog my brain.\n> \n> https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44079/20/redfish-core/include/utils/location_utils.hpp#31\n> \n> I think that your statement (Brad) is why Ed/Willy wanted these other interfaces.  I think Ed didn't want an OR here of a big list of interfaces that would indicate \"this is a type slot\".\n\n+1.  Having to OR together interfaces is a pain, and while doable, can lead to oddities between systems that show up as bugs.  It's much.... much easier if we have one thing that represents a \"PCIe Slot\" to get consistent redfish behavior.  I do not have a strong opinion of whether or not it shows up in the Item.Connector namespace, or the Item namespace.  In redfish, we can't match on the namespace alone, because we still need to do the conversion from dbus enum to Redfish enum, so in practice we need a fixed lookup anyway.  What I don't want to see happen is to pull in 2 interfaces that produce the exact same redfish result.  That leads to other code looking at the example and populating one interface instead of the other, then other subsystems get bugs.\n\n>  He wanted a unique interface to key off of.  But, I don't know the justification on why _this_ particular property is special and needs a unique interface while other properties can have a list.  I think we've had similar discussions on the \"Chassis\"/\"Assembly\" fiasco in Redfish?\n\nChassis is ok to be a list because there's a \"ChassisType\" parameter that we need to set, so we can explicitly set the type in a way other than just the resource name.  The PCIeSlot schema has no such property, so ideally it should match to one type.  Also, where we do this in Chassis and Assembly it's a significantly more obvious which type to use (A TPM is distinct from a battery for example).  Here, it's pretty subjective.\n\n> \n> My opinion is that a unique interface with nothing in it to make the Redfish implementation simpler is kind of a poor reason for an interface.\n\nI'm not even following why it makes the Redfish interface easier.\n\n>  But, from a modeling standpoint if we're going to have a Connector sub-directory then it seems like we should strive to put all \"connectors\" into that sub-directory.  I'm fine with deleting Connector.Slot if everyone else is on-board with it.  I'd prefer that we also move Item.PCIeSlot to be Connector.PCIeSlot and do the needful refactoring in the <6 places that need it.  If you aren't wanting to do that work, let me know and I can probably do the necessary grep/sed operations.\n\nThe above approach was roughly what I would've expected.  In the intermediate, I'm personally ok if we delete the Connector.Slot for the moment, then move the PCIeSlot interface into connector as a separate set of patches, although to reiterate, in terms of Redfish, having these things in a namespace doesn't buy us much for code complexity.  It's largely just a name."
        },
        {
            "timestamp": 1633530116,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\nEd,\n\nI feel like you are inadvertently contradicting yourself by missing some of the details in the Redfish schema.\n\n> +1.  Having to OR together interfaces is a pain, and while doable, can lead to oddities between systems that show up as bugs.  It's much.... much easier if we have one thing that represents a \"PCIe Slot\" to get consistent redfish behavior.\n\n> In the intermediate, I'm personally ok if we delete the Connector.Slot for the moment...\n\nRedfish doesn't have a \"PCIe Slot\" in this context, it just has a \"Slot\".\n\n```\n        \"LocationType\": {\n            \"description\": \"The types of locations for a part within an enclosure.\",\n            \"enum\": [\n                \"Slot\",\n                \"Bay\",\n                \"Connector\",\n                \"Socket\",\n                \"Backplane\",\n                \"Embedded\"\n            ],\n```\n\nPCIe slots are just one type of slot, right?  The wording is pretty loose to me such that I can't really tell what is a Connector and what is a Slot in all cases:\n\n```\n                \"Connector\": \"This value shall indicate the part is located in a connector or port.\",\n                \"Slot\": \"This value shall indicate the part is located in a slot.\",\n```\n\nAn HDMI or USB port would be a \"Connector\".  A PCIe Slot is likely a Slot because it has Slot in the [widely-accepted] name.  What about an M.2 connector?  That is typically called a connector but looks more like a slot to me.  What about a mini-PCIe slot?  That is almost identical to an M.2 connector physically but again called a slot.  What about a riser card that is connected via something that looks a lot like a PCIe slot/connector but with different pin outs?\n\nAnyhow, the point is that Willy was trying to fill in \"Slot\".  PCIe Slots are one type of it.  Either we need a special interface to identify \"this is a type of slot\" (ie. Connector.Slot) or we need Redfish to keep a list-of-inventory-interfaces-that-map-to-Slots.\n\n> > My opinion is that a unique interface with nothing in it to make the Redfish implementation simpler is kind of a poor reason for an interface.\n> \n> I'm not even following why it makes the Redfish interface easier.\n\nThe above is why it makes Redfish easier.  By defining \"Connector.Slot\" and \"Connector.Embedded\" we are defining unique interfaces with nothing in them that Redfish can use as a simple key to say \"this item maps to LocationType.Slot or LocationType.Embedded\".  If the only user of this is to so that the Redfish code doesn't need to maintain a list of {{ \"PCISlot\" -> \"Location.Slot\" }, {\"CPU\" -> \"Location.Socket\" } ...}, it exists only to make the Redfish code easier while providing no information to the rest of the dbus model; effectively just pushing yet another detail of Redfish into the Inventory providers."
        },
        {
            "timestamp": 1633551372,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> Ed,\n> \n> I feel like you are inadvertently contradicting yourself by missing some of the details in the Redfish schema.\n\nSeems likely.\n\n> \n> > +1.  Having to OR together interfaces is a pain, and while doable, can lead to oddities between systems that show up as bugs.  It's much.... much easier if we have one thing that represents a \"PCIe Slot\" to get consistent redfish behavior.\n> \n> > In the intermediate, I'm personally ok if we delete the Connector.Slot for the moment...\n> \n> Redfish doesn't have a \"PCIe Slot\" in this context, it just has a \"Slot\".\n> \n> ```\n>         \"LocationType\": {\n>             \"description\": \"The types of locations for a part within an enclosure.\",\n>             \"enum\": [\n>                 \"Slot\",\n>                 \"Bay\",\n>                 \"Connector\",\n>                 \"Socket\",\n>                 \"Backplane\",\n>                 \"Embedded\"\n>             ],\n> ```\n\nhttps://redfish.dmtf.org/schemas/PCIeSlots_v1.xml was the schema I was referring to.  You're looking at LocationType, within Resource, which yes, contains slot as one of its enums, but from a bmcweb perspective, we would likely just hardcode it in the PCIeSlots schema \"Ie, all PcieSlot resources are of type \"slot\", because we know that from the interface name.\n\n> \n> PCIe slots are just one type of slot, right?  The wording is pretty loose to me such that I can't really tell what is a Connector and what is a Slot in all cases:\n\nThat's the trick here, LocationType is attached to Resource (Ie the generic \"thing\" from which all other things ineherit), which means that in the schema, you can do nonsensical things, like make an Assembly a slot, or a Sensor a slot,  we should constrain ourselves more than the spec technically specifies here.  The fact that this is possible just some history of how they baked in the LocationType/ServiceLabel stuff and tried to be DRY.  Arguably that was a mistake in the case of LocationType.\n\n> \n> ```\n>                 \"Connector\": \"This value shall indicate the part is located in a connector or port.\",\n>                 \"Slot\": \"This value shall indicate the part is located in a slot.\",\n> ```\n> \n> An HDMI or USB port would be a \"Connector\".  A PCIe Slot is likely a Slot because it has Slot in the [widely-accepted] name.  What about an M.2 connector?  That is typically called a connector but looks more like a slot to me.  What about a mini-PCIe slot?  That is almost identical to an M.2 connector physically but again called a slot.  What about a riser card that is connected via something that looks a lot like a PCIe slot/connector but with different pin outs?\n\nHere's where the things get complicated.... There's no such thing as a \"Connector\" resource in the schema, despite what LocationType implies.  As of last week, we got \"Cable\" added to the schema, which somewhat implies a connector, and there's \"Port\" this i think would be the best mapping of what we call a connector.\n\n> \n> Anyhow, the point is that Willy was trying to fill in \"Slot\".  PCIe Slots are one type of it.  Either we need a special interface to identify \"this is a type of slot\" (ie. Connector.Slot) or we need Redfish to keep a list-of-inventory-interfaces-that-map-to-Slots.\n\nTo repeat the above, there is no \"Slot\" resource in the schema, there is \"PCIeSlot\" as a schema, which is what we should be using here.  There is also \"Port\" which is likely what we would map to the generic \"Connector\", but I suspect (given willys use case) that's a different patch than what he was trying to accomplish.\n\n> \n> > > My opinion is that a unique interface with nothing in it to make the Redfish implementation simpler is kind of a poor reason for an interface.\n> > \n> > I'm not even following why it makes the Redfish interface easier.\n> \n> The above is why it makes Redfish easier.  By defining \"Connector.Slot\" and \"Connector.Embedded\" we are defining unique interfaces with nothing in them that Redfish can use as a simple key to say \"this item maps to LocationType.Slot or LocationType.Embedded\".\n\nSee above, we already can map Item.PcieSlot to LocationType.Slot.  I'm not sure what we'd map LocationType.Embedded to, but it likely would be another Item.X type directly?\n\n>  If the only user of this is to so that the Redfish code doesn't need to maintain a list of {{ \"PCISlot\" -> \"Location.Slot\" }, {\"CPU\" -> \"Location.Socket\" } ...}, it exists only to make the Redfish code easier while providing no information to the rest of the dbus model; effectively just pushing yet another detail of Redfish into the Inventory providers.\n\nBut, we still have to maintain that data (I think) because dbus interfaces are rarely 1:1, and don't follow redfish, so we always have to keep that lookup table (unless we're going to define connector to map to redfish 1:1, which would be a difference)."
        },
        {
            "timestamp": 1633551940,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n> https://redfish.dmtf.org/schemas/PCIeSlots_v1.xml was the schema I was referring to.  You're looking at LocationType, within Resource, which yes, contains slot as one of its enums, but from a bmcweb perspective, we would likely just hardcode it in the PCIeSlots schema \"Ie, all PcieSlot resources are of type \"slot\", because we know that from the interface name.\n...\n> See above, we already can map Item.PcieSlot to LocationType.Slot.  I'm not sure what we'd map LocationType.Embedded to, but it likely would be another Item.X type directly?\n\nIs all this code useless then?  https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44079/20/redfish-core/include/utils/location_utils.hpp#31\n\nThe premise of these Connection dbus interfaces were to facilitate the above code.  If the above code isn't even useful then maybe we should delete the whole Connection sub-directory here and forget about this whole discussion."
        },
        {
            "timestamp": 1633559361,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n> Patch Set 1:\n> \n> > https://redfish.dmtf.org/schemas/PCIeSlots_v1.xml was the schema I was referring to.  You're looking at LocationType, within Resource, which yes, contains slot as one of its enums, but from a bmcweb perspective, we would likely just hardcode it in the PCIeSlots schema \"Ie, all PcieSlot resources are of type \"slot\", because we know that from the interface name.\n> ...\n> > See above, we already can map Item.PcieSlot to LocationType.Slot.  I'm not sure what we'd map LocationType.Embedded to, but it likely would be another Item.X type directly?\n> \n> Is all this code useless then?  https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/44079/20/redfish-core/include/utils/location_utils.hpp#31'\n\nI mean.... I hate to use the word \"useless\", I'd probably say \"could be modeled much more simply, in line with how we build the other resources, and needs to take a deeper look at the redfish spec\".  In general we don't have generalized switch statements like that for exactly this reason, \"location\" on one resource is likely to mean something different than another resource, and generalizing the code tends to lead to bugs.  For example, because of how the Redfish schema is written, you can put a \"LocationCode\" on a Protocol resource, but that's insane, and we would never do that.  To some extent, we need to enforce that in code.\n\nIn that commit, it's only used in one schema, where it's try to add \"connector\" to the Managers resource, which is somewhat nonsensical, because manager is supposed to be the software representation of the management controller, not the physical representation of it, which would go under chassis.\n\n> \n> The premise of these Connection dbus interfaces were to facilitate the above code.  If the above code isn't even useful then maybe we should delete the whole Connection sub-directory here and forget about this whole discussion.\n\n\nI wouldn't be against that, but I need to check in with Willy and understand what he was trying to accomplish with that.  I suspect it's a much simpler problem than that code would make it appear to be."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "a124f496a7c9b2faf73d9616b4d4e258543fa84e",
            "parents": [
                "329d1d8169339717e4955f736b8181fde8f0ac9c"
            ],
            "ref": "refs/changes/66/47266/1",
            "uploader": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "createdOn": 1632786145,
            "author": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Connector/Slot.interface.yaml",
                    "line": 4,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@Willy, did you intend for this to just be used for \"PCIe slots\" or was it intended to also be used for arbitrary riser card connectors?  I thought there was something at a Redfish level you were attempting to solve for.\n\n@Brad, should we move PcieSlot under Connector here?  Are there any implications of that elsewhere on the code-base?\n\nIt appears that it might affect some PLDM code and one case in Redfish:\nhttps://github.com/search?q=org%3Aopenbmc+pcieslot&type=code"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Connector/Slot.interface.yaml",
                    "line": 4,
                    "reviewer": {
                        "name": "Willy Tu",
                        "email": "wltu@google.com",
                        "username": "wltu"
                    },
                    "message": "I am using it for PCIe slot, but it could be used for any kind of slots. I am not even sure how common other kind of slots are.\n\nIt is used to support the LocationType as shown in https://redfish.dmtf.org/schemas/DSP0268_2020.4.pdf#page=22.\n\nMaybe we can just use PCIe slot to support the `Slot`?"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 13,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Connector/Slot/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "gen/xyz/openbmc_project/Inventory/Connector/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "yaml/xyz/openbmc_project/Inventory/Connector/Slot.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -4
                }
            ],
            "sizeInsertions": 0,
            "sizeDeletions": 32
        }
    ]
}