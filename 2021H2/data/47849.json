{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "id": "Iadca47aa4cf73ddb8b14ffc0719d736f088a2d40",
    "number": 47849,
    "subject": "Support finding D-Bus object path of voltage rail",
    "owner": {
        "name": "Shawn McCarney",
        "email": "shawnmm@us.ibm.com",
        "username": "smccarney"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47849",
    "commitMessage": "Support finding D-Bus object path of voltage rail\n\nAdd documentation and a D-Bus property to support the following use case:\n* An OpenBMC application needs to set the output voltage of a specific\n  voltage rail that is powering a specific inventory item.\n* For example, the application needs to set the processor core voltage\n  rail to 1.1V for CPU 2.\n* The application needs a general way to find the D-Bus object path of\n  the voltage rail so it can set the voltage using the\n  VoltageRegulatorControl interface.\n\nDefine the D-Bus object path format for the following:\n* Voltage regulators\n* Voltage rails produced by a regulator\n\nDefine the D-Bus associations that can optionally exist between voltage\nrails and the inventory items that they power.\n\nAdd a 'RailType' property to the VoltageRegulatorControl interface so\nOpenBMC applications can find a specific voltage rail by type.  Provide\na default property value to protect current implementers of this\ninterface.\n\nSigned-off-by: Shawn McCarney <shawnmm@us.ibm.com>\nChange-Id: Iadca47aa4cf73ddb8b14ffc0719d736f088a2d40\n",
    "createdOn": 1634250372,
    "lastUpdated": 1637770744,
    "open": false,
    "status": "ABANDONED",
    "comments": [
        {
            "timestamp": 1634250372,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1634250389,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1634250784,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/28314/ : SUCCESS"
        },
        {
            "timestamp": 1634251039,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Removed reviewer William A. Kennington III."
        },
        {
            "timestamp": 1634578495,
            "reviewer": {
                "name": "Brad Bishop",
                "email": "bradleyb@fuzziesquirrel.com",
                "username": "bradbishop"
            },
            "message": "Patch Set 1:\n\n(3 comments)\n\nA couple nit comments."
        },
        {
            "timestamp": 1634583350,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1634583372,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Patch Set 2:\n\n(3 comments)"
        },
        {
            "timestamp": 1634583399,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1634583799,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/28480/ : SUCCESS"
        },
        {
            "timestamp": 1634760659,
            "reviewer": {
                "name": "Derek Howard",
                "email": "derekh@us.ibm.com",
                "username": "derekhoward55"
            },
            "message": "Patch Set 2: Code-Review+1\n\n(1 comment)\n\nNice writeup, I'm quite sure how \"VoltageRegulatorMode\" will be used but the rest of it makes sense and seems appropriate."
        },
        {
            "timestamp": 1634761864,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 2: Code-Review+1"
        },
        {
            "timestamp": 1634763536,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 2: -Code-Review\n\n(1 comment)"
        },
        {
            "timestamp": 1634828843,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1634828868,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1634829349,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1634829357,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/28720/ : SUCCESS"
        },
        {
            "timestamp": 1634835584,
            "reviewer": {
                "name": "Jason Ling",
                "email": "jasonling@google.com",
                "username": "jclaz"
            },
            "message": "Patch Set 3: Code-Review+1\n\nlgtm, thanks for the documentation."
        },
        {
            "timestamp": 1634850908,
            "reviewer": {
                "name": "Derek Howard",
                "email": "derekh@us.ibm.com",
                "username": "derekhoward55"
            },
            "message": "Patch Set 3: Code-Review+1"
        },
        {
            "timestamp": 1634936333,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1635265679,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Patch Set 3:\n\n(2 comments)"
        },
        {
            "timestamp": 1635806974,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1635806990,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1635807028,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Patch Set 4:\n\nChange the RailType field from an enumeration to a string based on review feedback."
        },
        {
            "timestamp": 1635807395,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 4: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/29467/ : SUCCESS"
        },
        {
            "timestamp": 1635808759,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1635831763,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1635977630,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1636045296,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(2 comments)\n\nOverall, I think this is reasonable.  Still some discussion on how we name / identify programmatically the rails themselves."
        },
        {
            "timestamp": 1637770728,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Patch Set 4:\n\nThank you for the detailed review and feedback.  Sorry I did not respond to comments in a more timely manner.\n\nThe reason for the delay is that there began to be discussion on whether this enhancement was still required by my company.  That decision has been made, and the use case I needed to implement no longer exists (for now).\n\nI still think this would be a good enhancement, but I can't spend any more time on it right now.  I am abandoning the commit, but if someone else wants to push it to the finish line feel free.\n\nThanks,\nShawn"
        },
        {
            "timestamp": 1637770744,
            "reviewer": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "message": "Abandoned\n\nUse case no longer exists at my company."
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "16a23676132cdaf906f20c28d539fb5362dea0e5",
            "parents": [
                "77369cbb575c2867355c482fbc582df266daf2bf"
            ],
            "ref": "refs/changes/49/47849/1",
            "uploader": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "createdOn": 1634250372,
            "author": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 32,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "Do you want to use must here?  Should implies that it is preferred yet optional, which means OpenBMC client code _must_ support regulator objects not appearing in the regulators subtree."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 32,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 45,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "again - must?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 45,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Done"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Brad Bishop",
                        "email": "bradleyb@fuzziesquirrel.com",
                        "username": "bradbishop"
                    },
                    "message": "again - must?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 68,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "type": "ADDED",
                    "insertions": 99,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 81,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 180,
            "sizeDeletions": 2
        },
        {
            "number": 2,
            "revision": "691d181b425660505a7f184410bd3635d7cc3fc5",
            "parents": [
                "77369cbb575c2867355c482fbc582df266daf2bf"
            ],
            "ref": "refs/changes/49/47849/2",
            "uploader": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "createdOn": 1634583350,
            "author": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Jason Ling",
                        "email": "jasonling@google.com",
                        "username": "jclaz"
                    },
                    "message": "can you elaborate?\n\"..if it will configure the regulator itself\"\n\nWhat is \"it\" in this context? Is this essentially saying that the regulator will configure itself to output the appropriate voltages?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 41,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Good feedback, the way I worded that was a little confusing.\n\nI've updated it to be more specific and hopefully clearer.\n\nI didn't create either of these interfaces, and I haven't used the VoltageRegulatorMode interface myself.  However, I was trying to create a document that covered both and explained where and when to use them.\n\nSince VoltageRegulatorMode specifies an implementation-specific 'mode' for the regulator, it is not obvious whether it should be implemented on the regulator object path or the rail object path.  It depends on what setting the mode actually does in a specific implementation.\n\nSo I took the approach that if you implement the VoltageRegulatorMode interface on a regulator object path, it is setting a mode that applies to the entire regulator and all the rails that it produces.  Perhaps it increases the maximum allowed voltage or current on all rails, or it updates settings that are not rail-specific.\n\nIf you implement the the VoltageRegulatorMode interface on a rail object path, it is setting a mode that applies only to that rail.  Perhaps it increases the voltage level or the max allowed current for just that rail.\n\nIf I'm misunderstanding the interface and how it should be used, I'm happy to update the wording to be more accurate."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Derek Howard",
                        "email": "derekh@us.ibm.com",
                        "username": "derekhoward55"
                    },
                    "message": "nit \"Modify the 'Voltage' property of the...\""
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 98,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Done"
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "type": "ADDED",
                    "insertions": 99,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 81,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 180,
            "sizeDeletions": 2
        },
        {
            "number": 3,
            "revision": "f1f0b0b36d38fefd58a2c5e25f62853dae358fc1",
            "parents": [
                "77369cbb575c2867355c482fbc582df266daf2bf"
            ],
            "ref": "refs/changes/49/47849/3",
            "uploader": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "createdOn": 1634828843,
            "author": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Who is the intended user of this \"VoltageRailType\" broken out like this?  Some of these are still fairly hardware specific (as an example the Core vs CoreAnalog seems tied to a particular design) and I worry we're going to be adding more and more of these until they effectively become strings.\n\nIs there any programmatic cases where I need to \"find me the regulator that powers the ProcessorIO rail\"?  Or are these delineations mostly for humans?\n\nI wonder if it would be useful to have instead:\n- A property for the Voltage (which we already have).\n- An enumeration for 'State' { Standby, Runtime } (maybe Runtime isn't a great name).\n- The name being useful for humans purposes of identifying which goes where within a single device."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 39,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Sorry for the delay in responding.  I was out yesterday.\n\n> Who is the intended user of this \"VoltageRailType\" broken out like this?  Some of these are still fairly hardware specific (as an example the Core vs CoreAnalog seems tied to a particular design) and I worry we're going to be adding more and more of these until they effectively become strings.\n> \n> Is there any programmatic cases where I need to \"find me the regulator that powers the ProcessorIO rail\"?  Or are these delineations mostly for humans?\n> \n> I wonder if it would be useful to have instead:\n> - A property for the Voltage (which we already have).\n> - An enumeration for 'State' { Standby, Runtime } (maybe Runtime isn't a great name).\n> - The name being useful for humans purposes of identifying which goes where within a single device.\n\nThe intended user of this property is another BMC application, not a human.\n\nFor my current use case, the host (hostboot firmware) will look at the current system configuration and determine a new voltage value for the processor IO rail (VIO).  It will send that voltage down to PLDM, and PLDM will request the voltage change using this interface.  My application will see that request and apply the voltage change.\n\nAssociations can be used to point to the rails that power a specific processor.  But since multiple rail types power the processor in my case, PLDM needs a way to select the correct rail.  The host code knows it wants to change VIO, so PLDM needs to find the matching rail.\n\nI can certainly change this to a string.  I thought that an application like PLDM specifying an enumeration value when calling this D-Bus method would be better since it would result in a compile-time failure vs. a run-time failure if they specify an invalid rail type.\n\nHowever, you are probably correct that I have a few POWER-specific values in this enumeration.  I tried to make the names generic so they would not be platform-specific, but some might need to be tweaked.\n\nIf you feel strongly that a string is better, I'm fine with that.  It will be less work overall for my regulators application.  Whatever is the best design.\n\nI don't currently have a use case for a 'State' field, but maybe someone else does and will want to add it?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 82,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "\"Nest\" is Power(processor) specific, isn't it?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 82,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Sorry I'm not sure.  If so, I can rename to something more generic.  Or if you feel strongly about changing RailType to a string, then the concern goes away."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 32,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "type": "ADDED",
                    "insertions": 100,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 81,
                    "deletions": -2
                }
            ],
            "sizeInsertions": 181,
            "sizeDeletions": 2
        },
        {
            "number": 4,
            "revision": "737b66830fdd17091d2a51ef0a72e8f6ed138f05",
            "parents": [
                "4a3bfcaf4a5ac066cc6b3a63a9fae7143f8d7b7d"
            ],
            "ref": "refs/changes/49/47849/4",
            "uploader": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "createdOn": 1635806974,
            "author": {
                "name": "Shawn McCarney",
                "email": "shawnmm@us.ibm.com",
                "username": "smccarney"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "line": 52,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "There is a problem/solution in dbus with being able to encode unsupported characters into paths.  We have some code in sdbusplus to facilitate this.  When you start a name with a number there can be some collision with this code that encode/decodes the path, so you might want to either:\n\n1. Not start names with a number.\n2. Use the path encoding we have to allow arbitrary strings.  This would allow the path segment (from a code perspective) to be literally '3.3 vcs' but it would be encoded at a dbus level to something like '_33_2e3_vcs'*.\n\nYou can see `sd_bus_path_encode` and in sdbusplus the `string_path_wrapper` class.  (We use a slightly different encoding right now because there are too many collisions currently but we want to transition to sd_bus_path_encode directly).\n\n(*): The point about collisions in our current implementation is what causes the first character to be encoded.  In the future this should become encoded as '3_2e3_vcs' -> '3.3 vcs'."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "This doesn't seem like it's enough, is it?  Presumably on most servers you'd need to know this is \"VCC for socket 1\" or maybe \"VCC for socket 1, numa node 1\"\n\nAlso, put on a property like this, it's really hard to ask the mapper to help you out, and in code you'd have to pull every sensor to find the one you're looking for.  Maybe if this were put in the path, it might be more useful?\n\n/xyz/openbmc_project/regulators/<foo vr>\n\nAlso, do we need to make a statement about uniqueness?  As-written, I could have two \"vcc\" regulators.  In the dbus-path model, it's implied that they're required to be unique."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "Shawn McCarney",
                        "email": "shawnmm@us.ibm.com",
                        "username": "smccarney"
                    },
                    "message": "Hi Ed,\n\nIn the README file in this commit, I tried to cover I think what you are asking about.  I might be misunderstanding though.\n\nMy proposal in the README is for regulators to have a D-Bus path of the form\n  /xyz/openbmc_project/regulators/<regulator>\nand for regulator rails to have a D-Bus path of the form\n  /xyz/openbmc_project/regulators/<regulator>/<rail>\n\nFor example, if you have multiple CPU regulators, the regulator for CPU 0 might have the path:\n    /xyz/openbmc_project/regulators/cpu0_vrm\n\nAnd if that regulator produces both a Vcc and a Vio rail for the CPU, those rails might have the path:\n    /xyz/openbmc_project/regulators/cpu0_vrm/vcc0\n    /xyz/openbmc_project/regulators/cpu0_vrm/vio0\n\nIn the README I propose having associations between an inventory item and the regulator rails that power it.  So if you wanted to find the VIO rail for CPU0, you would do the following:\n* Find the inventory item for CPU0\n* Find the rails that power it from the 'powered_by' association\n* If there are multiple rails in the association, determine which one is the VIO rail via the RailType property.\n\nIn this example, there might be CPU1, CPU2, and CPU3 in the system as well.  So cpu1_vrm/vcc1 and cpu2_vrm/vcc2 would also have the 'vcc' RailType.  The RailType is not intended to be unique.  It is a category of rails that serve a similar purpose, such as powering the IO logic in a CPU.\n\nIn my use case, the host code knows it wants to set the 'vio' rail for CPU0.  It sends a request down through PLDM.  The code there needs a way to find the vio type rail for CPU0.\n\nIt would be tough to encode the rail type in the D-Bus path unless we give regulators and rails separate namespaces.  On the systems I work on, many regulators produce two rails of different types.  For example, reg1 might produce vcc0 and vio0.  So the regulator node of the path would not fit solely in either rail type.\n\nWe had discussed having rails and regulators in separate namespaces in Discord.  For example:\n  /xyz/openbmc_project/regulators/<regulator>\n  /xyz/openbmc_project/rails/<rail>\n\nBut then we would probably want associations between them so you know which regulator a rail is produced by for error reporting purposes.  Patrick preferred the single, hierarchical namespace to avoid the extra association lookup.\n\nLet me know if I'm off in the weeds.  I'm just trying to find a compromise avoids the concerns people have mentioned."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 34,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Hi Ed,\n> \n> In the README file in this commit, I tried to cover I think what you are asking about.  I might be misunderstanding though.\n\nAh, so you did.  Mea culpa, I should've read the whole patch.\n\n> \n> My proposal in the README is for regulators to have a D-Bus path of the form\n>   /xyz/openbmc_project/regulators/<regulator>\n> and for regulator rails to have a D-Bus path of the form\n>   /xyz/openbmc_project/regulators/<regulator>/<rail>\n> \n> For example, if you have multiple CPU regulators, the regulator for CPU 0 might have the path:\n>     /xyz/openbmc_project/regulators/cpu0_vrm\n> \n> And if that regulator produces both a Vcc and a Vio rail for the CPU, those rails might have the path:\n>     /xyz/openbmc_project/regulators/cpu0_vrm/vcc0\n>     /xyz/openbmc_project/regulators/cpu0_vrm/vio0\n> \n> In the README I propose having associations between an inventory item and the regulator rails that power it.  So if you wanted to find the VIO rail for CPU0, you would do the following:\n> * Find the inventory item for CPU0\n> * Find the rails that power it from the 'powered_by' association\n> * If there are multiple rails in the association, determine which one is the VIO rail via the RailType property.\n> \n> In this example, there might be CPU1, CPU2, and CPU3 in the system as well.  So cpu1_vrm/vcc1 and cpu2_vrm/vcc2 would also have the 'vcc' RailType.  The RailType is not intended to be unique.  It is a category of rails that serve a similar purpose, such as powering the IO logic in a CPU.\n> \n> In my use case, the host code knows it wants to set the 'vio' rail for CPU0.  It sends a request down through PLDM.  The code there needs a way to find the vio type rail for CPU0.\n> \n> It would be tough to encode the rail type in the D-Bus path unless we give regulators and rails separate namespaces.  On the systems I work on, many regulators produce two rails of different types.  For example, reg1 might produce vcc0 and vio0.  So the regulator node of the path would not fit solely in either rail type.\n> \n> We had discussed having rails and regulators in separate namespaces in Discord.  For example:\n>   /xyz/openbmc_project/regulators/<regulator>\n>   /xyz/openbmc_project/rails/<rail>\n> \n> But then we would probably want associations between them so you know which regulator a rail is produced by for error reporting purposes.  Patrick preferred the single, hierarchical namespace to avoid the extra association lookup.\n> \n> Let me know if I'm off in the weeds.  I'm just trying to find a compromise avoids the concerns people have mentioned.\n\nI think you're pretty close after having read the README (which again, I should've done earlier, sorry about that.)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "line": 36,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "How do we plan to maintain the connection between the two then?  The fact that they are \"system-specific\" arbitrary strings makes matching up fairly fragile.  An alternative here is to have them be strings, but require the string values to be fully-qualified enumeration names like 'xyz.openbmc_project.Control.VoltageRegulatorControl.VCS' or\n'com.ibm.Control.VoltageRegulatorControl.Power10.Fabric'.  We have done similar for \"Dump Parameters\" here:\n\n> yaml/xyz/openbmc_project/Dump/Create.interface.yaml:            'domain.Dump.Create.CreateParameters.ParamName'.\n\nThere is similarly effort going on to enhance code-update to have similar mechanisms to identify the relationship between a piece of inventory and a firmware image using these FQENs."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 31,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/README.regulators.md",
                    "type": "ADDED",
                    "insertions": 100,
                    "deletions": 0
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -3
                }
            ],
            "sizeInsertions": 112,
            "sizeDeletions": 3
        }
    ]
}