{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "topic": "ManagerDiagnosticData",
    "id": "Ib88059aaae57c714d53a5eefdb66a047768870bf",
    "number": 45683,
    "subject": "Add I2CStats Interface",
    "owner": {
        "name": "Sui Chen",
        "email": "suichen@google.com",
        "username": "quadpixels"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/45683",
    "commitMessage": "Add I2CStats Interface\n\nTwo commonly found I2C statistics are added:\n- Bus Error, which is seen in a few I2C controllers and\nmicrocontrollers, including PCA9547, PCA9665 and STM32F071x8/xB.\n- NACK count, which has a definition in the I2C standard, and can be\nfound in a few I2C controllers and microcontrollers.\n\nSigned-off-by: Sui Chen <suichen@google.com>\nChange-Id: Ib88059aaae57c714d53a5eefdb66a047768870bf\n",
    "createdOn": 1628237718,
    "lastUpdated": 1639179578,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1628237718,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1628237747,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628237833,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1628237847,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1628237851,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/23963/ : ABORTED"
        },
        {
            "timestamp": 1628237983,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/23964/ : FAILURE"
        },
        {
            "timestamp": 1628250687,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2: Code-Review-2\n\nHi Sui, debugfs is explicitly not a stable ABI and we shouldn't be justifying PDI interfaces with it. These attributes look like they're a direct representation of the attributes currently exported by nuvoton's driver, so it's a no from me."
        },
        {
            "timestamp": 1628278539,
            "reviewer": {
                "name": "Benjamin Fair",
                "email": "benjaminfair@google.com",
                "username": "BenjaminFair"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2: Code-Review-2\n> \n> Hi Sui, debugfs is explicitly not a stable ABI and we shouldn't be justifying PDI interfaces with it. These attributes look like they're a direct representation of the attributes currently exported by nuvoton's driver, so it's a no from me.\n\nCan we define some sort of API for I2C statistics that's not necessarily directly tied to debugfs?\n\nThings like error count and speed should be pretty standard for instance, although they don't really need to be tied to I2C specifically"
        },
        {
            "timestamp": 1628287998,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 2:\n\n> Patch Set 2:\n> \n> > Patch Set 2: Code-Review-2\n> > \n> > Hi Sui, debugfs is explicitly not a stable ABI and we shouldn't be justifying PDI interfaces with it. These attributes look like they're a direct representation of the attributes currently exported by nuvoton's driver, so it's a no from me.\n> \n> Can we define some sort of API for I2C statistics that's not necessarily directly tied to debugfs?\n> \n> Things like error count and speed should be pretty standard for instance, although they don't really need to be tied to I2C specifically\n\nIf we make the interface more generic and then justify it with access to data sources that have a stable ABI then I'm happy for it to be submitted. I will say no to upstream userspace contributions implementing the interface with data sources that are not ABI stable though."
        },
        {
            "timestamp": 1629243796,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1629243811,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1629243834,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Patch Set 3:\n\nUpdate: after some more survey and discussion we have found:\n\n- BER (should be Bus Error, not Bit Error Rate) appears to be pretty common; it can be found in a number of I2C controller chips/microcontrollers (example: PCA9547, PCA9665, STM32F071x8/xB)\n- NACK has a definition in the I2C and can also be found in a number of I2C controller chips\n- Bus recovery is \"actually pretty common as well for multi-master setups, but it's not common to need that data\"\n\nConsidering the above, only berCnt, nackCnt and i2cSpeed are kept. Bus recovery stats are removed. Naming convention has been fixed to match the remaining of the Phosphor DBus Interfaces.\n\nOriginally we thought having I2C Phosphor DBus interfaces would be needed for the purpose of exporting I2C counters through RedFish; because the route to export I2C statistics recommended by DMTF is to use the LogService, the BMC-side program exporting that data would be phosphor-debug-collector. The I2C statistic collection from the debug collector does not need to involve publishing I2C stats onto DBus, so it seems this change is not in urgent need right now.\n\nReferences:\nPCA9547 datasheet https://www.nxp.com/docs/en/data-sheet/PCA9547.pdf\nPCA9665 datasheet https://www.nxp.com/docs/en/data-sheet/PCA9665_PCA9665A.pdf\nSTM32F071x8/xB datasheet https://www.st.com/resource/en/errata_sheet/dm00103316-stm32f071x8xb-device-errata-stmicroelectronics.pdf"
        },
        {
            "timestamp": 1629243921,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://jenkins.openbmc.org/job/ci-repository/24510/ : FAILURE"
        },
        {
            "timestamp": 1629336365,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> Update: after some more survey and discussion we have found:\n> \n> - BER (should be Bus Error, not Bit Error Rate) appears to be pretty common; it can be found in a number of I2C controller chips/microcontrollers (example: PCA9547, PCA9665, STM32F071x8/xB)\n> - NACK has a definition in the I2C and can also be found in a number of I2C controller chips\n> - Bus recovery is \"actually pretty common as well for multi-master setups, but it's not common to need that data\"\n> \n> Considering the above, only berCnt, nackCnt and i2cSpeed are kept. Bus recovery stats are removed. Naming convention has been fixed to match the remaining of the Phosphor DBus Interfaces.\n\nOkay, but how do you plan to acquire these values from the hardware? What ABI-stable kernel interface provides this data?"
        },
        {
            "timestamp": 1632427227,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > Update: after some more survey and discussion we have found:\n> > \n> > - BER (should be Bus Error, not Bit Error Rate) appears to be pretty common; it can be found in a number of I2C controller chips/microcontrollers (example: PCA9547, PCA9665, STM32F071x8/xB)\n> > - NACK has a definition in the I2C and can also be found in a number of I2C controller chips\n> > - Bus recovery is \"actually pretty common as well for multi-master setups, but it's not common to need that data\"\n> > \n> > Considering the above, only berCnt, nackCnt and i2cSpeed are kept. Bus recovery stats are removed. Naming convention has been fixed to match the remaining of the Phosphor DBus Interfaces.\n> \n> Okay, but how do you plan to acquire these values from the hardware? What ABI-stable kernel interface provides this data?\n\nIn the context of a phosphor-dbus-interfaces patch, does this matter?  This seems like something that should be brought up when the implementation comes online.  I agreed with your first comment, we shouldn't build our dbus interfaces to exactly match some kernel API, but as written in the latest patch, I'm not sure I see the issue with it, it seems well formatted.\n\n\nWith that said, what's the real concern here in using debugfs in a hypothetical interface?  That the underlying kernel changes it and we break?  That seems unlikely in this context, and not a huge maintenance issue unless the feature was removed entirely, in which case, this whole effort could be abandoned;  Anything else just seems like it would be a name change.  If the concern is that this can't be scaled across nuvoton and the various aspeed chips, that I can respect, but isn't that something we can solve in userspace for the set of hardware we support that also has these statistics available?\n\nOut of curiosity, is this debugfs requirement something we've enforced before?  I'm curious about the context of any other patches we've rejected on those grounds.  Getting a stable sysfs API into the kernel is a high bar for implementations like this, especially ones with severely limited scope, and largely only used for debug telemetry.  I can certainly see the appeal, I'm just curious about the concrete reasoning."
        },
        {
            "timestamp": 1632441086,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3: Code-Review-1\n\n> Patch Set 3:\n> \n> > Patch Set 3:\n> > \n> > > Patch Set 3:\n> > > \n> > > Update: after some more survey and discussion we have found:\n> > > \n> > > - BER (should be Bus Error, not Bit Error Rate) appears to be pretty common; it can be found in a number of I2C controller chips/microcontrollers (example: PCA9547, PCA9665, STM32F071x8/xB)\n> > > - NACK has a definition in the I2C and can also be found in a number of I2C controller chips\n> > > - Bus recovery is \"actually pretty common as well for multi-master setups, but it's not common to need that data\"\n> > > \n> > > Considering the above, only berCnt, nackCnt and i2cSpeed are kept. Bus recovery stats are removed. Naming convention has been fixed to match the remaining of the Phosphor DBus Interfaces.\n> > \n> > Okay, but how do you plan to acquire these values from the hardware? What ABI-stable kernel interface provides this data?\n> \n> In the context of a phosphor-dbus-interfaces patch, does this matter?\n\nYes. Why should we merge an interface that can't (yet) be implemented? I'd like to see a discussion in the upstream kernel community or a PoC implementation before accepting the interface into PDI.\n\n> With that said, what's the real concern here in using debugfs in a hypothetical interface? \n\nSee the arguments here for why debugfs must not be mounted to achieve Android compliance: https://source.android.com/setup/start/android-11-release#debugfs\n\nQuoting from the above:\n\n> * Unstable and undocumented API. Android depends on well-defined and stable Linux kernel interfaces and HALs to function correctly. VTS tests enforce the presence and correctness of these interfaces. DebugFS can't be enforced because its ABI is neither stable nor documented.\n>\n> * Poor code quality. Because they are for debugging, nodes added to debugfs aren't reviewed and tested as rigorously as those in other file systems. When bugs are discovered in debugfs, they are treated as less of a priority, which contributes to security vulnerabilities that originate from debugfs.\n>\n> * Security vulnerabilities. DebugFS was created with the intention of helping kernel developers debug the system and not with a focus on security. Currently, there is no efficient method to verify that all DebugFS nodes exposed on a production device are secure. Although SEpolicy tightening has reduced the severity of security vulnerabilities originating from debugfs, disallowing mounting debugfs is the only way to completely eliminate the attack surface.\n\nTo reiterate that last point, mounting debugfs exposes an attack surface of the entirety of debugfs, just for the sake of extracting several informational counters from the hardware through an interface with no ABI stability guarantees. In my opinion this is not a healthy trade-off.\n\n> \n> Out of curiosity, is this debugfs requirement something we've enforced before? \n\nWe've had userspace patches slip through the cracks in this regard. Some systems need debugfs mounted. Tradition isn't a justification though, and we should not be adding more systems that require it. debugfs is a temporal resource for kernel developers to debug the kernel, nothing more.\n\nI'm reducing my opposition from -2 to -1 given that the naming complaint has been addressed, but without an appropriate kernel interface for extracting these counter values I don't see a way forward for implementing the interface without further discussion in the upstream kernel community."
        },
        {
            "timestamp": 1632443414,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n> Patch Set 3: Code-Review-1\n> \n> > Patch Set 3:\n> > \n> > > Patch Set 3:\n> > > \n> > > > Patch Set 3:\n> > > > \n> > > > Update: after some more survey and discussion we have found:\n> > > > \n> > > > - BER (should be Bus Error, not Bit Error Rate) appears to be pretty common; it can be found in a number of I2C controller chips/microcontrollers (example: PCA9547, PCA9665, STM32F071x8/xB)\n> > > > - NACK has a definition in the I2C and can also be found in a number of I2C controller chips\n> > > > - Bus recovery is \"actually pretty common as well for multi-master setups, but it's not common to need that data\"\n> > > > \n> > > > Considering the above, only berCnt, nackCnt and i2cSpeed are kept. Bus recovery stats are removed. Naming convention has been fixed to match the remaining of the Phosphor DBus Interfaces.\n> > > \n> > > Okay, but how do you plan to acquire these values from the hardware? What ABI-stable kernel interface provides this data?\n> > \n> > In the context of a phosphor-dbus-interfaces patch, does this matter?\n> \n> Yes. Why should we merge an interface that can't (yet) be implemented? \n\nThis assumes an implementation, which admittedly, showed up in the first patchset;  There's nothing about the interface that says we're getting this out of debugfs, and arguably this could be coming from sideband interfaces out of the processor (PECI, MCTP, or SMPro) which wouldn't require debugfs.  Admittedly, Sui is wanting to get the BMC data first, but getting this information for sideband processor interfaces is also on the list, which wouldn't require debugfs and could use this same API.\n\n> I'd like to see a discussion in the upstream kernel community or a PoC implementation before accepting the interface into PDI.\n\nThat does seem reasonable, just looking for input on whether or not this interface seems OK outside of that discussion, assuming some sysfs interface were made available, but maybe we're getting ahead of ourselves a little.  I think you kind of gave that below (no longer -2 WOOOO!)\n\n> \n> > With that said, what's the real concern here in using debugfs in a hypothetical interface? \n> \n> See the arguments here for why debugfs must not be mounted to achieve Android compliance: https://source.android.com/setup/start/android-11-release#debugfs\n> \n> Quoting from the above:\n> \n> > * Unstable and undocumented API. Android depends on well-defined and stable Linux kernel interfaces and HALs to function correctly. VTS tests enforce the presence and correctness of these interfaces. DebugFS can't be enforced because its ABI is neither stable nor documented.\n> >\n> > * Poor code quality. Because they are for debugging, nodes added to debugfs aren't reviewed and tested as rigorously as those in other file systems. When bugs are discovered in debugfs, they are treated as less of a priority, which contributes to security vulnerabilities that originate from debugfs.\n> >\n> > * Security vulnerabilities. DebugFS was created with the intention of helping kernel developers debug the system and not with a focus on security. Currently, there is no efficient method to verify that all DebugFS nodes exposed on a production device are secure. Although SEpolicy tightening has reduced the severity of security vulnerabilities originating from debugfs, disallowing mounting debugfs is the only way to completely eliminate the attack surface.\n> \n> To reiterate that last point, mounting debugfs exposes an attack surface of the entirety of debugfs, just for the sake of extracting several informational counters from the hardware through an interface with no ABI stability guarantees. In my opinion this is not a healthy trade-off.\n\nNone of this is to say \"We shouldn't try to get this made as a stable ABI\".  We'll go to lkml next and see what happens.  But if we can't get consensus there, I guess I'm not nearly as against debugfs interfaces, but it's also possible I don't understand them well enough to be afraid of them.\n\n> \n> > \n> > Out of curiosity, is this debugfs requirement something we've enforced before? \n> \n> We've had userspace patches slip through the cracks in this regard. Some systems need debugfs mounted. Tradition isn't a justification though, and we should not be adding more systems that require it. debugfs is a temporal resource for kernel developers to debug the kernel, nothing more.\n\nIf this is really a \"rule\" (guideline) I wonder if we should at least get it written down somewhere, or a pointer to the \"don't do this\" page in the kernel in the docs repo?\n\nAre there any plans to disable debugfs in the near future?\n\n> \n> I'm reducing my opposition from -2 to -1 given that the naming complaint has been addressed, but without an appropriate kernel interface for extracting these counter values I don't see a way forward for implementing the interface without further discussion in the upstream kernel community."
        },
        {
            "timestamp": 1632444854,
            "reviewer": {
                "name": "Andrew Jeffery",
                "email": "andrew@aj.id.au",
                "username": "amboar"
            },
            "message": "Patch Set 3:\n\n> > > In the context of a phosphor-dbus-interfaces patch, does this matter?\n> > \n> > Yes. Why should we merge an interface that can't (yet) be implemented? \n> \n> This assumes an implementation, which admittedly, showed up in the first patchset;  There's nothing about the interface that says we're getting this out of debugfs, and arguably this could be coming from sideband interfaces out of the processor (PECI, MCTP, or SMPro) which wouldn't require debugfs.  Admittedly, Sui is wanting to get the BMC data first, but getting this information for sideband processor interfaces is also on the list, which wouldn't require debugfs and could use this same API.\n\nI'm happy to reassess the -1 if someone has some working code (even just a PoC) that uses stable APIs/ABIs to implement the interface.\n\n> > > Out of curiosity, is this debugfs requirement something we've enforced before? \n> > \n> > We've had userspace patches slip through the cracks in this regard. Some systems need debugfs mounted. Tradition isn't a justification though, and we should not be adding more systems that require it. debugfs is a temporal resource for kernel developers to debug the kernel, nothing more.\n> \n> If this is really a \"rule\" (guideline) I wonder if we should at least get it written down somewhere, or a pointer to the \"don't do this\" page in the kernel in the docs repo?\n> \n> Are there any plans to disable debugfs in the near future?\n\nDisable it where sorry? I don't want to remove the kernel feature, I just don't want application code requiring it. As I said, it's a resource for kernel developers to debug the kernel. We still need to have the ability to use it to debug the kernel. If it's not already the case we should do some work to make sure it's not mounted by default, in the same way we don't expose /dev/mem by default."
        },
        {
            "timestamp": 1639179578,
            "reviewer": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "message": "Topic set to ManagerDiagnosticData"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "6f71369f8469b4df9f7a3eccc721f8f81725952a",
            "parents": [
                "33458d4432a8323616622881f314a73cf0b04d97"
            ],
            "ref": "refs/changes/83/45683/1",
            "uploader": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "createdOn": 1628237718,
            "author": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/I2C/I2CStats.interface.yaml",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 23,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "b9dd16004e4ef78f72271562899bea9fb165cc14",
            "parents": [
                "33458d4432a8323616622881f314a73cf0b04d97"
            ],
            "ref": "refs/changes/83/45683/2",
            "uploader": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "createdOn": 1628237833,
            "author": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/I2C/I2CStats/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/I2C/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/I2C/I2CStats.interface.yaml",
                    "type": "ADDED",
                    "insertions": 23,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 53,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "cf34070b3fc6e0ff7df1a4f364a014c8ae37a271",
            "parents": [
                "33458d4432a8323616622881f314a73cf0b04d97"
            ],
            "ref": "refs/changes/83/45683/3",
            "uploader": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "createdOn": 1629243796,
            "author": {
                "name": "Sui Chen",
                "email": "suichen@google.com",
                "username": "quadpixels"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/I2C/I2CStats/meson.build",
                    "type": "ADDED",
                    "insertions": 14,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/I2C/meson.build",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "xyz/openbmc_project/I2C/I2CStats.interface.yaml",
                    "type": "ADDED",
                    "insertions": 15,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 45,
            "sizeDeletions": 0
        }
    ]
}