{
    "project": "openbmc/docs",
    "branch": "master",
    "topic": "templateapp",
    "id": "Id138ccffa18e38ec43cef31907b396079536ea6e",
    "number": 41099,
    "subject": "Create template application",
    "owner": {
        "name": "Ed Tanous",
        "email": "ed@tanous.net",
        "username": "edtanous"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/41099",
    "commitMessage": "Create template application\n\nThis application should serve as a template for how to create and launch\na simple dbus server application.\n\nIt is relatively simple app that:\nRequests a name on dbus\nRegisters a simple interface at /xyz/openbmc_project/template_app with\none property and one method.\n\nIt also creates unit tests to test the various components.\n\nThe .clang-format and .clang-tidy files are pulled from the normal\ntemplate locations.  Going forward, this will be where they live.\n\nThis is not the final location for these, they will be checked into a\nnew repo.\n\nhttps://lore.kernel.org/openbmc/CACWQX80G75i+s8Vcro64uEyvcZn1Dc60y-coS6GqrvkJo59Kqg@mail.gmail.com/\n\nDO NOT MERGE\n\nTODO:\nStill needs phosphor-dbus-interfaces example.\n\nSigned-off-by: Ed Tanous <edtanous@google.com>\nChange-Id: Id138ccffa18e38ec43cef31907b396079536ea6e\n",
    "createdOn": 1614967692,
    "lastUpdated": 1625757905,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1614967692,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1614968767,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(7 comments)"
        },
        {
            "timestamp": 1614970725,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(7 comments)"
        },
        {
            "timestamp": 1614971826,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1614973240,
            "reviewer": {
                "name": "Andrew Geissler",
                "email": "geissonator@yahoo.com",
                "username": "geissonator"
            },
            "message": "Patch Set 1:\n\n(4 comments)\n\nThanks for putting this together Ed!"
        },
        {
            "timestamp": 1614973270,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(6 comments)"
        },
        {
            "timestamp": 1614973627,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1614974959,
            "reviewer": {
                "name": "Gunnar Mills",
                "email": "gmills@us.ibm.com",
                "username": "gtmills"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1614978742,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(7 comments)"
        },
        {
            "timestamp": 1615312904,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "miltonm@us.ibm.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1615321923,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1615322164,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1615383801,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1615388935,
            "reviewer": {
                "name": "Milton D. Miller II",
                "email": "miltonm@us.ibm.com",
                "username": "mdmillerii"
            },
            "message": "Patch Set 1:\n\n(1 comment)\n\nP"
        },
        {
            "timestamp": 1616010664,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 2."
        },
        {
            "timestamp": 1616011803,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\nThe latest patch set I believe does everything discussed in the comments, except adding the PDI example, which is coming, but slowly."
        },
        {
            "timestamp": 1616015709,
            "reviewer": {
                "name": "Matt Spinler",
                "email": "spinler@us.ibm.com",
                "username": "spinler"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1616016027,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 3."
        },
        {
            "timestamp": 1616016312,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 3:\n\n(1 comment)"
        },
        {
            "timestamp": 1616016568,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Uploaded patch set 4."
        },
        {
            "timestamp": 1616017376,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Topic set to templateapp"
        },
        {
            "timestamp": 1625689598,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\nI'm having a little trouble getting back to this.  The outstanding item is writing a phosphor-dbus-interfaces version of the daemon, which I haven't really had a chance for.  Do we want to keep this in review while we wait for that, or do we want to merge this into a new repo, and treat that as a second patchset?  Happy either way, but I think as-is this example is still useful, and I've pointed a lot of people to this review since I first created it."
        },
        {
            "timestamp": 1625742315,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n> I'm having a little trouble getting back to this.  The outstanding item is writing a phosphor-dbus-interfaces version of the daemon, which I haven't really had a chance for.  \n\nI could write an example PDI application for you.  It is only a few lines of code.\n\nOne issue I see is that the 'xyz.openbmc_project.template' interface doesn't even align with anything we've defined in PDI though.  I really don't want to encourage people making their own, undefined, interfaces.  Could we pick a relatively simple interface out of PDI that includes both a method and a property?\n\n> Do we want to keep this in review while we wait for that, or do we want to merge this into a new repo, and treat that as a second patchset?  \n\nI'd prefer we fix up a few things yet, but I'm willing to help you out on it."
        },
        {
            "timestamp": 1625742727,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(9 comments)"
        },
        {
            "timestamp": 1625755763,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n> Patch Set 4:\n> \n> > I'm having a little trouble getting back to this.  The outstanding item is writing a phosphor-dbus-interfaces version of the daemon, which I haven't really had a chance for.  \n> \n> I could write an example PDI application for you.  It is only a few lines of code.\n> \n> One issue I see is that the 'xyz.openbmc_project.template' interface doesn't even align with anything we've defined in PDI though.  I really don't want to encourage people making their own, undefined, interfaces.  Could we pick a relatively simple interface out of PDI that includes both a method and a property?\n\nSeems reasonable.  Any preferences on which interface?\n\n> \n> > Do we want to keep this in review while we wait for that, or do we want to merge this into a new repo, and treat that as a second patchset?  \n> \n> I'd prefer we fix up a few things yet, but I'm willing to help you out on it.\n\nCool, works for me.  I have no strong preference either way, although getting it somewhere it can be built by default I think would help people."
        },
        {
            "timestamp": 1625756278,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(9 comments)\n\nThanks for looking at this."
        },
        {
            "timestamp": 1625756567,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n> Seems reasonable.  Any preferences on which interface?\n\nThese are the ones that seem like existing options if we don't want to create our own dummy one.\n\n```\n$ git grep -l methods: | xargs grep -l properties:\nopenbmc_project/BIOSConfig/Manager.interface.yaml\nopenbmc_project/BIOSConfig/Password.interface.yaml\nopenbmc_project/Chassis/Buttons/NMI.interface.yaml\nopenbmc_project/Chassis/Buttons/Power.interface.yaml\nopenbmc_project/Chassis/Buttons/Reset.interface.yaml\nopenbmc_project/Chassis/Control/NMISource.interface.yaml\nopenbmc_project/Chassis/Control/Power.interface.yaml\nopenbmc_project/Control/Host.interface.yaml\nopenbmc_project/Dump/Entry.interface.yaml\nopenbmc_project/Logging/Entry.interface.yaml\nopenbmc_project/Smbios/MDR_V2.interface.yaml\nopenbmc_project/State/Boot/PostCode.interface.yaml\nopenbmc_project/State/Watchdog.interface.yaml\nopenbmc_project/Telemetry/Report.interface.yaml\nopenbmc_project/Telemetry/ReportManager.interface.yaml\nopenbmc_project/User/Manager.interface.yaml\n```\n\nSo maybe a Buttons.Power would be relatively simple?"
        },
        {
            "timestamp": 1625756822,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        },
        {
            "timestamp": 1625757469,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 4:\n\n(1 comment)"
        },
        {
            "timestamp": 1625757905,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 4:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "71efce2922e72e3afce25a60cda9c96d57d683ad",
            "parents": [
                "bac8940ea96db6928748089e2b7e9d65fa659120"
            ],
            "ref": "refs/changes/99/41099/1",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1614967692,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I would prefer we refrain from doing dbus things in this example.  Can we just make it a \u201chello world\u201d.\n\n* We already have examples on how to make a dbus application in the sdbus repository.\n* I don\u2019t particularly want to encourage manually creating dbus interfaces, as shown here.  (I know we have some differences of opinion on asio, etc. and I\u2019m working on resolving some of that with co-routines support)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> I would prefer we refrain from doing dbus things in this example.  Can we just make it a \u201chello world\u201d.\n> \n> * We already have examples on how to make a dbus application in the sdbus repository.\n\nIf I moved the existing code here, would that help?  (thinking out loud for a second).\n\nI really want this to be a \"here's all the boilerplate you need to create a well behaving openbmc app\".  Part of being well behaved involves connecting to dbus, and writing unit tests for dbus methods, so I want to provide good examples of doing that, even if we have multiple ways to do it.\n\nThe existing examples are pretty complex, and are really good reference for \"here's every way you could want to do this\".  IMO, this wants something different, \"here's the boilerplate you need to do the basics\".\n\n> * I don\u2019t particularly want to encourage manually creating dbus interfaces, as shown here.  (I know we have some differences of opinion on asio, etc. and I\u2019m working on resolving some of that with co-routines support).\n\nDon't we already support asio coroutines?  I swear that support was already in the asio bindings, and you could register methods that accept a yield_context if you wanted the coroutine version.  I'm not against it if you want to move to c++20 style coroutines, but we probably need to have a path forward for those already using them, although that's a discussion for a different patchset.\n\n\n\nBack to the issue at hand, I'm not sure how to reconcile what you've asked with the goals here.  The goal is to provide the current \"state of the art\", and doesn't need to cross reference 8 different examples to do what it needs for a basic, no frills dbus interface, with unit tests.\n\nWhat if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.  In the meantime, we'd at least be pointing out that there are multiple ways to do these things, and that there are pros and cons to each.\n\nWould a path like that alleviate your concerns?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "> What if this contained two examples?\nYeah, +1 to including a PDI example as well."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> I really want this to be a \"here's all the boilerplate you need to create a well behaving openbmc app\"\n\nOk.  I didn\u2019t get that from the original email chain.  I thought this was going to be a \u201chow do I set up my repository\u201d.  I don\u2019t have a big concern with it, but there seems to be a bit of an assumption that all new repositories are dbus servers and that isn\u2019t necessarily the case.\n\n> What if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.\n\nI\u2019d be ok with that, I guess, if your intention is to create a fully formed dbus daemon."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 13,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> > I really want this to be a \"here's all the boilerplate you need to create a well behaving openbmc app\"\n> \n> Ok.  I didn\u2019t get that from the original email chain.  I thought this was going to be a \u201chow do I set up my repository\u201d.  I don\u2019t have a big concern with it, but there seems to be a bit of an assumption that all new repositories are dbus servers and that isn\u2019t necessarily the case.\n\nI think building something that's a dbus client or dbus server is the 90+% case (I haven't actually run numbers) and if you're in that last percent that don't, it's easy enough to delete that code from main when you start the repo.\n\n> \n> > What if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.\n> \n> I\u2019d be ok with that, I guess, if your intention is to create a fully formed dbus daemon.\n\nCan do."
                },
                {
                    "file": "template_app/.gitignore",
                    "line": 3,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Why \u2018windows\u2019, \u2018linux\u2019, \u2018osx\u2019?\n\nIn most of our meson-based repositories we haven\u2019t even done the \u2018meson\u2019 one.  We just do something like \u2018/build*/\u2018 and \u2018/subprojects/*/\u2018.\n\nI\u2019d propose we do \u2018/build*/\u2018 + \u2018meson\u2019 only.  The C/C++ ones aren\u2019t needed with \u2018meson\u2019 either."
                },
                {
                    "file": "template_app/.gitignore",
                    "line": 3,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Why \u2018windows\u2019, \u2018linux\u2019, \u2018osx\u2019?\n> \n> In most of our meson-based repositories we haven\u2019t even done the \u2018meson\u2019 one.  We just do something like \u2018/build*/\u2018 and \u2018/subprojects/*/\u2018.\n> \n> I\u2019d propose we do \u2018/build*/\u2018 + \u2018meson\u2019 only.  The C/C++ ones aren\u2019t needed with \u2018meson\u2019 either.\n\nSure, this is just my usual default for new projects.  With that said, I'm not super worried about it, I can move it to just build* and subprojects*."
                },
                {
                    "file": "template_app/.gitignore",
                    "line": 3,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I do like pointing people to the template generator though.  Up to you on what you want to do here.  Either a hand-build build+subprojects or build+\u2019meson\u2019-template (which gives you subprojects) would be reasonable to me."
                },
                {
                    "file": "template_app/.gitignore",
                    "line": 3,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, I gotcha.  I can get behind the second option."
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "line": 0,
                    "reviewer": {
                        "name": "Gunnar Mills",
                        "email": "gmills@us.ibm.com",
                        "username": "gtmills"
                    },
                    "message": "I'm a big fan of https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/41073/1/OWNERS and getting rid of the MAINTAINERS file"
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Yep, I am too, but for the moment, \"state of the art\" on master is MAINTAINERS files.  This patchset is about documenting what we currently do, not about what we could do.  When and if we deploy changes to delete the MAINTAINERS files, this file will be deleted at the same time.\n\nIf that patch lands ahead of this one, I will remove this file."
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "line": 17,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "discord?"
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I copied this out of one of the other repos here: https://github.com/openbmc/phosphor-pid-control/blob/master/MAINTAINERS\n\nDid we change this definition without going through and making all the sub projects consistent?\n\nI can change it in this commit, but whomever proposed changing this to discord seems to have missed some spots, and I'd hope would go through and open up some new reviews."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I don\u2019t think we should put this in the template.  It is not a general optimization we\u2019ve done."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 8,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "We do it in some places, and it reduces the binary size with seemingly no downsides.  Is there a reason we shouldn't do this everywhere?\n\nWith that said, I'm happy to move this to another patchset and have that discussion there, no need to hold this patchset up for something like that."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It is less contentious to me than dropping exceptions, but both of those (widely available compiler flags) aren\u2019t exactly supported by the standard committee.  RTTI should generally be used rarely / sparingly.  My concern is that there are places where it is the best tool to the problem and the alternative usually involves someone spinning their own reimplementation of RTTI (I had to -1 some commits recently in phosphor-virtual-sensor for exactly this reason; RTTI faked with enums)."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 8,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> It is less contentious to me than dropping exceptions, but both of those (widely available compiler flags) aren\u2019t exactly supported by the standard committee.\n\nDo we care about committee compliance?  They're supported by GCC, and it seems unlikely we're going to switch to non-gcc compatible compilers.... ever.  If certain portions of the codebase need to compile against MSVC, that's a whole other can of worms.\n\n>  RTTI should generally be used rarely / sparingly.  My concern is that there are places where it is the best tool to the problem and the alternative usually involves someone spinning their own reimplementation of RTTI (I had to -1 some commits recently in phosphor-virtual-sensor for exactly this reason; RTTI faked with enums).\n\nhmmmm.  I didn't know we had any real usages of rtti.  I would've assumed something like that had never come up, but I really want to keep the binary size wins that come along with this for the majority of applications that don't use or need rtti.\n\nMaybe we disable it here, with a comment about \"might be used in certain instances, but is disabled here to improve binary size\" just to make clear that it isn't against the coding standard, but if you don't use it, there are benefits to completely disabling it, and it should be that way unless you have a good reason not to."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 14,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I\u2019ve seen this dependency in a few meson files I\u2019ve reviewed lately and I don\u2019t know why.  Unless an application is doing direct systemd calls (and not using sdbusplus / sdevent) this should not be necessary.\n\nI guess it is because of the \u2018systemdsystemunitdir\u2019 below?"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I didn't write the meson file I stole this boilerplate out of, but your guess seems reasonable.  I'm really not sure why we made the systemd install path configurable, but maybe someone else has more context than I do."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we want to encourage splitting applications up into a shared library like this?  I\u2019m not sure why we should, unless you\u2019re thinking it is easier for testing purposes."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 41,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Do we want to encourage splitting applications up into a shared library like this?\n>  I\u2019m not sure why we should, unless you\u2019re thinking it is easier for testing purposes.\n\nYou got it write, it's because the library links against both the main method and the tests.  We could add the compile units to both the application and the unit tests, but that seems like it would be worse."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 51,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Based on the above discussion, I\u2019d recommend removing \u2018systemd\u2019 from here."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 51,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Can do."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "tab. ;)"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 57,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Some day I'll learn how vim works.   Today is apparently not that day.\n\nWill fix."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "https://github.com/williamspatrick/dotfiles/blob/master/files/20_all/.vimrc#L17\n\nI have shortcuts that switch from \u201cnormal indentation mode\u201d and \u201ckernel mode\u201d as well that switch from 4&spaces to 8&tabs (See <Leader>km)."
                },
                {
                    "file": "template_app/src/TemplateApp.cpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "This filename disagrees with https://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#files.\n\nMay as well update the conventions doc to match this if this is the official approach."
                },
                {
                    "file": "template_app/src/TemplateApp.cpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I missed this; thanks Matt.  I prefer we just follow the conventions."
                },
                {
                    "file": "template_app/src/TemplateApp.cpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Fair point.  I'm not sure what I was smoking when I did this, but you're right, it's wrong."
                },
                {
                    "file": "template_app/test/meson.build",
                    "line": 0,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "This will prevent code coverage due to https://github.com/mesonbuild/meson/issues/6747. I've tended to do the workaround and define the tests in the main directory to get the coverage reports. Putting a workaround into a best practices example isn't all that desired either. Maybe just a note on it in a comment?"
                },
                {
                    "file": "template_app/test/meson.build",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "It would be good if we could get someone that understands the problem to poke on this issue upstream again.  The single piece of discussion seemed like someone was confused on the request about lcov vs gcov or something, but that isn\u2019t the problem you\u2019re reporting.\n\nI would prefer we do not do this workaround because it makes the meson-files longer and noisier.  Ideally someone would figure out what is broken and fix it."
                },
                {
                    "file": "template_app/test/meson.build",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I was unaware that was an issue, although I did notice we as a project were inconsistent when I wrote this, and went to this folder model without realizing it had implications.  For the moment, unless someone is willing to chase down the \"real\" solution with meson, I can just put this stuff in the root meson.build, and if we get that fixed, I'm happy to write the patch to go back to the test subfolder approach.\n\nThis kind of tribal information is EXACTLY the kind of thing I was hoping to tease out of this template repo, so this is great.\n\n> I would prefer we do not do this workaround\n\nIn the scope of this discussion, which is \"what is the current way to accomplish setting up a new application.\" I think we need to have the workaround for the moment, as it's arguably required, and we want new repos to have code coverage.  I think the tradeoff for code coverage is worth the main meson.build being messier than we'd like it to be.\n\nWith that said, if and when someone pushes for the real fix in meson, we can always iterate on this stuff and go back to what's here."
                },
                {
                    "file": "template_app/test/meson.build",
                    "line": 14,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "tab."
                },
                {
                    "file": "template_app/test/meson.build",
                    "line": 14,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Will fix."
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service.in",
                    "line": 8,
                    "reviewer": {
                        "name": "Andrew Geissler",
                        "email": "geissonator@yahoo.com",
                        "username": "geissonator"
                    },
                    "message": "Not familiar with this. I thought our best practice was to hard code the path? https://github.com/openbmc/docs/blob/master/anti-patterns.md#use-of-usrbinenv-in-systemd-service-files"
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service.in",
                    "line": 8,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "This is meson substitution so that the deployed app has an absolute path, but adapts for /usr merged.\n\nThat said, there was discussion of keeping or removing the systemd package dependency in the meson build."
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service.in",
                    "line": 8,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "I copied this out of bmcweb.  I for sure would've preferred a hardcoded path, as it seems simpler, but I was going off what was already there, and I didn't understand if there were reprocussions from doing that.  I think in theory the install prefix makes us more \"multi distro friendly\" but I'm not sure that actually matters\n\nI can move this back to an absolute path and drop the systemd dependency if nobody sees any issue with it."
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service.in",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "I'm indifferent on the MESON_INSTALL_PATH aspect.  It is kind of annoying to have a full '.in' target just to switch from '/usr' to '/usr/local' (or just '/') in some cases, but it is probably more correct.\n\nIf the systemd dependency is just to get a specific install path variable, seems like we can drop that one and hard-code it.  I don't know of any distros that move that."
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service.in",
                    "line": 8,
                    "reviewer": {
                        "name": "Milton D. Miller II",
                        "email": "miltonm@us.ibm.com",
                        "username": "mdmillerii"
                    },
                    "message": "In meson the difference between .in and file copy is minimal, just a little more in the same stanza not a separate step."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 29,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-format",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 262,
                    "deletions": 0
                },
                {
                    "file": "template_app/.gitignore",
                    "type": "ADDED",
                    "insertions": 175,
                    "deletions": 0
                },
                {
                    "file": "template_app/LICENSE",
                    "type": "ADDED",
                    "insertions": 201,
                    "deletions": 0
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "template_app/OWNERS",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "template_app/include/TemplateApp.hpp",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson.build",
                    "type": "ADDED",
                    "insertions": 65,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/TemplateApp.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/TemplateAppMain.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/test/TemplateAppTest.cpp",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "template_app/test/meson.build",
                    "type": "ADDED",
                    "insertions": 18,
                    "deletions": 0
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service.in",
                    "type": "ADDED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 968,
            "sizeDeletions": 0
        },
        {
            "number": 2,
            "revision": "b92a000c8bf00dfe52d9a18be6590c993af02f2e",
            "parents": [
                "f0ca2e418c0b4669d3a759775f654343f0b9e504"
            ],
            "ref": "refs/changes/99/41099/2",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1616010664,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "template_app/include/TemplateApp.hpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Matt Spinler",
                        "email": "spinler@us.ibm.com",
                        "username": "spinler"
                    },
                    "message": "Rename this file to snake case as well?\n\nSince I'm not that familiar with the practice, what's the benefit of keeping the header files separate from the source?"
                },
                {
                    "file": "template_app/include/TemplateApp.hpp",
                    "line": 0,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Fixed the casing in the latest patchset.\n\nI've never fully understood the advantages of separation, but some repos do it.  If the concensus is to combine them I can."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-format",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 262,
                    "deletions": 0
                },
                {
                    "file": "template_app/.gitignore",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "template_app/LICENSE",
                    "type": "ADDED",
                    "insertions": 201,
                    "deletions": 0
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "template_app/OWNERS",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "template_app/README.md",
                    "type": "ADDED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "template_app/include/TemplateApp.hpp",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson.build",
                    "type": "ADDED",
                    "insertions": 79,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/template_app.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/template_app_main.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/test/template_app_test.cpp",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service",
                    "type": "ADDED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 824,
            "sizeDeletions": 0
        },
        {
            "number": 3,
            "revision": "2f2d6e36b02a131fef206eb442bf6e046ef78f5a",
            "parents": [
                "f0ca2e418c0b4669d3a759775f654343f0b9e504"
            ],
            "ref": "refs/changes/99/41099/3",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1616016027,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-format",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 262,
                    "deletions": 0
                },
                {
                    "file": "template_app/.gitignore",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "template_app/LICENSE",
                    "type": "ADDED",
                    "insertions": 201,
                    "deletions": 0
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "template_app/OWNERS",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "template_app/README.md",
                    "type": "ADDED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "template_app/include/template_app.hpp",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson.build",
                    "type": "ADDED",
                    "insertions": 79,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/template_app.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/template_app_main.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/test/template_app_test.cpp",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service",
                    "type": "ADDED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 824,
            "sizeDeletions": 0
        },
        {
            "number": 4,
            "revision": "df8c9c889f8d83b9240d532a19f0a4c5f667e908",
            "parents": [
                "f0ca2e418c0b4669d3a759775f654343f0b9e504"
            ],
            "ref": "refs/changes/99/41099/4",
            "uploader": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "createdOn": 1616016568,
            "author": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "template_app/.gitignore",
                    "line": 30,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Would suggest 'build*/*'.\n\nThe CI scripts create 'build' but elsewhere in our documentation (or maybe it is meson's documentation) suggests 'builddir'.  I personally tend to use 'builddir' for my 'build-on-x86' workflow so that it doesn't get clobbered by the CI scripts."
                },
                {
                    "file": "template_app/.gitignore",
                    "line": 30,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can we just remove MAINTAINERS lists now (as the example going forward)?"
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "line": 1,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Per the last discussion, I think we can remove it once we've started removing it from the existing repos.  I don't think having a template app that does one thing, and a bunch of existing repos do another thing is a good idea as a general rule.\n\nWith that said, I don't care that much.  Hopefully someone starts deprecating the MAINTAINERS files soon."
                },
                {
                    "file": "template_app/OWNERS",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we want / need to reference 'docs/OWNERS' at all?  Currently that is different than here and now the \"standard\" for repos to mimic."
                },
                {
                    "file": "template_app/OWNERS",
                    "line": 1,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "...... I'm not following what you're saying.  are you saying we should have a link to docs/OWNERS as a pointer for people?"
                },
                {
                    "file": "template_app/OWNERS",
                    "line": 1,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Well, there is stuff missing from here that is now expected to be in OWNERS files.  OpenBMC-specific items we've defined.\n\nA pointer to the original docs/OWNERS might be good too?"
                },
                {
                    "file": "template_app/OWNERS",
                    "line": 1,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ah, that makes sense.  I can add whatever stuff is supposed to be here.\n\nACK"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 7,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Suggest c++20 now."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 7,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 17,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "We probably should create the wrap for this.  Feel free to delegate."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 17,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Ack"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 28,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Two comments:\n\n1. Can we indent per the pattern elsewhere?\n\n2. I don't see boost as a 'dependency' anywhere."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 28,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> Two comments:\n> \n> 1. Can we indent per the pattern elsewhere?\n\nSeems reasonable. ACK\n\n> \n> 2. I don't see boost as a 'dependency' anywhere.\n\nFair point, I guess I was picking it up from the base system includes that yocto gives.  Given that most of our usages are header only, would we normally declare an explicit dependency on some header existing?"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 39,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Suggest to follow format elsewhere:\n\n  configure_file(\n          input: ...\n  )"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 39,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "ACK"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 44,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is this necessary or useful?  I guess maybe it is useful for testing."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 44,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Indeed, it's useful for testing, and to explicitly separate out the \"dbus stuff\" from the business logic."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Do we want to move the test stuff to a subdirectory?  Personally I feel that is better structure."
                },
                {
                    "file": "template_app/meson.build",
                    "line": 59,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "Andrew was saying that if we do that we lose test coverage.\nhttps://gerrit.openbmc-project.xyz/c/openbmc/docs/+/41099/1/template_app/test/meson.build\n\nFor the moment it sounds like this is the workaround?"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "*sigh*.\n\nSome repos do it this way and some do it with test subdirectories.\n\nIt is unfortunate we have sloppy looking meson files like this because we can't dig in and fix upstream problems.  (not your fault)"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 59,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Lets see if we can get some motion by doing this: https://github.com/mesonbuild/meson/pull/8975"
                },
                {
                    "file": "template_app/meson.build",
                    "line": 59,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "It was just going to gcovr that needed done to fix it?\n\nI have zero context on the problem itself, and am going entirely off what Andrew mentioned in the previous comment."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 33,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-format",
                    "type": "ADDED",
                    "insertions": 115,
                    "deletions": 0
                },
                {
                    "file": "template_app/.clang-tidy",
                    "type": "ADDED",
                    "insertions": 262,
                    "deletions": 0
                },
                {
                    "file": "template_app/.gitignore",
                    "type": "ADDED",
                    "insertions": 30,
                    "deletions": 0
                },
                {
                    "file": "template_app/LICENSE",
                    "type": "ADDED",
                    "insertions": 201,
                    "deletions": 0
                },
                {
                    "file": "template_app/MAINTAINERS",
                    "type": "ADDED",
                    "insertions": 44,
                    "deletions": 0
                },
                {
                    "file": "template_app/OWNERS",
                    "type": "ADDED",
                    "insertions": 2,
                    "deletions": 0
                },
                {
                    "file": "template_app/README.md",
                    "type": "ADDED",
                    "insertions": 5,
                    "deletions": 0
                },
                {
                    "file": "template_app/include/template_app.hpp",
                    "type": "ADDED",
                    "insertions": 8,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson.build",
                    "type": "ADDED",
                    "insertions": 79,
                    "deletions": 0
                },
                {
                    "file": "template_app/meson_options.txt",
                    "type": "ADDED",
                    "insertions": 1,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/template_app.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/src/template_app_main.cpp",
                    "type": "ADDED",
                    "insertions": 21,
                    "deletions": 0
                },
                {
                    "file": "template_app/test/template_app_test.cpp",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "template_app/xyz.openbmc_project.templateapp.service",
                    "type": "ADDED",
                    "insertions": 11,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 824,
            "sizeDeletions": 0
        }
    ]
}