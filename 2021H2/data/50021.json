{
    "project": "openbmc/phosphor-dbus-interfaces",
    "branch": "master",
    "topic": "x86-power-contol-fixup",
    "id": "I42c647b7064329bc88a0ce981a8ed665c360b058",
    "number": 50021,
    "subject": "nmi: merge two NMI interfaces",
    "owner": {
        "name": "Andrei Kartashev",
        "email": "a.kartashev@yadro.com",
        "username": "alatarum"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/50021",
    "commitMessage": "nmi: merge two NMI interfaces\n\nThe intefaces `...Control.Host.NMI` and `...Chassis.Control.NMISource`\nare effectively duplicated and according to codebase study, second one\nmostly missused: it supposed to be exposed by settings daemon but\ncontain methos which prevent to use it with phosphor-settings (it is\nused in Intel's analog) and this methond doesn't actually implemented\nanywhere.\n\nMain user of the `...Chassis.Control.NMISource` is x86-power-control was\nredisined to get rid of this interface.\n\nNow `...Control.Host.NMI` interface have `LastNMISource` to allow system\nto track where NMI comes from. Also there is new method was introduced:\n`NMIWithSource` to atomically set `LastNMISource`.\n\nSigned-off-by: Andrei Kartashev <a.kartashev@yadro.com>\nChange-Id: I42c647b7064329bc88a0ce981a8ed665c360b058\n",
    "createdOn": 1640766894,
    "lastUpdated": 1641404122,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1640766894,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1640766914,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1640767334,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/32872/ : SUCCESS"
        },
        {
            "timestamp": 1641218613,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(7 comments)"
        },
        {
            "timestamp": 1641291287,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(3 comments)"
        },
        {
            "timestamp": 1641401264,
            "reviewer": {
                "name": "Patrick Williams",
                "email": "patrick@stwcx.xyz",
                "username": "williamspatrick"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        },
        {
            "timestamp": 1641404122,
            "reviewer": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "message": "Patch Set 1:\n\n(2 comments)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "16dd514d69e860f0158cb56a105fac72efbce2d4",
            "parents": [
                "4f703341d9f9b1bf873d3aa93255573e9eb44bfa"
            ],
            "ref": "refs/changes/21/50021/1",
            "uploader": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "createdOn": 1640766894,
            "author": {
                "name": "Andrei Kartashev",
                "email": "a.kartashev@yadro.com",
                "username": "alatarum"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/PATCHSET_LEVEL",
                    "line": 0,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "@AndrewG - Adding you for IBM/Power feedback on this one."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 8,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: we should probably add dash in these everywhere (for consistency and correctness)."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Is it possible for us to simply add a Source to NMI?  There is an 'None' option.  I know this might also require some modification in more daemons but it seems like the more appropriate way going forward."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "I thought about this, but I this will require me to change all other interface users which I don't even know about and can't test."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "You're going to have to find and fix these anyhow.  By adding a new function the existing implementations of Host.NMI will be missing a function and, if built using PDI, will fail to compile.\n\nhttps://github.com/search?q=org%3Aopenbmc+host.nmi&type=code\n\nIt should just be these 3.\n\n  https://github.com/openbmc/openpower-proc-control/blob/2246cca047e65613c4ad76848cfb34f78330bfcc/nmi_interface.hpp\n \n https://github.com/openbmc/bmcweb/blob/1e1e598df6d1d9530dde6e92d8f74f8143f60e50/redfish-core/lib/systems.hpp\n  https://github.com/openbmc/x86-power-control/blob/c46ebb493f0e0cc1ccc5525d5484465bba69551f/src/power_control.cpp\n\nI understand you might not be able to test the openpower-proc-control one.  We're going to have to rely on the maintainer for assistance there for any testing.  Just be clear to them about that."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 13,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "That's bad, I was sure, PDI will just create some default implementation which always throw something like \"not implemented\" exception.\n\nActually, Intel implementation had no this `NMIWithSource` method, but they had ugly way to trigger NMI with changing several properties. We can keep this approach to not change openpower specific code, but I really dislike that trick."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 41,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "None doesn't look like an acronym."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "Can we spell this out?  ChassisCommand (even though I don't really know what a chassis-command is)..."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 48,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Sure, no problem"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 54,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "nit: PCI (acronym so capitals)"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "PCH is something that only exists in Intel.\n\nIn some regards this makes me think that the values of these enumerations shouldn't all be in this interface, but some should be in 'com.intel.Control.Host.NMI'.  We've done this in a few other places where the \"enumeration\" property is just a string and the values can come from multiple interfaces.  Would that be the better thing to do on this property so we have less discussions about \"this interrupt is for this architecture\" or are we going to be able to keep a relatively small super-set?"
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "This is something I strongly disagree: the fact that PCH/ME is Intel-specific doesn't mean, it can't mentioned as one of possibly values. The interface was already moved from \"com.intel.xxx\" to \"openbmc_project\" to simplify it's usage, my intention here now is to make it more uniform, to reduce differences between Intel and Power \"worlds\" if OpenBMC project.\n\n> We've done this in a few other places where the \"enumeration\" property is just a string and the values can come from multiple interfaces.  \n\nHow could this be implemented on PDI level? How could you generate bindings for that? Do we already have support for such \"multiple enums for one parameter\"? Otherwise is looks to me as you discrediting idea of using PDI-generated binding by yourself by asking to use free from strings instead of enums."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Patrick Williams",
                        "email": "patrick@stwcx.xyz",
                        "username": "williamspatrick"
                    },
                    "message": "> This is something I strongly disagree: the fact that PCH/ME is Intel-specific doesn't mean, it can't mentioned as one of possibly values. The interface was already moved from \"com.intel.xxx\" to \"openbmc_project\" to simplify it's usage, my intention here now is to make it more uniform, to reduce differences between Intel and Power \"worlds\" if OpenBMC project.\n\nAnd this is good intention on your part.  Typically I've been refraining from large enumeration lists that contain architecture-specific values though so that other architectures don't pay the penalty of these enums.  PCH itself is likely not going to exist for much longer even on Intel.  AMD is going to have their own things.  I don't want this list to become a superset of every processor ever made.\n\n> How could this be implemented on PDI level? How could you generate bindings for that? Do we already have support for such \"multiple enums for one parameter\"? Otherwise is looks to me as you discrediting idea of using PDI-generated binding by yourself by asking to use free from strings instead of enums.\n\nI'm not asking for free-form strings.  I'm asking for strings of a specific, well-defined structure. ;)\n\nYes, sdbusplus/PDI sort of already supports this.  Not as ideally as I'd like probably but fine enough.  As we get more of these we may decide to make the syntax slightly friendlier perhaps but that will probably require adding some decoration to the YAML to help the generator out.\n\n  sdbusplus::message::convert_from_string<std::variant<enum1, enum2, enum3>>(source)\n\nThat will return a variant containing one of the 3 enum types."
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "line": 57,
                    "reviewer": {
                        "name": "Andrei Kartashev",
                        "email": "a.kartashev@yadro.com",
                        "username": "alatarum"
                    },
                    "message": "Without declaration in YAML, this looks like undocumented hack. I would prefer to not use it in this form.\n\nI still can't get your point: what is wrong with having all the variants in one YAML file? Do you care about generated code size? Then, we probably can introduce something like \"platfrom\" flag for conditional code-generation, like:\n        - name: PCH\n          platform: x86-intel\n          description: >\n            Via southbridge NMI."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 24,
                    "deletions": 0
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/NMISource/meson.build",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "gen/xyz/openbmc_project/Chassis/Control/meson.build",
                    "type": "MODIFIED",
                    "insertions": 0,
                    "deletions": -14
                },
                {
                    "file": "yaml/xyz/openbmc_project/Chassis/Control/NMISource.interface.yaml",
                    "type": "DELETED",
                    "insertions": 0,
                    "deletions": -46
                },
                {
                    "file": "yaml/xyz/openbmc_project/Control/Host/NMI.interface.yaml",
                    "type": "MODIFIED",
                    "insertions": 52,
                    "deletions": 0
                }
            ],
            "sizeInsertions": 52,
            "sizeDeletions": 74
        }
    ]
}