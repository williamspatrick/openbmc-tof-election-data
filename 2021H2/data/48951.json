{
    "project": "openbmc/x86-power-control",
    "branch": "master",
    "id": "I3a21c2e5214dfcf05cdae8efc2ebbb21c4b4e080",
    "number": 48951,
    "subject": "Add BmcReady signal",
    "owner": {
        "name": "Konstantin Aladyshev",
        "email": "aladyshev22@gmail.com",
        "username": "Kostr"
    },
    "url": "https://gerrit.openbmc-project.xyz/c/openbmc/x86-power-control/+/48951",
    "commitMessage": "Add BmcReady signal\n\nBmcReady signal is a special signal that can be found on AMD boards.\nIt is a level GPIO, and if it is not activated onboard CPLD wouldn't\nperform any power operations.\nTherefore if this GPIO is present in the JSON configuration activate it\nin the main function.\n\nTested on the AMD EthanolX CRB. With this change it is possible to get\nrid of custom AMD patches and use just 'power-config-host0.json' file.\n\nSigned-off-by: Konstantin Aladyshev <aladyshev22@gmail.com>\nChange-Id: I3a21c2e5214dfcf05cdae8efc2ebbb21c4b4e080\n",
    "createdOn": 1637223613,
    "lastUpdated": 1638294078,
    "open": true,
    "status": "NEW",
    "comments": [
        {
            "timestamp": 1637223613,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 1."
        },
        {
            "timestamp": 1637223627,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Ok-To-Test+1\n\nUser approved, CI ok to start"
        },
        {
            "timestamp": 1637223793,
            "reviewer": {
                "name": "OpenBMC CI",
                "email": "openbmcbump-ci@yahoo.com",
                "username": "jenkins-openbmc-ci"
            },
            "message": "Patch Set 1: Verified+1\n\nBuild Successful \n\nhttps://jenkins.openbmc.org/job/ci-repository/30464/ : SUCCESS"
        },
        {
            "timestamp": 1637224577,
            "reviewer": {
                "name": "Kuiying Wang",
                "email": "wangkuiying.wky@alibaba-inc.com",
                "username": "kuiyingw"
            },
            "message": "Patch Set 1:\n\n(1 comment)"
        },
        {
            "timestamp": 1637226086,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Uploaded patch set 2: Commit message was updated."
        },
        {
            "timestamp": 1637268603,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1637269596,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1637312055,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1638262135,
            "reviewer": {
                "name": "Zev Weiss",
                "email": "zev@bewilderbeest.net",
                "username": "zevweiss"
            },
            "message": "Patch Set 2:\n\n(2 comments)"
        },
        {
            "timestamp": 1638265398,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1638265587,
            "reviewer": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1638274884,
            "reviewer": {
                "name": "Ian Woloschin",
                "email": "ian.woloschin@akamai.com",
                "username": "iwoloschin"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        },
        {
            "timestamp": 1638294078,
            "reviewer": {
                "name": "Ed Tanous",
                "email": "ed@tanous.net",
                "username": "edtanous"
            },
            "message": "Patch Set 2:\n\n(1 comment)"
        }
    ],
    "patchSets": [
        {
            "number": 1,
            "revision": "e2a0703aa92770caa4f65eb54458ba58bbed0e50",
            "parents": [
                "48c94c59728023cdbff3bd62f203de3434af8b8a"
            ],
            "ref": "refs/changes/51/48951/1",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1637223613,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "REWORK",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 14,
                    "reviewer": {
                        "name": "Kuiying Wang",
                        "email": "wangkuiying.wky@alibaba-inc.com",
                        "username": "kuiyingw"
                    },
                    "message": "\"Tested\" field is necessary and attach your test case and test result."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 16,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 12,
            "sizeDeletions": 1
        },
        {
            "number": 2,
            "revision": "3bd3fb12a3515f3b63031a9b248047a39d951bf7",
            "parents": [
                "48c94c59728023cdbff3bd62f203de3434af8b8a"
            ],
            "ref": "refs/changes/51/48951/2",
            "uploader": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "createdOn": 1637226086,
            "author": {
                "name": "Konstantin Aladyshev",
                "email": "aladyshev22@gmail.com",
                "username": "Kostr"
            },
            "kind": "NO_CODE_CHANGE",
            "comments": [
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "FWIW, this description is I think a bit overly specific -- e3c246d4i (a Xeon system) has just such a GPIO, for example, and as far as I know no CPLD (it's just read by the BIOS so it can wait for the BMC to come online before proceeding with the boot sequence)."
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "This description comes from my experience with AMD boards (Ethanol/EthanolX/DaytonaX). In all of them BMC_READY goes to CPLD, and CPLD is responsible for launching all power to the board.\nSo BIOS wouldn't even have a change to run if BMC_READY is inactive.\nHow do you suggest to change it?"
                },
                {
                    "file": "/COMMIT_MSG",
                    "line": 11,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I might suggest something like:\n\n```\nSome boards use a GPIO driven by the BMC to signal to the host that the BMC is fully up and running (the host's BIOS or other components like a CPLD might wait for it to be asserted before allowing the host's boot sequence to proceed, for example).\n```"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "I would have expected this to be done significantly later -- presumably we don't want to assert the ready signal if we're not yet actually ready (and there are plenty of things after this point that could still fail before we are)."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "+1.  I wouldn't really expect this to be done in x86-power-control at all.  There's a systemd target (whos name is escaping me this second) that we use to determine the \"readiness\" of the BMC.  Power control being up doesn't mean the BMC is ready."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "What do you suggest? What things are needed to be done before we can assert this pin?\nBasically after we activate this pin it is possible to power on the platform. For example manually with a button. And I think we don't want to delay this functionality for too long for the user experience.\nAlso activation of this pin should be done before restoring any power policy."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Zev Weiss",
                        "email": "zev@bewilderbeest.net",
                        "username": "zevweiss"
                    },
                    "message": "Well, even if we set aside the question of whether or not this daemon is even the right thing to be asserting `BMC_READY`, this seems to be a premature point in the daemon's start-up sequence to be doing so (at this point in main() we haven't yet finished initializing x86-power-contro's view of the host's existing power state, for example).\n\nThe question Ed has raised seems like quite a legitimate one to me though -- there are other parts of the BMC's functionality that are important to consider when declaring the BMC \"ready\" that aren't taken into account here at all.  For example, on systems I'm familiar with, I think the IPMI service and kcsbridged should be running (so that the host can query the BMC for things like boot source settings and such).  With this approach we might very well end up asserting `BMC_READY` when the BMC is not, in fact, actually ready to do all the things it's supposed to do."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "This is a good point. Some systems truly would need to have BMC IPMI daemon started before the start of the main system. But at the same time I guess some don't. And these systems would prefer to set `BMC_READY` as soon as possible. I guess it means that we would need a systemd service that would assert these kind of signals?\n\nAs I understand, with the modern gpiolib framework it is not possible to permanently set GPIO signals with the sysfs. Does it mean that we would need another OpenBMC application to set `BMC_READY` signal? How should it be done? This is another question for the discussion.\n\nAlso the questions you are raising aren't specific to the `BMC_READY` signal from this commit.\nRight now `x86-power-control` performs all its power policies with no relation to start of IPMI or any other OpenBMC service. So the problems you are referring are not connected to this commit.\n\nMy point is that the raised issues are truly important, but it looks like they should be dealt separately. This commit simply provides an ability to launch AMD systems with OpenBMC."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Konstantin Aladyshev",
                        "email": "aladyshev22@gmail.com",
                        "username": "Kostr"
                    },
                    "message": "Maybe there is a simpler solution?\nIf a user would want to start IPMI before `BMC_READY` it simply should override `xyz.openbmc_project.Chassis.Control.Power%40.service` of 'x86-power-control`.\nIn this case we don't need another application to set `BMC_READY` signal."
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ian Woloschin",
                        "email": "ian.woloschin@akamai.com",
                        "username": "iwoloschin"
                    },
                    "message": "I think BMC_READY may be a confusing name, but that's what the schematic calls it so it is appropriate to re-use here. Without BMC_READY being asserted though there is no system power on these boards, so it also seems appropriate to have x86-power-control control this pin.\n\nI also agree with the idea of overriding x86-power-control's systemd unit file to not start until after ipmid is started, but I think this sort of thing should be clearly documented, ideally right in README in a new section under Build Options. It'd be even better if x86-power-control could provide a unit file itself that could be optionally installed in the recipe, I think there are some ways Yocto/Meson could work together to support something like this?"
                },
                {
                    "file": "src/power_control.cpp",
                    "line": 2804,
                    "reviewer": {
                        "name": "Ed Tanous",
                        "email": "ed@tanous.net",
                        "username": "edtanous"
                    },
                    "message": "> This is a good point. Some systems truly would need to have BMC IPMI daemon started before the start of the main system. But at the same time I guess some don't.\n\nWhich ones don't?  Generally the BMC ready signal is used to communicate to the host processor that the BMC is ready to handle commands (be they ipmi pldm or redfish).  Do your systems use it to mean something different?\n\n> What things are needed to be done before we can assert this pin?\n\nAll daemons should be launched and ready.  Generally we would use something like multi-user.target to determine this.\n\n>Without BMC_READY being asserted though there is no system power on these boards, so it also seems appropriate to have x86-power-control control this pin.\n\nConsidering that x86-power-control doesn't control the \"readiness\" of the BMC (systemd does), that doesn't seem accurate.  MAYBE x86-power-control might be the thing that actually toggles the gpio, but it needs to be using something from systemd to determine when the right time to do it is.\n\n\n> I also agree with the idea of overriding x86-power-control's systemd unit file to not start until after ipmid is started\n\nPlease don't do that.  It enforces incorrect dependencies within the system.  x86-power-control as an application and state machine has no need to wait for IPMI, and the systemd target is easily waited on with a match expression from within the app.\n\n\n> If a user would want to start IPMI before `BMC_READY` it simply should override `xyz.openbmc_project.Chassis.Control.Power%40.service` of 'x86-power-control`.\n\nIt's much simpler if this is just a configure option within the repository itself.  Making a user understand systemd targets to configure their system is a tall order."
                }
            ],
            "files": [
                {
                    "file": "/COMMIT_MSG",
                    "type": "ADDED",
                    "insertions": 19,
                    "deletions": 0
                },
                {
                    "file": "src/power_control.cpp",
                    "type": "MODIFIED",
                    "insertions": 12,
                    "deletions": -1
                }
            ],
            "sizeInsertions": 12,
            "sizeDeletions": 1
        }
    ]
}